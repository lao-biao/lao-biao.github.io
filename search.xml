<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AQS笔记</title>
    <url>/articles/74f18f35.html</url>
    <content><![CDATA[<h4 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h4><p>Abstract Queued Synchronizer 抽象队列同步器<br>所在包：<code>java.util.concurrent.locks.AbstractQueuedSynchronizer;</code></p>
<p>AQS是基于先进先出队列（FIFO），CLH（一种基于<strong>单向链表</strong>的高性能、<strong>公平</strong>的<strong>自旋锁</strong>）</p>
<p>基于AQS实现的锁</p>
<ul>
<li>ReentrantLock 可重入锁[<em>悲观锁</em>]</li>
<li>Semaphore 信号量</li>
<li>CountDownLatch 倒数计数</li>
<li>ReentrantReadWriteLock 可重入读写锁</li>
</ul>
<a id="more"></a>
<h5 id="偏向锁、轻量级锁、重量级锁"><a href="#偏向锁、轻量级锁、重量级锁" class="headerlink" title="偏向锁、轻量级锁、重量级锁"></a>偏向锁、轻量级锁、重量级锁</h5><p><strong>偏向锁</strong>：偏向第一个线程(JDK 1.6) JVM内部</p>
<p><strong>轻量级锁</strong>：由偏向锁升级而来，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁。</p>
<p><strong>自旋锁</strong>：一个执行单元要想访问被自旋锁保护的共享资源，必须先得到锁，在访问完共享资源后，必须释放锁。</p>
<p>自旋锁—(自旋10次)—&gt;重量级锁（悲观锁）</p>
<h5 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h5><ul>
<li><strong>悲观锁</strong>：总是假设最坏的情况，每次拿数据都认为别的线程会修改数据，所以要加锁，别的线程只能等待，直到当前线程释放锁才能拿到锁</li>
<li><strong>乐观锁</strong>：总是假设最好的情况，每次拿数据都认为别的线程不会修改数据，所以不会加锁，但是更新的时候，会判断在此期间有没有线程修改过</li>
</ul>
<h5 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h5><p>Compare and Swap比较和交换</p>
<ul>
<li><p>CAS 必须是原子操作 </p>
</li>
<li><p>现代CPU都支持CAS </p>
</li>
<li>CAS属于乐观锁</li>
</ul>
<h5 id="AbstractQueuedSynchronizer官方实现Lock模板"><a href="#AbstractQueuedSynchronizer官方实现Lock模板" class="headerlink" title="AbstractQueuedSynchronizer官方实现Lock模板"></a>AbstractQueuedSynchronizer官方实现Lock模板</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Our internal helper class</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Acquires the lock if state is zero</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> acquires == <span class="number">1</span>; <span class="comment">// Otherwise unused</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Releases the lock by setting state to zero</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> releases == <span class="number">1</span>; <span class="comment">// Otherwise unused</span></span><br><span class="line">            <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reports whether in locked state</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// a data race, but safe due to out-of-thin-air guarantees</span></span><br><span class="line">            <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Provides a Condition</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deserializes properly</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            s.defaultReadObject();</span><br><span class="line">            setState(<span class="number">0</span>); <span class="comment">// reset to unlocked state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The sync object does all the hard work. We just forward to it.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeldByCurrentThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="多线程高并发常见问题引入"><a href="#多线程高并发常见问题引入" class="headerlink" title="多线程高并发常见问题引入"></a>多线程高并发常见问题引入</h5><p>使用100个线程完成10000个1相加的运算，每个线程都是100次自增的for循环，最后结果却小于10000。</p>
<p>这是因为线程操作的是<font color='red'>当前中内存中的值</font>，当执行m+2时（线程a获取内存中的值，线程b获取内存中的值，线程a执行+1操作，线程b执行+1操作，将值写入到内存中），实际上却只执行m+1了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">			<span class="comment">// 以匿名内部类的方式声明100个线程</span></span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                    m++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 线程开始</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.join();   <span class="comment">// 加入当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="解决方案——Synchronized加锁"><a href="#解决方案——Synchronized加锁" class="headerlink" title="解决方案——Synchronized加锁"></a>解决方案——Synchronized加锁</h5><p>在线程访问时进行加锁，其他线程阻塞，线程完成累加后解锁，其他线程再进行访问，循环此操作，直到100个线程完成累加。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Main<span class="class">.<span class="keyword">class</span>) </span>&#123;     <span class="comment">//线程访问时加锁，结束时打开，其他线程再访问时，加锁状态时线程阻塞</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="解决方案——ReentrantLock"><a href="#解决方案——ReentrantLock" class="headerlink" title="解决方案——ReentrantLock"></a>解决方案——ReentrantLock</h5><p>使用ReentrantLock可重入锁，JDK 1.5之后添加的，互斥锁，底层实现是AQS</p>
<ul>
<li>lock() 加锁</li>
<li>unlock() 解锁</li>
</ul>
<p>ReentrantLock部分源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span>&#123;&#125;	<span class="comment">// 底层实现是AQS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Synchronized</code> 在<font color='red'>JDK 1.5</font>之前被视为<strong>重量级锁</strong>，在<font color='red'>JDK 1.6</font>以后视为<strong>轻量级锁</strong></p>
<ul>
<li>JVM—OS(操作系统)</li>
<li>用户—kernel（实时操作系统）费时</li>
</ul>
<p>在JDK1.5之后在JVM添加各种锁（Lock接口），不需要再与OS交互</p>
<h6 id="Synchronized与CAS高并发性能比较"><a href="#Synchronized与CAS高并发性能比较" class="headerlink" title="Synchronized与CAS高并发性能比较"></a>Synchronized与CAS高并发性能比较</h6><p>Synchronized</p>
<ul>
<li><p>适合高并发（超高并发，锁代码执行时间长）</p>
</li>
<li><p>调用wait()，阻塞线程，不消耗 cpu</p>
</li>
</ul>
<p>CAS</p>
<ul>
<li>适合锁的竞争不激烈</li>
<li>for循环或while(true)， 消耗cpu</li>
</ul>
<h6 id="Lock源码"><a href="#Lock源码" class="headerlink" title="Lock源码"></a>Lock源码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>; <span class="comment">// 加锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>; <span class="comment">// </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;	<span class="comment">// 解锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="ReentrantLock解决100个线程累加求和问题"><a href="#ReentrantLock解决100个线程累加求和问题" class="headerlink" title="ReentrantLock解决100个线程累加求和问题"></a>ReentrantLock解决100个线程累加求和问题</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();  <span class="comment">// JDK1.5之后添加的，互斥锁，底层实现是AQS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程操作</span></span><br><span class="line">threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        lock.lock();    <span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();  <span class="comment">//解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="解决方案——Lock-volatile"><a href="#解决方案——Lock-volatile" class="headerlink" title="解决方案——Lock+volatile"></a>解决方案——Lock+volatile</h5><p><code>volatile</code>关键字 </p>
<ul>
<li><p>线程（内存）在写入变量后立即提交给主线程（内存），其他线程可见其改变</p>
</li>
<li><p>禁止指令重排序，可参考单例模式中懒汉式的相关代码</p>
<p>synchronized 防止指令重排<br>instance=new Instance() 只执行第2步和第4步 半初始化，使用volatile修饰instance禁止指令重排序</p>
</li>
</ul>
<p>自定义Lock，使用volatile关键字定义当前线程状态，在当前线程被占用时，循环等待，直到线程被释放。等待的过程也可以用CAS自旋来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 0被释放，1锁定</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;    <span class="comment">// 已经有线程占用</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();    <span class="comment">// 等待，也可使用CAS（Compare and switch）自旋</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();   <span class="comment">// 唤醒其他等待该锁的线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> MLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.lock();    <span class="comment">// 加锁</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();  <span class="comment">// 解锁</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 开始线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.join();   <span class="comment">// 加入当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="解决方案——Sync-Lock"><a href="#解决方案——Sync-Lock" class="headerlink" title="解决方案——Sync+Lock"></a>解决方案——Sync+Lock</h5><p>修改MLock.java，主类Main.java不变，使用Sync来替代volatile</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);	</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);	<span class="comment">// 释放</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用内部类--推荐写法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;  <span class="comment">// 竞争锁</span></span><br><span class="line">                <span class="comment">// 互斥锁 共享锁</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());    <span class="comment">// 设定当前线程持有该锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;    <span class="comment">// 释放</span></span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="解决方案——使用CountDownLatch"><a href="#解决方案——使用CountDownLatch" class="headerlink" title="解决方案——使用CountDownLatch"></a>解决方案——使用CountDownLatch</h5><p>CountDownLatch倒计数100，每个线程执行完后调用countDown()自减1，主线程中await()等待直到为0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> MLock();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">100</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; </span><br><span class="line">                    lock.lock();    <span class="comment">// 加锁</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();  <span class="comment">// 解锁</span></span><br><span class="line">                &#125;</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 开始线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        latch.await();  <span class="comment">// 线程等待</span></span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>aqs</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax笔记</title>
    <url>/articles/48d9bd16.html</url>
    <content><![CDATA[<h5 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a>Ajax概述</h5><p>全称”Asynchronous JavaScript and XML” 异步JavaScript和XML，是一种创建交互网页应用的网页开发技术。</p>
<ul>
<li>基于web标准(Standards-based Presentation)    XHTML+CSS</li>
<li>使用DOM(Document Object Model)进行动态显示与交互</li>
<li>使用XML和XSLT进行数据交换及相关操作</li>
<li>使用XMLHttpRequest进行异步数据查询、检索</li>
<li>使用JavaScript将所有的东西绑定在一起</li>
</ul>
<p>本质是一个浏览器端的技术</p>
<p>异步刷新技术，用来在当前页面响应不同的请求内容。</p>
<a id="more"></a>
<h5 id="Ajax功能"><a href="#Ajax功能" class="headerlink" title="Ajax功能"></a>Ajax功能</h5><p>需求：需要将本次的响应结果和前面的响应结果内容在同一个页面中展现给用户</p>
<p>解决:</p>
<ul>
<li>在后台服务器端将多次相应内容重新拼接成一个jsp页面，响应对象，jsp内部使用，带有缓冲区的响应对象，效率高于response对象<br>问题:造成相应你内容被重复的响应，资源浪费</li>
<li>使用Ajax技术</li>
</ul>
<h5 id="Ajax基本使用流程"><a href="#Ajax基本使用流程" class="headerlink" title="Ajax基本使用流程"></a>Ajax基本使用流程</h5><ol>
<li>创建ajax引擎对象</li>
<li>覆写onreadystatement函数</li>
<li>判断ajax状态码</li>
<li>判断响应状态码</li>
<li>获取相应内容</li>
<li>处理相应内容</li>
<li>发送请求</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建ajax引擎对象</span></span><br><span class="line"><span class="keyword">var</span> ajax;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  <span class="comment">// firefox</span></span><br><span class="line">    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// ie</span></span><br><span class="line">    ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 覆写onreadystatement函数</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 会执行4次,判断ajax状态码，只在数据成功接收时执行以下代码</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">4</span> === ajax.readyState) &#123;</span><br><span class="line">        <span class="comment">// 获取元素对象</span></span><br><span class="line">        <span class="keyword">let</span> showdiv = <span class="built_in">document</span>.getElementById(<span class="string">"showDiv"</span>);</span><br><span class="line">        <span class="comment">// 判断响应状态码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">200</span> === ajax.status) &#123;</span><br><span class="line">            <span class="comment">// 获取响应内容，修改元素内容</span></span><br><span class="line">            showdiv.innerHTML = ajax.responseText;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">404</span>===ajax.status)&#123;</span><br><span class="line">            showdiv.innerHTML=<span class="string">"请求资源不存在"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">500</span>===ajax.status)&#123;</span><br><span class="line">            showdiv.innerHTML=<span class="string">"服务器繁忙"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送请求 get/post</span></span><br><span class="line"><span class="comment">// get请求实体拼接在url后面，?隔开，键值对        </span></span><br><span class="line">ajax.open(<span class="string">"get"</span>, <span class="string">"ajax?name=value"</span>);</span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求有单独的请求实体，    </span></span><br><span class="line">ajax.open(<span class="string">"post"</span>,<span class="string">"ajax"</span>);</span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(<span class="string">"name=value"</span>);</span><br></pre></td></tr></table></figure>
<h5 id="Ajax状态码"><a href="#Ajax状态码" class="headerlink" title="Ajax状态码"></a>Ajax状态码</h5><p>readyState</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">readyState值</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">表示XMLHttpRequest已建立，但还未初始化，这是尚未调用open方法</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">表示open方法已经调用，但未调用send方法（已创建，未发送）</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">表示send方法已经调用，其他数据未知</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">表示请求已经成功发送，正在接收数据</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">表示数据已经成功接收</td>
</tr>
</tbody>
</table>
</div>
<h6 id="常用Http状态码"><a href="#常用Http状态码" class="headerlink" title="常用Http状态码"></a>常用Http状态码</h6><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">http状态码</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">200 OK</td>
<td style="text-align:center">客户端请求成功</td>
</tr>
<tr>
<td style="text-align:center">400 Bad Request</td>
<td style="text-align:center">客户端请求有语法错误，不能被服务器所理解</td>
</tr>
<tr>
<td style="text-align:center">401 Unauthorized</td>
<td style="text-align:center">请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</td>
</tr>
<tr>
<td style="text-align:center">403 Forbidden</td>
<td style="text-align:center">服务器收到请求，但是拒绝提供服务</td>
</tr>
<tr>
<td style="text-align:center">404 Not Found</td>
<td style="text-align:center">请求资源不存在（可能输入了错误的URL）</td>
</tr>
<tr>
<td style="text-align:center">500 Internal Server Error</td>
<td style="text-align:center">服务器发生不可预期的错误</td>
</tr>
<tr>
<td style="text-align:center">503 Server Unavailable</td>
<td style="text-align:center">服务器当前不能处理客户端的请求，一段时间后可能恢复正常</td>
</tr>
</tbody>
</table>
</div>
<h5 id="Ajax异步和同步"><a href="#Ajax异步和同步" class="headerlink" title="Ajax异步和同步"></a>Ajax异步和同步</h5><p>ajax.open(method, url,async); </p>
<p>method：get方法，post方法</p>
<p>url：请求的地址</p>
<p>async：设置代码执行方式，false同步，true异步,默认为异步</p>
<h5 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h5><p>get：携带的数据包含在url中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax.open(<span class="string">"get"</span>, url + (data === <span class="literal">null</span> ? <span class="string">""</span> : <span class="string">"?"</span> + data), <span class="keyword">async</span>); <span class="comment">// false同步，true异步</span></span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>post</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax.open(<span class="string">"post"</span>, url, <span class="keyword">async</span>);	<span class="comment">// false同步，true异步</span></span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(data);</span><br></pre></td></tr></table></figure>
<h5 id="Ajax响应数据类型"><a href="#Ajax响应数据类型" class="headerlink" title="Ajax响应数据类型"></a>Ajax响应数据类型</h5><h6 id="普通字符串"><a href="#普通字符串" class="headerlink" title="普通字符串"></a>普通字符串</h6><p>responseText</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取响应数据</span></span><br><span class="line"><span class="keyword">var</span> result = ajax.responseText;</span><br></pre></td></tr></table></figure>
<h6 id="json"><a href="#json" class="headerlink" title="json"></a>json</h6><p>将数据按照json的格式拼接好的字符串，方便使用eval方法将接受的字符串直接转换成js的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json格式</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:value,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>需求分类</p>
<ol>
<li>在当前页面显示查询结果</li>
<li>创建ajax函数</li>
<li>调用ajax函数发送请求到UserServlet</li>
<li>调用业务层获取对应的数据</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;AjaxData&lt;/title&gt;</span><br><span class="line">        &lt;!--引入外部js文件，见ajax封装--&gt;</span><br><span class="line">        &lt;script type="text/javascript" src="js/ajaxutil.js"&gt;&lt;/script&gt; </span><br><span class="line">        &lt;!--声明js代码域--&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="function">function <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取用户请求信息</span></span><br><span class="line">                <span class="keyword">var</span> name = document.getElementById(<span class="string">"uname"</span>).value;</span><br><span class="line">                <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span> (window.XMLHttpRequest) &#123;	<span class="comment">// firefox</span></span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.ActiveXObject) &#123;	<span class="comment">// ie</span></span><br><span class="line">                    ajax = <span class="keyword">new</span> window.ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 覆写onreadystatementchange函数</span></span><br><span class="line">                ajax.onreadystatechange = function () &#123;</span><br><span class="line">                    <span class="comment">// 判断ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// 获取响应数据</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseText;</span><br><span class="line">                            eval(<span class="string">"u="</span> + result);</span><br><span class="line">                            <span class="comment">// 处理响应数据</span></span><br><span class="line">                            <span class="comment">// 获取table元素对象</span></span><br><span class="line">                            <span class="keyword">var</span> ta = document.getElementById(<span class="string">"table"</span>);</span><br><span class="line">                            ta.innerHTML = <span class="string">""</span>;</span><br><span class="line">                            <span class="comment">// 插入新的行</span></span><br><span class="line">                            <span class="keyword">var</span> tr = ta.insertRow(<span class="number">0</span>);</span><br><span class="line">                            <span class="keyword">var</span> uid = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                            uid.innerHTML = <span class="string">"编号"</span>;</span><br><span class="line">                            <span class="keyword">var</span> uname = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                            uname.innerHTML = <span class="string">"英雄"</span>;</span><br><span class="line">                            <span class="keyword">var</span> price = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                            price.innerHTML = <span class="string">"价格"</span>;</span><br><span class="line">                            <span class="keyword">var</span> location = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                            location.innerHTML = <span class="string">"位置"</span>;</span><br><span class="line">                            <span class="keyword">var</span> description = tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                            description.innerHTML = <span class="string">"描述"</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> tr = ta.insertRow(<span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">var</span> uid = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                            uid.innerHTML = u.uid;</span><br><span class="line">                            <span class="keyword">var</span> uname = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                            uname.innerHTML = u.uname;</span><br><span class="line">                            <span class="keyword">var</span> price = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                            price.innerHTML = u.price;</span><br><span class="line">                            <span class="keyword">var</span> location = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                            location.innerHTML = u.location;</span><br><span class="line">                            <span class="keyword">var</span> description = tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                            description.innerHTML = u.description;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                ajax.open(<span class="string">"get"</span>, <span class="string">"user?name="</span> + name);</span><br><span class="line">                ajax.send(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;AjaxData&lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        名称: &lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span> value=<span class="string">""</span> id=<span class="string">"uname"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"搜索"</span> onclick=<span class="string">"getData()"</span>&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;table border="1px" id="table"&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h6 id="XML数据"><a href="#XML数据" class="headerlink" title="XML数据"></a>XML数据</h6><p>responseXML，返回document对象<br>通过document对象将数据从xml中获取出来</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;XML数据格式学习&lt;/title&gt;</span><br><span class="line">        &lt;!--声明js代码域--&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function">function <span class="title">getXML</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.ActiveXObject) &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> window.ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 覆写onreadystatementchange函数</span></span><br><span class="line">                ajax.onreadystatechange = function () &#123;</span><br><span class="line">                    <span class="comment">// 判断ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// 获取响应数据</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseXML;</span><br><span class="line">                            alert(result.getElementsByTagName(<span class="string">"uname"</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                ajax.open(<span class="string">"get"</span>, <span class="string">"xml"</span>,<span class="keyword">true</span>);</span><br><span class="line">                ajax.send(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;XML数据格式学习&lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"测试"</span> onclick=<span class="string">"getXML()"</span>&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h5 id="Ajax封装"><a href="#Ajax封装" class="headerlink" title="Ajax封装"></a>Ajax封装</h5><p>封装ajax方便调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ajax封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>method 请求方式，get或post</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>data 请求数据，格式"name=value&amp;..."，没有值需要传入null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal200 接收一个带有一个形参的js函数对象，形参接收的实参是ajax引擎对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal404 接收一个js函数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal500 接收一个js函数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>async 异步或同步，boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">method, url, data, deal200, deal404, deal500, async=true</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">    <span class="keyword">var</span> ajax = getAjax();</span><br><span class="line">    <span class="comment">// 覆写onreadystatement函数</span></span><br><span class="line">    ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取元素对象</span></span><br><span class="line">        <span class="keyword">let</span> showdiv = <span class="built_in">document</span>.getElementById(<span class="string">"showDiv"</span>);</span><br><span class="line">        <span class="comment">// 会执行4次,判断ajax状态码，只在数据成功接收时执行以下代码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">4</span> === ajax.readyState) &#123;</span><br><span class="line">            <span class="comment">// 判断响应状态码</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">200</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal200)</span><br><span class="line">                    deal200(ajax);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">404</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal404)</span><br><span class="line">                    deal404();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">500</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal500)</span><br><span class="line">                    deal500();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"get"</span> === method) &#123;</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        ajax.open(<span class="string">"get"</span>, url + (data === <span class="literal">null</span> ? <span class="string">""</span> : <span class="string">"?"</span> + data), <span class="keyword">async</span>); <span class="comment">// false同步，true异步</span></span><br><span class="line">        ajax.send(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"post"</span> === method) &#123;</span><br><span class="line">        ajax.open(<span class="string">"post"</span>, url, <span class="keyword">async</span>);</span><br><span class="line">        ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        ajax.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*ajax的封装*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ajax;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  <span class="comment">// firefox</span></span><br><span class="line">        ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// ie</span></span><br><span class="line">        ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Android SQLite学习</title>
    <url>/articles/eb7c6dc.html</url>
    <content><![CDATA[<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ol>
<li>写一个类继承SQLOpenHelper  </li>
<li>实现里面的方法，创建构造方法  </li>
<li>调用子类对象，再使用getWriteableDatabase()或getReadableDatabase()方法即可创建数据库</li>
</ol>
<p>参数解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SQLiteOpenHelper  </span><br><span class="line">context 上下文  </span><br><span class="line">name  数据库名称  </span><br><span class="line">factory 游标工厂  </span><br><span class="line">version 版本号</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>重写SQLiteHelper类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.sqlitestudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG =<span class="string">"database"</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseHelper</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, Constants.DATABASE_NAME, <span class="keyword">null</span>, Constants.VERSION_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一次创建数据库时的回调</span></span><br><span class="line">        Log.d(TAG, <span class="string">"创建数据库"</span>);       <span class="comment">//log打印  D/database: 创建数据库</span></span><br><span class="line">        String sql=<span class="string">"create table "</span>+Constants.TABLE_NAME+<span class="string">"(_id integer,age integer,name varchar,salary integer);"</span>;</span><br><span class="line">        db.execSQL(sql);    <span class="comment">//执行sql语句</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//升级数据库时的回调</span></span><br><span class="line">        <span class="comment">//更新版本号必须满足 newVersion&gt;oldVersion  不能降级，否则会报异常，程序崩溃</span></span><br><span class="line">        Log.d(TAG, <span class="string">"更新数据库"</span>);   <span class="comment">//log打印  D/database: 更新数据库</span></span><br><span class="line">        String sql=<span class="string">"alter table "</span>+Constants.TABLE_NAME+<span class="string">" add phone integer;"</span>;</span><br><span class="line">        db.execSQL(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据库相关常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.sqlitestudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION_CODE =<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME =<span class="string">"demo"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME = <span class="string">"demotable"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MainActivity创建数据库  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DatabaseHelper helper=<span class="keyword">new</span> DatabaseHelper(<span class="keyword">this</span>);</span><br><span class="line">helper.getWritableDatabase();</span><br></pre></td></tr></table></figure>
<h3 id="编写Dao操作类"><a href="#编写Dao操作类" class="headerlink" title="编写Dao操作类"></a>编写Dao操作类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.sqlitestudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG =<span class="string">"Dao"</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DatabaseHelper helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dao</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        helper = <span class="keyword">new</span> DatabaseHelper(context);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SQLiteDatabase db=helper.getWritableDatabase();</span><br><span class="line">        String sql=<span class="string">"insert into "</span>+Constants.TABLE_NAME+ <span class="string">"(_id,age,name,salary) values(?,?,?,?)"</span>;</span><br><span class="line">        db.execSQL(sql,<span class="keyword">new</span> Object[]&#123;<span class="number">101</span>,<span class="number">20</span>,<span class="string">"Wang"</span>,<span class="number">1000</span>&#125;);</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SQLiteDatabase db=helper.getWritableDatabase();</span><br><span class="line">        String sql=<span class="string">"delete from "</span>+Constants.TABLE_NAME+ <span class="string">" where age = 20"</span>;</span><br><span class="line">        db.execSQL(sql);</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SQLiteDatabase db=helper.getWritableDatabase();</span><br><span class="line">        String sql=<span class="string">"update "</span>+Constants.TABLE_NAME+ <span class="string">" set salary = 2000 where age = 20"</span>;</span><br><span class="line">        db.execSQL(sql);</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SQLiteDatabase db=helper.getWritableDatabase();</span><br><span class="line">        String sql=<span class="string">"select * from "</span>+Constants.TABLE_NAME+ <span class="string">" where age = 20"</span>;</span><br><span class="line">        Cursor cursor = db.rawQuery(sql,<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> index = cursor.getColumnIndex(<span class="string">"name"</span>);</span><br><span class="line">            String name = cursor.getString(index);</span><br><span class="line">            Log.d(TAG, <span class="string">"name :"</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.close();</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><ul>
<li>数据库升级</li>
<li>数据库的增删改查</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.sqlitestudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.test.InstrumentationRegistry;</span><br><span class="line"><span class="keyword">import</span> android.support.test.runner.AndroidJUnit4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(AndroidJUnit4<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestDatabase</span></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Dao dao=<span class="keyword">new</span> Dao(InstrumentationRegistry.getTargetContext());</span><br><span class="line">        dao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Dao dao=<span class="keyword">new</span> Dao(InstrumentationRegistry.getTargetContext());</span><br><span class="line">        dao.delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Dao dao=<span class="keyword">new</span> Dao(InstrumentationRegistry.getTargetContext());</span><br><span class="line">        dao.update();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Dao dao=<span class="keyword">new</span> Dao(InstrumentationRegistry.getTargetContext());</span><br><span class="line">        dao.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用Android的API操作增删改查"><a href="#使用Android的API操作增删改查" class="headerlink" title="使用Android的API操作增删改查"></a>使用Android的API操作增删改查</h3><h4 id="增-insert"><a href="#增-insert" class="headerlink" title="增 insert"></a>增 insert</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SQLiteDatabase db=helper.getWritableDatabase();</span><br><span class="line">    ContentValues values=<span class="keyword">new</span> ContentValues();</span><br><span class="line">    values.put(<span class="string">"_id"</span>,<span class="number">1001</span>);</span><br><span class="line">    values.put(<span class="string">"age"</span>,<span class="number">20</span>);</span><br><span class="line">    values.put(<span class="string">"name"</span>,<span class="string">"Zhang"</span>);</span><br><span class="line">    values.put(<span class="string">"salary"</span>,<span class="number">1000</span>);</span><br><span class="line">    db.insert(Constants.TABLE_NAME,<span class="keyword">null</span>,values);</span><br><span class="line">    db.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="删-delete"><a href="#删-delete" class="headerlink" title="删 delete"></a>删 delete</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContentValues values=<span class="keyword">new</span> ContentValues();</span><br><span class="line">String []whereArgs=&#123;String.valueOf(<span class="number">20</span>)&#125;;</span><br><span class="line">String whereClasuse=<span class="string">"age=?"</span>;</span><br><span class="line"><span class="keyword">int</span> delete = db.delete(Constants.TABLE_NAME, whereClasuse, whereArgs);</span><br><span class="line">Log.d(TAG, <span class="string">"delete: "</span>+delete);</span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure>
<h4 id="改-update"><a href="#改-update" class="headerlink" title="改 update"></a>改 update</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContentValues values=<span class="keyword">new</span> ContentValues();</span><br><span class="line">values.put(<span class="string">"salary"</span>,<span class="number">5000</span>);</span><br><span class="line">String whereClasuse=<span class="string">"age=?"</span>;    <span class="comment">//字段名称</span></span><br><span class="line">String[] whereArgs=&#123;String.valueOf(<span class="number">25</span>)&#125;;   <span class="comment">//值</span></span><br><span class="line">db.update(Constants.TABLE_NAME,values,whereClasuse,whereArgs);</span><br></pre></td></tr></table></figure>
<h4 id="查-query"><a href="#查-query" class="headerlink" title="查 query"></a>查 query</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SQLiteDatabase db=helper.getWritableDatabase();</span><br><span class="line">Cursor cursor=db.query(Constants.TABLE_NAME,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//参数：数据表名称,columns,selection,selectionArgs,groupBy分组,having,orderBy排序</span></span><br><span class="line"><span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line">    <span class="keyword">int</span> id = cursor.getInt(<span class="number">0</span>);</span><br><span class="line">    String name = cursor.getString(<span class="number">1</span>);</span><br><span class="line">    Log.d(TAG, <span class="string">"query: "</span>+id);</span><br><span class="line">    Log.d(TAG, <span class="string">"query: "</span>+name);</span><br><span class="line">    <span class="comment">//  D/Dao: query: 100</span></span><br><span class="line">    <span class="comment">//  D/Dao: query: 20</span></span><br><span class="line">    <span class="comment">//  D/Dao: query: 100</span></span><br><span class="line">    <span class="comment">//  D/Dao: query: 25</span></span><br><span class="line">&#125;</span><br><span class="line">cursor.close();     <span class="comment">//关闭游标资源</span></span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure>
<h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><ol>
<li>安全性</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>_id</th>
<th>age</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>20</td>
<td>Zhang</td>
</tr>
<tr>
<td>1002</td>
<td>25</td>
<td>Li</td>
</tr>
</tbody>
</table>
</div>
<p>操作：Zhang salary - 500 且 Li salary + 500<br>在操作过程中出现异常，则会只执行一部分，使用SQLite的事务可以解决这个不同步的问题，防止数据出错 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SQLiteDatabase db=helper.getWritableDatabase();</span><br><span class="line">db.beginTransaction(); <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    db.execSQL(<span class="string">"update demotable set salary = 1000-500 where name = 'Zhang'"</span>);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">10</span>/<span class="number">0</span>;     <span class="comment">//扔出异常</span></span><br><span class="line">    db.execSQL(<span class="string">"update demotable set salary = 5000+500 where name = 'Li'"</span>);</span><br><span class="line">    db.setTransactionSuccessful();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    db.endTransaction();</span><br><span class="line">    db.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果后，数据没有发生变化<br>屏蔽掉扔出异常的语句后</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>_id</th>
<th>age</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>20</td>
<td>Zhang</td>
</tr>
<tr>
<td>1002</td>
<td>25</td>
<td>Li</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>高效性</li>
</ol>
<p>在使用事务的情况下，执行速度比普通条件下更快。  </p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>android studio低版本使用recyclerview</title>
    <url>/articles/f71edc35.html</url>
    <content><![CDATA[<p>﻿1. 添加依赖包<br>&nbsp;&nbsp;&nbsp;&nbsp; open Module Settings→Dependencies→add Library Dependency<br><img data-src="https://img-blog.csdnimg.cn/20190714093004116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTk5MzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img data-src="https://img-blog.csdnimg.cn/20190714093101907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTk5MzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol>
<li>AndroidMainfest.xml文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:appComponentFactory</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">       <span class="attr">tools:replace</span>=<span class="string">"android:appComponentFactory"</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在gradle.properties文件中添加以下代码<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">android.enableJetifier=<span class="literal">true</span></span><br><span class="line">android.useAndroidX=<span class="literal">true</span></span><br><span class="line">org.gradle.jvmargs=-Xmx1536m</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>在原有工程中使用androidX.RecyclerView会出现报错<br>解决方法：在AndroidManifest文件下右键Refactor→Migrate to AndroidX </p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>android动态权限申请</title>
    <url>/articles/821fe050.html</url>
    <content><![CDATA[<h4 id="Android-6-0以上动态申请权限"><a href="#Android-6-0以上动态申请权限" class="headerlink" title="Android 6.0以上动态申请权限"></a>Android 6.0以上动态申请权限</h4><h6 id="添加相关权限"><a href="#添加相关权限" class="headerlink" title="添加相关权限"></a>添加相关权限</h6><p>在清单文件中添加相关权限</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name="android.permission.××××"&gt;&lt;/uses-permission&gt;</span><br></pre></td></tr></table></figure>
<h6 id="检查权限-动态申请权限-申请结果"><a href="#检查权限-动态申请权限-申请结果" class="headerlink" title="检查权限-动态申请权限-申请结果"></a>检查权限-动态申请权限-申请结果</h6><ul>
<li>检查权限</li>
<li>动态申请权限</li>
<li>处理权限申请结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String strPermission =Manifest.permission.××××;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ××××_REQUEST_CODE=<span class="number">1</span>;	<span class="comment">//请求码，不同的权限设置成不同的值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">(String strPermission)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission( <span class="keyword">this</span>, strPermission) != PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale( <span class="keyword">this</span>, strPermission)) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"需要××××权限"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ActivityCompat.requestPermissions( <span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                    strPermission&#125;,×××× _REQUEST_CODE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写onRequestPermissionsResult()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    String requestPermissionsResult = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == ××××_REQUEST_CODE) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissions.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grantResults[i] == PERMISSION_GRANTED) &#123;</span><br><span class="line">                requestPermissionsResult += permissions[i] + <span class="string">" 申请成功\n"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                requestPermissionsResult += permissions[i] + <span class="string">" 申请失败\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, requestPermissionsResult, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">requestPermissions(String strPermission);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="comment">//要执行的操作</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android四大组件--Broadcast</title>
    <url>/articles/c231612.html</url>
    <content><![CDATA[<h4 id="使用广播来接收系统内部发送的广播"><a href="#使用广播来接收系统内部发送的广播" class="headerlink" title="使用广播来接收系统内部发送的广播"></a>使用广播来接收系统内部发送的广播</h4><h5 id="动态注册广播监听电量变化"><a href="#动态注册广播监听电量变化" class="headerlink" title="动态注册广播监听电量变化"></a>动态注册广播监听电量变化</h5><p>在应用的活动页面创建时启动广播，通过继承广播接收者的类来接收系统内部发送的广播，在活动页面销毁时取消广播，以防止内存泄漏的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> BatteryLevelReceiver mBatteryStateReceiver;     <span class="comment">//接收广播</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="comment">//意图过滤</span></span><br><span class="line">    IntentFilter intentFilter=<span class="keyword">new</span> IntentFilter();</span><br><span class="line">    <span class="comment">//设置频道--电量变化</span></span><br><span class="line">    intentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);</span><br><span class="line">    <span class="comment">//添加广播接收者</span></span><br><span class="line">    mBatteryStateReceiver = <span class="keyword">new</span> BatteryLevelReceiver();</span><br><span class="line">    <span class="comment">//启动广播</span></span><br><span class="line">    <span class="keyword">this</span>.registerReceiver(mBatteryStateReceiver,intentFilter);<span class="comment">//参数：BroadcastReceiver,IntentFilter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BatteryLevelReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">        Log.d(TAG, <span class="string">"action:"</span> + action);</span><br><span class="line">        Log.d(TAG, <span class="string">"batteryLevel:"</span>+intent.getIntExtra(BatteryManager.EXTRA_LEVEL,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="keyword">if</span> (mBatteryStateReceiver!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        unregisterReceiver(mBatteryStateReceiver);      <span class="comment">//取消广播，防止内存泄漏</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="静态注册广播监听系统开机"><a href="#静态注册广播监听系统开机" class="headerlink" title="静态注册广播监听系统开机"></a>静态注册广播监听系统开机</h5><p>静态注册广播需要在清单文件中添加对应的action（category、data），监听系统的开机还需要添加响应的系统权限。使用静态注册广播不能释放内存，一直在监听，对内存占用比较大。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".BootCompletedReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;</span>  <span class="comment">&lt;!--开机完成的action--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootCompletedReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BootCompletedReceiver"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">""</span>+intent.getAction());</span><br><span class="line">        Toast.makeText(context,<span class="string">"开机完成"</span>,Toast.LENGTH_LONG).show();<span class="comment">//开机完成时弹出提示信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h4><p>发送有序广播，接收者按照优先级依次收到广播，高优先级的广播接收者可以中止广播，也能修改广播内容。通过设置  <code>android:priority</code> 的值来设置优先级，priority的大小为-1000到1000，默认值为0 </p>
<font color="#ff0000">在Android8.0后需要动态注册广播才能接收，使用静态注册广播需要指定包名，静态广播注册报错 `Background execution not allowed`</font>  

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SendOrderBroadcast"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".HighLevelBroadcastReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"1000"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"sendOrderBroadcastTest"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".LowLevelBroadcastReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"sendOrderBroadcastTest"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启广播</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">broadcastSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用动态注册广播的方式</span></span><br><span class="line">    HighLevelBroadcastReceiver highLevelBroadcastReceiver=<span class="keyword">new</span> HighLevelBroadcastReceiver();</span><br><span class="line">    LowLevelBroadcastReceiver lowLevelBroadcastReceiver=<span class="keyword">new</span> LowLevelBroadcastReceiver();</span><br><span class="line">    IntentFilter intentFilter=<span class="keyword">new</span> IntentFilter();</span><br><span class="line">    intentFilter.addAction(<span class="string">"sendOrderBroadcastTest"</span>);</span><br><span class="line">    registerReceiver(highLevelBroadcastReceiver,intentFilter);</span><br><span class="line">    registerReceiver(lowLevelBroadcastReceiver,intentFilter);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用静态注册指定广播接收者,指定包名</span></span><br><span class="line"><span class="comment">    Intent intent=new Intent();</span></span><br><span class="line"><span class="comment">    ComponentName componentName=new ComponentName(SendOrderBroadcast.this,HighLevelBroadcastReceiver.class);</span></span><br><span class="line"><span class="comment">    intent.setComponent(componentName);</span></span><br><span class="line"><span class="comment">    intent.setAction("sendOrderBroadcastTest");</span></span><br><span class="line"><span class="comment">    sendBroadcast(intent,null);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//receivePermission在接收时接收端需要添加权限-----Manifest文件</span></span><br><span class="line"><span class="comment">//点击发送有序广播按钮的消息映射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendOrderBroadcast</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    <span class="comment">//发送广播内容</span></span><br><span class="line">    Intent intent=<span class="keyword">new</span> Intent();</span><br><span class="line">    intent.setAction(<span class="string">"sendOrderBroadcastTest"</span>);</span><br><span class="line">    Bundle bundle=<span class="keyword">new</span> Bundle();</span><br><span class="line">    bundle.putCharSequence(<span class="string">"content"</span>,<span class="string">"这是一条有序广播"</span>);</span><br><span class="line">    <span class="comment">//参数:Intent,receivePermission,resultReceiver,scheduler,initialCode,initialData,initialExtras</span></span><br><span class="line">    sendOrderedBroadcast(intent,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>, Activity.RESULT_OK,<span class="keyword">null</span>,bundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighLevelBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"HighLevelReceiver"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//中止广播</span></span><br><span class="line">        <span class="comment">//abortBroadcast()调用这个方法能中止广播的发送，低优先级的广播接收者无法接收</span></span><br><span class="line">        <span class="comment">//接收广播内容</span></span><br><span class="line">        Bundle resultExtras = getResultExtras(<span class="keyword">true</span>);</span><br><span class="line">        String content = resultExtras.getCharSequence(<span class="string">"content"</span>).toString();</span><br><span class="line">        Log.d(TAG, <span class="string">"content:"</span>+content); <span class="comment">//log输出接收到的广播内容</span></span><br><span class="line">        <span class="comment">//修改广播内容，直接重写广播内容</span></span><br><span class="line">        resultExtras.putCharSequence(<span class="string">"content"</span>,<span class="string">"有序广播内容被修改！"</span>);</span><br><span class="line">        setResultExtras(resultExtras);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowLevelBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LowLevelReceiver"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//接收广播内容</span></span><br><span class="line">        Bundle resultExtras = getResultExtras(<span class="keyword">true</span>);<span class="comment">//参数为false时则不接收上级广播添加的内容</span></span><br><span class="line">        String content = resultExtras.getCharSequence(<span class="string">"content"</span>).toString();</span><br><span class="line">        Log.d(TAG, <span class="string">"content:"</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><h5 id="广播发送时添加权限"><a href="#广播发送时添加权限" class="headerlink" title="广播发送时添加权限"></a>广播发送时添加权限</h5><p>在清单文件中添加权限信息<code>&lt; permission android:name=&quot;&quot;&gt;&lt; /permission&gt;</code>，在调用<code>sendOrderedBroadcast()</code>方法时指定参数<code>receivePermission</code>添加权限，<font color="#f00">(在manifest文件中添加完权限后需要make project后才能使用)</font><code>Manifest.permission.权限名</code>，接收端在接收时需要在清单文件中添加<code>&lt; uses-permission android:name=&quot;&quot;&gt;&lt; /uses-permission&gt;</code>相应的权限信息</p>
<h5 id="广播接收者添加权限"><a href="#广播接收者添加权限" class="headerlink" title="广播接收者添加权限"></a>广播接收者添加权限</h5><p>在清单文件中添加权限信息<code>&lt; permission android:name=&quot;&quot;&gt;&lt; /permission&gt;</code>，在广播接收者的注册信息中添加指定的权限信息<code>android:permission=&quot;&quot;</code>，广播发送端只有添加了指定的权限<code>&lt; uses-permission android:name=&quot;&quot;&gt;&lt; /uses-permission&gt;</code>后才能给广播接收者发送广播。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>broadcast</tag>
      </tags>
  </entry>
  <entry>
    <title>Android数据的存储</title>
    <url>/articles/56c6f16a.html</url>
    <content><![CDATA[<h6 id="错误的存储方式"><a href="#错误的存储方式" class="headerlink" title="错误的存储方式"></a>错误的存储方式</h6><p>对一个简单的登录页面进行用户数据的保存，将数据存储到应用的数据目录下。</p>
<p>  在写入文件时，文件路径不能直接为android的根目录</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String userFileName=<span class="string">"/user.txt"</span>;        <span class="comment">//文件名</span></span><br></pre></td></tr></table></figure>
<p> 运用IO流写出数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveUserInfo</span><span class="params">(String name, String pwd, String phone)</span> </span>&#123;</span><br><span class="line">        File user=<span class="keyword">new</span> File(userFileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!user.exists())&#123;</span><br><span class="line">                user.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            FileOutputStream userFile=<span class="keyword">new</span> FileOutputStream(user);</span><br><span class="line">            userFile.write((name+<span class="string">" "</span>+pwd+<span class="string">" "</span>+phone).getBytes());    <span class="comment">//以空格符为间隔存储</span></span><br><span class="line">            userFile.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错信息（异常）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.io.IOException: Read-only file system</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>  在Android系统中，每一个应用都是独立的，其权限是有限的，不可操作其他应用的内容。</p>
<p>  “/“为根目录，这点不同于windows系统。</p>
<p>  使用其他的文件名，则会报找不到文件的异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String userFileName=<span class="string">"/com.exercise.myapplication/user.txt"</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">java.io.IOException: No such file or directory   <span class="comment">//异常</span></span><br></pre></td></tr></table></figure>
<h6 id="存储到包名路径下"><a href="#存储到包名路径下" class="headerlink" title="存储到包名路径下"></a>存储到包名路径下</h6><p>当前用户—-文件名应该为 : /data/data/应用包名路径/文件名</p>
<p>  在android6.0后支持多用户  应用文件路径为： /data/user/0/应用包名路径   （0 为用户号）</p>
<p>  在应用包路径下有 files 和  cache 两个文件夹</p>
<p>  在MainActivity.java中可以使用 getFilesDir() 方法得到files的路径,用 getCacheDir() 方法可以得到cache的路径，再使用拼接的方式设置文件的全路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String userFileName=<span class="string">"user.txt"</span>;        <span class="comment">//文件名</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File files=<span class="keyword">this</span>.getFilesDir();       <span class="comment">//得到files路径</span></span><br><span class="line">File cache=<span class="keyword">this</span>.getCacheDir();       <span class="comment">//得打cache路径</span></span><br><span class="line">File user=<span class="keyword">new</span> File(files,userFileName);</span><br><span class="line">FileOutputStream userFile=<span class="keyword">new</span> FileOutputStream(user);</span><br></pre></td></tr></table></figure>
<p>  读取文件并在应用可视时显示在对应的TextView中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileInputStream user=<span class="keyword">this</span>.openFileInput(userFileName);</span><br><span class="line">        BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(user));</span><br><span class="line">        String info=bufferedReader.readLine();</span><br><span class="line">        String[] splits=info.split(<span class="string">" "</span>);    <span class="comment">//以空格符为界切割</span></span><br><span class="line">        String name=splits[<span class="number">0</span>];</span><br><span class="line">        String pwd=splits[<span class="number">1</span>];</span><br><span class="line">        String phone=splits[<span class="number">2</span>];</span><br><span class="line">        etName.setText(name);    <span class="comment">//用户名</span></span><br><span class="line">        etPwd.setText(pwd);      <span class="comment">//密码</span></span><br><span class="line">        etPhone.setText(phone);  <span class="comment">//手机号</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="数据存在sdcard中"><a href="#数据存在sdcard中" class="headerlink" title="数据存在sdcard中"></a>数据存在sdcard中</h6><p>  将数据存在sdcard中：</p>
<p>  在 manifest 的 AndroidManifest.xml 打开storage的读写权限</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"&gt;&lt;/uses-permission&gt;</span><br><span class="line">&lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"&gt;&lt;/uses-permission&gt;</span><br></pre></td></tr></table></figure>
<p>在Android6.0后，读写storage需要动态的申请权限(或者直接在设置里更改应用的存储权限)</p>
<p>storage的相对路径: /storage/emulated/0 (内部存储)   （1表示外置内存卡）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveInSdcard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    requestPermissions();</span><br><span class="line">    File storagePath=<span class="keyword">new</span> File(Environment.getExternalStorageDirectory().getAbsolutePath());<span class="comment">//获取storage的相对路径</span></span><br><span class="line">    File file=<span class="keyword">new</span> File(storagePath,<span class="string">"text.txt"</span>);     <span class="comment">//文件路径</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        fos.write((<span class="string">"text words"</span>).getBytes());</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//检查是否获取读取权限</span></span><br><span class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission( <span class="keyword">this</span>, Manifest.permission.READ_EXTERNAL_STORAGE) != PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale( <span class="keyword">this</span>, Manifest.permission.READ_EXTERNAL_STORAGE)) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"需要读写权限"</span>, Toast.LENGTH_LONG).show(); <span class="comment">//提示未获取读取权限</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ActivityCompat.requestPermissions( <span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE&#125;, <span class="number">1</span>);     <span class="comment">//请求读写权限</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写onRequestPermissionsResult()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    String requestPermissionsResult = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissions.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grantResults[i] == PERMISSION_GRANTED) &#123;</span><br><span class="line">                requestPermissionsResult += permissions[i] + <span class="string">" 申请成功\n"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                requestPermissionsResult += permissions[i] + <span class="string">" 申请失败\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, requestPermissionsResult, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>android界面跳转</title>
    <url>/articles/de41b12e.html</url>
    <content><![CDATA[<h2 id="非响应式跳转"><a href="#非响应式跳转" class="headerlink" title="非响应式跳转"></a>非响应式跳转</h2><h3 id="跳转后的界面"><a href="#跳转后的界面" class="headerlink" title="跳转后的界面"></a>跳转后的界面</h3><p>创建跳转后的界面代码和布局<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>activity_second.xml</code>布局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>AndroidManifest.xml</code>中注册<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="显式意图跳转"><a href="#显式意图跳转" class="headerlink" title="显式意图跳转"></a>显式意图跳转</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//键值对的方式传输</span></span><br><span class="line"><span class="comment">//internt.putExtra("","");</span></span><br><span class="line">intent.putExtra(<span class="string">"name"</span>,etName.getText().toString());	<span class="comment">//传递用户名</span></span><br><span class="line">intent.putExtra(<span class="string">"pwd"</span>,etPwd.getText().toString()); 		<span class="comment">//传递密码</span></span><br><span class="line">startActivity(intent);		<span class="comment">//启动</span></span><br></pre></td></tr></table></figure>
<h3 id="隐式意图跳转"><a href="#隐式意图跳转" class="headerlink" title="隐式意图跳转"></a>隐式意图跳转</h3><p>在<code>AndroidManifest.xml</code>添加过滤器<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--action:包名.信息(自定义)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--category(类别)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--data(数据)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.study.USER_INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>&gt;</span><span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span> Intent();         <span class="comment">//隐式意图</span></span><br><span class="line">intent.setAction(<span class="string">"com.study.USER_INFO"</span>);</span><br><span class="line">intent.addCategory(intent.CATEGORY_DEFAULT);    <span class="comment">//相当于intent.addCategory(android.intent.category.DEFAULT）;</span></span><br><span class="line">intent.putExtra(<span class="string">"name"</span>,etName.getText().toString());	<span class="comment">//传递用户名</span></span><br><span class="line">intent.putExtra(<span class="string">"pwd"</span>,etPwd.getText().toString());		<span class="comment">//传递密码</span></span><br><span class="line">startActivity(intent);		<span class="comment">//启动</span></span><br></pre></td></tr></table></figure></p>
<h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = getIntent();    <span class="comment">//获取上级界面所传递的数据</span></span><br><span class="line">String name = intent.getStringExtra(<span class="string">"name"</span>);</span><br><span class="line">String pwd = intent.getStringExtra(<span class="string">"pwd"</span>);</span><br><span class="line">TextView tvText = findViewById(R.id.tv_text);</span><br><span class="line">tvText.setText(<span class="string">"账号："</span>+name+<span class="string">"  密码："</span>+pwd);   <span class="comment">//显示信息</span></span><br></pre></td></tr></table></figure>
<h2 id="响应式跳转"><a href="#响应式跳转" class="headerlink" title="响应式跳转"></a>响应式跳转</h2><p>使用startActivity()方法只能将上层界面的信息传递到下层界面，不能实现界面信息的回传，响应式界面跳转通过startActivityForResult()方法在启动下层界面时发出请求码，下层界面通过result()方法发送结果码，并将信息传递到上层界面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上层界面跳转下层界面</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE = <span class="number">1</span>;  <span class="comment">//请求码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_CODE=<span class="number">2</span>;     <span class="comment">//结果码</span></span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent();					<span class="comment">//显式或隐式跳转</span></span><br><span class="line">intent.putExtra();							<span class="comment">//传递到下层界面的信息</span></span><br><span class="line">startActivityForResult(intent,REQUEST_CODE );		<span class="comment">//启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上层界面接收结果</span></span><br><span class="line"><span class="comment">//重写onActivityResult()方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode,Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">if</span> (requestCode==REQUEST_CODE ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultCode==RESULT_CODE) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下层界面</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_CODE=<span class="number">2</span>;   <span class="comment">//结果码</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.putExtra();						<span class="comment">//传递给上层界面的信息</span></span><br><span class="line">setResult(RESULT_CODE, intent);</span><br><span class="line">finish();</span><br></pre></td></tr></table></figure>
<p>setResult()方法只有在finish()方法执行前才能响应，把setResult()写在onDestroy()中无法实现请求的响应,如果需要在activity结束时回传信息，可以采取监听返回键的方式实现回传。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.putExtra();</span><br><span class="line">    setResult(RESULT_CODE, intent);</span><br><span class="line">    <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android自定义工具类--logutils</title>
    <url>/articles/c3843c50.html</url>
    <content><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>Android项目中通常会使用log来进行调试，在发布版本后并不需要输出log，使用logutils类来控制log的输出管理</p>
<h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p>在应用调试阶段设置当前log等级大于或等于debug等级，即可输出debug，info，warming和error四个等级的log</p>
<p>在应用发布时只需要将当前log等级调整为0或小于0即可关闭log的输出</p>
<p>参数</p>
<ul>
<li>object： 类对象(<code>this</code>或<code>ClassName.this</code>)</li>
<li>message： log信息</li>
</ul>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CURRENT_LEV = <span class="number">4</span>;	<span class="comment">//当前log等级</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEBUG_LEV = <span class="number">4</span>;		<span class="comment">//debug</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INFO_LEV = <span class="number">3</span>;		<span class="comment">//info</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WARMING_LEV = <span class="number">2</span>;	<span class="comment">//warming</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR_LEV = <span class="number">1</span>;		<span class="comment">//error</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(Object object, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CURRENT_LEV &gt;= DEBUG_LEV) &#123;</span><br><span class="line">            Log.d(object.getClass().getSimpleName(), message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(Object object, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CURRENT_LEV &gt;= INFO_LEV) &#123;</span><br><span class="line">            Log.i(object.getClass().getSimpleName(), message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(Object object, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CURRENT_LEV &gt;= WARMING_LEV) &#123;</span><br><span class="line">            Log.w(object.getClass().getSimpleName(), message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(Object object, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CURRENT_LEV &gt;= ERROR_LEV) &#123;</span><br><span class="line">            Log.e(object.getClass().getSimpleName(), message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android自定义工具类--toast utils</title>
    <url>/articles/34a9fe48.html</url>
    <content><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>在频繁调用Toast会造成较长的延时，不能及时显示最新的toast信息，使用ToastUtils解决延时bug</p>
<h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><p><code>BaseApplication.getAppContext()</code></p>
<p>使用：<code>ToastUtils.showToast(message);</code></p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Toast sToast;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"ShowToast"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sToast == <span class="keyword">null</span>) &#123;	<span class="comment">//如果不存在就创建</span></span><br><span class="line">            sToast = Toast.makeText(BaseApplication.getAppContext(), <span class="string">""</span>, Toast.LENGTH_SHORT);</span><br><span class="line">        &#125;</span><br><span class="line">        sToast.setText(message);	<span class="comment">//设置内容</span></span><br><span class="line">        sToast.show();		<span class="comment">//显示toast内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>GOF23种设计模式</title>
    <url>/articles/42ae4d28.html</url>
    <content><![CDATA[<h3 id="GOF-Group-of-Four-23种设计模式"><a href="#GOF-Group-of-Four-23种设计模式" class="headerlink" title="GOF(Group of Four)23种设计模式"></a>GOF(Group of Four)23种设计模式</h3><p><img data-src="D:/Projects/JavaWorkspace/Patterns/GOF23种设计模式.png" alt="GOF23种设计模式"></p>
<h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h4><ul>
<li>单例模式</li>
<li>工厂模式</li>
<li>抽象工厂模式</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
<h5 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h5><p>核心作用：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p>
<h6 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h6><ul>
<li>Windows任务管理器</li>
<li>Windows回收站</li>
<li>网站的计数器</li>
<li>应用程序的日志应用</li>
<li>数据库连接池的设计</li>
<li>操作系统的文件系统</li>
<li>Application(Servlet编程)</li>
<li>Spring的Bean</li>
<li>Servlet</li>
<li>Spring MVC框架/Struts框架中控制器对象</li>
</ul>
<h6 id="常见的五种单例模式"><a href="#常见的五种单例模式" class="headerlink" title="常见的五种单例模式"></a>常见的五种单例模式</h6><ul>
<li>主要：<ul>
<li>饿汉式：线程安全，调用效率高，不能延时加载。</li>
<li>懒汉式：线程安全，调用效率不高，可以延时加载。</li>
</ul>
</li>
<li>其他：<ul>
<li>双重检测锁式：由于JVM底层内部模型原因，偶尔会出问题，不建议使用。</li>
<li>静态内部类式：线程安全，调用效率高，可以延时加载。</li>
<li>枚举单例：线程安全，调用效率高，不能延时加载，并且可以天然的防止反射和反序列化漏洞。</li>
</ul>
</li>
</ul>
<p>单例对象性能比较：</p>
<ul>
<li>占用资源少，不需要延时加载  <strong>枚举式</strong> 好于 饿汉式</li>
<li>占用资源大，需要延时加载    <strong>静态内部类模式</strong> 好于 懒汉式</li>
</ul>
<font color=red>注意：使用反射、反序列化破解单例模式。</font>

<h5 id="工厂模式-Factory"><a href="#工厂模式-Factory" class="headerlink" title="工厂模式 Factory"></a>工厂模式 Factory</h5><p>实现了<strong>创建者</strong>和<strong>调用者</strong>的分离。</p>
<p>核心本质：</p>
<ul>
<li>实例化对象，用工厂方法代替new操作。</li>
<li><p>将选择实现类、创建对象同意管理和控制，从而将调用者根实现类解耦。</p>
</li>
<li><p>简单工厂模式  用来生产同一等级结构的任意产品（对于增加新的产品，需要修改已有代码）。</p>
</li>
<li>(静态工厂模式)工厂类使用静态方法，通过接收的参数的不同来返回不同的对象实例，不完全满足OCP。</li>
<li>工厂方法模式  用来生产同一等级结构的固定产品（支持增加任意产品），不修改已有类的前提下，通过增加新的工厂类实现扩展。</li>
<li>抽象工厂模式  用来生产不同产品族的全部产品（对于增加新的产品，无能为力，支持增加产品族）<br>抽象工厂模式是工厂方法模式的升级版本，在有多个业务品种、业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式，不可以增加产品，可以增加产品族。</li>
</ul>
<h6 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h6><ul>
<li>JDK中Calendar的getInstance方法</li>
<li>JDBC中的Connection对象的获取</li>
<li>Hibernate中SessionFactory创建Session</li>
<li>Spring中IOC容器创建管理bean对象</li>
<li>XML解析时的DocumentBuilderFactory创建解析器对象</li>
<li>反射中Class对象的newInstance()</li>
</ul>
<h6 id="面向对象设计的基本原则"><a href="#面向对象设计的基本原则" class="headerlink" title="面向对象设计的基本原则"></a>面向对象设计的基本原则</h6><ul>
<li>OCP(开闭原则，Open-Closed Principle) 一个软件的实体应当对扩展开放，对修改关闭。</li>
<li>DIP(依赖倒转原则，Dependence Inversion Principle) 要针对接口编程，不要针对实现编程。</li>
<li>LoD(迪米特法则，Law of Demeter) 只与你喜欢的朋友通信，而避免和陌生人通信。<br>一个软件实体应当尽可能少的与其他实体发生相互作用</li>
</ul>
<h6 id="简单工厂模式vs工厂方法模式"><a href="#简单工厂模式vs工厂方法模式" class="headerlink" title="简单工厂模式vs工厂方法模式"></a>简单工厂模式vs工厂方法模式</h6><ul>
<li>结构复杂度：<strong>简单工厂模式</strong>优于工厂方法模式。</li>
<li>代码复杂度：简单工厂模式在结构方面相对简单，在代码方面比较简单。增加类时需要添加很多方法，而工厂方法只完成单一任务，代码较简单。</li>
<li>客户端编程难度：工厂方法模式在工厂类结构引入了接口从而满足<strong>OCP（开闭原则）</strong>，但在客户端编码中需要对工厂类进行实例化，而简单工厂模式的工厂类是个静态类，在客户端无需实例化。</li>
<li>管理上的难度：工厂方法模式<strong>&gt;</strong>简单工厂模式</li>
</ul>
<h5 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式 Builder"></a>建造者模式 Builder</h5><p>本质：分离了对象组件的单独构造（由Builder来负责）和装配（由Director负责）从而可以构造出复杂的对象<br>适合于：某个对象的构建过程复杂的情况下使用。<br>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用</p>
<h6 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h6><ul>
<li>StringBuilder类的append()方法</li>
<li>SQL中的PreparedStatement</li>
<li>JDOM中，DomBuilder、SAXBuilder</li>
</ul>
<h5 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 Prototype"></a>原型模式 Prototype</h5><p>通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</p>
<p>以某个对象为原型，复制出新的对象。</p>
<p>效率高，直接克隆，避免了重新执行构造过程步骤。</p>
<p>克隆类似于new但不同于new，new创建对象属性采用的是默认值，克隆出的对象的属性值完全和原型对象相同，并且克隆出的新对象不会影响原型对象。</p>
<h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><ul>
<li>Cloneable接口和clone()方法。</li>
<li>Prototype模式中实现起来最困难的地方就是<strong>内存复制操作</strong>，Java中提供了<code>clone()</code>方法。</li>
</ul>
<p>浅克隆<br>深克隆：修改<code>clone()</code>方法；序列化和反序列化</p>
<h5 id="创建者模式总结"><a href="#创建者模式总结" class="headerlink" title="创建者模式总结"></a>创建者模式总结</h5><p>单例模式：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p>
<p>工厂模式：</p>
<ul>
<li>简单工厂模式：用来生产同一等级结构中的任意产品（对于增加新的产品，需要修改已有代码）</li>
<li>工厂方法模式：用来生产同一等级结构中的固定产品（支持增加任意产品）</li>
<li>抽象工厂模式：用来生产不同产品族的全部产品（对于新增加的产品，无能为力，支持增加产品族）</li>
</ul>
<p>建造者模式：分离了对象子组件的单独构造（由Builder负责）和装配（由Director负责），从而可以构造出复杂的对象。</p>
<p>原型模式：通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</p>
<h4 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h4><p>核心作用：从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</p>
<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>装饰模式</li>
<li>组合模式</li>
<li>外观模式</li>
<li>享元模式</li>
<li>代理模式</li>
</ul>
<h5 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式 Adapter"></a>适配器模式 Adapter</h5><p>将一个类的接口转换成客户希望的另一个接口。使得由于接口不兼容而不能一起工作的那些类可以在一起工作。</p>
<ul>
<li>目标接口Target：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。</li>
<li>需要适配的类Adapter：通过包装一个需要适配的对象，把原接口转换成目标接口。</li>
</ul>
<h6 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h6><ul>
<li>旧系统改造和升级</li>
<li>系统维护</li>
<li><code>java.io.InputStreamReader</code> InputStream</li>
<li><code>java.io.OutputStreamWriter</code> OutputStream</li>
</ul>
<h5 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式 Proxy Pattern"></a>代理模式 Proxy Pattern</h5><p>核心作用：通过代理，控制对对象的访问。</p>
<p>可以详细控制访问某个（某类）对象的方法，在调用这个方法前做前置处理，调用这个方法后做后置处理（AOP的微观实现）。</p>
<h6 id="核心角色"><a href="#核心角色" class="headerlink" title="核心角色"></a>核心角色</h6><ul>
<li>抽象角色：定义代理角色和真实角色的公共对外方法。</li>
<li>真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。关注真正的业务逻辑。</li>
<li>代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。将统一的流程控制放到代理角色中处理。</li>
</ul>
<h6 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h6><ul>
<li>安全代理：屏蔽对真实角色的直接访问。</li>
<li>远程代理：通过代理类处理远程方法调用RMI。</li>
<li>延迟加载：先加载轻量级的代理对象，真正需要在加载真实对象。</li>
</ul>
<h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><ul>
<li>静态代理：静态定义代理类</li>
<li>动态代理类：动态生成代理类<ul>
<li>JDK自带的动态代理<br><code>java.lang.reflect.Proxy</code> 动态生成代理类和对象<br><code>java.lang.reflect.InvocationHandler</code> 处理器接口，可以通过invoke()方法实现对真实角色的代理访问。<br>每次通过Proxy生产代理类对象时都要指定对应的处理器对象</li>
<li>java assist字节码操作库实现</li>
<li>CGLIB</li>
<li>ASMI底层使用指令，可维护性较差</li>
</ul>
</li>
</ul>
<p>动态代理相对于静态代理的优点：抽象角色中(接口)都被转移到调用处理器一个集中的方法中处理，更加灵活、统一地处理众多的方法。</p>
<h6 id="开发框架中的应用场景"><a href="#开发框架中的应用场景" class="headerlink" title="开发框架中的应用场景"></a>开发框架中的应用场景</h6><ul>
<li>struts2中拦截器的实现</li>
<li>数据库连接池关闭处理</li>
<li>Hibernate中延时加载的实现</li>
<li>MyBatis中实现拦截器插件</li>
<li>AspectJ的实现</li>
<li>Spring中AOP的实现<ul>
<li>日志拦截</li>
<li>声明式事务处理</li>
</ul>
</li>
<li>Web Service</li>
<li>RMI远程方法调用</li>
<li>开源AOP框架AspectJ</li>
</ul>
<h5 id="桥接模式-Bridge"><a href="#桥接模式-Bridge" class="headerlink" title="桥接模式 Bridge"></a>桥接模式 Bridge</h5><p>分层继承结构</p>
<p>核心要点：处理多层继承结构，处理维度变化的场景 。将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联</p>
<h6 id="实际开发中应用场景"><a href="#实际开发中应用场景" class="headerlink" title="实际开发中应用场景"></a>实际开发中应用场景</h6><ul>
<li>JDBC驱动程序</li>
<li>AWT中的Peer架构</li>
<li>银行日志管理<ul>
<li>格式分类：操作日志、交易日志、异常日志</li>
<li>距离分类：本地记录日志、异地记录日志</li>
</ul>
</li>
<li>人力资源系统中奖金计算模块<ul>
<li>奖金分类：个人奖金、团体奖金、激励奖金</li>
<li>部门分类：人事部门、销售部门、研发部门</li>
</ul>
</li>
<li>OA系统中的消息处理<ul>
<li>业务类型：普通消息、加急消息、特急消息</li>
<li>发送类型方式：系统内消息、手机短信、邮件</li>
</ul>
</li>
</ul>
<h5 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式 Composite"></a>组合模式 Composite</h5><p>把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象。</p>
<p>核心：</p>
<ul>
<li>抽象构件Component角色 定义了子叶和容器构建的共同点。</li>
<li>叶子Leaf构件角色 无子节点。 </li>
<li>容器Composite构件角色 有容器特征，可以包含子节点。</li>
</ul>
<p>工作流程分析</p>
<ol>
<li>将容器和叶子进行递归组合，使得用户在使用时可以一致性地对待容器和叶子。</li>
<li>当容器对象地指定方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行。<strong>递归</strong>。</li>
</ol>
<h6 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h6><ul>
<li>操作系统中的资源管理器</li>
<li>GUI中的容器层次图</li>
<li>XML的文件解析</li>
<li>OA系统中组织结构的处理</li>
<li>Junit单元测试框架<ul>
<li>底层设计：TestCase(叶子)，TestUnit(容器)，Test接口(抽象)</li>
</ul>
</li>
</ul>
<h5 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式 Decorator"></a>装饰模式 Decorator</h5><p>动态地为一个对象增加新的功能。</p>
<p>用于代替继承，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p>
<h6 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h6><ul>
<li>Component抽象构件角色 真实对象和装饰对象有相同的接口，客户端能以真实对象相同的方式同装饰对象交互。</li>
<li>ConcreteComponent具体构件角色 真实对象 io流中的FileInputStream FileOutputStream。</li>
<li>Decorator装饰角色 持有一个抽象构件的引用，装饰对象接收所有客户端的请求，并把这些请求转发给真实的对象，使得能在真实对象调用前后增加新的功能。</li>
<li>ConcreteDecorator具体装饰角色 负责给构件对象增加新的责任。</li>
</ul>
<h6 id="开发中使用的场景"><a href="#开发中使用的场景" class="headerlink" title="开发中使用的场景"></a>开发中使用的场景</h6><ul>
<li>IO中输入和输出流的设计。</li>
<li>Swing包中图形界面构件功能。</li>
<li>Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper类，增强了request对象的功能。</li>
<li>Strut2中，request、response、session对象的处理。</li>
</ul>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>别名：包装器模式Wrapper</p>
<p>降低系统的耦合度，可以动态的增加或删除对象的职责，并使得需要装饰的具体构建类和具体装饰类可以独立变化，以便增加新的具体构建类和具体修饰类。</p>
<p>优点</p>
<ul>
<li>扩展对象功能，比继承灵活，不会导致类个数急剧增加。</li>
<li>可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象。</li>
<li>具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类。</li>
</ul>
<p>缺点</p>
<ul>
<li>产生很多小对象，大量小对象占据内存，一定程度上影响性能。</li>
<li>装饰模式易于出错，调试排查比较麻烦。</li>
</ul>
<p>装饰模式与桥接模式区别</p>
<p>两个模式对是为了解决多个子类对象问题，但诱因不同。桥接模式时对象自身现有机制沿着多个维度变化，是既有部分不稳定，装饰模式是为了增加新的功能。</p>
<h5 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式 Facade"></a>外观模式 Facade</h5><p>核心：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用。</p>
<h6 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h6><p>JDBC封装后，commons提供的DBUtils类，Hibernate提供的工具类、Spring JDBC工具类等。</p>
<h5 id="享元模式-FlyWeight"><a href="#享元模式-FlyWeight" class="headerlink" title="享元模式 FlyWeight"></a>享元模式 FlyWeight</h5><p>场景：存在很多个相同或相似的对象，通过享元模式节省内存。</p>
<h6 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h6><ul>
<li>以共享的方式高效地支持大量细粒度对象的重用。</li>
<li>享元对象能做到共享的关键是区分了内部状态和外部状态。<ul>
<li>内部状态：可以共享，不随环境变化而改变。</li>
<li>外部状态：不可以共享，会随环境变化而改变。</li>
</ul>
</li>
</ul>
<h6 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h6><ul>
<li>FlyWeightFactory 享元工厂类：创建并管理享元对象，享元池一半设计成键值对。</li>
<li>FlyWeight 抽象享元类：通常是一个接口或抽象类，声明公共方法，这些方法可以向外界提供对象的内部状态，设置外部状态。</li>
<li>ConcreteFlyWeight 具体享元类 为内部状态提供成员变量进行存储。</li>
<li>UnsharedConcreteFlyWeight 非共享享元类：不能被共享的子类可以设计为非共享享元类。</li>
</ul>
<h6 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h6><ul>
<li>共享“池”：线程池，数据库连接池……</li>
<li>String类的设计也是享元模式</li>
</ul>
<h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul>
<li>极大减少内存中对象的数量。</li>
<li>相同或相似对象内存中只存一份，极大地节约资源，提高系统性能。</li>
<li>外部状态相对独立，不影响内部状态。</li>
</ul>
<h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul>
<li>模式较复杂，使程序逻辑复杂化。</li>
<li>为了节省内存，共享了内部状态，分离出外部状态，而读取外部状态使运行时间变长，用时间换取了空间。</li>
</ul>
<h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h4><ul>
<li>模板方法模式</li>
<li>命令模式</li>
<li>迭代器模式</li>
<li>观察者模式</li>
<li>中介者模式</li>
<li>备忘录模式</li>
<li>解释器模式</li>
<li>状态模式</li>
<li>策略模式</li>
<li>责任链模式</li>
<li>访问者模式</li>
</ul>
<h5 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式 Chain of Responsibility"></a>责任链模式 Chain of Responsibility</h5><p>定义：将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象</p>
<p>添加新的处理对象：由于责任链的创建完全在客户端，因此新增新的具体处理者对原有类库没有任何影响，只需添加新的类，然后再客户端调用时添加即可，符可开闭原则。</p>
<h6 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h6><ul>
<li>链表方式定义职责链</li>
<li>非链表方式实现责任链：通过集合、数组生成职责链</li>
</ul>
<h6 id="常用场景-1"><a href="#常用场景-1" class="headerlink" title="常用场景"></a>常用场景</h6><ul>
<li>Java中异常机制，一个try可对应多个catch，当第一个catch不匹配类型，则自动跳到第二个catch</li>
<li>JavaScript语言中，事件的冒泡和捕获机制；Java中事件的处理采用观察者模式</li>
<li>Servlet开发中，过滤器的链式处理</li>
<li>Strut2中拦截器的调用</li>
</ul>
<h5 id="迭代器模式-Iterator"><a href="#迭代器模式-Iterator" class="headerlink" title="迭代器模式 Iterator"></a>迭代器模式 Iterator</h5><p>提供一种可以遍历聚合对象的方式，又称为游标模式 Cursor</p>
<ul>
<li>聚合对象：存储数据</li>
<li>迭代器：遍历数据</li>
</ul>
<p>正向遍历/逆向遍历</p>
<h6 id="常用场景-2"><a href="#常用场景-2" class="headerlink" title="常用场景"></a>常用场景</h6><p>JDK内置迭代器List/Set</p>
<h5 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式 Mediator"></a>中介者模式 Mediator</h5><h6 id="核心-解耦"><a href="#核心-解耦" class="headerlink" title="核心 [解耦]"></a>核心 [<strong>解耦</strong>]</h6><ol>
<li>如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对关系，将导致关系极其复杂。这些对象称之为同事对象。</li>
<li>引入中介者对象，使各个同时对象只跟中介者对象打交道，将复杂的网络结构化解为如下的星形结构。</li>
</ol>
<h6 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h6><p>解耦多个同事对象之间的交互关系，每个对象都持有中介者对象的引用，只跟中介者对象打交道。</p>
<h6 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h6><ul>
<li>MVC模式中，Control控制器就是一个中介者对象，Model和View都和它打交道。</li>
<li>窗口游戏程序，窗口软件开发中窗口对象也是一个中介者对象</li>
<li><p>图形界面开发GUI，多个组件之间的交互，可以通过引入一个中介者对象来解决，可以是整体的窗口对象或者DOM对象。</p>
</li>
<li><p><code>Java.lang.reflect.Method#invoke()</code></p>
</li>
</ul>
<h5 id="命令模式-Command"><a href="#命令模式-Command" class="headerlink" title="命令模式 Command"></a>命令模式 Command</h5><p>将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。也称之为Action模式或Transaction模式。</p>
<h6 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h6><ul>
<li>Command抽象命令类</li>
<li>ConcreteCommand具体命令类</li>
<li>Invoker调用者/请求者：请求的发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，因此它只与抽象命令类之间存在关联。在程序运行时，将调用命令对象的execute()，间接调用接收者的相关操作。</li>
<li>Receiver接收者<br>接收者执行与请求相关的操作，具体实现对请求的业务处理。<br>未抽象前，实际执行操作内容的对象。</li>
<li>Client客户类<br>在客户类中需要创建调用者对象、具体命令类对象，在创建具体命令对象时指定对应的接收者。发送者和接收者之间没有直接关系，都通过命令间接调用。</li>
</ul>
<h6 id="常见场景-1"><a href="#常见场景-1" class="headerlink" title="常见场景"></a>常见场景</h6><ul>
<li>Strut2中，action的整个调用过程中</li>
<li>数据库事务机制的底层实现</li>
<li>命令的撤销和恢复</li>
</ul>
<h5 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式 Interpreter"></a>解释器模式 Interpreter</h5><p>用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p>
<p>尽量不要使用解释器模式，后期维护麻烦很大。项目中，可以使用Jruby，Groovy，Java的js引擎来替代解释器的作用，弥补Java语言的不足。</p>
<h6 id="常用场景-3"><a href="#常用场景-3" class="headerlink" title="常用场景"></a>常用场景</h6><ul>
<li>EL表达式的处理</li>
<li>正则表达式解释器</li>
<li>SQL语法的解释器</li>
<li>数学表达式解析器<br>工具包：Math Expression String Parser、Expression4J</li>
</ul>
<h5 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式 Visitor"></a>访问者模式 Visitor</h5><p>对于存储在一个集合中的对象，它们可能具有不同的类型（即使有一个公共的接口），对于该集合中的对象，可以接受一类称之为访问者的对象来访问，不同的访问者其访问方式也有所不同。</p>
<p>定义：表示一个作用于某对象结构中的各元素的操作，它使我们可以在不改变这个元素的类的前提下定义作用于这些元素的操作。</p>
<h6 id="常用场景-4"><a href="#常用场景-4" class="headerlink" title="常用场景"></a>常用场景</h6><ul>
<li>XML文档解析器设计</li>
<li>编译器的设计</li>
<li>复杂集合对象的处理</li>
</ul>
<h5 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式 Strategy"></a>策略模式 Strategy</h5><p>条件语句，实现容易，维护难,不符合开闭原则。</p>
<p>策略模式对应于解决摸一个问题的算法族，允许用户从该算法族中任选一个算法解决莫伊问题，同时可以方便地更换算法或者增加算法。并由客户端决定调用哪个算法。</p>
<p>本质：分离算法，选择实现。</p>
<h6 id="常见场景-2"><a href="#常见场景-2" class="headerlink" title="常见场景"></a>常见场景</h6><ul>
<li>JavaSE中GUI编程中布局管理</li>
<li>Spring框架中，Resource接口，资源访问策略</li>
<li><code>javax.servlet.http.HttpServlet#service()</code></li>
</ul>
<h5 id="模板方法模式-Template-Method"><a href="#模板方法模式-Template-Method" class="headerlink" title="模板方法模式 Template Method"></a>模板方法模式 Template Method</h5><p>定义了一个操作中的算法骨架。将某些步骤延迟到子类中实现。新的子类可以在不改变一个算法结构的前提下重新定义该算法的某些特定步骤。</p>
<h6 id="核心-1"><a href="#核心-1" class="headerlink" title="核心"></a>核心</h6><p>处理某个流程的代码已经都具备，但是其中某个节点的代码暂时不能确定。将结点的代码实现转移给子类完成。即处理步骤父类中定义好，具体实现延迟到子类中定义。</p>
<p>方法回调（钩子方法）</p>
<ul>
<li>好莱坞原则 “Don’t call me，we’ll call you back.”</li>
<li>子类不能调用父类，而通过父类调用子类。</li>
</ul>
<h6 id="常见场景-3"><a href="#常见场景-3" class="headerlink" title="常见场景"></a>常见场景</h6><ul>
<li>数据库访问的封装</li>
<li>Junit单元测试</li>
<li>Servlet中doGet()和doPost()方法调用</li>
<li>Hibernate中模板程序</li>
<li>Spring中JDBCTemplate、HibernateTemplate等</li>
</ul>
<h5 id="状态模式-State"><a href="#状态模式-State" class="headerlink" title="状态模式 State"></a>状态模式 State</h5><p>不同状态对应不同行为。</p>
<p>核心：用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题</p>
<h6 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h6><ul>
<li>Context环境类：维护一个State对象，定义当前的状态</li>
<li>State抽象环境类</li>
<li>ConcreteState具体环境类：每一个类封装一个状态对应的行为</li>
</ul>
<h6 id="常见场景-4"><a href="#常见场景-4" class="headerlink" title="常见场景"></a>常见场景</h6><ul>
<li>银行系统中帐号状态的管理</li>
<li>OA系统中公文状态的管理</li>
<li>酒店系统中房间状态的管理</li>
<li>线程对象各状态的切换</li>
</ul>
<h5 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式 Observer"></a>观察者模式 Observer</h5><p>多个订阅者、客户称之为观察者；需要同给多个订阅者的数据封装到对象中，称之为目标。</p>
<h6 id="核心-2"><a href="#核心-2" class="headerlink" title="核心"></a>核心</h6><p>主要用于1:N的通知，当一个对象（Subject/Observable）的状态变化时，需要及时告知一系列对象（Observer），令它们做出响应。</p>
<p>通知观察者的方式</p>
<ul>
<li>推：每次都会把通知以广播方式发送给所有观察者，所有观察者只能被动接收。</li>
<li>拉：观察者只要知道有情况即可，至于什么时候获取内容，获取什么内容都可以自主决定。</li>
</ul>
<p>JavaSE提供了java.util.Observable和java.util.Observer来实现观察者模式。</p>
<h6 id="常见场景-5"><a href="#常见场景-5" class="headerlink" title="常见场景"></a>常见场景</h6><ul>
<li>聊天室程序，服务器转发给所有客户端</li>
<li>网络游戏多人联机对战场景中，服务器将客户端的状态进行分发</li>
<li>邮件订阅</li>
<li>Servlet中监听器的实现</li>
<li>Android中广播机制</li>
<li>JDK的AWT中事件处理模型基于观察者模式的委派事件模型（Delegation Event Model）<ul>
<li>事件源—-目标对象</li>
<li>事件监听器—-观察者</li>
</ul>
</li>
<li>京东商城，群发某商品打折信息</li>
</ul>
<h5 id="备忘录模式-Memento"><a href="#备忘录模式-Memento" class="headerlink" title="备忘录模式 Memento"></a>备忘录模式 Memento</h5><p>核心：保存某个对象内部状态的拷贝，恢复原先状态</p>
<p>结构</p>
<ul>
<li>源发器类 Originator</li>
<li>备忘录类 Memento</li>
<li>负责人类 CareTaker</li>
</ul>
<p>分类</p>
<ol>
<li>可通过列表保存多个备忘录类。</li>
<li>通过栈保存多个备忘点，或将多个备忘录对象序列化和持久化。</li>
</ol>
<h6 id="常见场景-6"><a href="#常见场景-6" class="headerlink" title="常见场景"></a>常见场景</h6><ul>
<li>棋类游戏中的悔棋</li>
<li>普通软件中的撤销操作</li>
<li>数据库软件中，事务管理中的回滚操作</li>
<li>PhotoShop软件中的历史记录</li>
</ul>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:100%; height:600px;" src="https://www.processon.com/embed/5f57a53163768959e2dcb3bb"></iframe>

]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Android非ui线程更新ui</title>
    <url>/articles/89935aa5.html</url>
    <content><![CDATA[<h4 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h4><p>在开发中会遇到在通过子线程获取数据，然后子线程需要更新ui，但是在android中这是不被允许的(子线程不能更新ui,android4.0开始)，可以通过三种方法解决(我已知的方法)。</p>
<a id="more"></a>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h6 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h6><p>在需要更新ui的语句前后分别加上    Looper.prepare();    Looper.loop();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Looper.prepare();</span><br><span class="line">更新ui的语句</span><br><span class="line">Looper.loop();</span><br></pre></td></tr></table></figure>
<h6 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h6><p>调用android的api  runOnUiThread()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// UI更新执行语句--以Toast为例</span></span><br><span class="line">       Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"message"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h6 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h6><p>新建一个BaseApplication的类用来管理Context ，Handler，在需要更新ui的时候调用BaseApplication.getHandler().post(),用这个方法可以在一定程度上减少context和thread问题</p>
<p>Context 可应用的组件或控件</p>
<ul>
<li>activity</li>
<li>service</li>
<li>基于全局显示的控件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//在manifest.xml文件中需要添加入口</span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".BaseApplication"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Handler sHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context sContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        sHandler = <span class="keyword">new</span> Handler();</span><br><span class="line">        sContext = getBaseContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getAppContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BaseApplication.getHandler().post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// ui更新语句</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>GitHub删除文件夹</title>
    <url>/articles/bab8a3bc.html</url>
    <content><![CDATA[<h6 id="删除步骤"><a href="#删除步骤" class="headerlink" title="删除步骤"></a>删除步骤</h6><ol>
<li>进入项目文件下，使用<strong>Git Bash Here</strong>（或cmd窗口）打开命令行窗口。</li>
<li><code>git pull</code>或(<code>git pull origin master</code>)从远程仓库里面的项目拉下来，<code>dir</code>（Windows系统）查看文件目录结构。</li>
<li>例如需要删除target文件夹，<code>git rm -f --cached target</code></li>
<li><code>git commit -m &quot;Delete target.&quot;</code>提交，添加操作说明。</li>
<li><code>git push</code>或(<code>git push -u origin master</code>)将本次更改推送到远程仓库。</li>
</ol>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line">From https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;BlogSystem</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br><span class="line"></span><br><span class="line">$ git rm -r --cached target</span><br><span class="line">rm &#39;target&#x2F;classes&#x2F;application.yml&#39;</span><br><span class="line">rm &#39;target&#x2F;classes&#x2F;com&#x2F;study&#x2F;BlogApplication.class&#39;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;Delete target.&quot;</span><br><span class="line">[master f5ef2bf] Delete target.</span><br><span class="line"> 44 files changed, 67 deletions(-)</span><br><span class="line"> delete mode 100644 target&#x2F;classes&#x2F;application.yml</span><br><span class="line"> delete mode 100644 target&#x2F;classes&#x2F;com&#x2F;study&#x2F;BlogApplication.class</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">$ git push</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3&#x2F;3), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">Writing objects: 100% (2&#x2F;2), 219 bytes | 219.00 KiB&#x2F;s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1&#x2F;1), completed with 1 local object.</span><br><span class="line">To https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;BlogSystem.git</span><br><span class="line">   661f345..f5ef2bf  master -&gt; master</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java--AOP编程</title>
    <url>/articles/d97d56d4.html</url>
    <content><![CDATA[<h5 id="AOP编程"><a href="#AOP编程" class="headerlink" title="AOP编程"></a>AOP编程</h5><p>AOP：Aspect Oriented Programming</p>
<p>面向切面编程 vs 面向对象编程 (Object Oriented Programming)</p>
<ul>
<li>面向对象(OOP)：将需求功能划分为不同的、独立，封装良好的类，并让它们通过继承和多态实现相同和不同行为。</li>
<li>面向切面：将通用需求功能从众多类中分离出来，使得很多类共享一个 行为，一旦发生变化，不必修改很多类，而只需要修改这个行为即可</li>
</ul>
<h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ul>
<li>分离代码的耦合(高内聚，低耦合)</li>
<li>业务逻辑变化不需要修改源代码/不用重启</li>
<li>加快编程和测试速度</li>
<li>AOP编程是一个概念/规范，没有限定语言</li>
<li>不是取代OOP编程，而是OOP的补充，和数据库的触发器有点相似</li>
</ul>
<h6 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h6><ul>
<li>Aspect ：配置文件，包括一些Pointcut和相应的Advice</li>
<li>Joint point：在程序中明确定义的点，如方法调用、对类成员访问等</li>
<li>Pointcut：一组joint point, 可以通过逻辑关系/通配符/正则等组合起来，定义了相应advice将要发生的地方</li>
<li>Advice：定义了在pointcut处要发生的动作,通过before/after/around/来关联</li>
<li>weaving：advice代码在具体joint point的关联方式</li>
</ul>
<h6 id="Java的AOP实现"><a href="#Java的AOP实现" class="headerlink" title="Java的AOP实现"></a>Java的AOP实现</h6><ul>
<li>AspectJ(Eclipse)， <a href="https://www.eclipse.org/aspectj/" target="_blank" rel="noopener">https://www.eclipse.org/aspectj/</a></li>
<li>Spring AOP，<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></li>
<li>Spring AOP 与 AspectJ 比较：<a href="https://www.baeldung.com/spring-aop-vs-aspectj" target="_blank" rel="noopener">https://www.baeldung.com/spring-aop-vs-aspectj</a></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM虚拟机</title>
    <url>/articles/18701caa.html</url>
    <content><![CDATA[<h4 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h4><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p>
<a id="more"></a>
<h5 id="java从编码到执行"><a href="#java从编码到执行" class="headerlink" title="java从编码到执行"></a>java从编码到执行</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Java从编码到执行.png" alt="Java从编码到执行"></p>
<h5 id="JVM：从跨平台的语言到跨语言的平台"><a href="#JVM：从跨平台的语言到跨语言的平台" class="headerlink" title="JVM：从跨平台的语言到跨语言的平台"></a>JVM：从跨平台的语言到跨语言的平台</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/跨平台语言与跨语言平台.png" alt="从跨平台的语言到跨语言的平台"></p>
<h5 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h5><p>java虚拟机 java virtual machine </p>
<h6 id="JVM是一种规范"><a href="#JVM是一种规范" class="headerlink" title="JVM是一种规范"></a>JVM是一种规范</h6><ul>
<li>java虚拟机规范 java virtual machine specifications</li>
</ul>
<h6 id="JVM是虚构出来的一台计算机"><a href="#JVM是虚构出来的一台计算机" class="headerlink" title="JVM是虚构出来的一台计算机"></a>JVM是虚构出来的一台计算机</h6><ul>
<li>字节码指令集（汇编语言）</li>
<li>内存管理：栈 堆 方法区等</li>
</ul>
<h6 id="JVM分代模型"><a href="#JVM分代模型" class="headerlink" title="JVM分代模型"></a>JVM分代模型</h6><ul>
<li>新生代（Young Generation）</li>
<li>老年代（(Old Generation）</li>
<li><del>持久代（Permanent Generation）</del>：用于存储静态文件</li>
</ul>
<p>JDK 8 中已经把持久代（PermGen Space）移除了，取而代之的元空间（Metaspace）。Metaspace占用的是本地内存，不再占用虚拟机内存。</p>
<h5 id="JVM与class文件格式"><a href="#JVM与class文件格式" class="headerlink" title="JVM与class文件格式"></a>JVM与class文件格式</h5><p>JVM与java无关，任何语言都可以通过编译成字节码文件在JVM上运行。</p>
<pre class="mermaid">graph LR;
A[任何语言]-->B(class字节码)-->C[JVM虚拟机]</pre>

<h5 id="常见的JVM实现"><a href="#常见的JVM实现" class="headerlink" title="常见的JVM实现"></a>常见的JVM实现</h5><h6 id="Hotspot"><a href="#Hotspot" class="headerlink" title="Hotspot"></a>Hotspot</h6><ul>
<li>Oracle官方，做实验用的JVM</li>
<li>java -version</li>
</ul>
<h6 id="Jrockit"><a href="#Jrockit" class="headerlink" title="Jrockit"></a>Jrockit</h6><ul>
<li>BEA公司开发，曾经号称世界上最快的JVM</li>
<li>被Oracle收购</li>
</ul>
<h6 id="J9-IBM"><a href="#J9-IBM" class="headerlink" title="J9-IBM"></a>J9-IBM</h6><p>IBM公司开发，类似于Hotspot，主要用于IBM自己的产品。</p>
<h6 id="Microsoft-VM"><a href="#Microsoft-VM" class="headerlink" title="Microsoft VM"></a>Microsoft VM</h6><p>微软虚拟机</p>
<h6 id="TaobaoVM"><a href="#TaobaoVM" class="headerlink" title="TaobaoVM"></a>TaobaoVM</h6><p>Hotspot深度定制版</p>
<h6 id="LiquidVM"><a href="#LiquidVM" class="headerlink" title="LiquidVM"></a>LiquidVM</h6><p>直接针对硬件</p>
<h6 id="azul-zing"><a href="#azul-zing" class="headerlink" title="azul zing"></a>azul zing</h6><p>最新垃圾回收的行业标杆</p>
<h5 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK-JRE-JVM"></a>JDK-JRE-JVM</h5><p>JDK：开发集成工具+jre，java开发工具包，部署java开发环境</p>
<p>JRE：核心库+JVM，运行java环境</p>
<p>JVM：运行最终的字节码文件</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/JDK-JRE-JVM.png" alt="JDK-JRE-JVM"></p>
<h4 id="Garbage-Collector-与-GC-tuning"><a href="#Garbage-Collector-与-GC-tuning" class="headerlink" title="Garbage Collector 与 GC tuning"></a>Garbage Collector 与 GC tuning</h4><p>垃圾回收与垃圾回收调优</p>
<h5 id="垃圾的定义"><a href="#垃圾的定义" class="headerlink" title="垃圾的定义"></a>垃圾的定义</h5><p>内存</p>
<ul>
<li>多删</li>
<li>忘删：内存泄漏（Memory Leak）</li>
</ul>
<p>JVM中GC自动回收垃圾</p>
<h6 id="java与c-垃圾回收比较"><a href="#java与c-垃圾回收比较" class="headerlink" title="java与c++垃圾回收比较"></a>java与c++垃圾回收比较</h6><p>java</p>
<ul>
<li>GC处理垃圾</li>
<li>开发效率高，执行效率低</li>
</ul>
<p>C++</p>
<ul>
<li>手动处理垃圾</li>
<li>忘记回收：内存泄漏</li>
<li>回收多次：非法访问</li>
<li>开发效率低，执行效率高</li>
</ul>
<h5 id="垃圾的定位"><a href="#垃圾的定位" class="headerlink" title="垃圾的定位"></a>垃圾的定位</h5><p>垃圾是如何定位的</p>
<h6 id="Reference-Count-算法"><a href="#Reference-Count-算法" class="headerlink" title="Reference Count 算法"></a>Reference Count 算法</h6><p>引用计数</p>
<p>在空引用时进行回收</p>
<p>缺陷：RC不能解决循环引用的问题（一堆垃圾）</p>
<h6 id="Root-Searching-根可达算法"><a href="#Root-Searching-根可达算法" class="headerlink" title="Root Searching 根可达算法"></a>Root Searching 根可达算法</h6><p>由根节点可以连接到达为有效对象，其他的视为垃圾。</p>
<p>以下可视为根节点</p>
<ul>
<li>JVM stack    main方法的栈帧</li>
<li>native method  stack 本地方法栈</li>
<li>runtime constant pool 运行时的常量池</li>
<li>static references in method area 方法区内静态引用对象</li>
<li>Clazz 类对象</li>
</ul>
<p>GC roots：线程变量、静态变量、常量池、JNI指针</p>
<p>注意：</p>
<p>Java 不采用RC（Reference Count）算法，而是采用RS（Root Searching）算法。</p>
<h5 id="常见垃圾回收算法"><a href="#常见垃圾回收算法" class="headerlink" title="常见垃圾回收算法"></a>常见垃圾回收算法</h5><p>常见GC 算法</p>
<ul>
<li>Mark-Sweep 标记清除</li>
<li>Copying 拷贝</li>
<li>Mark-Compact 标记压缩</li>
</ul>
<h6 id="Mark-Sweep-标记清除"><a href="#Mark-Sweep-标记清除" class="headerlink" title="Mark-Sweep 标记清除"></a>Mark-Sweep 标记清除</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Sweep-1.png" alt="Mark Sweep算法"></p>
<p>标记清除算法流程</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Sweep-2.png" alt="Mark Sweep算法"></p>
<p>优点：</p>
<ul>
<li>算法相对简单</li>
<li>存活对象比较多的情况下效率较高</li>
</ul>
<p>缺点：</p>
<ul>
<li>扫描两次，效率偏低</li>
<li>容易产生碎片化：不能存放连续的对象</li>
</ul>
<h6 id="Copying-复制"><a href="#Copying-复制" class="headerlink" title="Copying 复制"></a>Copying 复制</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Copying-1.png" alt="Copying算法"></p>
<p>复制算法流程</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Copying-2.png" alt="Copying算法"></p>
<p>优点：</p>
<ul>
<li>适用于存活对象较少的情况</li>
<li>只扫描一次，效率提高</li>
<li>没有碎片</li>
</ul>
<p>缺点：</p>
<ul>
<li>空间浪费，每次只有一半内存被使用</li>
<li>移动复制对象，需要调整对象的引用</li>
</ul>
<h6 id="Mark-Compact-标记压缩"><a href="#Mark-Compact-标记压缩" class="headerlink" title="Mark Compact 标记压缩"></a>Mark Compact 标记压缩</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Compact-1.png" alt="Mark Compact算法"></p>
<p>标记压缩算法流程</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Compact-2.png" alt="Mark Compact算法"></p>
<p>优点：</p>
<ul>
<li>不会产生碎片，方便对象分配</li>
<li>不会产生内存减半</li>
</ul>
<p>缺点：</p>
<ul>
<li>扫描两次</li>
<li>需要移动对象，效率偏低</li>
</ul>
<h5 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h5><ul>
<li><p>JDK 1.8默认 PS+PO</p>
</li>
<li><p>JDK 1.9 10 11 12 13 默认G1</p>
</li>
</ul>
<h6 id="常见垃圾回收器分类"><a href="#常见垃圾回收器分类" class="headerlink" title="常见垃圾回收器分类"></a>常见垃圾回收器分类</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/垃圾收集器分类.png" alt="垃圾收集器分类"></p>
<p>Young、Old 分代模型，新生代和老生代配合使用</p>
<ul>
<li>ParNew+CMS</li>
<li>ParNew+Serial Old</li>
<li>Serial+Serial Old</li>
<li>Serial+CMS+Serial Old</li>
<li>Parallel Scavenge+Parallel Old</li>
<li>Parallel Scavenge+Serial Old</li>
</ul>
<p>G1：物理上不分代，逻辑上分代</p>
<h6 id="堆内存逻辑分区（不适用不分代垃圾收集器）"><a href="#堆内存逻辑分区（不适用不分代垃圾收集器）" class="headerlink" title="堆内存逻辑分区（不适用不分代垃圾收集器）"></a>堆内存逻辑分区（不适用不分代垃圾收集器）</h6><p>新生代大量死去，少量存活，采用复制算法</p>
<p>老年代存活率高，回收较少，采用MC（Mark Compact）或MS（Mark Sweep）</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/堆内存逻辑分区.png" alt="堆内存逻辑分区"></p>
<p>CMS：经过6次GC—&gt;老年代</p>
<p>其他：经过15次GC</p>
<h6 id="GC概念"><a href="#GC概念" class="headerlink" title="GC概念"></a>GC概念</h6><p>MinorGC/YGC：年轻代空间耗尽时触发</p>
<p>MajorGC/FullGC：在老年代无法继续分配空间时触发，新生代老年代同时进行回收</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/GC概念.png" alt="GC概念"></p>
<h6 id="GC详解"><a href="#GC详解" class="headerlink" title="GC详解"></a>GC详解</h6><p>栈上分配</p>
<ul>
<li>线程私有小对象</li>
<li>无逃逸：栈中存在引用</li>
<li>支持标量替换</li>
<li>无需调整</li>
</ul>
<p>线程本地分配TLAB（Thread Local Allocation Buffer）</p>
<ul>
<li>占用eden，默认1%</li>
<li>多线程的时候不用竞争eden就可以申请空间，提高效率</li>
<li>小对象</li>
<li>无需调整</li>
</ul>
<p>Old 老年代</p>
<ul>
<li>大对象</li>
</ul>
<p>eden 伊甸：对象刚出生时，刚new的时候</p>
<h6 id="YGC与FGC"><a href="#YGC与FGC" class="headerlink" title="YGC与FGC"></a>YGC与FGC</h6><p>YGC</p>
<ul>
<li>Young GC Minor（辅助） GC</li>
<li>Eden区不足</li>
</ul>
<p>FGC</p>
<ul>
<li>Full GC Major GC</li>
<li>Old空间不足</li>
<li>System.gc()</li>
</ul>
<h6 id="对象何时进入老年代"><a href="#对象何时进入老年代" class="headerlink" title="对象何时进入老年代"></a>对象何时进入老年代</h6><p>超过<code>XX:MaxTenuringThreshold</code>指定次数（YGC）</p>
<ul>
<li>Parallel Scavenge 经过15次GC进入老年代</li>
<li>CMS 经过6次GC进入老年代</li>
<li>G1 经过15次GC进入老年代</li>
</ul>
<p>动态年龄</p>
<ul>
<li>s1 - &gt; s2超过50%</li>
<li>把年龄最大的放入O（老年代）</li>
</ul>
<p>通过参数：<code>-XX:MaxTenuringThreshold</code>配置</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/一个对象从出生到消亡.png" alt="一个对象从出生到消亡"></p>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/GC总结.png" alt="GC总结"></p>
<h6 id="ParNew垃圾回收器"><a href="#ParNew垃圾回收器" class="headerlink" title="ParNew垃圾回收器"></a>ParNew垃圾回收器</h6><p>PS（Parallel Scavenge）的变种，用来配合CMS使用。</p>
<ul>
<li>a stop-thr-world,copying collector with uses multiple GC threads.</li>
<li>It differs from “Parallel Scavenge” in that it has enhancements that make it uasable with CMS.</li>
<li>For example,”ParNew” doses the synchronization needed so that it can run during thr concurrent phases of CMS.</li>
<li>默认线程数位CPU的核数</li>
</ul>
<h6 id="Serial垃圾回收器与Serial-Old垃圾回收器"><a href="#Serial垃圾回收器与Serial-Old垃圾回收器" class="headerlink" title="Serial垃圾回收器与Serial Old垃圾回收器"></a>Serial垃圾回收器与Serial Old垃圾回收器</h6><p>此种组合基本不使用，效率太低</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Serial.png" alt="Serial"></p>
<ul>
<li>串行</li>
<li>STW</li>
<li>单线程拷贝算法（工作在年轻代）</li>
</ul>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Serial-Old.png" alt="Serial-Old"></p>
<h6 id="Parallel-Scavenge垃圾回收器"><a href="#Parallel-Scavenge垃圾回收器" class="headerlink" title="Parallel Scavenge垃圾回收器"></a>Parallel Scavenge垃圾回收器</h6><ul>
<li>STW</li>
<li>多线程拷贝算法</li>
</ul>
<h6 id="Parallel-Old垃圾回收器"><a href="#Parallel-Old垃圾回收器" class="headerlink" title="Parallel Old垃圾回收器"></a>Parallel Old垃圾回收器</h6><p>A compacting collector that uses multiple GC threads.</p>
<ul>
<li>多线程压缩算法（工作在老年代）</li>
</ul>
<h6 id="CMS垃圾回收器"><a href="#CMS垃圾回收器" class="headerlink" title="CMS垃圾回收器"></a>CMS垃圾回收器</h6><ul>
<li>并发标记清理concurrent mark sweep</li>
<li>高并发低停顿收集器a mostly concurrent，low-pause collector</li>
<li>4个阶段（从线程角度）<ol>
<li>初始标记initial mark</li>
<li>并发标记concurrent mark</li>
<li>重新标记remark</li>
<li>并发清理concurrent sweep</li>
</ol>
</li>
</ul>
<h6 id="CMS垃圾回收器缺点"><a href="#CMS垃圾回收器缺点" class="headerlink" title="CMS垃圾回收器缺点"></a>CMS垃圾回收器缺点</h6><ul>
<li>memory fragmentation<ul>
<li>-XX:CMSFullGCsBeforeCompaction</li>
</ul>
</li>
<li>floating garbage<ul>
<li>Concurrent Mode Failure -XX:CMSInitiatingOccupancyFraction 92%</li>
<li>SerialOld</li>
</ul>
</li>
</ul>
<h6 id="CMS-Remark阶段的算法"><a href="#CMS-Remark阶段的算法" class="headerlink" title="CMS Remark阶段的算法"></a>CMS Remark阶段的算法</h6><p>三色扫描算法：白灰黑</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/三色标记算法.png" alt="三色标记算法"></p>
<p>在并发按标记时，引用可能产生变化，白色对象有可能被错误回收</p>
<p>解决方案</p>
<ul>
<li>SATB<ul>
<li>在起始的时候做一个快照 snapshot at the beginning</li>
<li>当B-&gt;D消失时，要把这个引用推到GC的堆栈，保证D还能被GC扫描到</li>
<li>配合RSet，只用扫描哪些Region引用到D这个Region（区域）了</li>
</ul>
</li>
<li>Incremental Update<ul>
<li>当一个白色对象被一个黑色对象引用</li>
<li>将黑色对象重新标记为灰色，让collector重新扫描</li>
<li>这个容易产生问题，比如 A a， A b 都已经标记完，但是 A  a - D了，A成为灰色，这时mutator（设置方法）把A a 标记完了，又把 A变成了黑色</li>
<li>这也是为什么CMS的final mark必须再扫描一遍地原因</li>
</ul>
</li>
</ul>
<h5 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h5><h6 id="什么是调优"><a href="#什么是调优" class="headerlink" title="什么是调优"></a>什么是调优</h6><ol>
<li>根据需求进行JVM规划和预调优</li>
<li>优化运行JVM运行环境（慢、卡顿）</li>
<li>解决JVM运行过程中出现的任何问题（OOM）</li>
</ol>
<h6 id="调优方式"><a href="#调优方式" class="headerlink" title="调优方式"></a>调优方式</h6><p>简单粗暴的调优方式：重启</p>
<p>在线调优</p>
<h5 id="JVM命令行参数"><a href="#JVM命令行参数" class="headerlink" title="JVM命令行参数"></a>JVM命令行参数</h5><p>HotSpot参数分类</p>
<ul>
<li><p>标准：<code>-</code>开头，所有的HotSpot都支持</p>
</li>
<li><p>非标准：<code>-X</code>开头，特定版本HotSpot支持特定命令</p>
</li>
<li><p>不稳定：<code>-XX</code>开头，下个版本可能取消</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java 								# 列出所有的HotSpot都支持的命令</span><br><span class="line"></span><br><span class="line">java -X								# 列出特定版本HotSpot支持的特定命令</span><br><span class="line"></span><br><span class="line">Java -XX:+PrintFlagsWithComments	# 只有debug版本能用</span><br><span class="line">java -XX:+PrintFlagsFinal			# 列出所有不稳定命令</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="JVM调优实战"><a href="#JVM调优实战" class="headerlink" title="JVM调优实战"></a>JVM调优实战</h5><p>将xms（程序启动时初始内存大小），xmx（程序运行时最大可用内存大小）设置成一致的好处是可以防止内存抖动。</p>
<h6 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h6><p>OOM（Out Of Memory）：内存泄漏、内存溢出</p>
<p>当程序的GC垃圾回收在执行，而Memory只增不降，需要进行调优。</p>
<p>当执行到一定时间时，最终频繁Full GC ，每次GC只会回收2kB或1kB。</p>
<h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h6><p>阿里开源JVM在线调优工具 arthas</p>
<p>文档：<a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">Arthas</a></p>
<p>Arthas无法替代JVM唯一的命令jmap</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top # 类似于任务管理器，通过此命令找到java程序运行的端口号</span><br><span class="line">top -Hp 1196 # 可以查看该进程下各个线程的cpu使用情况；</span><br><span class="line">jps # 用于查询正在运行的JVM进程</span><br><span class="line">jstat # 可以实时显示本地或远程JVM进程中类装载、内存、垃圾收集、JIT编译等数据</span><br><span class="line">jmap -histo 1196 | head -20		# 1196为运行端口号，以实际为主，20为获取前面的数据</span><br></pre></td></tr></table></figure>
<p>问题：当服务器cpu出现飙高怎么处理</p>
<ol>
<li>业务线程：列出堆栈，通过<code>jmap</code>命令找到占用内存最高的对象，无法进行GC处理掉的对象，查看代码，进行调整。</li>
<li>GC线程：通过在线调优工具进行排查</li>
</ol>
<p>导致Full GC的原因：</p>
<ul>
<li>年老代（Old）被写满</li>
<li>持久代（Perm）被写满</li>
<li><code>System.gc()</code>被显示调用</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java--xml文件解析</title>
    <url>/articles/7fb4a625.html</url>
    <content><![CDATA[<h5 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h5><p>xml解析方式有DOM、SAX、Stax三种方式</p>
<p>树结构</p>
<ul>
<li>DOM: Document Object Model 文档对象模型，擅长(小规模)读/写</li>
</ul>
<p>流结构</p>
<ul>
<li>SAX: Simple API for XML 流机制解释器(推模式)，擅长读</li>
<li>Stax: The Streaming API for XML 流机制解释器(拉模式)，擅长读， JDK 6 引入</li>
</ul>
<a id="more"></a>
<h6 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h6><p>DOM 是 W3C 处理 XML 的标准 API</p>
<ul>
<li>直观易用</li>
<li>其处理方式是将 XML 整个作为类似树结构的方式读入内存中以 便操作及解析，方便修改</li>
<li>解析大数据量的 XML 文件，会遇到内存泄露及程序崩溃的风险</li>
</ul>
<blockquote>
<p>DOM 类</p>
<ul>
<li>DocumentBuilder 解析类，parse方法</li>
<li>Node 节点主接口，getChildNodes返回一个NodeList</li>
<li>NodeList 节点列表，每个元素是一个Node</li>
<li>Document 文档根节点 </li>
<li>Element 标签节点元素 (每一个标签都是标签节点) </li>
<li>Text节点 (包含在XML元素内的，都算Text节点) </li>
<li>Attr节点(每个属性节点)</li>
</ul>
<p>读取xml文件：fonts.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fonts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">id</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>宋体<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">size</span>&gt;</span>18<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>微软雅黑<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">size</span>&gt;</span>12<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">id</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>正楷<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">size</span>&gt;</span>16<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">fonts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>DomReader.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        recursiveTraverse();</span><br><span class="line">        System.out.println(<span class="string">"--------------------分割线--------------------"</span>);</span><br><span class="line">        traverseBySearch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历xml文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursiveTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//采用DOM解析xml文件</span></span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            Document document = db.parse(<span class="string">"fonts.xml"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取所有一级子节点</span></span><br><span class="line">            NodeList childNodes = document.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childNodes.getLength(); i++) &#123; <span class="comment">//1=&lt;fonts&gt;</span></span><br><span class="line">                Node font = childNodes.item(i);</span><br><span class="line">                NodeList fontList = font.getChildNodes();   <span class="comment">//获取所有二级子节点</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; fontList.getLength(); j++) &#123;    <span class="comment">//7=4个空格+3*&lt;font&gt;</span></span><br><span class="line">                    Node fontItem = fontList.item(j);</span><br><span class="line">                    <span class="keyword">if</span> (font.getNodeType() == Node.ELEMENT_NODE) &#123;  <span class="comment">//获取内容</span></span><br><span class="line">                        NodeList fontChildNodes = fontItem.getChildNodes();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; fontChildNodes.getLength(); k++) &#123;  <span class="comment">//5=3个空格+&lt;name&gt;+&lt;size&gt;</span></span><br><span class="line">                            Node fontNode = fontChildNodes.item(k);</span><br><span class="line">                            <span class="keyword">if</span> (fontNode.getNodeType() == Node.ELEMENT_NODE) &#123;  <span class="comment">//获取内容</span></span><br><span class="line">                                System.out.println(fontNode.getNodeName() + <span class="string">":"</span> + fontNode.getTextContent());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException | SAXException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过标签名查找元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverseBySearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//采用DOM解析xml文件</span></span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            Document document = db.parse(<span class="string">"fonts.xml"</span>);</span><br><span class="line"></span><br><span class="line">            Element rootElement = document.getDocumentElement();</span><br><span class="line">            NodeList nodeList = rootElement.getElementsByTagName(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nodeList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">                    Element element = (Element) nodeList.item(i);</span><br><span class="line">                    System.out.println(element.getNodeName() + <span class="string">":"</span> + element.getTextContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException | IOException | SAXException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>写xml文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            Document document = db.newDocument();   <span class="comment">//创建document结点</span></span><br><span class="line">            <span class="keyword">if</span> (document != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//通过document结点创建元素</span></span><br><span class="line">                Element docx = document.createElement(<span class="string">"document"</span>);</span><br><span class="line">                Element element = document.createElement(<span class="string">"element"</span>);</span><br><span class="line">                element.setAttribute(<span class="string">"type"</span>, <span class="string">"paragraph"</span>);  <span class="comment">//设置属性</span></span><br><span class="line">                element.setAttribute(<span class="string">"alignment"</span>, <span class="string">"left"</span>);</span><br><span class="line"></span><br><span class="line">                Element object = document.createElement(<span class="string">"object"</span>);</span><br><span class="line">                object.setAttribute(<span class="string">"type"</span>, <span class="string">"text"</span>);</span><br><span class="line"></span><br><span class="line">                Element text = document.createElement(<span class="string">"text"</span>);</span><br><span class="line">                text.appendChild(document.createTextNode(<span class="string">"This is text node"</span>)); <span class="comment">//元素赋值</span></span><br><span class="line"></span><br><span class="line">                Element bold = document.createElement(<span class="string">"bold"</span>);</span><br><span class="line">                bold.appendChild(document.createTextNode(<span class="string">"true"</span>));  <span class="comment">//元素赋值</span></span><br><span class="line"></span><br><span class="line">                object.appendChild(text);   <span class="comment">//挂载</span></span><br><span class="line">                object.appendChild(bold);</span><br><span class="line">                element.appendChild(object);</span><br><span class="line">                docx.appendChild(element);</span><br><span class="line">                document.appendChild(docx);</span><br><span class="line"></span><br><span class="line">                TransformerFactory transformerFactory = TransformerFactory.newInstance();</span><br><span class="line">                Transformer transformer = transformerFactory.newTransformer();</span><br><span class="line"></span><br><span class="line">                DOMSource source = <span class="keyword">new</span> DOMSource(document); <span class="comment">//将结点转化成dom资源</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//创建目标文件</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(<span class="string">"dom.xml"</span>);</span><br><span class="line">                StreamResult streamResult = <span class="keyword">new</span> StreamResult(file);</span><br><span class="line">                <span class="comment">//将xml内容写入文件中</span></span><br><span class="line">                transformer.transform(source, streamResult);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException | TransformerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>生成的xml文件：dom.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">alignment</span>=<span class="string">"left"</span> <span class="attr">type</span>=<span class="string">"paragraph"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>This is text node<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h6><p>Simple API for XML</p>
<ul>
<li>采用事件/流模型来解析 XML 文档，更快速、更轻量。 </li>
<li>有选择的解析和访问，不像 DOM 加载整个文档，内存要求较低。 – SAX 对 XML 文档的解析为一次性读取，不创建/不存储文档对象，很难同时访问文档中的多处数据。 </li>
<li>推模型 当它每发现一个节点就引发一个事件，而我们需要编写 这些事件的处理程序。</li>
<li>关键类 DefaultHandler</li>
</ul>
<blockquote>
<p>SAXHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 处理xml文档内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SAXHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; nameList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isName = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getNameList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nameList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//xml文档加载时</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start document"</span>);</span><br><span class="line">        nameList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//xml文档解析结束</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"end document"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问某一个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start element"</span>);</span><br><span class="line">        <span class="keyword">if</span> (qName.equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">            isName = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结束访问某一个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"end element"</span>);</span><br><span class="line">        <span class="keyword">if</span> (isName) &#123;</span><br><span class="line">            isName = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问元素正文</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isName) &#123;</span><br><span class="line">            String name = <span class="keyword">new</span> String(ch, start, length);</span><br><span class="line">            nameList.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>XmlSAXReader.java 测试读文件 fonts.xml</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlSAXReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SAXException, IOException </span>&#123;</span><br><span class="line">        XMLReader parser = XMLReaderFactory.createXMLReader();</span><br><span class="line">        SAXHandler handler = <span class="keyword">new</span> SAXHandler();</span><br><span class="line">        parser.setContentHandler(handler);</span><br><span class="line">        parser.parse(<span class="string">"fonts.xml"</span>);</span><br><span class="line">        System.out.println(handler.getNameList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="Stax"><a href="#Stax" class="headerlink" title="Stax"></a>Stax</h6><p>Streaming API for XML</p>
<ul>
<li>流模型中的拉模型</li>
<li>在遍历文档时，会把感兴趣的部分从读取器中拉出，不需要引发 事件，允许我们选择性地处理节点。这大大提高了灵活性，以及整体效率</li>
<li>两套处理API <ul>
<li>基于指针的API， XMLStreamReader</li>
<li>基于迭代器的API，XMLEventReader</li>
</ul>
</li>
</ul>
<blockquote>
<p>测试读取xml文件</p>
<p>事件模式 和 流模式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaxReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        staxReaderByEvent();</span><br><span class="line">        System.out.println(<span class="string">"-------------分割线-------------"</span>);</span><br><span class="line">        staxReaderByStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staxReaderByEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String xmlFile = <span class="string">"fonts.xml"</span>;</span><br><span class="line">        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();</span><br><span class="line">        <span class="keyword">boolean</span> isName = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建基于迭代器的事件读取器对象</span></span><br><span class="line">            XMLEventReader xmlEventReader = xmlInputFactory.createXMLEventReader(<span class="keyword">new</span> FileReader(xmlFile));</span><br><span class="line">            <span class="comment">//遍历event迭代器</span></span><br><span class="line">            <span class="keyword">while</span> (xmlEventReader.hasNext()) &#123;</span><br><span class="line">                XMLEvent xmlEvent = xmlEventReader.nextEvent();</span><br><span class="line">                <span class="comment">//事件对象是元素的开始</span></span><br><span class="line">                <span class="keyword">if</span> (xmlEvent.isStartElement()) &#123;</span><br><span class="line">                    <span class="comment">//转换为开始元素事件对象</span></span><br><span class="line">                    StartElement startElement = xmlEvent.asStartElement();</span><br><span class="line">                    <span class="keyword">if</span> (startElement.getName().getLocalPart().equals(<span class="string">"name"</span>))</span><br><span class="line">                        isName = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//获取所有属性</span></span><br><span class="line">                    Iterator attr = startElement.getAttributes();</span><br><span class="line">                    <span class="keyword">while</span> (attr.hasNext())</span><br><span class="line">                        System.out.println(attr.next());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//事件对象是正文</span></span><br><span class="line">                <span class="keyword">if</span> (xmlEvent.isCharacters()) &#123;</span><br><span class="line">                    <span class="comment">//获取正文内容</span></span><br><span class="line">                    String data = xmlEvent.asCharacters().getData();</span><br><span class="line">                    <span class="comment">//打印内容</span></span><br><span class="line">                    <span class="keyword">if</span> (isName &amp;&amp; data != <span class="keyword">null</span> &amp;&amp; data.trim().length() != <span class="number">0</span>)</span><br><span class="line">                        System.out.println(data);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//事件对象是元素结束</span></span><br><span class="line">                <span class="keyword">if</span> (xmlEvent.isEndElement()) &#123;</span><br><span class="line">                    <span class="comment">//将事件对象转换成元素结束</span></span><br><span class="line">                    EndElement endElement = xmlEvent.asEndElement();</span><br><span class="line">                    <span class="keyword">if</span> (endElement.getName().getLocalPart().equals(<span class="string">"name"</span>))</span><br><span class="line">                        isName = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//结束</span></span><br><span class="line">            xmlEventReader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException | XMLStreamException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staxReaderByStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String xmlFile = <span class="string">"fonts.xml"</span>;</span><br><span class="line">        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();</span><br><span class="line">        XMLStreamReader xmlStreamReader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xmlStreamReader = xmlInputFactory.createXMLStreamReader(<span class="keyword">new</span> FileReader(xmlFile));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XMLStreamException | FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//基于指针的遍历</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xmlStreamReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (xmlStreamReader.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">int</span> event = xmlStreamReader.next();</span><br><span class="line">                    <span class="comment">//元素的开始</span></span><br><span class="line">                    <span class="keyword">if</span> (event == XMLStreamConstants.START_ELEMENT)</span><br><span class="line">                        <span class="comment">//打印&lt;font&gt;的name标签的内容</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"name"</span>.equals(xmlStreamReader.getLocalName()))</span><br><span class="line">                            System.out.println(<span class="string">"name:"</span> + xmlStreamReader.getElementText());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//关流</span></span><br><span class="line">                xmlStreamReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XMLStreamException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="其他的第三方库"><a href="#其他的第三方库" class="headerlink" title="其他的第三方库"></a>其他的第三方库</h6><p>DOM/SAX/Stax是JDK自带的解析功能</p>
<p>第三方库</p>
<ul>
<li>JDOM: <a href="https://www.jdom.org" target="_blank" rel="noopener">https://www.jdom.org</a></li>
<li>DOM4J: <a href="https://dom4j.github.io" target="_blank" rel="noopener">https://dom4j.github.io</a></li>
</ul>
<p>第三方库一般都包含DOM,SAX等多种方式解析，是对Java 解析进行封装</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>Java--反射</title>
    <url>/articles/87b8a7bb.html</url>
    <content><![CDATA[<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>reflection</p>
<ul>
<li>程序可以访问、检测和修改它本身状态或行为的能力，即自描述和自控制。</li>
<li>可以在运行时加载、探知和使用编译期间完全未知的类。</li>
<li>给Java插上动态语言特性的翅膀，弥补强类型语言的不足。</li>
<li><code>java.lang.reflect</code>包，在Java 2就有，在Java 5得到完善</li>
</ul>
<p>功能</p>
<ul>
<li>在运行中分析类的能力</li>
<li>在运行中查看和操作对象<ul>
<li>基于反射自由创建对象</li>
<li>反射构建出无法直接访问的类</li>
<li>set或者get到无法访问的成员变量</li>
<li>调用不可访问的方法</li>
</ul>
</li>
<li>实现通用的数组操作代码</li>
<li>类似函数指针的功能</li>
</ul>
<a id="more"></a>
<h5 id="五种创建对象的方式"><a href="#五种创建对象的方式" class="headerlink" title="五种创建对象的方式"></a>五种创建对象的方式</h5><h6 id="1-静态编码和编译"><a href="#1-静态编码和编译" class="headerlink" title="1.静态编码和编译"></a>1.静态编码和编译</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from A."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接new 调用构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A obj1 = <span class="keyword">new</span> A();</span><br><span class="line">obj1.hello();</span><br></pre></td></tr></table></figure>
<p>2.克隆(clone)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from B."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用克隆的方法创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">B obj2 =<span class="keyword">new</span> B();</span><br><span class="line">obj2.hello();</span><br><span class="line"></span><br><span class="line">B obj3=(B) obj2.clone();</span><br><span class="line">obj3.hello();</span><br></pre></td></tr></table></figure>
<h6 id="3-序列化-serialization-和反序列化-deserialization"><a href="#3-序列化-serialization-和反序列化-deserialization" class="headerlink" title="3.序列化(serialization)和反序列化(deserialization)"></a>3.序列化(serialization)和反序列化(deserialization)</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;  <span class="comment">// 序列化id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from C."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 transient 关键字可以使变量不被序列化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C obj4 = <span class="keyword">new</span> C();</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"data.obj"</span>));</span><br><span class="line">out.writeObject(obj4);</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"data.obj"</span>));</span><br><span class="line">C obj5 = (C) in.readObject();</span><br><span class="line">in.close();</span><br><span class="line">obj5.hello();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：序列化会引发安全漏洞，未来将被移除出JDK</p>
</blockquote>
<h6 id="4-5-反射"><a href="#4-5-反射" class="headerlink" title="4.5.反射"></a>4.5.反射</h6><blockquote>
<p>第四种 通过Class.forName(String className).newInstance();动态获取实例</p>
<p>注意：className 需要加上包名，否则会报 java.lang.ClassNotFoundException 的异常</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj6 = Class.forName(<span class="string">"com.reflection.A"</span>).newInstance();</span><br><span class="line"><span class="comment">// A obj7 = (A) Class.forName("A").newInstance();</span></span><br><span class="line">Method m = Class.forName(<span class="string">"com.reflection.A"</span>).getMethod(<span class="string">"hello"</span>);</span><br><span class="line">m.invoke(obj6);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第五种    newInstance 调用构造函数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;A&gt; constructor = A<span class="class">.<span class="keyword">class</span>.<span class="title">getConstructor</span>()</span>;</span><br><span class="line">A obj8 = constructor.newInstance();</span><br><span class="line">obj8.hello();</span><br></pre></td></tr></table></figure>
<h5 id="反射关键类"><a href="#反射关键类" class="headerlink" title="反射关键类"></a>反射关键类</h5><p>Class：类型标识</p>
<ul>
<li><p>JVM为每个对象都保留其类型标识信息(Runtime Type Identification)</p>
<p>三种获取方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1=<span class="string">"abc"</span>;</span><br><span class="line">Class c1=s1.getClass();</span><br><span class="line">System.out.println(c1.getName());</span><br><span class="line"></span><br><span class="line">Class c2=Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">System.out.println(c2.getName());</span><br><span class="line"></span><br><span class="line">Class c3=String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">System.out.println(c3.getName());</span><br></pre></td></tr></table></figure>
</li>
<li><p>成员变量、方法、构造函数、修饰符、包、父类、父接口…</p>
<ul>
<li><p>成员变量 Field<br>getFields() 获取本类及父类所有的public字段</p>
<p>getDeclaredFields()  获取本类所有声明的字段</p>
</li>
<li><p>成员方法 Method<br>getMethods() 获取public方法，包括父类和父接口<br>getDeclaredMethod() 获取该类所有的方法</p>
</li>
<li><p>构造函数 Constructor</p>
<p>[Class.]getConstructors() 获取本类的所有构造函数</p>
<p>[Constructor.]newInstance(Object …args) 有参和无参构造函数</p>
</li>
<li><p>父类/父接口</p>
<p>[Class.]getSuperClass() 获取父类<br>[Class.]getInterfaces() 获取父接口</p>
</li>
</ul>
</li>
</ul>
<h5 id="反射的应用"><a href="#反射的应用" class="headerlink" title="反射的应用"></a>反射的应用</h5><ul>
<li>数据库连接</li>
<li>数组扩充器 </li>
<li>动态执行方法</li>
<li>Json和Java对象互转</li>
<li>Tomcat的Servlet对象创建</li>
<li>MyBatis的OR/M</li>
<li>Spring的Bean容器</li>
<li>org.reflections包介绍</li>
</ul>
<h6 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h6><p>JDBC：Connection，连接到不同数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建Java和数据库之间的桥梁介质</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">// Class.forName(className,true,currentLoader);</span></span><br><span class="line">    <span class="comment">// 通知类加载器加载此类的class文件</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建Java和数库之间的桥梁：URL，用户名，密码</span></span><br><span class="line">Connection conn = DriverManager.getConnection(url, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">// DriverManager将会挑选加载合适的驱动类，并采用getConnection()方法连接</span></span><br></pre></td></tr></table></figure>
<h6 id="数组扩充"><a href="#数组扩充" class="headerlink" title="数组扩充"></a>数组扩充</h6><p>给定一个数组(任意类型)，扩充指定到长度</p>
<ul>
<li>Java的数组一旦创建，其长度是不再更改的</li>
<li>新建一个大数组(相同类型)，然后将旧数组的内容拷贝过去</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">arrCopy</span><span class="params">(Object oldArray, <span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Array类型</span></span><br><span class="line">    Class clazz = oldArray.getClass();</span><br><span class="line">    <span class="comment">// 获取数组中的单个元素类型</span></span><br><span class="line">    Class componentType = clazz.getComponentType();</span><br><span class="line">    <span class="comment">// 旧数组长度</span></span><br><span class="line">    <span class="keyword">int</span> oldLength = Array.getLength(oldArray);</span><br><span class="line">    <span class="comment">// 创建新数组</span></span><br><span class="line">    Object newArray = Array.newInstance(componentType, newLength);</span><br><span class="line">    <span class="comment">// 拷贝旧数据</span></span><br><span class="line">    System.arraycopy(newArray, <span class="number">0</span>, oldArray, <span class="number">0</span>, oldLength);</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="动态执行方法"><a href="#动态执行方法" class="headerlink" title="动态执行方法"></a>动态执行方法</h6><p>给定类名，方法名，即可执行</p>
<p>加上定时器，即可做定时任务执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Method m= Class.forName(packageName+<span class="string">"Work"</span>).getMethod(<span class="string">"hello"</span>);</span><br><span class="line">            m.invoke(<span class="keyword">null</span>);	<span class="comment">// 静态方法可以不用new对象</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Timer timer=<span class="keyword">new</span> Timer();</span><br><span class="line">Calendar now=Calendar.getInstance();</span><br><span class="line">now.set(Calendar.SECOND,now.get(Calendar.SECOND)+<span class="number">1</span>);</span><br><span class="line">Date runDate=now.getTime();</span><br><span class="line">MyTask task=<span class="keyword">new</span> Task();</span><br><span class="line">timer.scheduleAtFixedRate(task,runDate,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<h6 id="Json和Java对象互转"><a href="#Json和Java对象互转" class="headerlink" title="Json和Java对象互转"></a>Json和Java对象互转</h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line"><span class="comment">// json 字符串转bean对象</span></span><br><span class="line">String s; 	<span class="comment">// 待转换的json字符串</span></span><br><span class="line">[Bean] json=gson.fromJson(s,[Bean.class]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// json bean对象转字符串</span></span><br><span class="line">Bean bean;</span><br><span class="line">String t=gson.toJson(bean,[Bean.class]);</span><br></pre></td></tr></table></figure>
<h6 id="Tomcat的Servlet创建"><a href="#Tomcat的Servlet创建" class="headerlink" title="Tomcat的Servlet创建"></a>Tomcat的Servlet创建</h6><p>详见源码</p>
<h6 id="MyBatis的OR-M"><a href="#MyBatis的OR-M" class="headerlink" title="MyBatis的OR/M"></a>MyBatis的OR/M</h6><p>MyBatis: OR/M(Object-Relation Mapping)<br>数据库表和Java的POJO/DAO类对应关系</p>
<h6 id="Spring-Framework的Bean容器"><a href="#Spring-Framework的Bean容器" class="headerlink" title="Spring Framework的Bean容器"></a>Spring Framework的Bean容器</h6><p>Spring Framework: Java EE的主要框架<br>IoC 的Bean容器(HashMap)</p>
<h6 id="org-reflections"><a href="#org-reflections" class="headerlink" title="org.reflections"></a>org.reflections</h6><p>Reflection的增强工具包</p>
<ul>
<li><a href="https://github.com/ronmamo/reflections" target="_blank" rel="noopener">https://github.com/ronmamo/reflections</a> </li>
<li>Java runtime metadata analysis Java运行时元数据分析<ul>
<li>获取某类的所有子类型</li>
<li>获取有特殊annotation的类型或者成员变量/方法</li>
<li>根据正则表达式获取资源(类/成员变量/方法)</li>
<li>根据组合条件查询相应的方法</li>
</ul>
</li>
</ul>
<h5 id="编译器API"><a href="#编译器API" class="headerlink" title="编译器API"></a>编译器API</h5><p>反射</p>
<ul>
<li>可以查看对象的类型标识</li>
<li>可以动态创建对象、访问其属性，调用其方法</li>
<li><font color="red">前提：类(class文件)必须先存在</font>

</li>
</ul>
<p>编译器API</p>
<ul>
<li>对.java文件即时编译</li>
<li>对字符串即时编译</li>
<li>监听在编译过程中产生的警告和错误</li>
<li>在代码中运行编译器(并非：Runtime命令行调用javac命令)</li>
</ul>
<h6 id="JavaCompiler"><a href="#JavaCompiler" class="headerlink" title="JavaCompiler"></a>JavaCompiler</h6><ul>
<li>自Java 1.6 推出，位于<code>javax.tools</code>包中。</li>
<li>可用在程序文件中的Java编译器接口(代替javac.exe)。</li>
<li>在程序中编译java文件，产生class文件。</li>
<li>run方法(继承自<code>java.tools.Tools</code>)：可以编译java源文件，生成class文件，但不能指定输出路径,监控错误信息, 调用后就在源码所在目录生成class文件。</li>
<li>getTask方法：可以编译java源文件，包括在内存中的java文件(字符串)，生成class文件。</li>
</ul>
<h6 id="Java编译器API作用"><a href="#Java编译器API作用" class="headerlink" title="Java编译器API作用"></a>Java编译器API作用</h6><ul>
<li>Java EE的JSP编译</li>
<li>在线编程环境</li>
<li>在线程序评判系统(Online Judge系统)</li>
<li>自动化的构建和测试工具</li>
</ul>
<h6 id="基于JavaCompiler的集成工具"><a href="#基于JavaCompiler的集成工具" class="headerlink" title="基于JavaCompiler的集成工具"></a>基于JavaCompiler的集成工具</h6><ul>
<li><font color="red">Janino</font>，<a href="http://janino-compiler.github.io/janino" target="_blank" rel="noopener">http://janino-compiler.github.io/janino</a></li>
<li>InMemoryJavaCompile， <a href="https://github.com/trung/InMemoryJavaCompiler" target="_blank" rel="noopener">https://github.com/trung/InMemoryJavaCompiler</a></li>
<li>Java-Runtime-Compiler, <a href="https://github.com/OpenHFT/JavaRuntime-Compiler" target="_blank" rel="noopener">https://github.com/OpenHFT/JavaRuntime-Compiler</a></li>
<li>Apache Commons JCI(Java Compiler Interface), <a href="http://commons.apache.org/proper/commons-jci/index.html" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-jci/index.html</a>，<font color="red">适用于JDK1.5及以前的版本</font></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java--并发编程</title>
    <url>/articles/f0f7baf0.html</url>
    <content><![CDATA[<h4 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h4><h5 id="串行-vs-并行"><a href="#串行-vs-并行" class="headerlink" title="串行 vs 并行"></a>串行 vs 并行</h5><p>业务：任务多，数据量大</p>
<p>串行</p>
<ul>
<li>编程简单，并行编程困难</li>
<li>单个计算核频率下降，计算核数增多，整体性能变高</li>
</ul>
<p>并行困难(任务分配和执行过程<strong>高度耦合</strong>)</p>
<ul>
<li>如何控制粒度，切割任务</li>
<li>如何分配任务给线程，监督线程执行过程</li>
</ul>
<p>并行模式</p>
<ul>
<li>主从模式 (Master-Slave)</li>
<li>Worker模式(Worker-Worker)</li>
</ul>
<p>Java并发编程</p>
<ul>
<li>Thread/Runnable/Thread组管理</li>
<li>Executor框架</li>
<li>Fork-Join框架</li>
</ul>
<a id="more"></a>
<h4 id="线程组ThreadGroup"><a href="#线程组ThreadGroup" class="headerlink" title="线程组ThreadGroup"></a>线程组ThreadGroup</h4><ul>
<li>线程的集合</li>
<li>树形结构，大线程组可以包括小线程组</li>
<li>可以通过<code>enumerate</code>方法遍历组内的线程，执行操作</li>
<li>能够有效管理多个线程，但是<font color="red">管理效率低</font></li>
<li>任务分配和执行过程<font color="red">高度耦合</font></li>
<li>重复创建线程、关闭线程操作，<font color="red">无法重用线程</font></li>
</ul>
<h5 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用线程组管理多个线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程组</span></span><br><span class="line">        ThreadGroup threadGroup = <span class="keyword">new</span> ThreadGroup(<span class="string">"Search"</span>);</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        <span class="comment">//创建线程任务</span></span><br><span class="line">        Searcher searchTask = <span class="keyword">new</span> Searcher(result);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//以searchTask为模板创建线程</span></span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(threadGroup, searchTask);</span><br><span class="line">            thread.start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------分割线----------"</span>);</span><br><span class="line">        <span class="comment">//查看线程组消息</span></span><br><span class="line">        System.out.printf(<span class="string">"active count:%d\n"</span>, threadGroup.activeCount());</span><br><span class="line">        System.out.println(<span class="string">"线程组信息明细"</span>);</span><br><span class="line">        <span class="comment">//打印线程组的所有信息</span></span><br><span class="line">        threadGroup.list();</span><br><span class="line">        System.out.println(<span class="string">"----------分割线----------"</span>);</span><br><span class="line">        <span class="comment">//遍历线程组</span></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[threadGroup.activeCount()];</span><br><span class="line">        <span class="comment">//将线程组中active线程拷贝到数组中</span></span><br><span class="line">        threadGroup.enumerate(threads);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadGroup.activeCount(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Thread %s: %s\n"</span>, threads[i].getName(), threads[i].getState());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------分割线----------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待活动线程数小于10</span></span><br><span class="line">        waitFinish(threadGroup);</span><br><span class="line">        <span class="comment">//线程组发出中断命令</span></span><br><span class="line">        threadGroup.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">waitFinish</span><span class="params">(ThreadGroup threadGroup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (threadGroup.activeCount()&gt;<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="线程模板"><a href="#线程模板" class="headerlink" title="线程模板"></a>线程模板</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Searcher</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Result result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Searcher</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String threadName = Thread.currentThread().getName();</span><br><span class="line">        System.out.printf(<span class="string">"Thread %s start\n"</span>, threadName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doTask();</span><br><span class="line">            result.setName(threadName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Thread %s is interrupted\n"</span>, threadName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"Thread %s finished.\n"</span>, threadName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(<span class="keyword">new</span> Date().getTime());</span><br><span class="line">        <span class="keyword">int</span> value = (<span class="keyword">int</span>) (random.nextDouble() * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">"Thread %s : %d\n"</span>, Thread.currentThread().getName(), value);</span><br><span class="line">        TimeUnit.SECONDS.sleep(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Bean类"><a href="#Bean类" class="headerlink" title="Bean类"></a>Bean类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><blockquote>
<p>输出</p>
<p>Thread Thread-0 start<br>Thread Thread-0 : 6<br>Thread Thread-1 start<br>Thread Thread-1 : 4<br>Thread Thread-2 start<br>Thread Thread-2 : 32<br>Thread Thread-3 start<br>Thread Thread-3 : 23<br>Thread Thread-4 start<br>Thread Thread-4 : 51<br>Thread Thread-1 finished.<br>Thread Thread-5 start<br>Thread Thread-5 : 42<br>Thread Thread-6 start<br>Thread Thread-6 : 21<br>Thread Thread-0 finished.<br>Thread Thread-7 start<br>Thread Thread-7 : 12<br>Thread Thread-8 start<br>Thread Thread-8 : 39<br>Thread Thread-9 start<br>Thread Thread-9 : 30<br>—————分割线—————<br>active count:8<br>线程组信息明细<br>java.lang.ThreadGroup[name=Search,maxpri=10]<br> Thread[Thread-2,5,Search]<br> Thread[Thread-3,5,Search]<br> Thread[Thread-4,5,Search]<br> Thread[Thread-5,5,Search]<br> Thread[Thread-6,5,Search]<br> Thread[Thread-7,5,Search]<br> Thread[Thread-8,5,Search]<br> Thread[Thread-9,5,Search]<br>—————分割线—————<br>Thread Thread-2: TIMED_WAITING<br>Thread Thread-3: TIMED_WAITING<br>Thread Thread-4: TIMED_WAITING<br>Thread Thread-5: TIMED_WAITING<br>Thread Thread-6: TIMED_WAITING<br>Thread Thread-7: TIMED_WAITING<br>Thread Thread-8: TIMED_WAITING<br>Thread Thread-9: TIMED_WAITING<br>—————分割线—————<br>Thread Thread-3 is interrupted<br>Thread Thread-5 is interrupted<br>Thread Thread-8 is interrupted<br>Thread Thread-6 is interrupted<br>Thread Thread-7 is interrupted<br>Thread Thread-4 is interrupted<br>Thread Thread-9 is interrupted<br>Thread Thread-2 is interrupted</p>
<p>Process finished with exit code 0</p>
</blockquote>
<h4 id="Java并发框架Executor"><a href="#Java并发框架Executor" class="headerlink" title="Java并发框架Executor"></a>Java并发框架Executor</h4><p>从JDK 5开始提供Executor FrameWork (==java.util.concurrent.*==)</p>
<ul>
<li>分离任务的创建和执行者的创建</li>
<li>线程重复利用(new线程代价很大)</li>
</ul>
<p>理解共享线程池的概念</p>
<ul>
<li>预设好的多个Thread，可弹性增加</li>
<li>多次执行很多很小的任务</li>
<li>任务创建和执行过程解耦</li>
<li>程序员无需关心线程池执行任务过程</li>
</ul>
<p>主要类：Executor Service, ThreadPoolExecutor，Future</p>
<ul>
<li>Executors.newCachedThreadPool<br>Executors.newFixedThreadPool(指定线程数，一般为CPU核数的2/4倍) 创建线程池</li>
<li>Executor Service 线程池服务</li>
<li>Callable 具体的逻辑对象(线程类)，类似于Runnable接口，有返回值</li>
<li>Future 返回结果</li>
</ul>
<h5 id="Server实例代码"><a href="#Server实例代码" class="headerlink" title="Server实例代码"></a>Server实例代码</h5><ul>
<li>Main类 通过服务器调用100个任务</li>
<li>Server类 线程池管理</li>
<li>Task类 线程具体任务实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个服务器</span></span><br><span class="line">        Server server = <span class="keyword">new</span> Server();</span><br><span class="line">        <span class="comment">//创建100个任务，并发交给执行器，等待完成</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Task task = <span class="keyword">new</span> Task(<span class="string">"Task"</span> + i);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            server.submitTask(task);	<span class="comment">// 提交任务</span></span><br><span class="line">        &#125;</span><br><span class="line">        server.endServer();	<span class="comment">// 关闭服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor executor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建默认的线程池</span></span><br><span class="line">        executor = (ThreadPoolExecutor) Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//创建指定个数的线程池</span></span><br><span class="line">        <span class="comment">//executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(5);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitTask</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Sever: A new task is arrived.\n"</span>);</span><br><span class="line">        <span class="comment">//执行task</span></span><br><span class="line">        executor.execute(task);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"Server: Pool size is %d\n"</span>, executor.getPoolSize());</span><br><span class="line">        System.out.printf(<span class="string">"Server: Active count is %d\n"</span>, executor.getActiveCount());</span><br><span class="line">        System.out.printf(<span class="string">"Server: Completed task is %d\n"</span>, executor.getCompletedTaskCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//结束服务</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> duration = (<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">            System.out.printf(<span class="string">"Thread %s:doing a task during %d seconds\n"</span>, Thread.currentThread().getName(), duration);</span><br><span class="line">            Thread.sleep(duration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"Thread %s is finished on %s.\n"</span>, Thread.currentThread().getName(), <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Callable-Future回调结果实例"><a href="#Callable-Future回调结果实例" class="headerlink" title="Callable+Future回调结果实例"></a>Callable+Future回调结果实例</h5><ul>
<li>SumTest类 实现多线程运行1-1000的求和</li>
<li>SumTask类 每个线程的具体任务实现，并通过Callable回调结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行线程池</span></span><br><span class="line">        ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Future&lt;Integer&gt;&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计1-1000总和，分成10个任务计算，提交任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            SumTask calculator = <span class="keyword">new</span> SumTask(i * <span class="number">100</span> + <span class="number">1</span>, (i + <span class="number">1</span>) * <span class="number">100</span>);</span><br><span class="line">            Future&lt;Integer&gt; result = executor.submit(calculator);   <span class="comment">// 接收任务回调</span></span><br><span class="line">            resultList.add(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每隔50ms，轮询等待10个任务结束</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Main:已经完成%d个任务\n"</span>, executor.getCompletedTaskCount());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; resultList.size(); i++) &#123;</span><br><span class="line">                Future&lt;Integer&gt; result = resultList.get(i);</span><br><span class="line">                System.out.printf(<span class="string">"Main:Task %d : %s\n"</span>, i, result.isDone());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);   <span class="comment">// 休眠50ms</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (executor.getCompletedTaskCount() &lt; resultList.size());</span><br><span class="line">        <span class="comment">// 在所有任务结束，综合计算结果</span></span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Integer&gt; result : resultList) &#123;</span><br><span class="line">            Integer sum = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sum = result.get();</span><br><span class="line">                total += sum;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出最终结果</span></span><br><span class="line">        System.out.println(<span class="string">"1-1000的总和："</span>+total);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义每个线程计算的区间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startNumber;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> endNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(<span class="keyword">int</span> startNumber, <span class="keyword">int</span> endNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startNumber = startNumber;</span><br><span class="line">        <span class="keyword">this</span>.endNumber = endNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startNumber; i &lt;=endNumber; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));   <span class="comment">// 休眠一段时间</span></span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"%s:%d\n"</span>, Thread.currentThread().getName(), sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Java并发框架Fork-Join"><a href="#Java并发框架Fork-Join" class="headerlink" title="Java并发框架Fork-Join"></a>Java并发框架Fork-Join</h4><p> Java 7 提供的一种并行框架：分解、治理、合并(分治编程)</p>
<p>适合用于整体任务量不好确定的场合(最小任务可确定)</p>
<p>关键类</p>
<ul>
<li>ForkJoinPool 任务池</li>
<li>RecursiveAction</li>
<li>RecursiveTask</li>
</ul>
<p>使用Fork-Join框架执行1-10000000的求和</p>
<ul>
<li>SumTest类 线程池管理线程</li>
<li>SumTask类 线程任务分解、治理、合并</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行线程池</span></span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        <span class="comment">//ForkJoinPool pool = new ForkJoinPool(4);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建任务</span></span><br><span class="line">        SumTask task = <span class="keyword">new</span> SumTask(<span class="number">1</span>, <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        ForkJoinTask&lt;Long&gt; result = pool.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待结果,每隔50ms检查一次</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Main:Active Thread Count--&gt;"</span> + pool.getActiveThreadCount());</span><br><span class="line">            System.out.println(<span class="string">"Main:Parallelism--&gt;"</span> + pool.getParallelism());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!task.isDone());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result.get().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threadHold = <span class="number">5</span>; <span class="comment">// 求和最小个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long sum = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果任务足够小就直接执行</span></span><br><span class="line">        <span class="keyword">boolean</span> canCompute = (end - start) &lt;= threadHold;</span><br><span class="line">        <span class="keyword">if</span> (canCompute) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 任务大于阀值，分为2个任务</span></span><br><span class="line">            <span class="keyword">int</span> middle = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            SumTask sumTaskLeft = <span class="keyword">new</span> SumTask(start, middle);</span><br><span class="line">            SumTask sumTaskRight = <span class="keyword">new</span> SumTask(middle + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">            invokeAll(sumTaskLeft, sumTaskRight);</span><br><span class="line"></span><br><span class="line">            Long sumLeft = sumTaskLeft.join();</span><br><span class="line">            Long sumRight = sumTaskRight.join();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并结果</span></span><br><span class="line">            sum = sumLeft + sumRight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Java并发数据结构"><a href="#Java并发数据结构" class="headerlink" title="Java并发数据结构"></a>Java并发数据结构</h4><p>常用的数据结构是线程不安全的</p>
<ul>
<li>ArrayList, HashMap, HashSet 非同步的</li>
<li>多个线程同时读写，可能会抛出异常或数据错误</li>
</ul>
<p>传统Vector，Hashtable等同步集合性能过差</p>
<p>并发数据结构：数据添加和删除</p>
<ul>
<li>阻塞式集合：当集合为空或者满时，等待</li>
<li>非阻塞式集合：当集合为空或者满时，不等待，返回null或异常</li>
</ul>
<h5 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h5><h6 id="List"><a href="#List" class="headerlink" title="List"></a>List</h6><ul>
<li>Vector 同步安全，<font color="red">写多读少</font></li>
<li>ArrayList 不安全</li>
<li>Collections.synchronizedList(List list) 基于synchronized，效率差</li>
<li>CopyOnWriteArrayList <font color="red">读多写少</font>，基于复制机制，非阻塞</li>
</ul>
<h6 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h6><ul>
<li>HashSet 不安全</li>
<li>Collections.synchronizedSet(Set set) 基于synchronized，效率差</li>
<li>CopyOnWriteArraySet (基于CopyOnWriteArrayList实现) <font color="red">读多写少</font>， 非阻塞</li>
</ul>
<h6 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h6><ul>
<li>Hashtable 同步安全，<font color="red">写多读少</font></li>
<li>HashMap 不安全</li>
<li>Collections.synchronizedMap(Map map) 基于synchronized，效率差</li>
<li>ConcurrentHashMap <font color="red">读多写少</font>，非阻塞</li>
</ul>
<h6 id="Queue-amp-Deque-JDK-1-5-提出"><a href="#Queue-amp-Deque-JDK-1-5-提出" class="headerlink" title="Queue &amp; Deque (JDK 1.5 提出)"></a>Queue &amp; Deque (JDK 1.5 提出)</h6><ul>
<li>ConcurrentLinkedQueue 非阻塞</li>
<li>ArrayBlockingQueue/LinkedBlockingQueue 阻塞</li>
</ul>
<h4 id="Java并发协作控制"><a href="#Java并发协作控制" class="headerlink" title="Java并发协作控制"></a>Java并发协作控制</h4><p>Thread/Executor/Fork-Join</p>
<ul>
<li>线程启动，运行，结束</li>
<li>线程之间缺少协作</li>
</ul>
<p>synchronized 同步</p>
<ul>
<li>限定只有一个线程才能进入关键区</li>
<li>简单粗暴，<font color="red">性能损失有点大</font></li>
</ul>
<h5 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h5><p>Lock也可以实现同步的效果</p>
<ul>
<li>实现更复杂的临界区结构</li>
<li>tryLock方法可以预判锁是否空闲</li>
<li>允许分离读写的操作，多个读，一个写</li>
<li>性能更好 </li>
</ul>
<p>ReentrantLock类，可重入的互斥锁</p>
<p>ReentrantReadWriteLock类，可重入的读写锁</p>
<p>lock和unlock函数</p>
<h5 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h5><p>信号量，由1965年Dijkstra提出的</p>
<p>信号量：本质上是一个计数器</p>
<p>计数器大于0，可以使用，等于0不能使用</p>
<p>可以设置多个并发量，例如限制10个访问</p>
<p>Semaphore</p>
<ul>
<li>acquire获取</li>
<li>release释放</li>
</ul>
<p>比Lock更进一步，可以控制多个同时访问关键区</p>
<h6 id="SemaphoreExample"><a href="#SemaphoreExample" class="headerlink" title="SemaphoreExample"></a>SemaphoreExample</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量，车位数为5</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore placeSemaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5个车位，10辆车需要停放，每次停放时，去申请信号量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tryToParkCnt = <span class="number">10</span>;</span><br><span class="line">        SemaphoreExample semaphoreExample = <span class="keyword">new</span> SemaphoreExample();</span><br><span class="line">        Thread[] parker = <span class="keyword">new</span> Thread[tryToParkCnt];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tryToParkCnt; i++) &#123;</span><br><span class="line">            parker[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">long</span> randomTime = (<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">                    Thread.sleep(randomTime);</span><br><span class="line">                    <span class="keyword">if</span> (semaphoreExample.parking()) &#123;</span><br><span class="line">                        <span class="keyword">long</span> parkingTime = (<span class="keyword">long</span>) (Math.random() * <span class="number">1200</span>);</span><br><span class="line">                        Thread.sleep(parkingTime);</span><br><span class="line">                        semaphoreExample.leaving();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            parker[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tryToParkCnt; i++) &#123;</span><br><span class="line">            parker[i].join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">parking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (placeSemaphore.tryAcquire()) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":停车成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":没有空位"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaving</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        placeSemaphore.release();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">":离开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Latch"><a href="#Latch" class="headerlink" title="Latch"></a>Latch</h5><p>等待锁，是一个<strong>同步辅助类</strong></p>
<p>用来同步执行任务的一个或者多个线程</p>
<p>不是用来保护临界区或者共享资源</p>
<p>CountDownLatch</p>
<ul>
<li>countDown() 计数减1</li>
<li>await() 等待latch变成0</li>
</ul>
<h5 id="Barrie"><a href="#Barrie" class="headerlink" title="Barrie"></a>Barrie</h5><p>集合点，也是一个<strong>同步辅助类</strong></p>
<p>允许多个线程在某一个点上进行同步</p>
<p>CyclicBarrier</p>
<ul>
<li>构造函数是需要同步的线程数量</li>
<li>await等待其他线程，到达数量后，就放行</li>
</ul>
<h6 id="CyclicBarrierExample"><a href="#CyclicBarrierExample" class="headerlink" title="CyclicBarrierExample"></a>CyclicBarrierExample</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三个一维向量用三个线程分别求和，最后计算总和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[][] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] results = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span>[] row1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] row2 = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] row3 = &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        numbers[<span class="number">0</span>] = row1;</span><br><span class="line">        numbers[<span class="number">1</span>] = row2;</span><br><span class="line">        numbers[<span class="number">2</span>] = row3;</span><br><span class="line"></span><br><span class="line">        CalculateFinalResult finalResultCalculator = <span class="keyword">new</span> CalculateFinalResult(results);</span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, finalResultCalculator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当有3个线程在barrier上await时，就执行finalResultCalculator</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            CalculateEachRow rowCalculator = <span class="keyword">new</span> CalculateEachRow(numbers, i, results, barrier);</span><br><span class="line">            <span class="keyword">new</span> Thread(rowCalculator).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculateEachRow</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[][] numbers;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> rowNumbers;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] res;</span><br><span class="line">    <span class="keyword">final</span> CyclicBarrier barrier;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculateEachRow</span><span class="params">(<span class="keyword">int</span>[][] numbers, <span class="keyword">int</span> rowNumbers, <span class="keyword">int</span>[] res, CyclicBarrier barrier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numbers = numbers;</span><br><span class="line">        <span class="keyword">this</span>.rowNumbers = rowNumbers;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">        <span class="keyword">this</span>.barrier = barrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] row = numbers[rowNumbers];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> datum : row) &#123;</span><br><span class="line">            sum += datum;</span><br><span class="line">            res[rowNumbers] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":计算第"</span> + (rowNumbers + <span class="number">1</span>) + <span class="string">"行结束，结果为--&gt;"</span> + sum);</span><br><span class="line">            barrier.await(); <span class="comment">// 等待，只要超过3个，就放行</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculateFinalResult</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] eachRowRes;</span><br><span class="line">    <span class="keyword">int</span> finalRes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculateFinalResult</span><span class="params">(<span class="keyword">int</span>[] eachRowRes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eachRowRes = eachRowRes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFinalRes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> finalRes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> datum : eachRowRes) &#123;</span><br><span class="line">            sum += datum;</span><br><span class="line">        &#125;</span><br><span class="line">        finalRes = sum;</span><br><span class="line">        System.out.println(<span class="string">"最终结果为--&gt;"</span> + finalRes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h5><p>允许执行并发多阶段任务，<strong>同步辅助类</strong></p>
<p>在每一个阶段结束的位置对线程进行同步，当所有的线程都到达这步，再进行下一步</p>
<p>Phaser</p>
<ul>
<li>arrive()</li>
<li>arriveAndAwaitAdvance()  等待</li>
</ul>
<h5 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h5><p>允许在并发线程中<font color="red">互相交换消息</font></p>
<p>允许在<strong>2</strong>个线程中定义同步点，当两个线程都到达同步点， 它们交换数据结构</p>
<p>Exchanger</p>
<ul>
<li>exchange(), 线程双方互相交互数据</li>
<li>交换数据是双向的，传递null时不需要接受</li>
</ul>
<h4 id="Java定时任务执行"><a href="#Java定时任务执行" class="headerlink" title="Java定时任务执行"></a>Java定时任务执行</h4><p>Thread/Executor/Fork-Join 多线程</p>
<ul>
<li>立刻执行</li>
<li>框架调度 </li>
</ul>
<p>定时执行</p>
<ul>
<li>固定某一个时间点运行</li>
<li>以某一个周期执行</li>
</ul>
<h5 id="简单定时器机制"><a href="#简单定时器机制" class="headerlink" title="简单定时器机制"></a>简单定时器机制</h5><p>设置计划任务，也就是在指定的时间开始执行某一个任务 </p>
<p>TimerTask 封装任务 实现Runable接口</p>
<p>Timer类 定时器</p>
<ul>
<li>scheduleAtFixedRate(TimerTask timerTask,Date firstTime,long period) 固定速率</li>
<li>cancel() 取消定时器</li>
</ul>
<h5 id="Executor-定时器机制"><a href="#Executor-定时器机制" class="headerlink" title="Executor +定时器机制"></a>Executor +定时器机制</h5><p>ScheduledExecutorService</p>
<ul>
<li><p>定时任务</p>
<p>schedule(Runable command,long delay,TimeUnit unit)</p>
</li>
<li><p>周期任务</p>
<ul>
<li>scheduleAtFixedRate(Runable command,long initialDelay，long period,TimeUnit unit) 固定速率 以上一个任务开始的时间计时</li>
<li>scheduleWithFixedDelay(Runable command,long initialDelay,long delay,TimeUnit unit)</li>
</ul>
</li>
<li><p>shutdown() 结束</p>
</li>
</ul>
<h5 id="Quartz（第三方库）"><a href="#Quartz（第三方库）" class="headerlink" title="Quartz（第三方库）"></a>Quartz（第三方库）</h5><p>Quartz是一个较为完善的任务调度框架</p>
<ul>
<li>trigger 触发器</li>
<li>job 任务</li>
</ul>
<p>解决程序中Timer零散管理的问题</p>
<p>功能更加强大</p>
<ul>
<li>Timer执行周期任务，如果中间某一次有异常，整个任务终止执行</li>
<li>Quartz执行周期任务，如果中间某一次有异常，不影响下次任务执行</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java--混合编程</title>
    <url>/articles/6d00d2a2.html</url>
    <content><![CDATA[<h6 id="Java调用Java程序"><a href="#Java调用Java程序" class="headerlink" title="Java调用Java程序"></a>Java调用Java程序</h6><p>RMI</p>
<h6 id="Java调用C程序"><a href="#Java调用C程序" class="headerlink" title="Java调用C程序"></a>Java调用C程序</h6><p>JNI Java Native Interface</p>
<h6 id="Java调用JavaScript程序"><a href="#Java调用JavaScript程序" class="headerlink" title="Java调用JavaScript程序"></a>Java调用JavaScript程序</h6><p>脚本引擎 Script Engine<br>JDK8：Nashorn<br>JDK6/7：Rhino</p>
<h6 id="Java调用Python程序"><a href="#Java调用Python程序" class="headerlink" title="Java调用Python程序"></a>Java调用Python程序</h6><p>Jython（JPython）</p>
<p>关键类 PythonInterpreter</p>
<ul>
<li>exec 执行语句</li>
<li>set 设置变量值</li>
<li>get 获取变量值</li>
<li>execfile 执行一个python文件</li>
</ul>
<p>PyObject<br>PyFunction</p>
<h6 id="Java调用Web-Service"><a href="#Java调用Web-Service" class="headerlink" title="Java调用Web Service"></a>Java调用Web Service</h6><p>wsimport</p>
<h6 id="Java调用命令行"><a href="#Java调用命令行" class="headerlink" title="Java调用命令行"></a>Java调用命令行</h6><p>Runtime类<br>Process类</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Java--泛型</title>
    <url>/articles/8b379c6c.html</url>
    <content><![CDATA[<h6 id="泛型引入"><a href="#泛型引入" class="headerlink" title="泛型引入"></a>泛型引入</h6><p>集合：存放多个不同类型对象，容易出现转型错误 <code>ClassCastException</code></p>
<p>泛型：Generic Programming JDK1.5推出的特性</p>
<p>编写的代码可以被很多不同类型的对象所重用</p>
<p><code>List &lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p>
<p><code>List &lt;String&gt; list = new ArrayList&lt;&gt;();</code>Java 7菱形语法</p>
<ul>
<li>泛型类：<code>ArrayList</code>，<code>HashSet</code>，<code>HashMap</code>等</li>
<li>泛型方法：<code>Collections.binarySearch()</code>，<code>Arrays.sort()</code>等</li>
<li>泛型接口：<code>List</code>，<code>Iterator</code>等</li>
</ul>
<p>泛型的本质：参数化类型，避免类型转换，代码可复用</p>
<p>同类：</p>
<ul>
<li>C++的模板(Template)</li>
<li>C#的泛型</li>
</ul>
<p>ArrayList源码</p>
<p><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;
        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);	<span class="comment">//检查是否越界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);	<span class="comment">//返回对应的元素值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h6 id="自定义泛型设计"><a href="#自定义泛型设计" class="headerlink" title="自定义泛型设计"></a>自定义泛型设计</h6><p>泛型类</p>
<ul>
<li>具有泛型变量的类</li>
<li>在类名后用代表引入类型<ul>
<li>多个字母表示多个引入类型<br>如<code>&lt;T,U&gt;</code>等 </li>
<li>引入类型可以修饰成员变量 /局部变量/参数/返回值</li>
<li>没有专门的<code>template</code>关键字</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T lower;</span><br><span class="line">    <span class="keyword">private</span> T upper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Interval</span><span class="params">(T lower, T upper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lower = lower;</span><br><span class="line">        <span class="keyword">this</span>.upper = upper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lower;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>泛型类调用</p>
<ul>
<li><p>传入具体的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Interval&lt;Integer\&gt; v1 = <span class="keyword">new</span> Interval&lt;Integer\&gt;(<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line">Interval&lt;Integer\&gt; v1 = <span class="keyword">new</span> Interval&lt;\&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>泛型方法</p>
<ul>
<li>具有泛型参数的方法</li>
<li>该方法可在普通类/泛型类中</li>
<li><code>&lt;T&gt;</code>在修饰符后，返回类型前</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getMiddle</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a == <span class="keyword">null</span> ? <span class="keyword">null</span> : a[a.length / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>泛型接口</p>
<ul>
<li>和泛型类相似，在类名后加<code>&lt;T&gt;</code></li>
<li>T用来指定方法返回值和参数</li>
<li>实现接口时，指定类型</li>
<li>T也可以再是一个泛型类，可嵌套</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">add</span><span class="params">(T t1, T t2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结</p>
<ul>
<li>泛型类：整个类都被泛化，包括变量和方法</li>
<li>泛型方法：方法被泛化，包括返回值和参数</li>
<li>泛型接口：泛化子类方法</li>
</ul>
<h6 id="泛型类型限定"><a href="#泛型类型限定" class="headerlink" title="泛型类型限定"></a>泛型类型限定</h6><p>泛型</p>
<ul>
<li>编写的代码可以被很多不同类型的对象所重用</li>
<li>特定场合下，需要对类型进行限定(使用某些特定方法)</li>
</ul>
<p>泛型限定</p>
<ul>
<li><code>&lt;T extends Comparable&gt;</code>约定T必须是Comparable的子类</li>
<li>extends固定，后面可以多个，以&amp;拼接，如<code>&lt;T extends Comparable &amp; Serializable&gt;</code></li>
<li>extends限定可以有多个接口，但只能一个类，且类必须排第一位 –逗号隔参数，如<code>&lt;T extends File &amp;Cloneable, U extends Serializable&gt;</code></li>
</ul>
<p>泛型类之间的继承</p>
<ul>
<li><code>Pair&lt;S&gt;</code>和<code>Pair&lt;T&gt;</code>没有任何关系，无论S和T之间是什么关系</li>
<li>泛型类可以扩展或实现其他的类，如<code>ArrayList&lt;T&gt; implemetsList&lt;T&gt;</code></li>
</ul>
<hr>
<p>上限界定符</p>
<p>Pair&lt;? extends S&gt;</p>
<p>Pair能接收的参数类型，是S自身或子类</p>
<p>eg <code>Pair&lt;? extends Fruit&gt;</code>代表<code>Pair&lt;Fruit&gt;</code>, <code>Pair&lt;Apple&gt;</code>, <code>Pair&lt;ornage&gt;</code> 等</p>
<blockquote>
<p>Apple extends Fruit<br>Orange extends Fruit</p>
</blockquote>
<font color="red">只能get/不能set，编译器只能保证出来的类型，但不保证放入的 对象是什么类型</font>

<p><code>? extends Fruit getFirst();</code>    //肯定可以转型到Fruit</p>
<p><code>void setFirst(? extend Fruit)</code> //未知具体的类型[错误]</p>
<hr>
<p>下限界定符</p>
<p>Pair&lt;？super S&gt;</p>
<p>Pair能接收的类型参数，是S的自身或超类</p>
<p>eg <code>Pair&lt;? super Apple&gt;</code> 代表 <code>Pair&lt;Object&gt;</code>,<code>Pair&lt;Fruit&gt;</code>,<code>Pair&lt;Apple&gt;</code>等</p>
<font color="red">只能set/不能get，编译器保证放入的是S本身或超类，但不保证 出来是什么具体类型</font>

<p>void setFirst(? super Apple)    //可以放入Apple及子类对象</p>
<p>? super Apple getFirst()            //无法得知出来的对象类型，只能是Object</p>
<hr>
<p>泛型PECS原则</p>
<ul>
<li>Producer Extends, Consumer Super</li>
<li>要从泛型类读取类型T的数据，并且不能写入，可以使用 ? extends 通配符；(Producer Extends，泛型类是生产者，往外输出 东西)</li>
<li>如果要向泛型类写入类型T的数据，并且不需要读取，可以使用 ? super 通配符；(Consumer Super，泛型类是消费者，往内增加东西)</li>
<li>如果既想写入又想读出，那就不用通配符</li>
</ul>
<hr>
<p>无限定类型的泛型</p>
<ul>
<li><code>Pair&lt;T&gt;</code>，原始类型</li>
<li><code>Pair&lt;?&gt;</code> ，无限定通配符，表示任意类型<ul>
<li>如<code>Pair&lt;Obejct&gt;</code>, <code>Pair&lt;Apple&gt;</code>, <code>Pair&lt;Orange&gt;</code></li>
<li>? getFirst() //不确定出来是什么类型，只能赋值给Object</li>
<li>void setFirst() //无法放入任何对象，甚至是Object</li>
</ul>
</li>
</ul>
<h6 id="泛型实现的本质和约束"><a href="#泛型实现的本质和约束" class="headerlink" title="泛型实现的本质和约束"></a>泛型实现的本质和约束</h6><p>JDK的版本是向后兼容的:即低版本的class文件可以在高版本的JDK上运行<br>因此，JVM里面没有泛型对象，而是采用<font color="red">类型擦除</font>技术， 只有普通的类和方法</p>
<p>类型擦除</p>
<ul>
<li><p>擦除泛型变量，替换为原始类型(raw type)，无限定为Object</p>
</li>
<li><p>擦除泛型变量，替换为原始类型(raw type)，有限定则为第 一个类型</p>
</li>
<li><p>擦除泛型变量后，为了保证类型的安全性，需要自动进行类型转换</p>
<p>泛型表达式翻译</p>
<p><code>Fruit f=fruits.getFirst();</code><br><code>Object o=fruits.getFirst();</code> <code>Fruit f=(Fruit) o;</code></p>
</li>
<li><p>擦除泛型变量后，为了保证类型的安全性，需要自动进行 类型转换</p>
</li>
<li><p>重载泛型方法翻译(自动桥方法)</p>
</li>
</ul>
<p>泛型的约束</p>
<ul>
<li>不能用基本类型(8种)来实例化泛型</li>
<li>运行时类型查询只适用于原始类型</li>
<li>不能创建参数化类型的数组</li>
<li>可变参数警告</li>
<li>不能实例化类型变量</li>
<li>不能构造泛型数组</li>
<li>泛型类的静态上下文中类型变量无效</li>
<li>不能抛出或捕获泛型类的异常实例</li>
<li>可以消除对受查异常(checked exception)的检查</li>
<li>类型擦除后引发的方法冲突</li>
</ul>
<h6 id="Java类型协变和逆变"><a href="#Java类型协变和逆变" class="headerlink" title="Java类型协变和逆变"></a>Java类型协变和逆变</h6><p>面向对象语言，支持子类型(Subtyping) </p>
<ul>
<li><p>类型变化关系(type variance)</p>
<p>更复杂类型中的子类型关系，与子类型之间的关系相关联。</p>
</li>
</ul>
<p>Type Variance形式化定义: </p>
<ul>
<li>A、B是类型，f(·)表示类型转换，≤表示继承关系，如A ≤ B， 表示A继承于B</li>
<li>f(·)是<font color="red">协变(covariant)</font>的，如果A ≤ B，有f(A) ≤f(B)</li>
<li>f(·)是<font color="red">逆变(contravariant)</font>的，如果A ≤ B，有f(B) ≤f(A)</li>
<li>f(·)是<font color="red">不变(invariant)</font>的，当上述两种都不成立，即f(A)和f(B)没有关系 </li>
<li>f(·)是<font color="red">双变(bivariant)</font>的，如果A ≤ B，有f(B) ≤f(A) 和f(A) ≤f(B) 同时成立</li>
</ul>
<hr>
<p>Java数组是协变的</p>
<p>String是Object的子类，<code>String[]</code>是<code>Object[]</code>的子类</p>
<hr>
<p>Java的(原始的)泛型是不变的</p>
<p>String是Object的子类，<code>List&lt;String&gt;</code>和<code>List&lt;Object&gt;</code>没有关系</p>
<hr>
<p>泛型可采用通配符，支持协变和逆变(PECS原则)</p>
<p>假设 B是A的子类</p>
<p><code>ArrayList&lt;? extends A&gt; list3 = new ArrayList&lt;B&gt;();</code>  协变<br><code>ArrayList&lt;? super B&gt; list4 = new ArrayList&lt;A&gt;();</code>  逆变</p>
<hr>
<p>复合情况：数组协变，泛型不变</p>
<p>假设 B是A的子类，C是B的子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testArrayAndList</span><span class="params">()</span></span>&#123;</span><br><span class="line">	B[] r1=test(<span class="keyword">new</span> ArrayList&lt;B&gt;();	<span class="comment">// 编译错误</span></span><br><span class="line">	A[] r2=test(<span class="keyword">new</span> ArrayList&lt;B&gt;();	<span class="comment">// 编译错误</span></span><br><span class="line">	Object[] r3=test(<span class="keyword">new</span> ArrayList&lt;Object&gt;());	<span class="comment">// 编译错误</span></span><br><span class="line">	</span><br><span class="line">	A[] r4=test(<span class="keyword">new</span> ArrayList&lt;A&gt;());</span><br><span class="line">	Object[] r5=test(<span class="keyword">new</span> ArrayList&lt;A&gt;());	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> A[] test(ArratList&lt;A&gt; list)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> A[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>方法情况</p>
<ul>
<li>JDK 1.4 重写的方法参数和返回值要求一样</li>
<li>JDK 1.5 +重写的方法，参数要求一样的，返回值是协变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> B <span class="title">f1</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Father.f1()"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> B <span class="title">f1</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line">	<span class="comment">//public C f1(B obj)&#123;&#125;	返回值是C，也是对的</span></span><br><span class="line">		System.out.println(<span class="string">"Son.f1()"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">Father foo=<span class="keyword">new</span> Son();</span><br><span class="line">foo.f1(<span class="keyword">new</span> B());</span><br></pre></td></tr></table></figure>
<hr>
<p>总结Java类型变化(type variance)</p>
<ul>
<li>数组是协变的(covariant)</li>
<li>原始的泛型是不变的(invariant)</li>
<li><code>&lt;? extends A&gt;</code>支持协变(covariant)</li>
<li><code>&lt;? super B&gt;</code>支持逆变(contravariant)</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>Java--多线程</title>
    <url>/articles/83776954.html</url>
    <content><![CDATA[<h4 id="多进程与多线程"><a href="#多进程与多线程" class="headerlink" title="多进程与多线程"></a>多进程与多线程</h4><h6 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h6><p>当前的操作系统都是多任务OS ，每个独立执行的任务就是一个进程，OS将时间划分为多个时间片（时间很短）</p>
<p>每个时间片内将CPU分配给某一个任务，时间片结束，CPU将自动回收，再分配给另外任务。从外部看，所有任务是同时在执行。但是在CPU上，任务是按照串行依次运行（单核CPU）。如果是多核，多个进程任务可以并行。但是单个核上，多进程只能串行执行。</p>
<p>多进程的优点</p>
<ul>
<li>可以同时运行多个任务</li>
<li>程序因IO堵塞时，可以释放CPU，让CPU为其他程序服务</li>
<li>当系统有多个CPU时，可以为多个程序同时服务<ul>
<li>CPU不再提高频率，而是提高核数</li>
<li>多核和并行程序才是提高程序性能的唯一办法</li>
</ul>
</li>
</ul>
<p>多进程的缺点：太笨重，不好管理，不好切换</p>
<h6 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h6><p>一个程序可以包括多个子任务，可串/并行，每个子任务可以称为一个线程</p>
<p>如果一个子任务阻塞，程序可以将CPU调度另外一个子任务进行工作。这样CPU还是保留在本程序中，而不是被调度到别的程序(进程)去。这样，提高本程序所获得CPU时间和利用率。</p>
<h6 id="多进程-vs-多线程"><a href="#多进程-vs-多线程" class="headerlink" title="多进程 vs 多线程"></a>多进程 vs 多线程</h6><ul>
<li>线程共享数据</li>
<li>线程通讯更高效</li>
<li>线程更轻量级，更容易切换</li>
<li>多个线程更容易管理</li>
</ul>
<a id="more"></a>
<h4 id="Java多线程实现"><a href="#Java多线程实现" class="headerlink" title="Java多线程实现"></a>Java多线程实现</h4><h6 id="多线程创建"><a href="#多线程创建" class="headerlink" title="多线程创建"></a>多线程创建</h6><ul>
<li><p><code>java.lang.Thread</code> </p>
<p>线程继承Thread类，实现run方法</p>
</li>
<li><p><code>java.lang.Runnable</code>接口</p>
</li>
<li><p>线程实现Runnable接口，实现run方法</p>
</li>
</ul>
<h6 id="多线程启动"><a href="#多线程启动" class="headerlink" title="多线程启动"></a>多线程启动</h6><ul>
<li>start方法，会自动以新进程调用run方法</li>
<li>直接调用run方法，将变成串行执行</li>
<li>同一个线程，多次start会报错，只执行第一次start方法</li>
<li>多个线程启动，其启动的先后顺序是随机的</li>
<li>线程无需关闭，只要其run方法执行结束后，自动关闭</li>
<li>main函数(线程)可能早于新线程结束，整个程序并不终止</li>
<li>整个程序终止是等所有的线程都终止(包括main函数线程)</li>
</ul>
<h6 id="多线程实现对比"><a href="#多线程实现对比" class="headerlink" title="多线程实现对比"></a>多线程实现对比</h6><ul>
<li>Thread占据了父类的名额，不如Runnable方便 </li>
<li>Thread 类实现Runnable</li>
<li>Runnable启动时需要Thread类的支持</li>
<li>Runnable 更容易实现多线程中资源共享</li>
</ul>
<p>结论：建议实现Runnable接口来完成多线程</p>
<h4 id="Java多线程信息共享"><a href="#Java多线程信息共享" class="headerlink" title="Java多线程信息共享"></a>Java多线程信息共享</h4><p>线程类</p>
<ul>
<li>通过继承Thread或实现Runnable</li>
<li>通过start方法，调用run方法， run方法工作</li>
<li>线程run结束后，线程退出 </li>
</ul>
<p>粗粒度：子线程与子线程之间、和main线程之间缺乏交流</p>
<p>细粒度：线程之间有信息交流通讯</p>
<ul>
<li>通过共享变量达到信息共享</li>
<li>JDK原生库暂不支持发送消息(类似MPI并行库直接发送消息)</li>
</ul>
<h6 id="信息共享"><a href="#信息共享" class="headerlink" title="信息共享"></a>信息共享</h6><p>通过共享变量在多个线程中共享消息</p>
<ul>
<li>static变量</li>
<li>同一个Runnable类的成员变量</li>
</ul>
<p>多线程信息共享问题</p>
<ul>
<li>工作缓存副本</li>
<li>关键步骤缺乏加锁限制 </li>
</ul>
<blockquote>
<p> 举例：i++，并非原子性操作</p>
<ul>
<li>读取主存i (正本)到工作缓存(副本)中</li>
<li>每个CPU执行(副本)i+1操作</li>
<li>CPU将结果写入到缓存(副本)中 </li>
<li>数据从工作缓存(副本)刷到主存(正本)中</li>
</ul>
</blockquote>
<p>变量副本问题的解决方法</p>
<ul>
<li>采用<code>volatile</code> 关键字修饰变量</li>
<li>保证不同线程对共享变量操作时的<em>可见性</em></li>
</ul>
<p>关键步骤<em>加锁限制</em></p>
<ul>
<li><strong>互斥</strong>：某一个线程运行一个代码段(关键区)，其他线程不能同时 运行这个代码段</li>
<li><strong>同步</strong>：多个线程的运行，必须按照某一种规定的先后顺序来运行</li>
<li><strong>互斥</strong>是<strong>同步</strong>的一种特例 </li>
</ul>
<p>互斥的关键字是<code>synchronized</code></p>
<ul>
<li><code>synchronized</code>代码块/函数，只能一个线程进入 </li>
<li><code>synchronized</code>加大性能负担，但是使用简便</li>
</ul>
<h4 id="Java多线程管理"><a href="#Java多线程管理" class="headerlink" title="Java多线程管理"></a>Java多线程管理</h4><p>线程类</p>
<ul>
<li>通过继承Thread或实现Runnable</li>
<li>通过start方法，调用run方法，run方法工作</li>
<li>线程run结束后，线程退出</li>
</ul>
<p>粗粒度：子线程与子线程之间、和main线程之间缺乏同步 </p>
<p> 细粒度：线程之间有同步协作</p>
<ul>
<li>等待</li>
<li>通知/唤醒</li>
<li>终止</li>
</ul>
<h6 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h6><ul>
<li>NEW 刚创建(new)</li>
<li>RUNNABLE 就绪态(start)</li>
<li>RUNNING 运行中(run)</li>
<li>BLOCK 阻塞(sleep)</li>
<li>TERMINATED 结束</li>
</ul>
<h6 id="Thread-API"><a href="#Thread-API" class="headerlink" title="Thread API"></a>Thread API</h6><p>Thread的部分API已经废弃（不建议再使用）</p>
<ul>
<li>暂停和恢复 <del>suspend/resume</del></li>
<li>消亡 <del>stop/destroy</del></li>
</ul>
<p>线程阻塞/和唤醒</p>
<ul>
<li>sleep，时间一到，自己会醒来</li>
<li>wait/notify/notifyAll，等待，需要别人来唤醒</li>
<li>join，等待另外一个线程结束</li>
<li>interrupt，向另外一个线程发送中断信号，该线程收到信号，会触发InterruptedException(可解除阻塞)，并进行下一步处理</li>
</ul>
<h6 id="线程暂停和中止—主动与被动"><a href="#线程暂停和中止—主动与被动" class="headerlink" title="线程暂停和中止—主动与被动"></a>线程暂停和中止—主动与被动</h6><p>线程被动地暂停和终止</p>
<ul>
<li>依靠别的线程来拯救自己<ul>
<li>wait</li>
<li>notify</li>
<li>notifyAll</li>
</ul>
</li>
<li>没有及时释放资源</li>
</ul>
<p>线程主动暂停和终止</p>
<ul>
<li>定期监测共享变量</li>
<li>如果需要暂停或者终止，先释放资源，再主动动作</li>
<li>暂停：<code>Thread.sleep()</code>，休眠</li>
<li>终止：run方法结束，线程终止</li>
</ul>
<h6 id="多线程死锁"><a href="#多线程死锁" class="headerlink" title="多线程死锁"></a>多线程死锁</h6><ul>
<li>每个线程互相持有别的线程需要的锁</li>
<li>预防死锁，对资源进行等级排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer one = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer two = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread12 thread12 = <span class="keyword">new</span> Thread12();</span><br><span class="line">        Thread21 thread21 = <span class="keyword">new</span> Thread21();</span><br><span class="line">        thread12.start();</span><br><span class="line">        thread21.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread12</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先拿1再拿2</span></span><br><span class="line">        <span class="keyword">synchronized</span> (DeadLockThread.one) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (DeadLockThread.two) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread 12 is running"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread21</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先拿2再拿1</span></span><br><span class="line">        <span class="keyword">synchronized</span> (DeadLockThread.two) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (DeadLockThread.one) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread 21 is running"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>线程报错信息：</p>
<p>“Monitor Ctrl-Break” #6 daemon prio=5 os_prio=0 tid=0x0000000018bce000 nid=0x1280 runnable [0x000000001908e000]<br>java.lang.Thread.State: RUNNABLE<br>    at java.net.SocketInputStream.socketRead0(Native Method)<br>    at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)<br>    at java.net.SocketInputStream.read(SocketInputStream.java:170)<br>    at java.net.SocketInputStream.read(SocketInputStream.java:141)<br>    at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)<br>    at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)<br>    at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</p>
<p>locked <0x00000000d5fb3550> (a java.io.InputStreamReader)<br>at java.io.InputStreamReader.read(InputStreamReader.java:184)<br>at java.io.BufferedReader.fill(BufferedReader.java:161)<br>at java.io.BufferedReader.readLine(BufferedReader.java:324)</p>
<p>locked <0x00000000d5fb3550> (a java.io.InputStreamReader)</p>
</blockquote>
<h6 id="守护-后台-线程"><a href="#守护-后台-线程" class="headerlink" title="守护(后台)线程"></a>守护(后台)线程</h6><p><code>Thread.setDaemon()</code>设置线程为守护线程</p>
<ul>
<li>普通线程的结束，是run方法运行结束</li>
<li>守护线程的结束，是run方法运行结束，或main函数结束</li>
<li>守护线程永远不要访问资源，如文件或数据库等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Main thread is running."</span>);</span><br><span class="line">        ThreadOne threadOne = <span class="keyword">new</span> ThreadOne();</span><br><span class="line">        <span class="comment">//守护线程</span></span><br><span class="line">        threadOne.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        threadOne.start();</span><br><span class="line">        <span class="comment">//主线程休眠2秒</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">"Main thread is finished."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadOne</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread one is running."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//休眠1秒</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出：</p>
<p>Main thread is running.<br>Thread one is running.<br>Thread one is running.<br>Thread one is running.<br>Main thread is finished.</p>
<p>Process finished with exit code 0</p>
</blockquote>
<h6 id="线程查看工具-Jvisualvm"><a href="#线程查看工具-Jvisualvm" class="headerlink" title="线程查看工具 Jvisualvm"></a>线程查看工具 Jvisualvm</h6><blockquote>
<p>参考：<a href="https://www.cnblogs.com/mzq123/p/11166640.html" target="_blank" rel="noopener">Jvisualvm简单使用教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java语法糖for-each和枚举</title>
    <url>/articles/6d197383.html</url>
    <content><![CDATA[<h6 id="for-each"><a href="#for-each" class="headerlink" title="for-each"></a>for-each</h6><ul>
<li><code>for-each</code>从JDK5.0开始引入</li>
<li>避免越界错误</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object object:Set)&#123;</span><br><span class="line">	object	<span class="comment">//元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>for</code>与 <code>for-each</code>对比</p>
<ul>
<li>for可以删除元素，<code>for-each</code>不可以删除/替换元素</li>
<li><code>for-each</code>遍历的时候，是不知道当前元素的具体位置索引</li>
<li><code>for-each</code>只能正向遍历，不能反向遍历</li>
<li><code>for-each</code>不能同时遍历2个或以上的集合</li>
<li><code>for</code>和<code>for-each</code>性能接近</li>
</ul>
<a id="more"></a>
<h6 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h6><ul>
<li>枚举变量：变量的取值只在一个有限的集合内</li>
<li>Java5推出<code>enum</code>类型<ul>
<li><code>enum</code>关键字声明枚举类，且都是<code>Enum</code>的子类（不需要加<code>extends</code>）</li>
<li><code>enum</code>内部有多个值，就有多少个实例对象</li>
<li>不能直接<code>new</code>枚举类对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">    SUCCESS, LOADING, NETWORK_ERROR, EMPTY, NONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Java的enum类型<ul>
<li>除了枚举的内容，还可以添加属性/构造函数/方法</li>
<li>处构造函数只能是package-private(default)或者private，内部调用</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:center">同一个类</th>
<th style="text-align:center">同一个包</th>
<th style="text-align:center">不同包的子类</th>
<th style="text-align:center">不同包的非子类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">private</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">default</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">protected</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">public</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Fruit &#123;</span><br><span class="line">    APPLE(<span class="number">10</span>), ORANGE(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;	<span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    Fruit(<span class="keyword">int</span> price) &#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java的<code>enum</code>类型：所有的<code>enum</code>类型属于<code>Enum</code>的子类，也继承了相应的方法</p>
<ul>
<li><code>ordinal()</code> 返回枚举值所在的索引位置，从0开始</li>
<li><code>compareTo()</code> 比较两个枚举值的索引位置大小</li>
<li><code>toString()</code> 返回枚举值的字符串表示</li>
<li><code>Enum.valueOf()</code> 将字符串初始化为枚举对象</li>
<li><code>values()</code> 返回所有的枚举值</li>
</ul>
<p>枚举类型限定取值集合，减少实例对象</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>语法糖</category>
      </categories>
  </entry>
  <entry>
    <title>Java语法糖--try-with-resource和ResourceBundle文件加载</title>
    <url>/articles/868afa36.html</url>
    <content><![CDATA[<h5 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h5><h6 id="try-with-resource与try-catch-finally"><a href="#try-with-resource与try-catch-finally" class="headerlink" title="try-with-resource与try-catch-finally"></a>try-with-resource与try-catch-finally</h6><p>程序打开外部资源，在使用后需要正确关闭</p>
<p>考虑到异常因素，Java提供<code>try-catch-finally</code>进行保证</p>
<p>JDK7提供<code>try-with-resource</code>，比<code>try-catch-finally</code>更简便</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//try-catch-finally结构</span></span><br><span class="line">FileInputStream fis = ...;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)</span><br><span class="line">        fis.close();	<span class="comment">//关流</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//try-with-resource结构</span></span><br><span class="line"><span class="keyword">try</span>(FileInputStream fis = ...)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDK7提供<code>try-with-resource</code>要求<code>resource</code>定义在try中，若外部已经定义需要一个本地变量</p>
<p>JDK9不再要求定义临时变量，可以直接使用外部资源变量</p>
<a id="more"></a>
<h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>资源对象必须继承<code>AutoCloseable</code>接口，即实现<code>close()</code>方法</p>
<p><code>public class FileInputStream extends InputStream</code></p>
<p><code>public abstract class InputStream implements Closeable</code> </p>
<p><code>public interface Closeable extends AutoCloseable</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FileInputStream类close方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (closeLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        closed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (channel != <span class="keyword">null</span>) &#123;</span><br><span class="line">       channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fd.closeAll(<span class="keyword">new</span> Closeable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">           close0();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="ResourceBundle"><a href="#ResourceBundle" class="headerlink" title="ResourceBundle"></a>ResourceBundle</h5><h6 id="文件加载优化"><a href="#文件加载优化" class="headerlink" title="文件加载优化"></a>文件加载优化</h6><p>Java 8及以前，ResourceBundle默认以ISO-8859-1方式加载Properties文件：需要利用native2ascii工具(JDK自带)对文件进行转义</p>
<p>Java 9及以后，ResourceBundle默认以UTF-8方式加载Properties文件</p>
<ul>
<li>JDK9以后，已经删除native2ascii工具</li>
<li>新的Properties文件可以直接以UTF-8保存</li>
<li>已利用native2ascii工具转化后的文件，不受影响。ResourceBundle若解析文件不是有效的UTF-8，则以ISO-8859-1方式加载</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>语法糖</category>
      </categories>
      <tags>
        <tag>try-with-resource</tag>
        <tag>resource bundle</tag>
      </tags>
  </entry>
  <entry>
    <title>Java语法糖--var类型和switch</title>
    <url>/articles/ab1a490c.html</url>
    <content><![CDATA[<h5 id="var类型"><a href="#var类型" class="headerlink" title="var类型"></a>var类型</h5><p>Java 10 推出var：局部变量推断</p>
<ul>
<li>避免信息冗余</li>
<li>对齐了变量名</li>
<li>更容易阅读</li>
<li>本质上还是强类型语言，编译器负责推断类型，并写入字节码文件，推断后不能更改</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.25</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> URL(<span class="string">"https://github.com);</span></span><br><span class="line"><span class="string">c = 5; //编译器报错</span></span><br></pre></td></tr></table></figure>
<h6 id="var的限制"><a href="#var的限制" class="headerlink" title="var的限制"></a>var的限制</h6><ul>
<li>可以用在局部变量上，非类成员变量</li>
<li>可以用在for/for-each循环中</li>
<li>声明时必须初始化</li>
<li>不能用在方法（形式）参数和返回类型</li>
<li>大面积滥用会使代码整体阅读性变差</li>
<li>var只在编译时起作用，没有在字节码中引入新的内容，也没有专门的JVM指令处理var</li>
</ul>
<h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><p>多分支选择语句</p>
<ul>
<li>支持的类型：<code>byte/Byte</code> <code>short/Short</code> <code>int/Integer</code> <code>char/Character</code> <code>String</code>(JDK7.0) <code>Enum</code>(JDK5.0) 不支持<code>long</code> <code>float</code> <code>double</code></li>
</ul>
<h6 id="多分支合并"><a href="#多分支合并" class="headerlink" title="多分支合并"></a>多分支合并</h6><p>采用 -&gt; 直接连接判定条件和动作(JDK12)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> days;</span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Jan"</span>,<span class="string">"Nar"</span>,<span class="string">"May"</span>,<span class="string">"July"</span>,<span class="string">"Aug"</span>,<span class="string">"Oct"</span>,<span class="string">"Dec"</span> -&gt; days = <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Apr"</span>,<span class="string">"June"</span>,<span class="string">"Sep"</span>,<span class="string">"Nov"</span> -&gt; days = <span class="number">30</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">"Feb"</span> -&gt; days = <span class="number">28</span>;</span><br><span class="line">	<span class="keyword">default</span> -&gt; days = -<span class="number">1</span>;	<span class="comment">//必须有default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="直接在表达式赋值"><a href="#直接在表达式赋值" class="headerlink" title="直接在表达式赋值"></a>直接在表达式赋值</h6><p>直接在表达式赋值(JDK12)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> days = <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span> -&gt;<span class="number">31</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span> -&gt; <span class="number">30</span>;</span><br><span class="line">	<span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">28</span>;</span><br><span class="line">		<span class="keyword">break</span> result;	<span class="comment">//代码块中的break返回结果</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>语法糖</category>
      </categories>
  </entry>
  <entry>
    <title>Java语法糖--不定项参数和静态导入</title>
    <url>/articles/689cf977.html</url>
    <content><![CDATA[<h5 id="不定项参数"><a href="#不定项参数" class="headerlink" title="不定项参数"></a>不定项参数</h5><h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><p>普通函数的形参列表是固定个数/类型/顺序</p>
<p>JDK5提供了不定项参数(可变参数)功能</p>
<ul>
<li>数据类型后加… 如 int… /double… /String…</li>
<li>可变参数本质是一个数组，可以是0个也可以是n个同类型参数</li>
</ul>
<a id="more"></a>
<h6 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h6><ul>
<li>一个方法只能有一个不定项参数，且必须位于参数列表的最后</li>
<li>重载的优先级规则1：<strong>固定参数的方法，比可变参数优先级更高</strong></li>
<li>重载的优先级规则2：<strong>调用语句，同时与两个带可变参数的方法匹配，会报错</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 固定参数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 不定项参数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String... message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message == <span class="keyword">null</span> || message.length == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"无参"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String seq : message) &#123;</span><br><span class="line">        System.out.println(seq);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 不定项参数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, String... message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String seq : message) &#123;</span><br><span class="line">        System.out.println(seq);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">print();    <span class="comment">//无参，调用print(String... message)</span></span><br><span class="line">print(<span class="string">"Hello world!"</span>); <span class="comment">//一个参数，调用固定参数方法print(String message)</span></span><br><span class="line">print(<span class="string">"Hello"</span>, <span class="string">"world"</span>);    <span class="comment">//编译器报错：Ambiguous method call. Both print(String... message) and (String str, String... message) in IndefiniteParameter match</span></span><br></pre></td></tr></table></figure>
<h5 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h5><h6 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h6><ul>
<li><code>import</code>导入程序所需的类</li>
<li><code>import static</code>导入一个类的静态方法和静态变量（JDK5开始引入）</li>
</ul>
<p><code>import static java.lang.Math.pow;</code></p>
<p><code>import static java.lang.System.out;</code></p>
<h6 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h6><p><code>import static</code>导入一个类的静态方法和静态变量：</p>
<ul>
<li>少使用 * 通配符，最好具体到静态变量或方法</li>
<li>静态方法名具有明确特征，如有重名，需要补充类名</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>语法糖</category>
      </categories>
  </entry>
  <entry>
    <title>Java语法糖--接口方法</title>
    <url>/articles/4ee571a7.html</url>
    <content><![CDATA[<h6 id="接口的默认方法"><a href="#接口的默认方法" class="headerlink" title="接口的默认方法"></a>接口的默认方法</h6><p>Java最初的设计中，接口的方法都是没有实现的、公开的</p>
<p>Java 8推出接口的默认方法/静态方法(都带有实现的)，为Lambda表达式提供支持<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java 8新特性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NewAnimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am moving."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>以<code>default</code>关键字标注，其他的定义和普通函数一样</li>
<li>规则：<ul>
<li>默认方法<font color=red>不能重写</font>Object中的方法(<code>equals()</code> <code>toString()</code> <code>hashcode()</code>)</li>
<li>实现类可以<font color=red>继承/重写</font>父接口的默认方法</li>
<li>接口可以<font color=red>继承/重写</font>父接口的默认方法</li>
<li>当父类和父接口都有（同名同参数）默认方法，<font color=red>子类继承父类的默认方法</font>，兼容JDK及其以前的代码</li>
<li>子类实现了2个接口（均有同名同参数的默认方法），<font color=red>编译失败</font>，必须在子类中重写这个<code>default</code>方法</li>
</ul>
</li>
</ul>
<h6 id="接口的静态方法"><a href="#接口的静态方法" class="headerlink" title="接口的静态方法"></a>接口的静态方法</h6><p>Java 8接口的静态方法（带实现的）</p>
<ul>
<li>该静态方法属于本接口的，不属于子类/子接口</li>
<li>子类（子接口）没有继承该静态方法，只能通过所在的接口名来调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StaticAnimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"static animal move()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StaticLandAnimal</span> <span class="keyword">extends</span> <span class="title">StaticAnimal</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不能继承StaticAnimal的move()方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> <span class="keyword">implements</span> <span class="title">StaticLandAnimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StaticAnimal.move();        </span><br><span class="line">        StaticLandAnimal.move();    <span class="comment">//编译器报错</span></span><br><span class="line">        <span class="keyword">new</span> TestStatic().move();    <span class="comment">//编译器报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="接口的私有方法"><a href="#接口的私有方法" class="headerlink" title="接口的私有方法"></a>接口的私有方法</h6><p>Java 9接口的私有方法（带实现的）</p>
<ul>
<li>解决多个默认方法/静态方法内容重复问题</li>
<li>私有方法属于本接口，只在本接口内使用，不属于子类/子接口</li>
<li>子类（子接口）没有继承该私有方法，也无法调用</li>
<li>静态私有方法可以被静态/默认方法调用，非静态私有方法被默认方法调用</li>
</ul>
<h6 id="接口与抽象类比较"><a href="#接口与抽象类比较" class="headerlink" title="接口与抽象类比较"></a>接口与抽象类比较</h6><p>相同点（—Java 12）</p>
<ul>
<li>都是抽象的，都不能被实例化</li>
<li>都可以有实现方法</li>
<li>都可以不需要继承者实现所有的方法</li>
</ul>
<p>不同点</p>
<ul>
<li>抽象类最多只能继承一个，接口可以实现多个</li>
<li>接口的变量默认是 <code>public static final</code>且必须有初值，子类不能修改，而抽象类的变量默认是<code>default</code>，子类可以继承修改</li>
<li>接口没有构造函数，抽象类有构造函数</li>
<li>接口没有main函数，抽象类可以有main函数</li>
<li>接口有<code>public</code> <code>default</code> <code>private</code>的方法，抽象类有 <code>public</code> <code>default</code> <code>protected</code> <code>private</code>的方法</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>语法糖</category>
      </categories>
  </entry>
  <entry>
    <title>Java语法糖--自动装箱与拆箱、多异常并列和数值类型赋值优化</title>
    <url>/articles/e81b4a74.html</url>
    <content><![CDATA[<h5 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h5><h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><p>auto-boxing / auto-unboxing</p>
<ul>
<li>从JDK5.0开始引入，简化基本类型和对象的写法</li>
<li>基本类型：<code>boolean</code> <code>byte</code> <code>char</code> <code>int</code> <code>short</code> <code>long</code> <code>float</code> <code>double</code></li>
<li>对象：<code>Boolean</code> <code>Byte</code> <code>Character</code> <code>Integer</code> <code>Short</code> <code>Long</code> <code>Float</code> <code>Double</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer integer1 = <span class="number">1</span>;    <span class="comment">//自动装箱</span></span><br><span class="line">Integer integer2 = Integer.valueOf(<span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> int1 = integer1;    <span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> int2 = integer2.intValue();</span><br></pre></td></tr></table></figure>
<h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ul>
<li>自动装箱和拆箱是编译器的工作，在class中已经添加转化，虚拟机没有自动装箱和拆箱的语句</li>
<li>==判断：基本类型是内容相同，对象是指针是否相同(内存同一个区域)</li>
<li>基本类型没有空值，对象有null，可能触发NullPointerException（空指针异常）</li>
<li>当一个基础数据类型与封装类进行 == + - * / 运算时，会将封装类进行拆箱，对基础数据类型进行运算</li>
<li>谨慎使用多个非同类的数值类对象进行运算</li>
</ul>
<a id="more"></a>
<h5 id="多异常并列"><a href="#多异常并列" class="headerlink" title="多异常并列"></a>多异常并列</h5><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p>多异常并列在一个catch中，从JDK7.0开始引入，简化写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    test();     <span class="comment">//操作</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ie) &#123;</span><br><span class="line">    ie.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">    se.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简化写法   | 管道符号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    test();     <span class="comment">//操作</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | SQLException ie) &#123;</span><br><span class="line">    ie.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>多个异常之间不能有直接/间接继承关系，否则会报错</p>
<p>处理方法不同，不能合并</p>
<h5 id="数值赋值优化"><a href="#数值赋值优化" class="headerlink" title="数值赋值优化"></a>数值赋值优化</h5><h6 id="整数类型用二进制数赋值"><a href="#整数类型用二进制数赋值" class="headerlink" title="整数类型用二进制数赋值"></a>整数类型用二进制数赋值</h6><p>整数类型用二进制数赋值</p>
<p>Java7的新语法：</p>
<ul>
<li>避免二进制计算</li>
<li><code>byte</code> <code>short</code> <code>int</code> <code>long</code></li>
</ul>
<h6 id="数字中的下划线"><a href="#数字中的下划线" class="headerlink" title="数字中的下划线"></a>数字中的下划线</h6><p>Java7的新语法：</p>
<ul>
<li>增加数字的可读性和纠错功能</li>
<li><code>short</code> <code>int</code> <code>long</code> <code>float</code> <code>double</code></li>
<li>下划线只能出现数字中间，前后必须有数字</li>
<li>允许在二/八/十/十六进制的数字中使用</li>
</ul>
<p><code>int a = 0b0011_1011_0001;</code>二进制</p>
<p><code>int b =02_014;</code>八进制</p>
<p><code>int c=123__456;</code>十进制，可使用多个下划线</p>
<p><code>int d =0x7_B_1;</code>十六进制</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>语法糖</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode--#1095山脉数组中查找目标值</title>
    <url>/articles/8d630654.html</url>
    <content><![CDATA[<h6 id="山脉数组中查找目标值"><a href="#山脉数组中查找目标值" class="headerlink" title="山脉数组中查找目标值"></a>山脉数组中查找目标值</h6><blockquote>
<p>给你一个 山脉数组 <code>mountainArr</code>，请你返回能够使得 <code>mountainArr.get(index)</code> 等于 target 最小 的下标 index 值。</p>
<p>如果不存在这样的下标 index，就请返回 -1。</p>
<p>何为山脉数组？如果数组 A 是一个山脉数组的话，那它满足如下条件：</p>
<p>首先，A.length &gt;= 3</p>
<p>其次，在 0 &lt; i &lt; A.length - 1 条件下，存在 i 使得：</p>
<p>A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i]<br>A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1]</p>
<p>你将 不能直接访问该山脉数组，必须通过 <code>MountainArray</code> 接口来获取数据：</p>
<p><code>MountainArray.get(k)</code> - 会返回数组中索引为k 的元素（下标从 0 开始）<br><code>MountainArray.length()</code> - 会返回该数组的长度</p>
<p>注意：<br>对 <code>MountainArray.get</code> 发起超过 100 次调用的提交将被视为错误答案。</p>
<p>示例 1：</p>
<p>输入：array = [1,2,3,4,5,3,1], target = 3<br>输出：2<br>解释：3 在数组中出现了两次，下标分别为 2 和 5，我们返回最小的下标 2。</p>
<p>示例 2：</p>
<p>输入：array = [0,1,2,4,2,1], target = 3<br>输出：-1<br>解释：3 在数组中没有出现，返回 -1。</p>
<p>提示：<br>3 &lt;= <code>mountain_arr.length()</code> &lt;= 10000<br>0 &lt;= target &lt;= $10^9$<br>0 &lt;= <code>mountain_arr.get(index)</code> &lt;= $10^9$</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/find-in-mountain-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-in-mountain-array</a></p>
</blockquote>
<a id="more"></a>
<h6 id="三次二分查找"><a href="#三次二分查找" class="headerlink" title="三次二分查找"></a>三次二分查找</h6><p>第一次二分查找：找到峰值</p>
<p>第二次二分查找：要返回最小的下标的目标值，从峰值左边开始二分查找，找到返回其索引，没找到则返回-1</p>
<p>第三次二分查找：当峰值左边没有目标值时，再对峰值右边进行二分查找，找到返回其索引，没找到则返回-1</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MountainArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//题解</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findInMountainArray</span><span class="params">(<span class="keyword">int</span> target, MountainArray mountainArr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = mountainArr.length();</span><br><span class="line">    <span class="keyword">int</span> top = findMountainTop(mountainArr, <span class="number">0</span>, len - <span class="number">1</span>);	<span class="comment">//找峰值的位置</span></span><br><span class="line">    <span class="keyword">int</span> index = findFromMountainLeft(mountainArr, <span class="number">0</span>, top, target);	<span class="comment">// 在峰值左边进行二分查找</span></span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> findFromMountainRight(mountainArr, top, len - <span class="number">1</span>, target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二分法找峰值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findMountainTop</span><span class="params">(MountainArray mountainArr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// int mid =(left+right)/2;	可能会导致整形溢出</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mountainArr.get(mid) &lt; mountainArr.get(mid + <span class="number">1</span>))</span><br><span class="line">            <span class="comment">// 如果当前的数比右边的数小，它一定不是山顶</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//峰值是一定存在的</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二分法在峰值左边查找</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findFromMountainLeft</span><span class="params">(MountainArray mountainArr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mountainArr.get(mid) &lt; target)</span><br><span class="line">            <span class="comment">// 如果当前的数比目标值小，则目标数在大的一部分(右边)</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">            right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//剩余一个数时，判断是否是目标值</span></span><br><span class="line">    <span class="keyword">if</span> (mountainArr.get(left) == target)</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二分法在峰值右边查找</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findFromMountainRight</span><span class="params">(MountainArray mountainArr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;	<span class="comment">//结束条件相当于left=right</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mountainArr.get(mid) &gt; target)</span><br><span class="line">            <span class="comment">// 如果当前的数比目标值小，则目标数在小的一部分(右边)</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//剩余一个数时，判断是否是目标值</span></span><br><span class="line">    <span class="keyword">if</span> (mountainArr.get(left) == target)</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考题解：<a href="https://leetcode-cn.com/problems/find-in-mountain-array/solution/shi-yong-chao-hao-yong-de-er-fen-fa-mo-ban-python-/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-in-mountain-array/solution/shi-yong-chao-hao-yong-de-er-fen-fa-mo-ban-python-/</a></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode--#199二叉树的右视图</title>
    <url>/articles/60a087a9.html</url>
    <content><![CDATA[<h6 id="二叉树的右视图"><a href="#二叉树的右视图" class="headerlink" title="二叉树的右视图"></a>二叉树的右视图</h6><p><em>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</em></p>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3,null,5,null,4]</span><br><span class="line"></span><br><span class="line">输出: [1, 3, 4]</span><br><span class="line"> </span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">    1              &lt;---</span><br><span class="line">  /   \</span><br><span class="line">-  2 -  3          &lt;---</span><br><span class="line">    \    \</span><br><span class="line">   -  5 -  4       &lt;---</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/binary-tree-right-side-view" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-right-side-view</a></p>
</blockquote>
<a id="more"></a>
<h6 id="解法—二叉树按层次遍历"><a href="#解法—二叉树按层次遍历" class="headerlink" title="解法—二叉树按层次遍历"></a>解法—二叉树按层次遍历</h6><p>按照二叉树的按层次遍历的方式（也可理解为深度优先遍历DFS），但每一层只输出最右边的结点，借助队列来实现</p>
<p><strong>代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结点定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;	    <span class="comment">//值</span></span><br><span class="line">    TreeNode left;	<span class="comment">//左子树</span></span><br><span class="line">    TreeNode right;	<span class="comment">//右子树</span></span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);    <span class="comment">//root入队</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = queue.size();</span><br><span class="line">            <span class="keyword">while</span> (--len &gt;= <span class="number">0</span>) &#123;	<span class="comment">//循环出队</span></span><br><span class="line">                TreeNode temp = queue.poll();	<span class="comment">//队首出队</span></span><br><span class="line">                <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (len == <span class="number">0</span>)	<span class="comment">//当前是否为队尾元素</span></span><br><span class="line">                        list.add(temp.val); 	<span class="comment">//最右侧结点的值添加到列表中</span></span><br><span class="line">                    <span class="keyword">if</span> (temp.left != <span class="keyword">null</span>)</span><br><span class="line">                        queue.add(temp.left);	<span class="comment">//左子树入队</span></span><br><span class="line">                    <span class="keyword">if</span> (temp.right != <span class="keyword">null</span>)</span><br><span class="line">                        queue.add(temp.right);	<span class="comment">//右子树入队</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="解法—二叉树先序遍历"><a href="#解法—二叉树先序遍历" class="headerlink" title="解法—二叉树先序遍历"></a>解法—二叉树先序遍历</h6><p>对二叉树的先序遍历进行修改</p>
<ul>
<li>遍历顺序为 根结点 右子树 左子树 ，并且只输出最右侧的结点，</li>
<li>用变量<code>level</code>记录当前层数，只有<code>level</code>等于列表的长度时才加入列表中(<code>level</code>从<code>0</code>开始)</li>
</ul>
<p><strong>代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树先序遍历法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideViewByPre</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();	<span class="comment">//列表用于存储结果</span></span><br><span class="line">    dfs(root, <span class="number">0</span>, res);	<span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历顺序：根结点 右子树 左子树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root  根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> level 当前层数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> res   列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> level, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)	<span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (level == res.size())</span><br><span class="line">        res.add(root.val);	<span class="comment">//加入到列表中</span></span><br><span class="line">    </span><br><span class="line">    dfs(root.right, level + <span class="number">1</span>, res);    <span class="comment">//先遍历右子树</span></span><br><span class="line">    dfs(root.left, level + <span class="number">1</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>Jsp-EL表达式-JSTL笔记</title>
    <url>/articles/324a571.html</url>
    <content><![CDATA[<h3 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Java Server Pages，Java服务器页面</p>
<p>简化的Servlet设计</p>
<p>动态网页技术标准（数据的动态改变）</p>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>本质上是Servlet</li>
<li>跨平台</li>
<li>组件跨平台</li>
<li>健壮性和安全性（业务逻辑，数据）</li>
</ul>
<h5 id="访问原理"><a href="#访问原理" class="headerlink" title="访问原理"></a>访问原理</h5><p>Tomcat只能识别Servlet，用户访问jsp文件，服务器用JspServlet将jsp文件转义成对应的Java文件，返回给用户</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><font color='blue'>JSP负责页面展现，Sevlet负责业务逻辑处理</font>

<a id="more"></a>
<h4 id="Jsp的语法和指令"><a href="#Jsp的语法和指令" class="headerlink" title="Jsp的语法和指令"></a>Jsp的语法和指令</h4><p>Jsp三大指令</p>
<ul>
<li>page指令：配置jsp文件的转译相关的参数</li>
<li>include指令：静态引入jsp文件</li>
<li>taglib指令：引入jstl标签库</li>
</ul>
<h5 id="jsp的三种注释"><a href="#jsp的三种注释" class="headerlink" title="jsp的三种注释"></a>jsp的三种注释</h5><p>前端语言注释(html,css,js)：会被转译，也会被发送，但是不会被浏览器执行</p>
<p>java语言注释(行注释，块注释，文档注释)：会被转译，但是不会被servlet执行</p>
<p>jsp注释：不会被转译</p>
<h5 id="jsp的page指令"><a href="#jsp的page指令" class="headerlink" title="jsp的page指令"></a>jsp的page指令</h5><p> <code>&lt;@ page attribute1=&quot;value&quot; attribute2=&quot;value&quot; ...%&gt;</code></p>
<p>作用：配置jsp文件的转译相关的参数</p>
<ul>
<li>language:声明jsp要被转译的语言</li>
<li>import:声明转译java的java文件要导入的包，不同的包使用逗号隔开</li>
<li>pageEncoding:设置jsp文件的数据编码格式</li>
<li>contentType:设置jsp数据响应给浏览器时，浏览器的解析和编码格式</li>
<li>session:设置转译的Servlet是否开启session支持，默认开启，true开启，false关闭</li>
<li>errorPage:设置jsp运行错误跳转的页面</li>
<li>extends:设置jsp转译的java文件要继承的父类（包名+类名）</li>
</ul>
<h5 id="jsp的局部代码块"><a href="#jsp的局部代码块" class="headerlink" title="jsp的局部代码块"></a>jsp的局部代码块</h5><p>特点</p>
<ul>
<li>布局代码块中声明的java代码会被原样转译到jsp对应的Servlet文件的_JspService方法中</li>
<li>代码块中声明的变量都是局部变量</li>
</ul>
<p>使用：<code>&lt;%java代码块%&gt;</code></p>
<p>缺点：使用局部代码块在jsp中进行逻辑判断，书写麻烦，阅读困难</p>
<p>开发：使用Sevlet进行请求逻辑处理，使用jsp进行页面展现</p>
<h5 id="jsp的全局代码块"><a href="#jsp的全局代码块" class="headerlink" title="jsp的全局代码块"></a>jsp的全局代码块</h5><p>特点：声明的java代码作为全局代码转译到对应的Servlet类中</p>
<p>使用：<code>&lt;%!java全局代码块%&gt;</code></p>
<font color='red'>注意：全局代码块声明的代码，需要使用局部代码块调用</font>

<h5 id="jsp的脚本段语句"><a href="#jsp的脚本段语句" class="headerlink" title="jsp的脚本段语句"></a>jsp的脚本段语句</h5><p>特点：帮助开发人员快速地获取变量或者方法的返回值作为数据响应给浏览器    </p>
<p>使用：<code>&lt;%=变量名或者方法%&gt;</code>    &lt;===&gt;   out.write(变量名或方法);</p>
<font color='red'>注意：不要在变量名或者方法后使用分号</font>

<p>位置：除jsp语法要求以外的任意位置</p>
<h5 id="jsp的静态引入和动态引入"><a href="#jsp的静态引入和动态引入" class="headerlink" title="jsp的静态引入和动态引入"></a>jsp的静态引入和动态引入</h5><h6 id="静态引入"><a href="#静态引入" class="headerlink" title="静态引入"></a>静态引入</h6><p> <code>&lt;%@include file=&quot;jsp文件相对地址&quot; %&gt;</code></p>
<p>特点：</p>
<ul>
<li>会将引入的jsp文件和当前jsp文件转译成一个java（Servlet）文件使用</li>
<li>在网页中也就显示了合并后的显示效果</li>
</ul>
<p>注意：</p>
<ul>
<li>静态引入的jsp文件<font color='red'>不会</font>单独转译成java（Servlet）文件</li>
<li>同名变量    编译报错 Duplicate local variable</li>
<li>当前文件和静态引入的jsp文件中<font color='red'>不能</font>使用java代码块声明同名变量</li>
</ul>
<h6 id="动态引入"><a href="#动态引入" class="headerlink" title="动态引入"></a>动态引入</h6><p><code>&lt;jsp:include page=&quot;jsp文件相对地址&quot;/&gt;</code></p>
<p>特点：</p>
<ul>
<li>会将引入的jsp文件单独转译，在当前文件转译好的java文件中调用引入的jsp文件的转译文件</li>
<li>在网页中显示合并后的显示效果</li>
</ul>
<p>注意：动态引入<font color='red'>允许</font>文件中声明同名变量</p>
<p>优点：降低jsp代码的冗余，便于维护升级</p>
<h5 id="jsp的转发标签"><a href="#jsp的转发标签" class="headerlink" title="jsp的转发标签"></a>jsp的转发标签</h5><p>使用：<code>&lt;jsp:forward page=&quot;jsp文件相对地址&quot;&gt;&lt;/jsp:forward&gt;</code>    jsp文件<font color='red'>相对地址</font></p>
<p>特点</p>
<ul>
<li>一次请求</li>
<li>地址栏信息不变</li>
</ul>
<p>注意：<font color='red'>在转发标签的两个标签中间除了写</font><code>&lt;jsp:param name=&quot;&quot; value=&quot;&quot;/&gt;</code><font color='red'>子标签不会报错，其他任意字符都会报错</font><br><code>&lt;%=request.getParameter(&quot;键名&quot;)%&gt;</code><br>name属性为附带的数据的键名<br>value属性为附带的数据的内容<br>会将数据以?的形式在转发路径的后面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">"要转发的jsp文件的相对路径"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"str"</span> value=<span class="string">"a"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>
<h4 id="jsp内置对象"><a href="#jsp内置对象" class="headerlink" title="jsp内置对象"></a>jsp内置对象</h4><h5 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h5><p>jsp文件在转译其对应的Servlet文件的时候自动生成的并声明的对象，可以在jsp页面中直接使用。</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>内置对象在jsp页面中使用，使用局部代码块或者脚本段语句来使用，不能够在全局代码块中使用。</p>
<h5 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h5><h6 id="PageContext对象"><a href="#PageContext对象" class="headerlink" title="PageContext对象"></a>PageContext对象</h6><p>页面上下文对象，封存了其他内置对象。封存了当前jsp的运行信息</p>
<p>注意：每个jsp文件单独拥有一个PageContext对象</p>
<p>作用域：当前页面</p>
<h6 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h6><p>封存当前请求数据的对象，由Tomcat服务器创建，作用域为一次请求。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 获取请求数据</span></span><br><span class="line">String s = request.getParameter(<span class="string">"str"</span>);</span><br><span class="line">request.getAttribute(<span class="string">"str"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h6 id="Session对象"><a href="#Session对象" class="headerlink" title="Session对象"></a>Session对象</h6><p>存储用户的不同请求的共享数据，作用域为一次会话</p>
<h6 id="Application对象"><a href="#Application对象" class="headerlink" title="Application对象"></a>Application对象</h6><p>ServletContext对象，一个项目只有一个，存储用户共享数据的对象，以及完成其他操作，项目内</p>
<h6 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h6><p>响应对象，用来响应请求处理结果给浏览器的对象，设置响应头，重定向。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    response.sendRedirect(<span class="string">"forward.jsp"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h6 id="Out对象"><a href="#Out对象" class="headerlink" title="Out对象"></a>Out对象</h6><p>响应对象，jsp内部使用，带有缓冲区的响应对象，效率高于response对象</p>
<h6 id="Page对象"><a href="#Page对象" class="headerlink" title="Page对象"></a>Page对象</h6><p>代表当前jsp对象，相当于java的this</p>
<h6 id="Exception对象"><a href="#Exception对象" class="headerlink" title="Exception对象"></a>Exception对象</h6><p>异常对象，存储了当前运行的异常信息</p>
<p>注意：使用此对象需要在page指定使用属性isErrorPage=”true”开启</p>
<h6 id="Congfig对象"><a href="#Congfig对象" class="headerlink" title="Congfig对象"></a>Congfig对象</h6><p>ServletConfig对象，主要用来获取web.xml中的配置数据，完成一些初始化数据据的读取</p>
<h6 id="四个作用域对象"><a href="#四个作用域对象" class="headerlink" title="四个作用域对象"></a>四个作用域对象</h6><p>pageContext：当前对象，解决了在当前页面的数据共享问题。获取其他内置对象</p>
<p>request:一次请求，一次请求的servlet的数据共享。通过请求转发将数据流转给下一个Servlet</p>
<p>session:一次会话，一个用户的不同请求的数据共享。将数据从一次请求流转给其他请求</p>
<p>application:项目内，不同用户的数据共享问题。将数据从一个用户流转给其他用户</p>
<p>作用：数据流转</p>
<h4 id="jsp资源路径"><a href="#jsp资源路径" class="headerlink" title="jsp资源路径"></a>jsp资源路径</h4><p>在jsp中资源路径可以使用相对路径完成跳转，存在的问题</p>
<p>问题一：资源的位置不可随意更改</p>
<p>问题二：需要使用<code>../</code>进行文件夹的跳出，使用比较麻烦</p>
<h5 id="使用绝对路径"><a href="#使用绝对路径" class="headerlink" title="使用绝对路径"></a>使用绝对路径</h5><p> <code>/</code>表示服务器根目录即localhost:8080/</p>
<p>/虚拟项目名/项目资源路径</p>
<p>举例：项目虚拟名为jsp    </p>
<p>资源文件路径webapp/jsp/a/a.jsp    <code>&lt;a href=&quot;/jsp/a/a.jsp&quot;&gt;a.jsp&lt;/a&gt;</code></p>
<p>webapp/jsp/jsppro.jsp    <code>&lt;a href=&quot;/jsp/jsppro.jsp&quot;&gt;jsppro.jsp&lt;/a&gt;</code></p>
<h5 id="使用jsp中自带的全局路径声明"><a href="#使用jsp中自带的全局路径声明" class="headerlink" title="使用jsp中自带的全局路径声明"></a>使用jsp中自带的全局路径声明</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">    &lt;/head&gt;   </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>作用：给资源前面添加项目路径<a href="http://127.0.0.1:8080/虚拟项目名/" target="_blank" rel="noopener">http://127.0.0.1:8080/虚拟项目名/</a></p>
<h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p>问题引入</p>
<ul>
<li>Servlet进行请求处理后，使用作用域对象作为数据流转的载体，将数据流转给对应的jsp文件</li>
<li>在jsp中获取作用域中的数据</li>
</ul>
<p>传统方式：在jsp页面中使用java脚本段语句</p>
<p>传统方式获取作用域数据</p>
<ul>
<li>缺点一：要通过<code>&lt;%@ page import=&quot;&quot;%&gt;</code>导入包</li>
<li>缺点二：需要强制转换对象</li>
<li>缺点三：获取数据的代码过于麻烦</li>
</ul>
<p>ElServlet.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"ElServlet"</span>, urlPatterns = &#123;<span class="string">"/es"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置请求编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 设置响应编码</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">// 获取请求信息</span></span><br><span class="line">        String uname = req.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">        <span class="comment">// 处理请求信息</span></span><br><span class="line">        System.out.println(uname + <span class="string">"==="</span> + pwd);</span><br><span class="line">        <span class="comment">// 响应处理结果</span></span><br><span class="line">        <span class="comment">// 使用request作用域进行数据流转</span></span><br><span class="line">        <span class="comment">// 普通字符串</span></span><br><span class="line">        req.setAttribute(<span class="string">"str"</span>, <span class="string">"今天天气很好!"</span>);</span><br><span class="line">        <span class="comment">// 对象类型</span></span><br><span class="line">        User u = <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">"张三"</span>, <span class="string">"跑步"</span>, <span class="keyword">new</span> Address(<span class="string">"湖北"</span>, <span class="string">"黄冈"</span>, <span class="string">"红安县"</span>));</span><br><span class="line">        req.setAttribute(<span class="string">"user"</span>, u);</span><br><span class="line">        <span class="comment">// 集合类型</span></span><br><span class="line">        <span class="comment">// List集合</span></span><br><span class="line">        <span class="comment">// 存储普通字符串</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"周润发"</span>);</span><br><span class="line">        list.add(<span class="string">"刘德华"</span>);</span><br><span class="line">        list.add(<span class="string">"周星驰"</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="comment">// 存储对象</span></span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"李四"</span>, <span class="string">"游泳"</span>, <span class="keyword">new</span> Address(<span class="string">"湖北"</span>, <span class="string">"武汉"</span>, <span class="string">"武昌区"</span>));</span><br><span class="line">        List&lt;User&gt; lu = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lu.add(u);</span><br><span class="line">        lu.add(u2);</span><br><span class="line">        req.setAttribute(<span class="string">"lu"</span>, lu);</span><br><span class="line">        <span class="comment">// Map集合</span></span><br><span class="line">        <span class="comment">// 存储普通字符串</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"a"</span>, <span class="string">"北京"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>, <span class="string">"上海"</span>);</span><br><span class="line">        map.put(<span class="string">"c"</span>, <span class="string">"广州"</span>);</span><br><span class="line">        map.put(<span class="string">"d"</span>, <span class="string">"深圳"</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">        <span class="comment">// 存储对象</span></span><br><span class="line">        Map&lt;String, User&gt; mu = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        mu.put(<span class="string">"a"</span>, <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"张家辉"</span>, <span class="string">"演戏"</span>, <span class="keyword">new</span> Address(<span class="string">"广东省"</span>, <span class="string">"广州市"</span>, <span class="string">"中山区"</span>)));</span><br><span class="line">        req.setAttribute(<span class="string">"mu"</span>, mu);</span><br><span class="line">        <span class="comment">// 空值判断</span></span><br><span class="line">        req.setAttribute(<span class="string">"s0"</span>,<span class="string">""</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"s1"</span>,<span class="keyword">new</span> User());</span><br><span class="line">        req.setAttribute(<span class="string">"s2"</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        req.setAttribute(<span class="string">"s3"</span>,<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">        </span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/el.jsp"</span>).forward(req, resp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相关bean类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String pre;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line">	getter/setter...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String fav;</span><br><span class="line">    <span class="keyword">private</span> Address addr;</span><br><span class="line">    getter/setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>jsp文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;&lt;%=request.getParameter("uname")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=request.getAttribute("str")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User) request.getAttribute("user")).getAddr().getTown()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((ArrayList) request.getAttribute("list")).get(1)%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User) ((ArrayList) request.getAttribute("lu")).get(0)).getAddr().getPre()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((ArrayList&lt;User&gt;) request.getAttribute("lu")).get(1).getAddr().getPre()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((HashMap) request.getAttribute("map")).get("b")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((HashMap&lt;String, User&gt;) request.getAttribute("mu")).get("a").getAddr().getTown()%&gt;&lt;/b&gt;</span><br></pre></td></tr></table></figure>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>全称：Expression Language，一种写法非常简洁的表达式，语法简单易懂，便于使用，表达式语言的灵感来自于ESMAScript和XPath表达式语言。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>让jsp书写起来更加的方便，简化在jsp中获取作用域或者请求数据的写法，也会搭配JSTL来进行使用</p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>语法结构：$(expression)提供<code>.</code>和<code>[]</code>两种运算符来存取数据    </p>
<h5 id="使用EL表达式获取请求数据"><a href="#使用EL表达式获取请求数据" class="headerlink" title="使用EL表达式获取请求数据"></a>使用EL表达式获取请求数据</h5><p>获取用户请求数据 ${requset.attribute}</p>
<p>获取请求头数据</p>
<ul>
<li>${header}   返回所有的请求头数据</li>
<li>${header[“键名”]}   返回指定键名的请求头数据</li>
<li>${headerValues[“键名”]} 返回指定得键名(同键不同值)</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;header&#125;</span><br><span class="line">$&#123;header[<span class="string">"User-Agent"</span>]&#125;</span><br><span class="line">$&#123;headerValues[<span class="string">"Accept-Language"</span>][<span class="number">0</span>]&#125;</span><br></pre></td></tr></table></figure>
<p>获取Cookie数据</p>
<ul>
<li>${cookie}   返回存储了所有的cookie对象的map集合</li>
<li>${cookie.键名}    返回指定的cookie对象</li>
<li>${cookie.键名.name}   返回指定的cookie对象存储的数据的键名</li>
<li>${cookie.键名.value}   返回指定的cookie对象存储的数据的值</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;cookie&#125;</span><br><span class="line">$&#123;cookie.JSESSIONID.value&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用EL表达式获取作用域数据"><a href="#使用EL表达式获取作用域数据" class="headerlink" title="使用EL表达式获取作用域数据"></a>使用EL表达式获取作用域数据</h5><h6 id="获取作用域数据"><a href="#获取作用域数据" class="headerlink" title="获取作用域数据"></a>获取作用域数据</h6><ul>
<li>request对象存储了请求数据    param.键名         返回的是值</li>
<li>request对象存储了请求数据    paramValues.键名   返回的是数组</li>
</ul>
<p>通过setAttribute方法存储到作用域对象中的数据</p>
<ul>
<li>${键名}   返回键名所对应的值</li>
</ul>
<p>注意</p>
<ul>
<li>如果存储的是普通字符串则直接返回</li>
<li>如果存储的是对象，则返回的是对象</li>
</ul>
<p>获取对象中的数据</p>
<ul>
<li>普通对象:${键名.属性名.属性名…}</li>
<li>集合对象:<ul>
<li>list集合${键名[角标]}</li>
<li>map集合${键名.map集合存储的键名}</li>
</ul>
</li>
</ul>
<h6 id="作用域查找顺序"><a href="#作用域查找顺序" class="headerlink" title="作用域查找顺序"></a>作用域查找顺序</h6><p>默认查找顺序：pageContext—&gt;reqeust—&gt;session—&gt;application</p>
<font color='red'>注意：每次查找都从小到大进行查找，找到了则获取，不再继续找了</font>

<h6 id="获取指定作用域的数据"><a href="#获取指定作用域的数据" class="headerlink" title="获取指定作用域的数据"></a>获取指定作用域的数据</h6><ul>
<li>${requestScope.键名}</li>
<li>${pageScope.键名}</li>
<li>${sessionScope.键名}</li>
<li>${applicationScope.键名}</li>
</ul>
<h5 id="使用EL表达式进行运算"><a href="#使用EL表达式进行运算" class="headerlink" title="使用EL表达式进行运算"></a>使用EL表达式进行运算</h5><p>算术运算${算术表达式}</p>
<p>关系运算${关系表达式}</p>
<p>逻辑运算${逻辑表达式}</p>
<p>三目运算${三目表达式}</p>
<font color='red'>注意：</font>`+`<font color='red'>表示加法运算，不表示字符连接，使用EL表达式进行字符连接会报错</font>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">3</span>=&gt;$&#123;<span class="number">1</span>+<span class="number">3</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=&gt;$&#123;<span class="number">1</span>*<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>=&gt;$&#123;<span class="number">1</span>/<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>-<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>-<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>%<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>%<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>==<span class="number">3</span>=&gt;$&#123;<span class="number">4</span>==<span class="number">3</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>&gt;<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>&gt;<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>==<span class="number">1</span>?<span class="string">'男'</span>:<span class="string">'女'</span>=&gt;$&#123;<span class="number">1</span>==<span class="number">1</span>?<span class="string">'男'</span>:<span class="string">'女'</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>+<span class="string">"2"</span>=&gt;$&#123;<span class="number">1</span>+<span class="string">"2"</span>&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用EL表达式控制判断empty"><a href="#使用EL表达式控制判断empty" class="headerlink" title="使用EL表达式控制判断empty"></a>使用EL表达式控制判断empty</h5><p>${empty 键名}</p>
<p>作用：判断键名对象的值是否存有数据</p>
<h3 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>JSTL是apache对EL表达式的扩展（JSTL依赖于EL），JSTL是标签语言。JSTL标签使用起来非常方便，它与JSP动作标签一样，只不过是它不是JSP内置的标签，需要导包，以及指定标签库。</p>
<p>使用MyEclipse开发JavaWeb，在项目发布到Tomcat时，MyEclipse会在lib目录下存放jstl的jar包。如果没有使用MyEclipse开发需要手动导入jar包。Maven项目需要导入JSTL的相关依赖。</p>
<h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>用来提升在JSP页面的逻辑代码的编码效率，使用标签来替换逻辑代码的直接书写，高效、美观、整洁、易读。</p>
<h4 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h4><ul>
<li>核心标签库</li>
<li>格式化标签库</li>
<li>JSTL的SQL标签库</li>
<li>JSTL的函数标签库</li>
<li>JSTL的XML标签库</li>
</ul>
<p>菜鸟教程-JSTL：<a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p>
<h5 id="JSTL的核心标签库"><a href="#JSTL的核心标签库" class="headerlink" title="JSTL的核心标签库"></a>JSTL的核心标签库</h5><ol>
<li><p>导入jar包</p>
</li>
<li><p>声明jstl标签库的引入(核心标签库)</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jstl/core_rt"</span> %&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h6><p><code>&lt;c:out value=&quot;数据&quot; default=&quot;默认值&quot;/&gt;</code></p>
<p>数据可以作为常量值也可以是EL表达式</p>
<p>作用：将数据输出给客户端</p>
<p><code>&lt;c:set var=&quot;hello&quot; value=&quot;hello pageContext&quot; scope=&quot;page&quot;/&gt;</code></p>
<p>作用：存储数据到作用域对象中</p>
<ul>
<li>var:表示存储的键名</li>
<li>value:表示存储的数据</li>
<li>scope:表示要存储的作用域对象 page request session application</li>
</ul>
<p><code>&lt;c:remove var=&quot;hello&quot; scope=&quot;request&quot;/&gt;</code></p>
<p>作用：删除作用域中指定键的数据</p>
<ul>
<li>var:表示要删除的键的名字</li>
<li>scrope:表示要删除的作用域(可选)</li>
<li><font color='red'>注意：如果在不指定作用域的情况使用该标签删除数据，会将四个作用域对象中的符合要求的数据全部删除</font>

</li>
</ul>
<h6 id="逻辑标签"><a href="#逻辑标签" class="headerlink" title="逻辑标签"></a>逻辑标签</h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"\$&#123;表达式&#125;"</span>&gt;</span><br><span class="line">    前端代码</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure>
<p>作用：进行逻辑判断，相当于java代码的单分支判断。</p>
<p>注意：逻辑判断标签需要依赖于EL的逻辑运算，也就是表达式中涉及到的数据必须从作用域中拿。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=""&gt;执行内容&lt;/c:when&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;c:otherwise&gt;执行内容&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>
<p>作用:用来进行多条件逻辑判断，类似java中的多分支语句。</p>
<p>注意：条件成立只会执行一次，都不成立则执行otherwise。</p>
<h6 id="循环标签"><a href="#循环标签" class="headerlink" title="循环标签"></a>循环标签</h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"4"</span> step=<span class="string">"1"</span>&gt;</span><br><span class="line">    循环体</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<p>作用：循环内容进行处理</p>
<ul>
<li><p>begin：声明循环开始位置</p>
</li>
<li><p>end：声明循环结束位置</p>
</li>
<li><p>step：设置循环步长</p>
</li>
<li><p>varStatus：声明变量记录每次循环的数据(角标、次数，是否是第一次循环，是否是最后一次循环)</p>
<p>注意:数据存储在作用域中，需要使用EL表达式获取</p>
<p>例如：${vs.index}—${vs.count}—​${vs.first}—​${vs.last}</p>
</li>
<li><p>items：声明要遍历的对象，结合EL表达式获取对象</p>
</li>
<li><p>var：声明变量记录每次循环的结果，存储在作用域中，通过EL表达式获取对象</p>
</li>
</ul>
<p>数据</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"hello"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">map.put(<span class="string">"world"</span>, <span class="string">"world"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--常量循环--%&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"4"</span> step=<span class="string">"1"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">    $&#123;vs.index&#125;--$&#123;vs.count&#125;--$&#123;vs.first&#125;--$&#123;vs.last&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;%--动态循环--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"varlist"</span>&gt;</span><br><span class="line">    $&#123;varlist&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--JSTL方式创建表格--%&gt;</span><br><span class="line">&lt;table border=<span class="string">"1px"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;字段名&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"s"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;%--遍历map集合--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;map&#125;"</span> <span class="keyword">var</span>=<span class="string">"m"</span>&gt;</span><br><span class="line">    $&#123;m.key&#125;:$&#123;m.value&#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>jsp</tag>
        <tag>el</tag>
        <tag>jstl</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode--#1两数之和</title>
    <url>/articles/eb1f9a79.html</url>
    <content><![CDATA[<h6 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h6><blockquote>
<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p>
</blockquote>
<a id="more"></a>
<h6 id="暴力解法-超时"><a href="#暴力解法-超时" class="headerlink" title="暴力解法(超时)"></a>暴力解法(超时)</h6><p>枚举比较，从第一个数到最后一个数逐个求和比较，直至匹配成功</p>
<p>时间复杂度：$O(n^2)$<br>空间复杂度：$O(1)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 暴力解法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSumByBF(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == nums[i] + nums[j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="两遍hash表"><a href="#两遍hash表" class="headerlink" title="两遍hash表"></a>两遍hash表</h6><p>第一遍：将数组转换成<code>hash</code>表，以数组的数值作为键，以索引作为值存储在<code>hash</code>表中<br>第二遍：在<code>hash</code>表中查找，查找能与当前数组的元素的和为<code>target</code>的键</p>
<p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 两遍hash表</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSumByHashMap(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    Map&lt;Integer, Integer&gt; table = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//将数组转换成hash表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)</span><br><span class="line">        table.put(nums[i], i);	<span class="comment">//以数值为键，索引为值</span></span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> searched = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (table.containsKey(searched) &amp;&amp; table.get(searched) != i) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, table.get(searched)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="一遍hash表"><a href="#一遍hash表" class="headerlink" title="一遍hash表"></a>一遍hash表</h6><p>一边插入hash表，一边查找</p>
<p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 一遍hash表，边插入边查找</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSumByHashMapOnce(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    Map&lt;Integer, Integer&gt; table = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//将数组转换成hash表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> searched = target - nums[i];</span><br><span class="line">        <span class="comment">//先查找</span></span><br><span class="line">        <span class="keyword">if</span> (table.containsKey(searched) &amp;&amp; table.get(searched) != i)	<span class="comment">//保证不是同一个元素</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;table.get(searched), i&#125;;</span><br><span class="line">		<span class="comment">//后插入表中</span></span><br><span class="line">        table.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode--#200岛屿数量</title>
    <url>/articles/c2dfdd41.html</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h6 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h6><blockquote>
<ul>
<li>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</li>
<li>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</li>
<li>此外，你可以假设该网格的四条边均被水包围。</li>
</ul>
<p>示例一：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    11110</span><br><span class="line">    11010</span><br><span class="line">    11000</span><br><span class="line">    00000</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>
<p>解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</p>
<p>示例二：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">    11000</span><br><span class="line">    11000</span><br><span class="line">    00100</span><br><span class="line">    00011</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>
<p>解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</p>
</blockquote>
<h6 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h6><blockquote>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/number-of-islands" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-islands</a></p>
</blockquote>
<a id="more"></a>
<h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h5 id="深度优先搜索DFS"><a href="#深度优先搜索DFS" class="headerlink" title="深度优先搜索DFS"></a>深度优先搜索DFS</h5><h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h6><p>深度优先搜索：借助递归</p>
<ul>
<li>遍历整个数组 </li>
<li>如果一个位置为 1，则以其为起始节点开始进行深度优先搜索</li>
<li>在深度优先搜索的过程中，每个搜索到的 1 都会被重新标记为 0</li>
<li>最终岛屿的数量就是进行深度优先搜索的次数</li>
</ul>
<p>算法时间复杂度：O(MN)  M：二维网格的行数，N：二维网格的列数</p>
<p>算法空间复杂度：O(1)</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslandsByDFS</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) &#123; <span class="comment">//判空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> islandNum = <span class="number">0</span>;          <span class="comment">//岛屿数量</span></span><br><span class="line">    <span class="keyword">int</span> row = grid.length;      <span class="comment">//行数</span></span><br><span class="line">    <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;   <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; row; r++) &#123;     <span class="comment">//遍历列元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; col; c++) &#123; <span class="comment">//遍历行元素</span></span><br><span class="line">            <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                islandNum++;        <span class="comment">//岛屿数量+1</span></span><br><span class="line">                dfs(grid, r, c);    <span class="comment">//循环深度优先搜索</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> islandNum;   <span class="comment">//返回岛屿数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 深度优先搜索--借助递归</span></span><br><span class="line"><span class="comment">* 遍历整个数组</span></span><br><span class="line"><span class="comment">* 如果一个位置为 1，则以其为起始节点开始进行深度优先搜索</span></span><br><span class="line"><span class="comment">* 在深度优先搜索的过程中，每个搜索到的 1 都会被重新标记为 0</span></span><br><span class="line"><span class="comment">* 最终岛屿的数量就是进行深度优先搜索的次数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> grid 二维网格</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> r	当前元素行数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> c	当前元素列数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row = grid.length;      <span class="comment">//行数</span></span><br><span class="line">    <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;   <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span> || c &lt; <span class="number">0</span> ||</span><br><span class="line">        r &gt;= row || c &gt;= col ||</span><br><span class="line">        grid[r][c] == <span class="string">'0'</span>) &#123;    <span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    grid[r][c] = <span class="string">'0'</span>;     <span class="comment">//重新标记</span></span><br><span class="line">    dfs(grid, r - <span class="number">1</span>, c);    <span class="comment">//正上方</span></span><br><span class="line">    dfs(grid, r + <span class="number">1</span>, c);    <span class="comment">//正下方</span></span><br><span class="line">    dfs(grid, r, c - <span class="number">1</span>);    <span class="comment">//正左方</span></span><br><span class="line">    dfs(grid, r, c + <span class="number">1</span>);    <span class="comment">//正右方</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="广度优先搜索BFS"><a href="#广度优先搜索BFS" class="headerlink" title="广度优先搜索BFS"></a>广度优先搜索BFS</h5><h6 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h6><p>广度优先搜索：借助队列</p>
<ul>
<li>遍历整个数组</li>
<li>如果一个位置为 1，则将其加入队列，开始进行广度优先搜索</li>
<li>在广度优先搜索的过程中，每个搜索到的 1 都会被重新标记为 0</li>
<li>直到队列为空，搜索结束</li>
<li>最终岛屿的数量就是进行广度优先搜索的次数</li>
</ul>
<p>算法时间复杂度：O(MN)</p>
<p>算法空间复杂度：O(min(M,N))    M：二维网格的行数，N：二维网格的列数</p>
<h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numIslandsByBFS</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> islandsNum = <span class="number">0</span>;         <span class="comment">//岛屿数量</span></span><br><span class="line">    <span class="keyword">int</span> row = grid.length;      <span class="comment">//行数</span></span><br><span class="line">    <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;   <span class="comment">//列数</span></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; row; r++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; col; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;    <span class="comment">//陆地</span></span><br><span class="line">                grid[r][c] = <span class="string">'0'</span>;   <span class="comment">//重新标记</span></span><br><span class="line">                islandsNum++;</span><br><span class="line">                Deque&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                queue.add(r * col + c);         <span class="comment">//入队</span></span><br><span class="line">                <span class="keyword">while</span> (!queue.isEmpty()) &#123;      <span class="comment">//队列不为空</span></span><br><span class="line">                    <span class="keyword">int</span> id = queue.remove();    <span class="comment">//出队</span></span><br><span class="line">                    <span class="comment">//当前元素的位置</span></span><br><span class="line">                    <span class="keyword">int</span> cr = id / col;    <span class="comment">//当前元素的行</span></span><br><span class="line">                    <span class="keyword">int</span> cc = id % col;    <span class="comment">//当前元素的列</span></span><br><span class="line">                    <span class="keyword">if</span> (cr - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[cr - <span class="number">1</span>][cc] == <span class="string">'1'</span>) &#123;   <span class="comment">//正上方</span></span><br><span class="line">                        queue.add((cr - <span class="number">1</span>) * col + cc);</span><br><span class="line">                        grid[cr - <span class="number">1</span>][cc] = <span class="string">'0'</span>; <span class="comment">//重新标记</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cr + <span class="number">1</span> &lt; row &amp;&amp; grid[cr + <span class="number">1</span>][cc] == <span class="string">'1'</span>) &#123; <span class="comment">//正下方</span></span><br><span class="line">                        queue.add((cr + <span class="number">1</span>) * col + cc);</span><br><span class="line">                        grid[cr + <span class="number">1</span>][cc] = <span class="string">'0'</span>; <span class="comment">//重新标记</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cc - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[cr][cc - <span class="number">1</span>] == <span class="string">'1'</span>) &#123;   <span class="comment">//正左方</span></span><br><span class="line">                        queue.add(cr * col + cc - <span class="number">1</span>);</span><br><span class="line">                        grid[cr][cc - <span class="number">1</span>] = <span class="string">'0'</span>; <span class="comment">//重新标记</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cc + <span class="number">1</span> &lt; col &amp;&amp; grid[cr][cc + <span class="number">1</span>] == <span class="string">'1'</span>) &#123; <span class="comment">//正右方</span></span><br><span class="line">                        queue.add(cr * col + cc + <span class="number">1</span>);</span><br><span class="line">                        grid[cr][cc + <span class="number">1</span>] = <span class="string">'0'</span>; <span class="comment">//重新标记</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> islandsNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode--#202快乐数</title>
    <url>/articles/6cd30686.html</url>
    <content><![CDATA[<h6 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h6><blockquote>
<p>编写一个算法来判断一个数 n 是不是快乐数。</p>
<p>「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是<strong>无限循环</strong> 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。</p>
<p>如果 n 是快乐数就返回 <code>True</code> ；不是，则返回 <code>False</code> 。<br>编写一个算法来判断一个数 n 是不是快乐数。</p>
<p>示例：</p>
<p>输入：19<br>输出：true<br>解释：<br>$1^2$ + $9^2$ = 82<br>$8^2$ + $2^2$ = 68<br>$6^2$ + $8^2$ = 100<br>$1^2$ + $0^2$ + $0^2$ = 1</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/happy-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/happy-number</a></p>
</blockquote>
<a id="more"></a>
<h6 id="集合法"><a href="#集合法" class="headerlink" title="集合法"></a>集合法</h6><p>通过用Set集合来保存数n去判断是否出现循环，当出现循环时，返回<code>false</code></p>
<p>时间复杂度：$O(\log_2{n})$</p>
<p>空间复杂度：$O(\log_2{n})$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 集合法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHappyBySet</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//用Set比List快</span></span><br><span class="line">    Set&lt;Integer&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span> &amp;&amp; !list.contains(n)) &#123;</span><br><span class="line">        list.add(n);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//求n的每一位的平方和</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> bit = n % <span class="number">10</span>;</span><br><span class="line">            num += bit * bit;</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a>快慢指针法</h6><blockquote>
<p>使用”快慢指针”思想找出循环：”快指针”每次走两步，”慢指针”每次走一步，二者相等时，即为一个循环周期。<br>此时，判断是不是因为1引起的循环，是的话就是快乐数，否则不是快乐数。</p>
<p>参考题解：</p>
<p>作者：linux-man</p>
<p>链接：<a href="https://leetcode-cn.com/problems/happy-number/solution/shi-yong-kuai-man-zhi-zhen-si-xiang-zhao-chu-xun-h/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/happy-number/solution/shi-yong-kuai-man-zhi-zhen-si-xiang-zhao-chu-xun-h/</a></p>
<p>来源：力扣（LeetCode）</p>
</blockquote>
<p>时间复杂度：$O(\log_2{n})$</p>
<p>空间复杂度：$O(1)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 快慢指针法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> slow = n, fast = n;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        slow = bitSquareSum(slow);</span><br><span class="line">        fast = bitSquareSum(fast);</span><br><span class="line">        fast = bitSquareSum(fast);</span><br><span class="line">    &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> slow == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 求数n每一位的平方和</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitSquareSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> bit = n % <span class="number">10</span>;</span><br><span class="line">        num += bit * bit;</span><br><span class="line">        n = n / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode--#33搜索旋转排序数组</title>
    <url>/articles/69254e2b.html</url>
    <content><![CDATA[<h6 id="搜索旋转排序数组"><a href="#搜索旋转排序数组" class="headerlink" title="搜索旋转排序数组"></a>搜索旋转排序数组</h6><blockquote>
<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>
<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>
<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>
<p>你可以假设数组中不存在重复的元素。</p>
<p>你的算法时间复杂度必须是 O(log n) 级别。</p>
<p>示例 1:</p>
<p>输入: nums = [4,5,6,7,0,1,2], target = 0<br>输出: 4</p>
<p>示例 2:</p>
<p>输入: nums = [4,5,6,7,0,1,2], target = 3<br>输出: -1</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-in-rotated-sorted-array</a></p>
</blockquote>
<a id="more"></a>
<h6 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h6><p>算法时间复杂度要求必须是 O(log n) 级别，需要使用二分法求解，而数组不一定是完全有序的，是部分有序的，要考虑到旋转点的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 递归二分搜索</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchByRecursion</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)	<span class="comment">//判空，避免空指针异常和索引越界</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> search(nums, target, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//使用&gt;=可以避免数组索引越界</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right &amp;&amp; target != nums[mid])   <span class="comment">//递归结束条件：没找到</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (target == nums[mid])    <span class="comment">//递归结束条件：找到</span></span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= nums[mid]) &#123; </span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid])    <span class="comment">//target在前半部分</span></span><br><span class="line">            <span class="keyword">return</span> search(nums, target, left, mid - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> search(nums, target, mid + <span class="number">1</span>, right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[nums.length - <span class="number">1</span>])  <span class="comment">//target在后半部分</span></span><br><span class="line">            <span class="keyword">return</span> search(nums, target, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> search(nums, target, left, mid - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode--#46全排列</title>
    <url>/articles/6d9b5c12.html</url>
    <content><![CDATA[<h6 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h6><blockquote>
<p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p>
<p>示例:</p>
<p>输入: [1,2,3]<br>输出:<br>[<br>[1,2,3],<br>[1,3,2],<br>[2,1,3],<br>[2,3,1],<br>[3,1,2],<br>[3,2,1]<br>]</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/permutations" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutations</a></p>
</blockquote>
<a id="more"></a>
<h6 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h6><p>解析：<a href="https://leetcode-cn.com/problems/permutations/solution/quan-pai-lie-by-leetcode-solution-2/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutations/solution/quan-pai-lie-by-leetcode-solution-2/</a></p>
<p>时间复杂度：$O(n<em>n!)$，其中 </em>n<em> 为序列的长度<br>空间复杂度：$O(n)$，其中 </em>n* 为序列的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 回溯法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> len</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> output</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> first</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">                      List&lt;Integer&gt; output,</span></span></span><br><span class="line"><span class="function"><span class="params">                      List&lt;List&lt;Integer&gt;&gt; res,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">int</span> first)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 递归结束条件：所有数都填完了</span></span><br><span class="line">    <span class="keyword">if</span> (first == len)</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(output));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 动态维护数组</span></span><br><span class="line">        Collections.swap(output, first, i);</span><br><span class="line">        <span class="comment">// 继续递归填下一个数</span></span><br><span class="line">        backtrack(n, output, res, first + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 撤销操作</span></span><br><span class="line">        Collections.swap(output, first, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; output = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)</span><br><span class="line">        output.add(num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    backtrack(len, output, res, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis笔记</title>
    <url>/articles/93fcac00.html</url>
    <content><![CDATA[<h4 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h4><h5 id="原始jdbc操作"><a href="#原始jdbc操作" class="headerlink" title="原始jdbc操作"></a>原始jdbc操作</h5><p>原始jdbc开发存在的问题：</p>
<ul>
<li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能</li>
<li>sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化可能较大，sql变动需要改变java代码</li>
<li>查询操作时，需要手动将结果集中的数据封装到实体中；插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</li>
</ul>
<p>解决方案：</p>
<ul>
<li>使用数据库连接池初始化连接资源</li>
<li>将sql语句抽取到xml配置文件中</li>
<li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</li>
</ul>
<h5 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h5><ul>
<li>MyBatis是一个优秀的基于Java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</li>
<li>MyBatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</li>
<li>MyBatis框架执行sql将结果映射为java对象并返回。采用<strong>ORM</strong>（Object Relational Mapping 对象关系映射）思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节。</li>
</ul>
<a id="more"></a>
<h4 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h4><h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><ol>
<li>在<code>pom.xml</code>中添加MyBatis坐标（依赖）</li>
<li>创建user数据表</li>
<li>编写User实体类</li>
<li>编写映射文件UserMapper.xml</li>
<li>编写核心文件SqlMapConfig.xml</li>
<li>编写测试类</li>
</ol>
<h5 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h5><h6 id="添加MyBatis坐标"><a href="#添加MyBatis坐标" class="headerlink" title="添加MyBatis坐标"></a>添加MyBatis坐标</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log输出管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="创建user数据表"><a href="#创建user数据表" class="headerlink" title="创建user数据表"></a>创建user数据表</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建表</span><br><span class="line">CREATE TABLE user  (</span><br><span class="line">  uid int(10) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  uname varchar(50) NOT NULL,</span><br><span class="line">  password varchar(50) NOT NULL,</span><br><span class="line">  PRIMARY KEY (uid)</span><br><span class="line">);</span><br><span class="line"># 插入测试数据</span><br><span class="line">INSERT INTO user VALUES(1,&quot;zhangsan&quot;,&quot;123&quot;);</span><br><span class="line">INSERT INTO user VALUES(2,&quot;lisi&quot;,&quot;456&quot;);</span><br><span class="line">INSERT INTO user VALUES(3,&quot;wangwu&quot;,&quot;789&quot;);</span><br></pre></td></tr></table></figure>
<h6 id="编写User实体类"><a href="#编写User实体类" class="headerlink" title="编写User实体类"></a>编写User实体类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    getter/setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="编写映射文件UserMapper-xml"><a href="#编写映射文件UserMapper-xml" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="编写核心文件SqlMapConfig-xml"><a href="#编写核心文件SqlMapConfig-xml" class="headerlink" title="编写核心文件SqlMapConfig.xml"></a>编写核心文件SqlMapConfig.xml</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/study"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/study/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取核心配置文件</span></span><br><span class="line">        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        <span class="comment">// 获取sqlSession会话对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 执行操作</span></span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"userMapper.query"</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="MyBatis映射文件概述"><a href="#MyBatis映射文件概述" class="headerlink" title="MyBatis映射文件概述"></a>MyBatis映射文件概述</h4><p><code>&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</code>映射文件DTD约束头</p>
<p><code>&lt;mapper&gt;&lt;/mapper&gt;</code>根标签</p>
<p><code>namespace=&quot;userMapper&quot;</code>命名空间，与下面语句的id组成查询的标识</p>
<p><code>&lt;select&gt;&lt;/select&gt;</code>查询操作，可选的还有<code>insert</code>、<code>update</code>、<code>delete</code></p>
<p><code>id=&quot;query&quot;</code>语句的id标识，与上面的命令空间组成查询的标识</p>
<p><code>resultType=&quot;com.study.domain.User&quot;</code>查询结果对应的实体类型</p>
<p><code>select * from user</code>要执行的sql语句</p>
<h4 id="MyBatis增删改查操作"><a href="#MyBatis增删改查操作" class="headerlink" title="MyBatis增删改查操作"></a>MyBatis增删改查操作</h4><h5 id="MyBatis的插入数据操作"><a href="#MyBatis的插入数据操作" class="headerlink" title="MyBatis的插入数据操作"></a>MyBatis的插入数据操作</h5><ol>
<li>编写映射文件UserMapper.xml</li>
<li>修改编写实体User的代码</li>
</ol>
<h6 id="编写映射文件UserMapper-xml-1"><a href="#编写映射文件UserMapper-xml-1" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span><br><span class="line">    insert into user values(#&#123;uid&#125;,#&#123;uname&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="修改编写实体User的代码"><a href="#修改编写实体User的代码" class="headerlink" title="修改编写实体User的代码"></a>修改编写实体User的代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟User对象</span></span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setUname(<span class="string">"zhaoliu"</span>);</span><br><span class="line">    u.setPassword(<span class="string">"000"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">// 获取sqlSession会话对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="keyword">int</span> res = sqlSession.insert(<span class="string">"userMapper.add"</span>, u);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    <span class="comment">// 事务提交</span></span><br><span class="line">    sqlSession.commit(res &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="插入操作注意的问题"><a href="#插入操作注意的问题" class="headerlink" title="插入操作注意的问题"></a>插入操作注意的问题</h6><ul>
<li>插入语句使用<code>insert</code>标签</li>
<li>在映射问文件中使用<code>parameterType</code>属性指定要插入的数据类型</li>
<li>sql语句中使用<code>#{实体属性名}</code>方式引用实体中的属性值</li>
<li>插入操作使用的API是<code>sqlSession.insert(&quot;命名空间.id&quot;,具体实体对象)</code></li>
<li>插入操作设计数据库数据变化，所以要用sqlSession对象显式的提交即<code>sqlSession,commit()</code></li>
</ul>
<h5 id="MyBatis的修改数据操作"><a href="#MyBatis的修改数据操作" class="headerlink" title="MyBatis的修改数据操作"></a>MyBatis的修改数据操作</h5><h6 id="编写映射文件UserMapper-xml-2"><a href="#编写映射文件UserMapper-xml-2" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span><br><span class="line">    update user set uname=#&#123;uname&#125;,password=#&#123;password&#125; where uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="修改编写实体User的代码-1"><a href="#修改编写实体User的代码-1" class="headerlink" title="修改编写实体User的代码"></a>修改编写实体User的代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟User对象</span></span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setUid(<span class="number">3</span>);</span><br><span class="line">    u.setUname(<span class="string">"wangwu333"</span>);</span><br><span class="line">    u.setPassword(<span class="string">"333"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">// 获取sqlSession会话对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="keyword">int</span> res = sqlSession.update(<span class="string">"userMapper.update"</span>, u);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    <span class="comment">// 事务提交</span></span><br><span class="line">    sqlSession.commit(res &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="修改操作注意的问题"><a href="#修改操作注意的问题" class="headerlink" title="修改操作注意的问题"></a>修改操作注意的问题</h6><ul>
<li>修改语句使用update标签</li>
<li>修改操作使用的API是sqlSession.updae(“命名空间.id”,具体实体对象)</li>
</ul>
<h5 id="MyBatis的删除数据操作"><a href="#MyBatis的删除数据操作" class="headerlink" title="MyBatis的删除数据操作"></a>MyBatis的删除数据操作</h5><h6 id="编写映射文件UserMapper-xml-3"><a href="#编写映射文件UserMapper-xml-3" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from user where uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="修改编写实体User的代码-2"><a href="#修改编写实体User的代码-2" class="headerlink" title="修改编写实体User的代码"></a>修改编写实体User的代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">// 获取sqlSession会话对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="keyword">int</span> res = sqlSession.delete(<span class="string">"userMapper.delete"</span>, <span class="number">6</span>);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    <span class="comment">// 事务提交</span></span><br><span class="line">    sqlSession.commit(res &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="删除操作注意的问题"><a href="#删除操作注意的问题" class="headerlink" title="删除操作注意的问题"></a>删除操作注意的问题</h6><ul>
<li>删除语句使用delete标签</li>
<li>sql语句中使用#{任意字符串}方式引用传递的单个参数</li>
<li>删除操作使用的API是sqlSession.delete(“命名空间.id”,Object);</li>
</ul>
<h4 id="MyBatis核心配置文件概述"><a href="#MyBatis核心配置文件概述" class="headerlink" title="MyBatis核心配置文件概述"></a>MyBatis核心配置文件概述</h4><h5 id="MyBatis核心配置文件层级关系"><a href="#MyBatis核心配置文件层级关系" class="headerlink" title="MyBatis核心配置文件层级关系"></a>MyBatis核心配置文件层级关系</h5><p>configuration配置</p>
<ul>
<li>properties 属性</li>
<li>settings 设置</li>
<li>typeAliases 类型别名</li>
<li>objectFactory 对象工厂</li>
<li>plugins 插件</li>
<li>environments 环境<ul>
<li>environment 环境变量<ul>
<li>transactionManager 事务管理器</li>
<li>dataSource 数据源</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider 数据库厂商标识</li>
<li>mappers 映射器</li>
</ul>
<h5 id="MyBatis常用配置解析"><a href="#MyBatis常用配置解析" class="headerlink" title="MyBatis常用配置解析"></a>MyBatis常用配置解析</h5><h6 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h6><p>数据库环境的配置，支持多环境配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定默认的环境名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定当前的环境名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定事务管理器类型是JDBC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--指定当前数据源类型是连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!--数据源驱动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span>	 </span><br><span class="line">            <span class="comment">&lt;!--url--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/study"</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，事务管理器（transactionManager）类型有两种</p>
<ul>
<li>JDBC：使用JDBC的提交和回滚事务设置，它依赖于从数据源得到的连接来管理事务作用域。</li>
<li>MANAGED：它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如JEE应用服务器的上下文）。默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将closeConnection设置为false来组织它默认的关闭行为。</li>
</ul>
<p>数据源（datasource）类型有三种</p>
<ul>
<li>UNPOOLED：这种数据源实现只是每次被请求时打开和关闭连接</li>
<li>POOLED：这种数据源的实现利用“池”的概念将JDBC连接对象组织起来</li>
<li>JNDI：这种数据源的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后在放置一个JNDI上下文的引用。</li>
</ul>
<h6 id="mappers标签"><a href="#mappers标签" class="headerlink" title="mappers标签"></a>mappers标签</h6><p>mappers标签的作用是加载映射，加载方式</p>
<ul>
<li>使用相对类路径的资源引用，例如：<code>&lt;mapper resource=&quot;org/mybtatis/builder/AuthorMapper.xml&quot;/&gt;</code></li>
<li>使用完全限定资源定位符（URL），例如：<code>&lt;mapper =&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</code></li>
<li>使用映射器接口实现类的完全限定类名，例如：<code>&lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</code></li>
<li>将包内的映射器接口实现全部注册为映射器，例如：<code>package name=&quot;org.mybatis.builder&quot;</code></li>
</ul>
<h6 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h6><blockquote>
<p><code>jdbc.properties</code>文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/study</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<p><code>SqlMapConfig.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部properties配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置数据源环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span>          </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h6><p>类型别名是为java类型设置别名，配置typeAliases为com.sutdy.domain.User定义为别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.study.domain.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>MyBatis框架已定义常用的类型别名</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">别名</th>
<th style="text-align:center">数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">string</td>
<td style="text-align:center">String</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">Long</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">Integer</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">Double</td>
</tr>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">Boolean</td>
</tr>
</tbody>
</table>
</div>
<h4 id="MyBatis相应API"><a href="#MyBatis相应API" class="headerlink" title="MyBatis相应API"></a>MyBatis相应API</h4><h5 id="SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="SqlSession工厂构建器SqlSessionFactoryBuilder"></a>SqlSession工厂构建器SqlSessionFactoryBuilder</h5><p>常用API：<code>SqlSessionFactoryBuilder().build(InputStream inputStream);</code><br>通过加载MyBatis的核心文件的输入流的形式构建一个SqlSessionFactory对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取核心配置文件</span></span><br><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br></pre></td></tr></table></figure>
<p>其中，Resources工具类在org.apache.ibatis,io包中，Resources类从类路径下、文件系统或一个web URL中加载资源文件。</p>
<h5 id="SqlSession工厂对象SQLSessionFactory"><a href="#SqlSession工厂对象SQLSessionFactory" class="headerlink" title="SqlSession工厂对象SQLSessionFactory"></a>SqlSession工厂对象SQLSessionFactory</h5><p>SqlSessionFactory有多个方法创建SqlSession实例，常用方法：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">openSession()</td>
<td style="text-align:center">会默认开启一个事务，但事务不会自动提交，需要手动提交该事务，更新操作（增删改）才会持久化到数据库中</td>
</tr>
<tr>
<td style="text-align:center">openSession(boolean autoCommit)</td>
<td style="text-align:center">参数为是否自动提交事务，如果设置为true，则不需要手动提交事务</td>
</tr>
</tbody>
</table>
</div>
<h6 id="SqlSessionj会话对象"><a href="#SqlSessionj会话对象" class="headerlink" title="SqlSessionj会话对象"></a>SqlSessionj会话对象</h6><p>SqlSession实例，包含执行语句、提交、回滚事务和获取映射器实例的方法。</p>
<p>执行语句的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line">&lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span>;</span><br></pre></td></tr></table></figure>
<p>操作事务的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> paramter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="MyBatis的Dao层实现"><a href="#MyBatis的Dao层实现" class="headerlink" title="MyBatis的Dao层实现"></a>MyBatis的Dao层实现</h4><h5 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h5><ul>
<li>编写UserDao接口和UserDaoImpl实现类</li>
<li>编写UserService接口和UserServiceImpl实现类</li>
<li>编写客户端测试类</li>
</ul>
<h5 id="代理开发方式"><a href="#代理开发方式" class="headerlink" title="代理开发方式"></a>代理开发方式</h5><p>采用MyBatis的代理开发方式实现Dao层的开发。</p>
<p>Mapper接口方法只需要编写Mapper接口（相当于Dao接口），由MyBatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体与传统的Dao接口实现类方法相同。</p>
<p>Mapper接口开发需要遵循的规范：</p>
<ol>
<li>mapper.xml文件中的namespace与Mapper接口的全限定名相同</li>
<li>Mapper几口方法名和Mapper.xml中定义的每个statement的id相同</li>
<li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</li>
<li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li>
</ol>
<h4 id="MyBatis映射文件"><a href="#MyBatis映射文件" class="headerlink" title="MyBatis映射文件"></a>MyBatis映射文件</h4><p>MyBatis映射文件Mapper.xml标签</p>
<ul>
<li><code>&lt;select&gt;</code>：查询</li>
<li><code>&lt;insert&gt;</code>：插入</li>
<li><code>&lt;update&gt;</code>：修改</li>
<li><code>&lt;delete&gt;</code>：删除</li>
<li><code>&lt;where&gt;</code>：where条件</li>
<li><code>&lt;if&gt;</code>：if判断</li>
<li><code>&lt;foreach&gt;</code>：循环</li>
<li><code>&lt;sql&gt;</code>：sql片段抽取</li>
</ul>
<h5 id="动态sql语句"><a href="#动态sql语句" class="headerlink" title="动态sql语句"></a>动态sql语句</h5><p>MyBatis的映射文件中，业务逻辑复杂时，sql语句是动态变化的。</p>
<ul>
<li>if</li>
<li>choose(when,otherwise)</li>
<li>trim(where,set)</li>
<li>foreach</li>
</ul>
<h6 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h6><p>and多条件类型</p>
<p><code>select * from where uid=? and uname=? and password=?</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"uid!=0"</span>&gt;</span></span><br><span class="line">            and uid = #&#123;uid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"uname!=null"</span>&gt;</span></span><br><span class="line">            and uname = #&#123;uname&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h6><p>or多条件类型</p>
<p><code>select * from where uid in(?,?,...)</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"uid in("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"uid"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            #&#123;uid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="sql片段抽取"><a href="#sql片段抽取" class="headerlink" title="sql片段抽取"></a>sql片段抽取</h5><p>将sql语句中重复的部分抽取出来，使用时用include引用即可，达到sql重用的目的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sql抽取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectUser"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectUser"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="MyBatis核心配置文件"><a href="#MyBatis核心配置文件" class="headerlink" title="MyBatis核心配置文件"></a>MyBatis核心配置文件</h4><h5 id="typeHandlers标签"><a href="#typeHandlers标签" class="headerlink" title="typeHandlers标签"></a>typeHandlers标签</h5><p>无论是MyBatis在预处理语句（PrepareStatement）中设置一个参数时，还是从结果中取出一个值，都会用类型处理器将获取的值以合适的方式转换称Java类型。</p>
<div align="center">默认的类型处理器</div>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">类处理器</th>
<th style="text-align:center">Java类型</th>
<th style="text-align:center">JDBC类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BooleantTypeHandler</td>
<td style="text-align:center">java.lang.Boolean,boolean</td>
<td style="text-align:center">数据库兼容的BOOLEAN</td>
</tr>
<tr>
<td style="text-align:center">ByteTypeHandler</td>
<td style="text-align:center">java.lang.Byte,byte</td>
<td style="text-align:center">数据库兼容的NUMERIC或BYTE</td>
</tr>
<tr>
<td style="text-align:center">ShortTypeHandler</td>
<td style="text-align:center">java.lang.Short,short</td>
<td style="text-align:center">数据库兼容的NUMERIC或SHORT INTEGER</td>
</tr>
<tr>
<td style="text-align:center">IntegerTypeHandler</td>
<td style="text-align:center">java.lang.Integer,int</td>
<td style="text-align:center">数据库兼容的NUMERIC或INTEGER</td>
</tr>
<tr>
<td style="text-align:center">LongTypeHandler</td>
<td style="text-align:center">java.lang.Long,long</td>
<td style="text-align:center">数据库兼容的NUMERIC或LONG INTEGER</td>
</tr>
</tbody>
</table>
</div>
<p>可以重写类型处理器或创建自定义的类型处理器来处理不支持或非标准的类型。</p>
<p>具体做法</p>
<ul>
<li>方法一：实现org.apach.ibatis.type.TypeHandler接口</li>
<li>方法二：继承org.apach.ibatis.type.BaseTypeHandler类，然后选择性地将它映射到一个JDBC类型。</li>
</ul>
<h6 id="自定义类型处理器开发步骤"><a href="#自定义类型处理器开发步骤" class="headerlink" title="自定义类型处理器开发步骤"></a>自定义类型处理器开发步骤</h6><ol>
<li><p>定义转换类继承<code>BaseTypeHandler&lt;T&gt;</code></p>
</li>
<li><p>覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，getNullableResult为查询时mysql的字符串类型转换成java的Type类型的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// java--&gt;数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        preparedStatement.setLong(i, date.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库--&gt;java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = resultSet.getLong(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 数据库--&gt;java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = resultSet.getLong(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库--&gt;java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = callableStatement.getLong(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在MyBatis核心配置文件中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义类型处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"com.study.handler.DateTypeHandler"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试转换是否正确</p>
</li>
</ol>
<h5 id="plugins标签"><a href="#plugins标签" class="headerlink" title="plugins标签"></a>plugins标签</h5><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHandler是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据。</p>
<p>开发步骤</p>
<ol>
<li><p>导入PagerHelper坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在MyBatis核心配置文件中配置PageHelper插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--PageHelper4.0以后不用配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="dialect" value="mysql"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试分页数据获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前页码，每一页内容数量</span></span><br><span class="line">PageHelper.startPage(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>其他分页信息获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = Logger.getLogger(UserMapperTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取与分页相关参数</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(res);</span><br><span class="line">logger.debug(<span class="string">"当前页："</span> + pageInfo.getPageNum());</span><br><span class="line">logger.debug(<span class="string">"总页数："</span> + pageInfo.getPages());</span><br><span class="line">logger.debug(<span class="string">"总条数："</span> + pageInfo.getTotal());</span><br><span class="line">logger.debug(<span class="string">"每页显示的数量："</span> + pageInfo.getPageSize());</span><br><span class="line">logger.debug(<span class="string">"上一页："</span> + pageInfo.getPrePage());</span><br><span class="line">logger.debug(<span class="string">"下一页："</span> + pageInfo.getNextPage());</span><br><span class="line">logger.debug(<span class="string">"是否是首页："</span> + pageInfo.isIsFirstPage());</span><br><span class="line">logger.debug(<span class="string">"是否是尾页："</span> + pageInfo.isIsLastPage());</span><br></pre></td></tr></table></figure>
<h4 id="MyBatis多表操作"><a href="#MyBatis多表操作" class="headerlink" title="MyBatis多表操作"></a>MyBatis多表操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user_mb;</span><br><span class="line">+-----+-----------+----------+---------------+</span><br><span class="line">| uid | uname     | password | birthday      |</span><br><span class="line">+-----+-----------+----------+---------------+</span><br><span class="line">|   1 | zhangsan  | 123      | 1593414232744 |</span><br><span class="line">|   2 | lisi      | 456      | 1593414233749 |</span><br><span class="line">|   3 | wangwu333 | 333      | 1593414234745 |</span><br><span class="line">|   7 | tom       | 222      | 1593414234749 |</span><br><span class="line">+-----+-----------+----------+---------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from order_mb;</span><br><span class="line">+-----+---------------------+---------+-----+</span><br><span class="line">| oid | orderTime           | total   | uid |</span><br><span class="line">+-----+---------------------+---------+-----+</span><br><span class="line">|   1 | 2020-06-29 16:16:03 | 1000.00 |   1 |</span><br><span class="line">|   2 | 2020-06-29 16:16:25 | 1500.00 |   1 |</span><br><span class="line">|   3 | 2020-06-29 16:16:42 | 2000.00 |   2 |</span><br><span class="line">|   4 | 2020-06-29 16:17:14 | 3000.00 |   3 |</span><br><span class="line">+-----+---------------------+---------+-----+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from role_mb;</span><br><span class="line">+-----+-----------------+</span><br><span class="line">| rid | rolename        |</span><br><span class="line">+-----+-----------------+</span><br><span class="line">|   1 | 程序员           |</span><br><span class="line">|   2 | 前端设计师        |</span><br><span class="line">|   3 | 项目经理         |</span><br><span class="line">|   4 | 测试人员         |</span><br><span class="line">|   5 | 架构师           |</span><br><span class="line">+-----+-----------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user_role_mb;</span><br><span class="line">+-----+-----+</span><br><span class="line">| uid | rid |</span><br><span class="line">+-----+-----+</span><br><span class="line">|   1 |   1 |</span><br><span class="line">|   1 |   2 |</span><br><span class="line">|   2 |   3 |</span><br><span class="line">|   3 |   4 |</span><br><span class="line">+-----+-----+</span><br></pre></td></tr></table></figure>
<h5 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h5><p>模型：用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户。</p>
<p>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户。</p>
<p>配置：<code>&lt;resultMap&gt;</code></p>
<p>映射方式一</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.study.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    指定字段与实体属性的映射关系</span></span><br><span class="line"><span class="comment">    column:数据表的字段名称</span></span><br><span class="line"><span class="comment">    property:实体的属性名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"oid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orderTime"</span> <span class="attr">property</span>=<span class="string">"orderTime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"user.uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"user.uname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"user.password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"user.birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from order_mb o,</span><br><span class="line">        user_mb u</span><br><span class="line">        where o.uid = u.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>映射方式二</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"oid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orderTime"</span> <span class="attr">property</span>=<span class="string">"orderTime"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        property:当前实体(order)中的属性名称(private User user);</span></span><br><span class="line"><span class="comment">        javaType:当前实体(order)中的属性的类型(com.study.domain.User)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"uname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h5><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户。</p>
<p>一对一查询的需求：查询用户，与此同时查询出该用户的所有订单。</p>
<p>配置：<code>&lt;resultMap&gt;+&lt;collection&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.study.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"uname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            配置集合</span></span><br><span class="line"><span class="comment">            property:集合名称</span></span><br><span class="line"><span class="comment">            ofType:当前集合中的数据类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"order"</span> <span class="attr">ofType</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"oid"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orderTime"</span> <span class="attr">property</span>=<span class="string">"orderTime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user_mb u,</span><br><span class="line">             order_mb o</span><br><span class="line">        where u.uid = o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h5><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p>
<p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p>
<p>配置：<code>&lt;resultMap&gt;+&lt;collection&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRoleMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"uname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"role"</span> <span class="attr">ofType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"rid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rolename"</span> <span class="attr">property</span>=<span class="string">"rolename"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserRole"</span> <span class="attr">resultMap</span>=<span class="string">"userRoleMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user_mb u,</span><br><span class="line">         role_mb r,</span><br><span class="line">         user_role_mb ur</span><br><span class="line">    where u.uid = ur.uid</span><br><span class="line">      and r.rid = ur.rid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="MyBatis注解开发"><a href="#MyBatis注解开发" class="headerlink" title="MyBatis注解开发"></a>MyBatis注解开发</h4><p>常用注解</p>
<ul>
<li>@Insert：实现新增</li>
<li>@Update：实现删除</li>
<li>@Select：实现查询</li>
<li>@Result：实现结果集封装</li>
<li>@Results：可以与Result一起使用，封装多个结果集</li>
<li>@One：实现一对一结果集封装</li>
<li>@Many：实现一对多结果集封装</li>
</ul>
<h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user_mb values(#&#123;uid&#125;,#&#123;uname&#125;,#&#123;password&#125;,#&#123;birthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user_mb set uname=#&#123;uname&#125;,password=#&#123;password&#125;,birthday=#&#123;birthday&#125; where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user_mb where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定Mapper接口所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.study.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AnnotationTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">        mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUname(<span class="string">"tianqi"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"222"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        mapper.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUid(<span class="number">8</span>);</span><br><span class="line">        user.setUname(<span class="string">"tianqi555"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"555"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        mapper.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mapper.delete(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = mapper.findById(<span class="number">2</span>);</span><br><span class="line">        logger.debug(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; result = mapper.findAll();</span><br><span class="line">        logger.debug(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="复杂映射开发"><a href="#复杂映射开发" class="headerlink" title="复杂映射开发"></a>复杂映射开发</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">注解</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">@Results</td>
<td style="text-align:center">代替的是标签\&lt;resultMap&gt;,该注解中可以使用单个@Result注解，也可以使用@Result结合。使用格式：@Results({@Result(),@Result()})或@Results(@Result())</td>
</tr>
<tr>
<td style="text-align:center">@Result</td>
<td style="text-align:center">代替了\<id>标签和\<result>标签<br />@Result中属性介绍<br />column：数据库的列名<br />property：需要装配的属性名<br />one：需要使用的@One注解，@Result(one=@One()<br />many：需要使用的@Many注解，@Result(many=@Many())</td>
</tr>
<tr>
<td style="text-align:center">@One一对多</td>
<td style="text-align:center">代替了<code>&lt;assocation&gt;</code>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。@One注解属性介绍<br />select：指定用来多表查询的sqlmapper<br />使用格式：@Result(column=””,property=””,one=@One(select=””))</td>
</tr>
<tr>
<td style="text-align:center">@Many多对一</td>
<td style="text-align:center">代替了<code>&lt;collection&gt;</code>标签，是多表查询的关键，在注解中用来指定子查询返回对象集合，使用格式：@Result(column=””,property=””,many=@Many(select=””))</td>
</tr>
</tbody>
</table>
</div>
<h6 id="一对多查询-1"><a href="#一对多查询-1" class="headerlink" title="一对多查询"></a>一对多查询</h6><p>User实体中的属性</p>
<ul>
<li>private int uid;</li>
<li>private String uname;</li>
<li>private String password;</li>
<li>private Date birthday;</li>
</ul>
<p>Order实体中的属性</p>
<ul>
<li>private int oid;</li>
<li>private Date orderTime;</li>
<li>private double total;</li>
<li>private User user;</li>
</ul>
<p>UserMapper接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OrderMapper接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from order_mb"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(</span><br><span class="line">        &#123;<span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"oid"</span>, property = <span class="string">"oid"</span>),</span><br><span class="line">         <span class="meta">@Result</span>(column = <span class="string">"total"</span>, property = <span class="string">"total"</span>),</span><br><span class="line">         <span class="meta">@Result</span>(column = <span class="string">"orderTime"</span>, property = <span class="string">"orderTime"</span>),</span><br><span class="line">         <span class="meta">@Result</span>(</span><br><span class="line">             column = <span class="string">"uid"</span>, <span class="comment">// 根据该字段去查询user表的数据</span></span><br><span class="line">             property = <span class="string">"user"</span>, <span class="comment">// 要封装的属性名称</span></span><br><span class="line">             javaType = User<span class="class">.<span class="keyword">class</span>, // 要封装的实体类型</span></span><br><span class="line"><span class="class">             <span class="title">one</span> </span>= <span class="meta">@One</span>(select = <span class="string">"com.study.mapper.UserMapper.findById"</span>)</span><br><span class="line">         )</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AnnotationOMTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> OrderMapper mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    mapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Order&gt; result = mapper.findAll();</span><br><span class="line">    logger.debug(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="多对一查询"><a href="#多对一查询" class="headerlink" title="多对一查询"></a>多对一查询</h6><p>User实体中的属性</p>
<ul>
<li>private int uid;</li>
<li>private String uname;</li>
<li>private String password;</li>
<li>private Date birthday;</li>
<li>private List\<Order> orders;</li>
</ul>
<p>Order实体中的属性</p>
<ul>
<li>private int oid;</li>
<li>private Date orderTime;</li>
<li>private double total;</li>
<li>private User user;</li>
</ul>
<p>OrderMapper接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from order_mb where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findById</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserMapper接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"uname"</span>, property = <span class="string">"uname"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"password"</span>, property = <span class="string">"password"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(</span><br><span class="line">            column = <span class="string">"uid"</span>,</span><br><span class="line">            property = <span class="string">"orders"</span>,</span><br><span class="line">            javaType = List<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">many</span> </span>= <span class="meta">@Many</span>(select = <span class="string">"com.study.mapper.OrderMapper.findById"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserAndOrderAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AnnotationMOTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserAndOrderAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; result = mapper.findUserAndOrderAll();</span><br><span class="line">    logger.debug(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="多对多查询-1"><a href="#多对多查询-1" class="headerlink" title="多对多查询"></a>多对多查询</h6><p>User实体中的属性</p>
<ul>
<li>private int uid;</li>
<li>private String uname;</li>
<li>private String password;</li>
<li>private Date birthday;</li>
<li>private List\<Role> roles;</li>
</ul>
<p>Role实体中的属性</p>
<ul>
<li>private int rid;</li>
<li>private String rolename;</li>
</ul>
<p>RoleMapper接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_role_mb ur,role_mb r where ur.uid=#&#123;uid&#125; and ur.rid=r.rid"</span>)</span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserMapper接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"uname"</span>, property = <span class="string">"uname"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"password"</span>, property = <span class="string">"password"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(</span><br><span class="line">            column = <span class="string">"uid"</span>,</span><br><span class="line">            property = <span class="string">"roles"</span>,</span><br><span class="line">            javaType = List<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">many</span> </span>= <span class="meta">@Many</span>(select = <span class="string">"com.study.mapper.RoleMapper.findByUid"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserAndRoleAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AnnotationMMTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserAndOrderAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; result = mapper.findUserAndRoleAll();</span><br><span class="line">    logger.debug(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode--面试题#51数组中的逆序对</title>
    <url>/articles/9fbcfe23.html</url>
    <content><![CDATA[<h6 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a>数组中的逆序对</h6><blockquote>
<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>
<p> 示例 1:</p>
<p> 输入: [7,5,6,4]<br> 输出: 5</p>
<p> 限制：</p>
<p> 0 &lt;= 数组长度 &lt;= 50000</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/</a></p>
</blockquote>
<a id="more"></a>
<h6 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h6><p>数组从前往后，逐个比较</p>
<p>时间复杂度：O(n<sup>2</sup>)</p>
<p>空间复杂度：O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力算法：超时</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reversePairsBF</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j])</span><br><span class="line">                res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="归并排序-分治法"><a href="#归并排序-分治法" class="headerlink" title="归并排序-分治法"></a>归并排序-分治法</h6><p>归并排序</p>
<blockquote>
<p>如　设有数列{6，202，100，301，38，8，1}<br>初始状态：6,202,100,301,38,8,1<br>第一次归并后：{6,202},{100,301},{8,38},{1}，比较次数：3；<br>第二次归并后：{6,100,202,301}，{1,8,38}，比较次数：4；<br>第三次归并后：{1,6,8,38,100,202,301},比较次数：4；<br>总的比较次数为：3+4+4=11；<br>逆序数为14；</p>
<ul>
<li>申请空间，使其大小为两个已经<a href="https://baike.baidu.com/item/排序" target="_blank" rel="noopener">排序</a>序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针超出序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ul>
<p><a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">百度百科：归并排序</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</span><br><span class="line">    <span class="keyword">if</span> (low == high)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums[low]&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span>[] leftArr = mergeSort(nums, low, mid); <span class="comment">//左有序数组</span></span><br><span class="line">    <span class="keyword">int</span>[] rightArr = mergeSort(nums, mid + <span class="number">1</span>, high); <span class="comment">//右有序数组</span></span><br><span class="line">    <span class="keyword">int</span>[] newNum = <span class="keyword">new</span> <span class="keyword">int</span>[leftArr.length + rightArr.length]; <span class="comment">//新有序数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; leftArr.length &amp;&amp; j &lt; rightArr.length) &#123;</span><br><span class="line">        newNum[m++] = leftArr[i] &lt; rightArr[j] ? leftArr[i++] : rightArr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; leftArr.length)</span><br><span class="line">        newNum[m++] = leftArr[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt; rightArr.length)</span><br><span class="line">        newNum[m++] = rightArr[j++];</span><br><span class="line">    <span class="keyword">return</span> newNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>归并排序解题</p>
<ul>
<li>在归并的过程中计算每个小区间的逆序对数，进而计算出大区间的逆序对数</li>
<li>时间复杂度：O(n log<sub>2</sub> n)</li>
<li>空间复杂度：O(n)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 借助归并排序：分治法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 逆序对数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];   <span class="comment">//临时数组，用于存放有序数组</span></span><br><span class="line">    <span class="keyword">return</span> merge(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>,temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high,<span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high)    <span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> res = merge(nums, low, mid,temp) + merge(nums, mid + <span class="number">1</span>, high,temp);	<span class="comment">//区间划分</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">        res += nums[i] &lt;= nums[j] ? j - (mid + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">        temp[k++] = nums[i] &lt;= nums[j] ? nums[i++] : nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        res += j - (mid + <span class="number">1</span>);	</span><br><span class="line">        temp[k++] = nums[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high)</span><br><span class="line">        temp[k++] = nums[j++];</span><br><span class="line">    System.arraycopy(temp, <span class="number">0</span>, nums, low, high - low + <span class="number">1</span>);   <span class="comment">//复制到原数组中</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode--面试题#56数组中数字出现的次数</title>
    <url>/articles/e4abd3a9.html</url>
    <content><![CDATA[<h6 id="数组中数字出现的次数"><a href="#数组中数字出现的次数" class="headerlink" title="数组中数字出现的次数"></a>数组中数字出现的次数</h6><p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。<br>要求时间复杂度是O(n)，空间复杂度是O(1)。</p>
<blockquote>
<p>示例 1：</p>
<p>输入：nums = [4,1,4,6]<br>输出：[1,6] 或 [6,1]</p>
<p>示例 2：</p>
<p>输入：nums = [1,2,10,4,1,4,3,3]<br>输出：[2,10] 或 [10,2]</p>
<p>限制：    2 &lt;= nums &lt;= 10000</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof</a></p>
</blockquote>
<a id="more"></a>
<h6 id="分组位运算"><a href="#分组位运算" class="headerlink" title="分组位运算"></a>分组位运算</h6><p>题目要求时间复杂度是O(n)，空间复杂度是O(1)，则不能使用枚举比较，以及<code>HashMap</code>来解决。</p>
<p>数组中只存在着两个数字不重复的情况，将数组中所有的数字进行异或操作，最终得到的结果即是这两个不重复数字的异或结果。</p>
<p>异或操作</p>
<blockquote>
<p>举例数组：[4,1,4,6]<br>相关数值的二进制表达    1 :b01    4 :b100     6 :b110</p>
<p>0 ^ 4 = b100<br>1 ^ b100 = b101<br>b101 ^ 6 = b011<br>b011 ^ 4 = b111</p>
<p>两个不重复数字异或结果后最低位的1: int div =1</p>
<p>按奇偶分组： a记录奇数，b记录偶数</p>
<p>4 &amp; 1 = 0  b = 0 ^ 4 = 0b100 = 4<br>1 &amp; 1 = 1  a = 1 ^ 1 = 0b1——其中一个<br>4 &amp; 1 = 0  b = 4 ^ 4 = 0b0<br>6 &amp; 1 = 0  b = 0 ^ 6 = 0b110 = 6——其中另一个</p>
</blockquote>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分组位运算</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] singleNumbers(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//数组中所有元素异或</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)</span><br><span class="line">        ret ^= n;</span><br><span class="line">    <span class="keyword">int</span> div = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//获取异或结果最低位的1</span></span><br><span class="line">    <span class="comment">//或 int div=ret&amp;(-ret);</span></span><br><span class="line">    <span class="keyword">while</span> ((div &amp; ret) == <span class="number">0</span>)    </span><br><span class="line">        div &lt;&lt;= <span class="number">1</span>;	<span class="comment">//左移一位</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;   <span class="comment">//记录两个单次出现的数的位置</span></span><br><span class="line">    <span class="comment">//按奇偶分组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)</span><br><span class="line">        <span class="keyword">if</span> ((div &amp; n) != <span class="number">0</span>) <span class="comment">//记录奇数</span></span><br><span class="line">            a ^= n;</span><br><span class="line">    	<span class="keyword">else</span>    <span class="comment">//记录偶数</span></span><br><span class="line">        	b ^= n;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;a, b&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以 int 数据类型为例 2个字节(16位)，Java中 int 是4字节（ 与JVM相关）<br>1 与 -1<br>原码：00000000 00000001<br>反码：11111111 11111110    反码为原码按位取反<br>补码：11111111 11111111    补码为反码 +1<br>1 &amp; -1 最低位的1即为 1</p>
<p>7 与 -7<br>原码：00000000 00000111<br>反码：11111111 11111000<br>补码：11111111 11111001<br>7 &amp; -7 最低位的1即为 1</p>
</blockquote>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>Redis笔记</title>
    <url>/articles/bf90371e.html</url>
    <content><![CDATA[<h4 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h4><h5 id="Redis解释"><a href="#Redis解释" class="headerlink" title="Redis解释"></a>Redis解释</h5><p>Redis是一个基于key-value形式进行存储的内存型数据库</p>
<ul>
<li>数据存储方式为key-value键值对</li>
<li>数据存储在内存中<ul>
<li>优点：效率高<br>理论：每秒10k数据读取</li>
</ul>
</li>
<li>定位：数据库软件<ul>
<li>作用：存储数据</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h5 id="NoSql数据库"><a href="#NoSql数据库" class="headerlink" title="NoSql数据库"></a>NoSql数据库</h5><p>Redis是一个NoSql数据库。</p>
<ul>
<li>不使用sql命令操作数据库软件</li>
<li>NoSql：Not Only Sql，表示在应用程序开发时，不是必须使用关系型数据库，可以使用NoSql替代关系型数据库的部分功能。</li>
<li>目前NoSql不能完全替代关系型数据库，使用关系型数据库结合NoSql数据库进行项目完成。<ul>
<li>当数据比较复杂时不适用于NoSql数据库</li>
<li>关系数据库依然作为数据存储的主要软件</li>
<li>NoSql数据库当作缓存工具来使用<ul>
<li>把关系数据库中某些<strong>使用频率较高</strong>的的内容，不仅仅存储到关系型数据库，还存到NoSql数据库中。</li>
<li>要考虑NoSql和关系型数据库之间的<strong>同步</strong>问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Redis持久化策略"><a href="#Redis持久化策略" class="headerlink" title="Redis持久化策略"></a>Redis持久化策略</h5><h6 id="rdb"><a href="#rdb" class="headerlink" title="rdb"></a>rdb</h6><ul>
<li>默认的持久化策略</li>
<li>每隔一定时间后把内存中数据持久化到dump.rdb文件中</li>
</ul>
<p>缺点</p>
<ul>
<li>数据过于集中</li>
<li>可能导致最后的数据没有持久化到dump.rdb中<ul>
<li>解决办法：使用命令SAVE或BGSAVE手动持久化</li>
</ul>
</li>
</ul>
<h6 id="aof"><a href="#aof" class="headerlink" title="aof"></a>aof</h6><p>监听Redis的日志文件，监听如果发现执行了修改、删除、新增命令，立即根据这条命令把数据持久化</p>
<p>缺点</p>
<ul>
<li>效率降低</li>
</ul>
<h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><p>Windows版本下载地址<a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases</a></p>
<ul>
<li><p>下载对应版本，解压到Redis文件夹下</p>
</li>
<li><p>将Redis文件路径添加到环境变量path中</p>
</li>
<li><p>用命令行窗口执行<code>redis-server.exe</code>命令或<code>redis-server.exe redis.windows.conf</code>（没有配置环境变量时）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe redis.windows.conf</span></span><br><span class="line">[4572] 30 Jun 15:39:59.717 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">[4572] 30 Jun 15:39:59.717 # Redis version=5.0.9, bits=64, commit=9414ab9b, modified=0, pid=4572, just started</span><br><span class="line">[4572] 30 Jun 15:39:59.717 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server.exe /path/to/redis.conf</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ ''-._</span><br><span class="line">      _.-``    `.  `_.  ''-._           Redis 5.0.9 (9414ab9b/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ ''-._</span><br><span class="line"> (    '      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-'    |     PID: 4572</span><br><span class="line">  `-._    `-._  `-./  _.-'    _.-'</span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|</span><br><span class="line"> |    `-._`-._        _.-'_.-'    |           http://redis.io</span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'</span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|</span><br><span class="line"> |    `-._`-._        _.-'_.-'    |</span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'</span><br><span class="line">      `-._    `-.__.-'    _.-'</span><br><span class="line">          `-._        _.-'</span><br><span class="line">              `-.__.-'</span><br><span class="line"></span><br><span class="line">[4572] 30 Jun 15:39:59.723 # Server initialized</span><br><span class="line">[4572] 30 Jun 15:39:59.724 * DB loaded from disk: 0.000 seconds</span><br><span class="line">[4572] 30 Jun 15:39:59.724 * Ready to accept connections</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开新的cmd窗口输入<code>redis-cli.exe -h 127.0.0.1 -p 6379</code>，即可进行相关命令操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">redis-cli.exe -h 127.0.0.1 -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; set name "Hello World"</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"Hello World"</span><br></pre></td></tr></table></figure>
<p>注意：在加载设置文件条件下启动时需要在Redis目录下执行命令<code>redis-server.exe redis.windows.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="built_in">cd</span> Redis</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe redis.windows.conf</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h4><p>命令手册网址    <a href="http://doc.redisfans.com/" target="_blank" rel="noopener">Redis命令参考</a></p>
<p>Redis<strong>常用数据类型</strong></p>
<ul>
<li><strong>String</strong>字符串</li>
<li>Hash哈希表</li>
<li>List列表</li>
<li>Set集合</li>
<li>SortedSet有序集合</li>
</ul>
<h5 id="Redis常用概念"><a href="#Redis常用概念" class="headerlink" title="Redis常用概念"></a>Redis常用概念</h5><ul>
<li><p>Redis默认有16384 solts（槽），每个槽可存储多个hash值。</p>
</li>
<li><p>Redis默认不需要密码</p>
<p>在<code>redis.windows.conf</code>文件中去除requirepass foobared的注释，即可设置密码</p>
</li>
<li><p>设置密码后需要通过</p>
<ul>
<li>-h 主机ip</li>
<li>-p 端口</li>
<li>-a 密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a f foobared</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>Jedis是Redis客户端工具jar</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用非集群版实例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="comment">// 测试插入</span></span><br><span class="line">String res = jedis.set(<span class="string">"address"</span>, <span class="string">"Hubei"</span>);</span><br><span class="line">System.out.println(<span class="string">"insert--&gt;"</span> + res);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get);</span><br><span class="line"><span class="comment">// 测试修改</span></span><br><span class="line">String set = jedis.set(<span class="string">"address"</span>, <span class="string">"China"</span>);</span><br><span class="line">System.out.println(<span class="string">"update--&gt;"</span> + set);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get2 = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get2);</span><br><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line">Long del = jedis.del(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"delete--&gt;"</span> + del);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get3 = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get3);</span><br></pre></td></tr></table></figure>
<h4 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h4><h5 id="集群的概念"><a href="#集群的概念" class="headerlink" title="集群的概念"></a>集群的概念</h5><p>多个业务单元协同工作完成的整体称为<strong>集群</strong>。</p>
<ul>
<li>每个业务单元都是相同的</li>
<li>当集群中业务单元中超过或等于二分之一个down掉时整个集群不可用（建议使用奇数个，整体down掉几率小）</li>
</ul>
<h5 id="一主一备模式"><a href="#一主一备模式" class="headerlink" title="一主一备模式"></a>一主一备模式</h5><p>给每个<strong>业务单元</strong>创建一个<strong>备份业务单元</strong>，原来的业务单元（master）后产生的叫做（slave）。</p>
<h5 id="集群和伪集群"><a href="#集群和伪集群" class="headerlink" title="集群和伪集群"></a>集群和伪集群</h5><p><strong>集群</strong>：每个业务单元都安装到单独的服务器上</p>
<p><strong>伪集群</strong>：每个业务单元都安装到同一个服务器上，通过端口区分不同的业务单元。</p>
<h5 id="使用jedis访问集群"><a href="#使用jedis访问集群" class="headerlink" title="使用jedis访问集群"></a>使用jedis访问集群</h5><ul>
<li><p>JedisCluster(Set\<HostAndPort> nodes)</p>
<p>集群的ip和端口</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;HostAndPort&gt; hostAndPortSet=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7001</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7002</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7003</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7004</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7005</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7006</span>));</span><br><span class="line">JedisCluster jedisCluster=<span class="keyword">new</span> JedisCluster(hostAndPortSet);</span><br><span class="line">jedisCluster.get(<span class="string">"address"</span>);</span><br></pre></td></tr></table></figure>
<p>通过xml形式配置集群</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jedisCluster --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClients"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisCluster"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"nodes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7001"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7002"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7003"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7004"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7005"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7006"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置jedis连接池</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置jedis连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每次释放连接的最大数目 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numTestsPerEvictionRun"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"30000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接最小空闲时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"1800000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"softMinEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"1500"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"blockWhenExhausted"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet笔记</title>
    <url>/articles/bc07bc32.html</url>
    <content><![CDATA[<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ul>
<li><p>狭义的Servlet是指Java语言实现的一个接口</p>
</li>
<li><p>广义的Servlet是指任何实现了这个Servlet接口的类</p>
</li>
</ul>
<p>Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，绝大数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p>
<a id="more"></a>
<h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ul>
<li><p>运行在Java的应用服务器上</p>
</li>
<li><p>Servlet的实现遵循了服务器能够识别的规则，服务器会自动地根据请求调用对应地Servlet进行请求处理</p>
</li>
<li><p>简单方便，可移植性强</p>
</li>
</ul>
<h6 id="URL与URI"><a href="#URL与URI" class="headerlink" title="URL与URI"></a>URL与URI</h6><p>url：<a href="http://localhost:8080/servlet/my" target="_blank" rel="noopener">http://localhost:8080/servlet/my</a></p>
<ul>
<li><p>服务器地址:端口号/webapps下的文件夹的名称[虚拟项目名]/类名全路径[别名]</p>
</li>
<li><p>服务器地址:端口号/虚拟项目名/servlet的别名</p>
</li>
</ul>
<p>URI：虚拟项目名/servlet的别名</p>
<h6 id="访问流程"><a href="#访问流程" class="headerlink" title="访问流程"></a>访问流程</h6><ol>
<li>浏览器发送请求到服务器</li>
<li>服务器根据请求URL地址中的URI信息在webapps目录下找到对应的项目文件夹</li>
<li>然后在web.xml中检索响应的Servlet</li>
<li>找到后调用并执行Servlet</li>
</ol>
<h5 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h5><ul>
<li>从第一次调用到服务器关闭</li>
<li>如果Servlet在web.xml中配置了load-on-startup，生命周期为从服务器启动到服务器关闭</li>
</ul>
<p>init()方法是对Servlet进行初始化的方法，会在Servlet第一次加载进行存储时执行</p>
<p>destroy()方法是在Servlet被销毁时执行，即服务器关闭时</p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul>
<li><p>service() 可以处理get/post方式的请求，如果Servlet中有service方法会优先调用service方法对请求进行处理</p>
</li>
<li><p>doGet()  处理get方式请求</p>
</li>
<li><p>doPost() 处理post方式请求</p>
<p>注意:如果在覆写的service方法中又调用了父类的service方法，则service方法处理完成后，会再次根据请求方式响应的doGet和doPost方法执行。所以，一般情况下不在覆写的service方法中调用父类的service方法，避免出现405错误。</p>
</li>
</ul>
<h5 id="Servlet的常见错误"><a href="#Servlet的常见错误" class="headerlink" title="Servlet的常见错误"></a>Servlet的常见错误</h5><ul>
<li>404错误：资源未找到<br>原因1：在请求地址中的servlet的别名书写错误<br>原因2：虚拟项目名称拼写错误</li>
<li>500错误：内容服务器错误 java.lang.ClassNotFoundException<br>解决：在web.xml中校验Servlet类的全限定路径是否拼写错误<br>逻辑错误：因为service方法的代码执行错误导致，根据错误提示对service方法体中的代码进行错误更改</li>
<li>405错误：请求方式不支持<br>原因:请求方式和Servlet中的方法不匹配所造成<br>解决:尽量使用service方法进行请求处理，并且不要再service方法中调用父类的service</li>
</ul>
<h5 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h5><p>request对象中封存了当前的所有请求信息</p>
<h6 id="获取请求头数据"><a href="#获取请求头数据" class="headerlink" title="获取请求头数据"></a>获取请求头数据</h6><ul>
<li>req.getMethod()              获取请求方式</li>
<li><p>req.getRequestURL()          获取请求URL信息</p>
<ul>
<li>req.getRequestURI()          获取请求URI信息</li>
<li>req.getScheme()              获取协议</li>
</ul>
</li>
</ul>
<h6 id="获取请求行数据"><a href="#获取请求行数据" class="headerlink" title="获取请求行数据"></a>获取请求行数据</h6><ul>
<li>req.getHeader(“键名”)          返回指定的请求头信息</li>
<li>req.getHeaderNames()          返回请求头的键名的枚举集合</li>
</ul>
<h6 id="获取用户数据"><a href="#获取用户数据" class="headerlink" title="获取用户数据"></a>获取用户数据</h6><ul>
<li><p>req.getParameter(“键名”)        返回指定的用户数据</p>
</li>
<li><p>req.getParameterValues(“键名”)    返回同键不同值的请求数据</p>
</li>
<li><p>req.getParameterNames()          返回所有用户请求数据的枚举集合</p>
<p>如果要获取的请求数据不存在，不会报错，返回null</p>
<p>注意:request对象由tomcat服务器创建，并作为实参传递给处理请求的Servlet的service方法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求头数据</span></span><br><span class="line">    String method = req.getMethod();    <span class="comment">// 获取请求方式</span></span><br><span class="line">    StringBuffer requestURL = req.getRequestURL();<span class="comment">// 获取请求URL</span></span><br><span class="line">    String requestURI = req.getRequestURI();</span><br><span class="line">    String scheme = req.getScheme();    <span class="comment">// 获取请求协议</span></span><br><span class="line">    System.out.println(<span class="string">"method==&gt;"</span> + method + <span class="string">"  URL==&gt;"</span> + requestURL + <span class="string">"  URI==&gt;"</span> + requestURI + <span class="string">"  scheme==&gt;"</span> + scheme);</span><br><span class="line">    <span class="comment">// 获取行数据</span></span><br><span class="line">    String header = req.getHeader(<span class="string">"User-Agent"</span>);    <span class="comment">// 获取指定的请求行信息</span></span><br><span class="line">    System.out.println(header);</span><br><span class="line">    Enumeration&lt;String&gt; headerNames = req.getHeaderNames(); <span class="comment">// 获取所有请求行的枚举</span></span><br><span class="line">    <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">        String name = headerNames.nextElement();</span><br><span class="line">        String value = req.getHeader(name);</span><br><span class="line">        System.out.println(name + <span class="string">"==&gt;"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取用户数据</span></span><br><span class="line">    String uname = req.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">    String pwd = req.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">    System.out.println(<span class="string">"uname==&gt;"</span> + uname + <span class="string">"  pwd==&gt;"</span> + pwd);</span><br><span class="line">    String[] favs = req.getParameterValues(<span class="string">"fav"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String fav : favs) &#123;</span><br><span class="line">        System.out.println(fav);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">       	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">"request"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span> value=<span class="string">""</span>/&gt;&lt;br/&gt;</span><br><span class="line">            密码:&lt;input type=<span class="string">"text"</span> name=<span class="string">"pwd"</span> value=<span class="string">""</span>/&gt; &lt;br/&gt;</span><br><span class="line">            爱好:&lt;br/&gt;</span><br><span class="line">            <span class="number">1</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"1"</span>&gt;&lt;br/&gt;</span><br><span class="line">            <span class="number">2</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"2"</span>&gt;&lt;br/&gt;</span><br><span class="line">            <span class="number">3</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"3"</span>&gt;&lt;br/&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h5 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h5><p> 作用：用来响应数据到浏览器的一个对象</p>
<p>使用：</p>
<ul>
<li>设置响应头<ul>
<li>setHeader(String name,String value) 在响应头中添加响应信息，但同键会覆盖</li>
<li>addHeader(String name,String value) 在响应头中添加响应信息，不会覆盖</li>
</ul>
</li>
<li>设置响应状态<br>sendError(int num,String msg)   自定义响应状态码</li>
<li>设置响应实体<br>resp.getWriter().write(String str)  响应具体的数据给浏览器</li>
<li>设置响应编码格式<br>resp.setContentType(“text/html;charset=utf-8”)</li>
</ul>
<h6 id="service请求处理代码流程"><a href="#service请求处理代码流程" class="headerlink" title="service请求处理代码流程"></a>service请求处理代码流程</h6><ol>
<li>设置响应编码格式         </li>
<li>获取请求数据</li>
<li>处理请求数据</li>
<li>数据库操作（MVC思想）</li>
<li>响应请求处理</li>
</ol>
<h5 id="请求中文乱码解决"><a href="#请求中文乱码解决" class="headerlink" title="请求中文乱码解决"></a>请求中文乱码解决</h5><ol>
<li>使用String进行数据重新编码<br><code>uname=new String(uname.getBytes(&quot;iso8859-1&quot;), &quot;utf-8&quot;);</code></li>
<li>使用公共配置<ul>
<li>get方式<br><code>req.setCharacterEncoding(&quot;utf-8&quot;);</code><br>在tomcat的目录下的conf目录中修改<code>server.xml</code>文件,在<code>Connector</code>标签中增加属性<code>useBodyEncodingForURI=&quot;true&quot;</code></li>
<li>post方式<br><code>req.setCharacterEncoding(&quot;utf-8&quot;);</code></li>
</ul>
</li>
</ol>
<h5 id="Servlet流程总结"><a href="#Servlet流程总结" class="headerlink" title="Servlet流程总结"></a>Servlet流程总结</h5><ol>
<li>浏览器发起请求到服务器</li>
<li>服务器接收浏览器的请求,进行解析，创建request对象存储请求数据</li>
<li>服务器调用对应的Servlet进行请求处理，并将request对象作为实参传递给Servlet的方法</li>
<li>Servlet的方法执行进行请求处理<ol>
<li>设置请求编码格式</li>
<li>设置响应编码格式</li>
<li>获取请求信息</li>
<li>处理请求信息<br>创建业务层对象<br>调用业务层对象的方法</li>
<li>响应结果处理</li>
</ol>
</li>
</ol>
<h5 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h5><p>作用：实现多个Servlet联动操作处理请求，避免代码冗余,让Servlet的职责更加明确</p>
<p>使用：<code>req.getRequestDispatcher(&quot;要转发的地址&quot;).forward(req,resp);</code><br>地址：相对路径,直接书写Servlet的别名即可</p>
<p>特点：一次请求，浏览器地址信息不变</p>
<p>注意：请求转发后直接return结束即可</p>
<h5 id="request对象的作用域"><a href="#request对象的作用域" class="headerlink" title="request对象的作用域"></a>request对象的作用域</h5><p>使用：</p>
<ul>
<li><code>request.setAttribute(Object name,Object value);</code>    </li>
<li><code>request.getAttribute(Object obj);</code></li>
</ul>
<p>作用：解决了一次请求内的不同Servlet的数据(请求数据+其他数据)共享问题</p>
<p>作用域：基于请求转发,一次请求中的所有Servlet共享</p>
<p>注意：使用Request对象进行数据流转,数据只在一次请求内有效</p>
<p>特点：</p>
<ul>
<li>服务器创建</li>
<li>每次请求都会创建</li>
<li>生命周期为一次请求</li>
</ul>
<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p>解决表单重复提交的问题，以及当前Servlet为无法处理的请求的问题</p>
<p>使用：</p>
<ul>
<li><code>response.sendRedirect(&quot;路径&quot;);</code></li>
<li>本地路径为：URI</li>
<li>网络路径为：定向资源的URL信息</li>
</ul>
<p>特点：</p>
<ul>
<li>两次请求，两个request对象</li>
<li>浏览器地址信息改变</li>
</ul>
<p>时机：</p>
<ul>
<li>如果请求中有表单数据，而数据又比较重要，不能重复提交，建议使用重定向</li>
<li>如果请求被Servlet接收后，无法进行处理，建议使用重定向定位到可以处理的资源</li>
</ul>
<h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>作用：解决发送的不同请求的数据共享问题</p>
<h6 id="Cookie的创建和存储"><a href="#Cookie的创建和存储" class="headerlink" title="Cookie的创建和存储"></a>Cookie的创建和存储</h6><ul>
<li>创建Cookie对象<br><code>Cookie cookie=new Cookie(String name,String value);</code></li>
<li>设置Cookie(可选)<br>设置有效期  <code>cookie.setMaxAge(int seconds);</code><br>设置有效路径  <code>cookie.setPath(String uri);</code><br>响应Cookie信息给客户端 <code>resp.addCookie(cookie);</code></li>
</ul>
<h5 id="Cookie的获取"><a href="#Cookie的获取" class="headerlink" title="Cookie的获取"></a>Cookie的获取</h5><ul>
<li><p>获取Cookie信息数组<br><code>Cookie[] cookies=req.getCookies();</code></p>
</li>
<li><p>遍历数组获取Cookie信息<br>使用for循环遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(cookies!=<span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">        String name = c.getName();</span><br><span class="line">        String value = c.getValue();</span><br><span class="line">        System.out.println(name + <span class="string">":"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：一个Cookie对象存储一条数据，多条数据，可以创建多个Cookie对象进行存储。</p>
<h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><ul>
<li>Cookie是浏览器端的数据存储技术</li>
<li>存储的数据声明在服务器端</li>
<li>临时存储:存储在浏览器的运行内存中，浏览器关闭即失效</li>
<li>定时存储:设置了Cookie的有效期，存储在客户端的硬盘中，在有效期内符合路径要求的请求都会附带信息</li>
<li>默认Cookie信息存储好之后，每次请求都会附带，除非设置有效路径</li>
</ul>
<h5 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h5><p>问题：一个用户的不同请求处理的数据共享</p>
<h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>用户第一次访问服务器，服务器会创建一个session对象给此用户，并将该session对象的JSESSIONID使用Cookie技术存储到浏览器中，保证用户的其他请求能够获取到同一个session对象，也保证了不同请求能够获取到共享的数据。</p>
<h6 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h6><ol>
<li>存储在服务器端</li>
<li>服务器进行创建</li>
<li>依赖Cookie技术</li>
<li>一次会话</li>
<li>默认存储时间是30分钟</li>
</ol>
<h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><p>解决了一个用户不同请求处理的数据共享问题</p>
<h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>创建session对象/获取session对象<code>HttpSession hs = req.getSession();</code></p>
<ul>
<li>如果请求中拥有session的标识符JSESSIONID，则返回其对应的session对象。</li>
<li>如果请求中没有session的标识符JSESSIONID，则创建新的session对象，并将其JSESSIONID作为cookie数据存储到浏览器端。</li>
<li>如果session对象失效了，也会重新创建一个session对象，并将其JSESSIONID存储在浏览器内存中。</li>
</ul>
<p>设置session存储时间<code>hs.setMaxInactiveInterval(int seconds);</code></p>
<p>注意：在指定的时间内session对象没有被使用则销毁，如果使用了则重新计时。</p>
<p>设置session强制失效<code>hs.invalidate();</code></p>
<p>存储和获取数据</p>
<ul>
<li><p>存储：<code>hs.setAttribute(String name,Object object);</code></p>
</li>
<li><p>获取：<code>hs.getAttribute(String name);</code> 返回的数据类型为Object</p>
<p>注意:存储的动作和取出的动作发生在不同的请求中，但是存储要先与取出执行。</p>
</li>
</ul>
<p>使用时机：一般用户在登录web项目时会将用户的个人信息存储到session中，供该用户的其他请求使用。</p>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>session解决了一个个用户的不同请求的数据共享问题，只要在JSESSIONID不失效的情况下，用户的任意请求在处理时都能获取到同一个session对象</p>
<h6 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h6><ul>
<li>一次会话</li>
<li>在JSESSIONID和session对象不失效的情况下为整个项目内</li>
</ul>
<h6 id="session失效处理"><a href="#session失效处理" class="headerlink" title="session失效处理"></a>session失效处理</h6><p>将用户请求中的JSESSIONID和后台获取到的session对象进行比对时</p>
<ul>
<li>如果一致，则session没有失效，</li>
<li>如果不一致则说明session失效了，重定向到登录页面，让用户重新登录</li>
</ul>
<p>注意： JSESSIONID存储在了Cookie的临时存储空间中，浏览器关闭即失效</p>
<h5 id="模拟登录案例问题"><a href="#模拟登录案例问题" class="headerlink" title="模拟登录案例问题"></a>模拟登录案例问题</h5><p>解决主页面用户名显示为null问题</p>
<p>原因：因为在用户登录成功后使用重定向显示主界面，两次请求，而用户的信息在第一次请求中，第二次请求中没有用户数据，所以显示为null</p>
<p>解决：使用session技术</p>
<p>使用ServletContext对象完成网页计数器：在用户登录校验中创建计数器并自增，然后存储到ServletContext对象中，在主页面里取出计数器数据显示给用户。</p>
<h5 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h5><p>解决不同用户使用相同的数据</p>
<p>特点</p>
<ul>
<li>服务器创建</li>
<li>用户共享</li>
</ul>
<p>生命周期：服务器启动到服务器关闭</p>
<p>在web.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>context<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletContextServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>context<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/context<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用</p>
<ul>
<li><p>获取ServletContext对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContext sc1 = <span class="keyword">this</span>.getServletContext();	<span class="comment">// this对象直接获取</span></span><br><span class="line">ServletContext sc2 = <span class="keyword">this</span>.getServletConfig().getServletContext(); <span class="comment">// 通过ServletConfig获取</span></span><br><span class="line">ServletContext sc3 = req.getSession().getServletContext(); <span class="comment">// 通过Session获取</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用ServletContext对象完成数据共享</p>
<ul>
<li><p>数据存储<code>sc.setAttribute(String name,Object value);</code></p>
</li>
<li><p>数据获取<code>sc.getAttribute(String name);</code> 返回的是<strong>Object</strong>类型</p>
<p>注意：不同的用户可以给ServletContext对象进行数据存取，获取的数据不存在返回<strong>null</strong></p>
</li>
</ul>
</li>
<li><p>获取项目中web.xml文件的全局配置数据<br><code>sc.getInitParameter(&quot;name&quot;);</code>    返回<strong>String</strong>类型，如果数据不存在返回<strong>null</strong><br><code>sc.getParameterNames();</code> 返回键名的<strong>枚举</strong><br>配置方式一组<code>&lt;context-param&gt;</code>标签只能存储一组键值对数据，多组可以声明多个<code>&lt;context-param&gt;</code>进行存储。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span><span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>作用：将静态数据和代码进行解耦</p>
</li>
<li><p>获取项目web下的资源的绝对路径<br><code>String path = sc.getRealPath(String path);</code><br>获取的路径为项目根目录，参数为项目根目录中的路径</p>
</li>
<li><p>获取web下的资源的流对象<br><code>InputStream is = sc.getResourceAsStream(&quot;doc/1.txt&quot;);</code><br>注意：此种方式只能获取<font color='red'>项目根目录</font>下的资源流对象，class文件的流对象需要使用类加载器获取</p>
</li>
</ul>
<h5 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h5><p>解决在web.xml中给每个Servlet单独配置的数据</p>
<p>在web.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletConfigServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用：</p>
<ul>
<li>获取ServletConfig对象     <code>ServletConfig sc = this.getServletConfig();</code></li>
<li>获取web.xml中的配置数据        <code>String config = sc.getInitParameter(&quot;config&quot;);</code></li>
</ul>
<h5 id="web-xml文件"><a href="#web-xml文件" class="headerlink" title="web.xml文件"></a>web.xml文件</h5><p>作用：存储项目相关配置信息，保护Servlet；解耦一些数据对程序的依赖。</p>
<p>使用位置</p>
<ul>
<li>每个web项目中</li>
<li>Tomcat服务器中（在服务器目录conf目录中）</li>
</ul>
<p>区别</p>
<ul>
<li>Web项目下的web.xml文件为局部配置，针对本项目的位置</li>
<li>Tomcat下的web.xml文件为全局配置，配置公共信息</li>
</ul>
<p>内容（核心组件）</p>
<ul>
<li>全局上下文配置（全局配置参数）[ServletContext、context-param]</li>
<li>Servlet配置</li>
<li>过滤器配置[filter]</li>
<li>监听器配置[listener]</li>
</ul>
<p><strong><em>加载顺序</em></strong>：Web容器会按<font color='red'>ServletContext-&gt;context-param-&gt;listener-&gt;filter-&gt;servlet</font>顺序加载组件，这些元素可配置在<code>web.xml</code>文件中的任意位置。</p>
<p>加载时机：服务器启动时</p>
<h5 id="Server-xml文件核心组件"><a href="#Server-xml文件核心组件" class="headerlink" title="Server.xml文件核心组件"></a>Server.xml文件核心组件</h5><p>Tomcat的<code>server.xml</code>结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Context</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>热部署：<code>&lt;Context path=&quot;/项目虚拟名&quot; reloadable=&quot;true&quot; docBase=&quot;项目路径&quot;/&gt;</code></p>
<p>开发时使用冷部署，需要重启服务器。</p>
<h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>问题引入：Servlet的作用是针对浏览器发起的请求，进行请求的处理。通过Servlet技术可以灵活的进行请求的处理，但是我们不但要对请求进行处理，还需要对服务器的资源进行统一的管理，比如请求编码格式的统一设置，资源的统一分配等等，如何解决？</p>
<p>解决：使用过滤器</p>
<p>作用：对服务器资源进行管理、保护Servlet。</p>
<p>过滤器生命周期：<font color='red'>从服务器启动到服务器关闭</font></p>
<h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><ul>
<li><p>创建一个实现了Filter接口的普通java类</p>
</li>
<li><p>覆写接口的方法</p>
<ul>
<li><p>init()方法:服务器启动即执行，资源初始化</p>
</li>
<li><p>doFilter()方法:拦截请求，在此方法中可以对资源实现管理</p>
<p>注意:需要手动对请求进行放行</p>
</li>
<li><p>destroy()方法:服务器关闭时执行</p>
</li>
</ul>
</li>
<li><p>Filter过滤器的配置：在web.xml中配置过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>mf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.web.filter.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>mf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注解的形式：<code>@WebFilter(filterName = &quot;MyFilter&quot;, urlPatterns = {&quot;/*&quot;})</code></p>
</li>
<li><p>注意</p>
<ul>
<li>url-pattern:/*  表示拦截所有的请求</li>
<li>url-pattern:*.do    表示所有以.do结尾的请求，一般是用来进行模块拦截处理</li>
<li>url-pattern:/ServletUrlPattern    表示拦截指定url的请求，针对某个Servlet的请求拦截，保护Servlet</li>
</ul>
</li>
</ul>
<h6 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h6><p>浏览器发起请求到服务器，服务器接收到请求后根据URI信息在<code>web.xml</code>中找到对应的过滤器执行<code>doFilter()</code>方法，该方法对此次请求进行处理后如果符合要求则放行，放行后如果还有符合要求的规律其则继续进行过滤，找到对应的Servlet进行处理。Servlet对请求处理完毕后，也就是<code>service()</code>方法结束了。还需要继续返回相应的<code>doFilter()</code>方法继续执行。</p>
<h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><ul>
<li>统一管理字符编码</li>
<li>统一编码格式设置</li>
<li>session管理</li>
<li>权限管理</li>
<li>资源管理(统一水印，和谐词汇等)</li>
</ul>
<h5 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h5><h6 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h6><p>在Servlet技术中学习了request、session、application作用域对象，其主要作用是实现数据在不同的场景中的灵活流转。但是数据的具体流转过程是无法看到的，比如作用域对象是什么时候创建和销毁的，数据是什么时候存取，改变和删除的。因为具体的流转过程是不可见的，所以无法在指定的实际对数据和对象进行操作，比如session销毁的时候，在线人数-1。</p>
<p>解决：使用监听器Listener</p>
<h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p>Servlet监听器时Servlet规范中定义的一种特殊类，用于监听ServletContext、HttpSession和ServletReqeust等域对象的创建与销毁事件，以及监听这些域对象中属性发生修改的事件。</p>
<p>监听对象</p>
<ul>
<li>Request</li>
<li>Session</li>
<li>Application</li>
</ul>
<p>监听内容：创建、销毁、属性改变事件</p>
<p>监听作用：在事件发生之前，之后进行一些处理，比如统计在线人数</p>
<h6 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h6><p>1、创建一个实现了指定接口的java类</p>
<p>监听request</p>
<ul>
<li><p>监听request—&gt;ServletRequestListener  监听request对象的创建和销毁</p>
<ul>
<li>requestInitialized(ServletRequestEvent sre) 创建</li>
<li>requestDestroyed(ServletRequestEvent sre)   销毁</li>
</ul>
<p>注意：形参获取监听的request对象  sre.getServletRequest()</p>
</li>
<li><p>监听request—&gt;ServletRequestAttributeListener 监听request作用域数据的增加、修改、删除</p>
<ul>
<li>attributeAdded(ServletRequestAttributeEvent srae)</li>
<li>attributeReplaced(ServletRequestAttributeEvent srae)</li>
<li>attributeRemoved(ServletRequestAttributeEvent srae)</li>
</ul>
<p>注意：形参可以获取被监听的数据</p>
<ul>
<li>srae.getName()  获取监听数据的键名</li>
<li>srae.getValue()  获取监听数据的值</li>
</ul>
</li>
</ul>
<p>监听session</p>
<ul>
<li><p>监听session—&gt;HttpSessionListener 监听session的创建和销毁</p>
<ul>
<li>sessionCreated(HttpSessionEvent se)</li>
<li>sessionDestroyed(HttpSessionEvent se)</li>
</ul>
<p>注意:形参可以获取被监听的session对象 se.getSession();</p>
</li>
<li><p>监听session—&gt;HttpSessionAttributeListener 监听session数据的创建和销毁</p>
<ul>
<li>attributeAdded(HttpSessionBindingEvent se)</li>
<li>attributeReplaced(HttpSessionBindingEvent se)</li>
<li>attributeRemoved(HttpSessionBindingEvent se)</li>
</ul>
<p>注意:形参可以获取被监听的数据</p>
<ul>
<li>se.getName()    获取数据的键名</li>
<li>se.getValue()   获取数据的值</li>
</ul>
</li>
</ul>
<p>监听application</p>
<ul>
<li><p>监听application—&gt;ServletContextListener  监听application对象的初始化和销毁</p>
<ul>
<li>contextInitialized(ServletContextEvent sce) 初始化 服务器启动</li>
<li>contextDestroyed(ServletContextEvent sce)   销毁  服务器关闭</li>
</ul>
<p>注意:形参可以获取当前application对象<br>sce.getApplication()</p>
</li>
<li><p>监听application—&gt;ServletContextAttributeListener</p>
<ul>
<li>attributeAdded(ServletContextAttributeEvent scae)</li>
<li>attributeReplaced(ServletContextAttributeEvent scae)</li>
<li>attributeRemoved(ServletContextAttributeEvent scae)</li>
</ul>
<p>注意:形参可以获取被监听的数据</p>
<ul>
<li>scae.getName()  获取数据的键名</li>
<li>scae.getValue() 获取数据的值</li>
</ul>
</li>
</ul>
<p>2、在web.xml中配置监听类(可配置多个监听器)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.web.listener.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注解形式：<code>@WebListener(value = &quot;/ml&quot;)</code></p>
<h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h6><p>统计网站在线人数</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Solr基本配置-Docker</title>
    <url>/articles/8e2b9641.html</url>
    <content><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>docker下安装solr，以及使用中文分词器。</p>
<p>通过 xftp 工具将文件从宿主机拷贝到虚拟机上。</p>
<p>中文分词器相关资料</p>
<ul>
<li>中文分词器github地址 <a href="https://github.com/magese/ik-analyzer-solr/" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/</a></li>
<li>jar 包 <a href="https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar" target="_blank" rel="noopener">https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar</a></li>
</ul>
<a id="more"></a>
<h6 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose --version</span></span><br></pre></td></tr></table></figure>
<h6 id="安装Solr镜像"><a href="#安装Solr镜像" class="headerlink" title="安装Solr镜像"></a>安装Solr镜像</h6><font color="red">配置 docker group，不需要在 docker 命令前添加 </font>`sudo` 

从 docker 的仓库中拉取 solr 镜像

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull solr[:版本]  <span class="comment"># 不填写版本号时，默认为最新版本</span></span></span><br><span class="line">Using default tag: latest</span><br></pre></td></tr></table></figure>

检查镜像是否安装成功

`$ docker images`显示已安装的的所有镜像

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">solr                latest              8e621ac5ebe9        17 hours ago        514MB</span><br></pre></td></tr></table></figure>

###### 启动Solr容器

`docker run --name solr --restart=always -d -p 8983:8983 -t solr[:版本号]`

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name solr --restart=always -d -p 8983:8983 -t solr</span></span><br><span class="line">7be597b3079b626a0732c8005535bc8b96504fcc18761699ef263c80c68be325</span><br></pre></td></tr></table></figure>

###### 访问

http://虚拟机IP地址:8983/solr/#/

> http://192.168.56.10:8983/solr/#/

![docker-solr的访问](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-solr%E7%9A%84%E8%AE%BF%E9%97%AE.png)

###### 新建solr core

1. 直接通过命令创建

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=solr solr bin/solr create_core -c  my_core</span></span><br></pre></td></tr></table></figure>

   - `-it`  展示容器输入信息`STDIN`，命令行交互模式
   - `--user` 用户，使用 root 用户会有报错
   - my_core core 名称，自定义

2. 进入容器内部，拷贝默认配置文件到 core 中，再通过客户端创建 core

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash	<span class="comment"># 以管理员身份进入 solr 容器内部</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -r server/solr/configsets/_default/conf/. /var/solr/data/my_core/conf  <span class="comment"># 拷贝默认配置文件到 my_core 中</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exit</span> <span class="comment"># 退出 solr 容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr <span class="comment"># 重启 solr 容器</span></span></span><br></pre></td></tr></table></figure>

   ![solr客户端创建core](https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%9B%E5%BB%BAcore.png)

访问 my_core

![docker-my_core属性](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-my_core%E5%B1%9E%E6%80%A7.png)

###### 配置中文解析器

1. 将中文解析器相关 jar 包拷贝到容器内

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp ik-analyzer-8.3.0.jar solr:/opt/solr/server/solr-webapp/webapp/WEB-INF/lib</span></span><br></pre></td></tr></table></figure>

2. 将中文解析器`ik-analyzer-solr-8.3.0\src\main\resources`目录下的文件拷贝到容器内

   新建文件夹 classes ，将文件先从宿主机拷贝到虚拟机的 classes 文件夹下，再从虚拟机上拷贝到 solr 容器中。

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">① IKAnalyzer.cfg.xml</span><br><span class="line">② ext.dic</span><br><span class="line">③ stopword.dic</span><br><span class="line">④ ik.conf</span><br><span class="line">⑤ dynamicdic.txt</span><br></pre></td></tr></table></figure>

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp classes solr:/opt/solr/server/solr-webapp/webapp/WEB-INF/classes</span></span><br></pre></td></tr></table></figure>

3. 配置中文解析器

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi /var/solr/data/my_core/conf/managed-schema</span></span><br></pre></td></tr></table></figure>

   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ik分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_cn"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>

4. 进入 solr 容器内部检查文件

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /opt/solr/server/solr-webapp/webapp/WEB-INF/classes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">IKAnalyzer.cfg.xml  dynamicdic.txt  ext.dic  ik.conf  stopword.dic</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /opt/solr/server/solr-webapp/webapp/WEB-INF/lib</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">ik-analyzer-8.3.0.jar ...</span><br></pre></td></tr></table></figure>

5. 退出 solr 容器，重启 solr

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr</span></span><br></pre></td></tr></table></figure>

###### 中文分词器

> 请求url [http://192.168.56.10:8983/solr/#/my_core/analysis?analysis.fieldvalue=%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C&analysis.fieldtype=text_cn&verbose_output=1](http://192.168.56.10:8983/solr/#/my_core/analysis?analysis.fieldvalue=你好世界&analysis.fieldtype=text_cn&verbose_output=1)

![docker-solr中文分词器演示](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-solr%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E6%BC%94%E7%A4%BA.png)

###### solr挂载到虚拟机本地，实现配置持久化

在重启虚拟机后，需要通过配置 solr 持久化数据。

1. 将配置的文件夹存储在 `/mydata/solr/` 下

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /mydata/</span></span><br></pre></td></tr></table></figure>

2.  将文件拷贝到 `mydata` 下

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp solr:/opt/solr/ /mydata/</span></span><br></pre></td></tr></table></figure>

3. 删除旧的 solr 容器

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f solr</span></span><br></pre></td></tr></table></figure>

4. 以挂载的形式启动 solr 容器

   - `-d` 后台运行
   - `-p` 端口映射
   - `--name` 容器名
   - `--restart=always` 自启动（docker启动时同时启动solr）
   - `-v` 挂载
   - -`t` 展示容器输入信息`STDIN`

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8983:8983 --name solr --restart=always -v /mydata/solr:/opt/solr -t solr</span></span><br></pre></td></tr></table></figure>

5. 创建 core ，core名称 my_solr_core

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=solr solr bin/solr create_core -c  my_solr_core</span></span><br></pre></td></tr></table></figure>

6. 进入 solr 容器内部，添加中文分词器

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi /var/solr/data/my_solr_core/conf/managed-schema</span></span><br></pre></td></tr></table></figure>

   修改的内容参考 *配置中文解析器的第三步配置中文解析器*

7. 将 core 的配置文件拷贝到挂载的目录下

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker cp solr:/var/solr/data/my_solr_core /mydata/solr/server/solr/</span></span><br></pre></td></tr></table></figure>

8. 重新启动 solr 容器

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr</span></span><br></pre></td></tr></table></figure>

![solr挂载到本地使用中文分词器示例](https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E7%A4%BA%E4%BE%8B.png)

###### 挂载注意项【可选项】

solr 容器创建的 core 数据保存在 `/var/solr/data` 目录下，所以需要将此目录挂载到 `/mydata/solr/server/solr` 目录下。在容器创建完成前可以添加 `-v /mydata/solr/server/solr:/var/solr/data`进行挂载，在创建容器后可通过修改配置文件的方式挂载。

<font color="red">这种挂载方式，可能会出现问题，在用vagrant+vmbox配置的docke上没有问题，但在vmware上会出问题。所以还是推荐使用 docker cp 手动复制。</font>

<p>具体步骤：</p>
<ol>
<li><p>查看 solr 容器的 id</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps <span class="comment"># 或使用 docker ps -a 查看所有容器</span></span></span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">c713163b6615        solr                "docker-entrypoint.s…"   21 hours ago        Up 18 seconds       0.0.0.0:8983-&gt;8983/tcp              solr</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止 docker，修改容器配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建议使用管理员权限</span></span><br><span class="line">[root@localhost docker]# cd /var/lib/docker</span><br><span class="line">[root@localhost docker]# cd containers</span><br><span class="line">[root@localhost containers]# ls</span><br><span class="line">c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014		# solr容器的id</span><br><span class="line">[root@localhost containers]# cd c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014/</span><br><span class="line">[root@localhost c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014]# ls</span><br><span class="line">c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014-json.log  hosts</span><br><span class="line">checkpoints                                                                mounts</span><br><span class="line">config.v2.json                                                             resolv.conf</span><br><span class="line">hostconfig.json                                                            resolv.conf.hash</span><br><span class="line">hostname</span><br><span class="line">[root@localhost c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014]# vi mount</span><br></pre></td></tr></table></figure>
<p>在 <code>BInds</code> 中添加挂载的目录内容</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"Binds"</span>: [<span class="string">"/mydata/solr:/opt/solr"</span>,<span class="string">"/mydata/solr/server/solr:/var/solr/data"</span>],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启 docker 服务，启动 solr 容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker start solr</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 solr 容器内部，检查挂载文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog-java]# docker exec -it --user=root solr /bin/bash</span><br><span class="line">root@c713163b6615:/opt/solr-8.6.1# cd /var/solr</span><br><span class="line">root@c713163b6615:/var/solr# ls</span><br><span class="line">data  log4j2.xml  logs</span><br><span class="line">root@c713163b6615:/var/solr# cd data</span><br><span class="line">root@c713163b6615:/var/solr/data# ls</span><br><span class="line">blog_core  filestore  my_solr_core  solr.xml  userfiles  zoo.cfg</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>在完成挂载后，就不需要每次将 core 的数据手动拷贝到 /mydata/solr/server/solr 下。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>solr</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Solr基本配置-Windows版</title>
    <url>/articles/e0b21c40.html</url>
    <content><![CDATA[<h4 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h4><p>Solr下载地址 <a href="https://lucene.apache.org/solr/downloads.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/downloads.html</a></p>
<p>[可选项]配置环境变量：将Solr添加到系统环境变量中，在系统环境变量的path下添加 <code>安装目录\Solr\bin</code></p>
<h5 id="Solr目录结构"><a href="#Solr目录结构" class="headerlink" title="Solr目录结构"></a>Solr目录结构</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr目录结构.png" alt="Solr目录结构"></p>
<a id="more"></a>
<h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><p>在 Solr 的 bin 目录下打开cmd窗口，若配置了solr的环境变量，可在任意位置打开cmd窗口。</p>
<h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><p><code>solr start</code> 默认启动的端口号为 8983</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> bin  <span class="comment"># 已配置环境变量可省略</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> solr start</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: JVM cannot use large page memory because it does not have enough privilege to lock pages in memory.</span><br><span class="line">Waiting up to 30 to see Solr running on port 8983</span><br><span class="line">Started Solr server on port 8983. Happy searching!</span><br></pre></td></tr></table></figure>
<h6 id="指定启动端口号"><a href="#指定启动端口号" class="headerlink" title="指定启动端口号"></a>指定启动端口号</h6><p><code>solr start-p 端口号</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr start -p 9000</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: JVM cannot use large page memory because it does not have enough privilege to lock pages in memory.</span><br><span class="line">Waiting up to 30 to see Solr running on port 9000</span><br><span class="line">Started Solr server on port 9000. Happy searching!</span><br></pre></td></tr></table></figure>
<h6 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h6><p><code>solr stop -p 启动的端口号</code>   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr stop -p 8983</span></span><br><span class="line">Stopping Solr process 1520 running on port 8983</span><br><span class="line"></span><br><span class="line">等待 5 秒，按一个键继续 ...</span><br></pre></td></tr></table></figure>
<h6 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h6><p><code>solr restart -p 启动的端口号</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr restart -p 8983</span></span><br><span class="line">Stopping Solr process 5736 running on port 8983</span><br><span class="line"></span><br><span class="line">等待 5 秒，按一个键继续 ...</span><br></pre></td></tr></table></figure>
<h6 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h6><p>访问地址：<a href="http://localhost:启动的端口号/solr/#">http://localhost:启动的端口号/solr/#</a></p>
<p>默认：<a href="http://localhost:8983/solr/#" target="_blank" rel="noopener">http://localhost:8983/solr/#</a></p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>solr的关系映射</p>
<ul>
<li>solr为库</li>
<li>core为表</li>
<li>filed为字段</li>
</ul>
<h6 id="创建核心"><a href="#创建核心" class="headerlink" title="创建核心"></a>创建核心</h6><p> <code>solr create -c example_core</code>，会自动添加默认配置文件config、data和core.properties</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr create -c example_core</span></span><br><span class="line">WARNING: Using _default configset with data driven schema functionality. NOT RECOMMENDED for production use.</span><br><span class="line">         To turn off: bin\solr config -c example_core -p 8983 -action set-user-property -property update.autoCreateFields -value false</span><br><span class="line"></span><br><span class="line">Created new core 'example_core'</span><br></pre></td></tr></table></figure>
<p>在<code>Solr\server\</code>目录下会新增文件夹<code>example_core</code>。</p>
<h6 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h6><p>访问地址：<a href="http://localhost:8983/solr/#/example_core/core-overview" target="_blank" rel="noopener">http://localhost:8983/solr/#/example_core/core-overview</a></p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E4%BE%A7%E6%A0%8F%E5%B7%A5%E5%85%B7.png" alt="solr侧栏工具"></p>
<h6 id="添加中文分词器"><a href="#添加中文分词器" class="headerlink" title="添加中文分词器"></a>添加中文分词器</h6><blockquote>
<p>中文分词器github地址 <a href="https://github.com/magese/ik-analyzer-solr/" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/</a></p>
</blockquote>
<ol>
<li><p>添加配置文件：<br>下载 <a href="https://github.com/magese/ik-analyzer-solr/releases/tag/v8.3.0" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/releases/tag/v8.3.0</a></p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6.png" alt="中文分词器资源文件">将<code>ik-analyzer-solr-8.3.0\src\main\resources</code>路径下的5个配置文件拷贝到<code>Solr\server\solr-webapp\webapp\WEB-INF\classes</code>目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">① IKAnalyzer.cfg.xml</span><br><span class="line">② ext.dic</span><br><span class="line">③ stopword.dic</span><br><span class="line">④ ik.conf</span><br><span class="line">⑤ dynamicdic.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>jar包支持：</p>
<p>下载 <a href="https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar" target="_blank" rel="noopener">https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar</a></p>
<p>将jar包拷贝到 <code>Solr\server\solr-webapp\webapp\WEB-INF\lib</code>目录下</p>
</li>
<li><p>配置Solr的<code>managed-schema</code>，添加<code>ik分词器</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ik分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_cn"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="使用中文分词器分析"><a href="#使用中文分词器分析" class="headerlink" title="使用中文分词器分析"></a>使用中文分词器分析</h5><p>在添加中文分词器后，重启Solr，访问 example_core 下的 analysis</p>
<blockquote>
<p>访问地址：<a href="http://localhost:8983/solr/#/example_core/analysis" target="_blank" rel="noopener">http://localhost:8983/solr/#/example_core/analysis</a></p>
</blockquote>
<p>Analyse Fieldname / FieldType：<code>text_cn</code>    （配置的中文分词器）</p>
<p>Field Value ：Solr的中文分词器</p>
<p>分析结果</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E7%A4%BA%E4%BE%8B.png" alt="中文分词器示例"></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>solr</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5笔记</title>
    <url>/articles/70b6ad8d.html</url>
    <content><![CDATA[<h3 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h3><p>1、Spring是轻量级的开源JavaEE框架<br>2、Spring可以解决企业级应用开发的复杂性<br>3、Spring的两个核心部分：IOC和Aop</p>
<ul>
<li>IOC：控制反转，把创建对象过程交给Spring管理</li>
<li>Aop：面向切面编程，不修改源代码进行功能增强</li>
</ul>
<p>4、Spring特点</p>
<ol>
<li>方便解耦，简化开发</li>
<li>Aop编程支持</li>
<li>方便程序测试</li>
<li>方便和其他框架进行整合</li>
<li>方便进行事务操作</li>
<li>降低API开发难度</li>
</ol>
<p>5、Spring5</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Spring/SpringFrame.png" alt="SpringFramework"></p>
<a id="more"></a>
<h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><p><a href="https://repo.spring.io/webapp/#/home" target="_blank" rel="noopener">Spring主页</a></p>
<p><a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">Spring框架</a></p>
<h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><h4 id="IOC（概念和原理）"><a href="#IOC（概念和原理）" class="headerlink" title="IOC（概念和原理）"></a>IOC（概念和原理）</h4><h5 id="IOC（Inversion-of-Control）"><a href="#IOC（Inversion-of-Control）" class="headerlink" title="IOC（Inversion of Control）"></a>IOC（Inversion of Control）</h5><ul>
<li>控制反转，把对象创建和对象之间额调用过程交给Spring进行管理</li>
<li>使用IOC目的：为了耦合度降低</li>
<li>入门案例就是IOC实现</li>
</ul>
<h5 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h5><p>xml解析、工厂模式、反射</p>
<h5 id="IOC过程"><a href="#IOC过程" class="headerlink" title="IOC过程"></a>IOC过程</h5><p>xml配置文件，配置创建的对象    <code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;/bean&gt;</code></p>
<p>Service类和Dao类，创建工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserFactory <span class="title">getDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String classValue=<span class="class"><span class="keyword">class</span>属性值</span>;	<span class="comment">//	xml解析</span></span><br><span class="line">        <span class="comment">// 通过反射创建对象</span></span><br><span class="line">        Class clazz=Class.forName(classValue);</span><br><span class="line">        <span class="keyword">return</span> (UserDao)clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进一步降低耦合度</p>
<h5 id="IOC接口"><a href="#IOC接口" class="headerlink" title="IOC接口"></a>IOC接口</h5><ul>
<li><p>IOC思想基于IOC容器完成，IOC底层就是对象工厂</p>
</li>
<li><p>Spring提供IOC容器实现的两种方式（2个接口）<br>BeanFactory：IOC容器基本实现，是Spring内置接口，不提供开发人员进行使用</p>
<p>加载配置文件时不会创建对象， 在获取对象或适用对象时才会创建</p>
<p>ApplicationContext：BeanFactory接口的子接口，提供更强大的功能，一般由开发人员进行使用<br>加载配置文件时就会把在配置文件对象进行创建</p>
</li>
<li><p>ApplicationContext接口实现类<br>FileSystemXmlApplicationContext<br>ClassPathXmlApplicationContext</p>
</li>
</ul>
<h4 id="IOC操作Bean管理"><a href="#IOC操作Bean管理" class="headerlink" title="IOC操作Bean管理"></a>IOC操作Bean管理</h4><p>Bean管理</p>
<ul>
<li>Bean管理指的是两个操作</li>
<li>Spring创建对象</li>
<li>Spring注入属性</li>
</ul>
<p>Bean管理操作两种方式</p>
<ul>
<li>基于xml配置文件方式实现</li>
<li>基于注解方式实现</li>
</ul>
<h4 id="IOC操作Bean管理（基于xml）"><a href="#IOC操作Bean管理（基于xml）" class="headerlink" title="IOC操作Bean管理（基于xml）"></a>IOC操作Bean管理（基于xml）</h4><h5 id="基于xml方式创建对象"><a href="#基于xml方式创建对象" class="headerlink" title="基于xml方式创建对象"></a>基于xml方式创建对象</h5><ul>
<li>在Spring配置文件中，使用bean标签，标签里面添加对应的属性，就可以实现对象创建</li>
<li>在bean标签中有很多属性，常用属性<br>id属性：唯一标识<br>class属性：类全路径（包名路径）<br>name属性：旧版本常用与id类似</li>
<li>创建对象时，默认执行无参构造方法完成对象创建</li>
</ul>
<h5 id="基于xml方式注入属性"><a href="#基于xml方式注入属性" class="headerlink" title="基于xml方式注入属性"></a>基于xml方式注入属性</h5><p>DI：依赖注入，注入属性</p>
<h6 id="第一种注入方式：使用set方法进行注入"><a href="#第一种注入方式：使用set方法进行注入" class="headerlink" title="第一种注入方式：使用set方法进行注入"></a>第一种注入方式：使用set方法进行注入</h6><ol>
<li><p>创建类，定义属性和相应的set方法</p>
</li>
<li><p>在Spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.spring5.Book"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="第二种注入方式：使用有参构造方法进行注入"><a href="#第二种注入方式：使用有参构造方法进行注入" class="headerlink" title="第二种注入方式：使用有参构造方法进行注入"></a>第二种注入方式：使用有参构造方法进行注入</h6><ol>
<li><p>创建类，定义属性，创建相应的有参构造方法</p>
</li>
<li><p>在Spring配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.spring5.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Food"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"China"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>p名称空间注入<br>使用p名称空间注入，可以简化基于xml注入方式</p>
</li>
<li><p>添加p名称空间在配置文件中<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p>
</li>
<li><p>进行属性注入，在bean标签里面进行操作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.spring5.Book"</span> <span class="attr">p:name</span>=<span class="string">"Spring5"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="IOC操作Bean管理（xml注入其他类型属性）"><a href="#IOC操作Bean管理（xml注入其他类型属性）" class="headerlink" title="IOC操作Bean管理（xml注入其他类型属性）"></a>IOC操作Bean管理（xml注入其他类型属性）</h4><h5 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h5><p>null值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="属性值包含特殊符号"><a href="#属性值包含特殊符号" class="headerlink" title="属性值包含特殊符号"></a>属性值包含特殊符号</h5><ol>
<li><p>&lt;&gt;尖括号进行转译    <code>lt;</code> <code>gt;</code></p>
</li>
<li><p>把特殊符号内容写到CDATA</p>
<p>例如：<code>&lt;&lt;value&gt;&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[&lt;&lt;value&gt;&gt;]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="注入属性-外部bean"><a href="#注入属性-外部bean" class="headerlink" title="注入属性~外部bean"></a>注入属性~外部bean</h5><p>创建两个类Service类和Dao类<br>在Service类调用Dao类里面的方法<br>在Spring配置文件中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"us"</span> <span class="attr">class</span>=<span class="string">"com.spring5.service.UserService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入UserDao对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ud"</span> <span class="attr">ref</span>=<span class="string">"udi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"udi"</span> <span class="attr">class</span>=<span class="string">"com.spring5.dao.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="注入属性-内部bean"><a href="#注入属性-内部bean" class="headerlink" title="注入属性~内部bean"></a>注入属性~内部bean</h5><p>一对多关系：部门和员工<br>在实体类之间表示一对多关系<br>在Spring配置文件中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Employee"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"man"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dep"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Department"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"program"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="注入属性-级联赋值"><a href="#注入属性-级联赋值" class="headerlink" title="注入属性~级联赋值"></a>注入属性~级联赋值</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Employee"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"man"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dep"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Department"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">ref</span>=<span class="string">"dep"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dep"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Department"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"program"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>需要生成Employee类中Department属性的set方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Employee"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"man"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span>			</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dep"</span> <span class="attr">ref</span>=<span class="string">"dep"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dep.name"</span> <span class="attr">value</span>=<span class="string">"program"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dep"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Department"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"program"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="IOC操作Bean管理（xml注入集合属性）"><a href="#IOC操作Bean管理（xml注入集合属性）" class="headerlink" title="IOC操作Bean管理（xml注入集合属性）"></a>IOC操作Bean管理（xml注入集合属性）</h4><ul>
<li><p>注入数组类型属性</p>
</li>
<li><p>注入List集合类型属性</p>
</li>
<li><p>注入Map集合类型属性</p>
</li>
<li><p>注入Set集合类型属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu"</span> <span class="attr">class</span>=<span class="string">"com.spring5.Stu"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courses"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>SQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>b<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Java"</span> <span class="attr">value</span>=<span class="string">"java"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Python"</span> <span class="attr">value</span>=<span class="string">"python"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在集合里面设置对象类型值</p>
</li>
<li><p>把集合的注入部分提取出来<br>在Spring配置文件中引入名称空间util<br>使用util标签完成诸如部分的提取</p>
</li>
</ul>
<h4 id="IOC操作Bean管理（FactoryBean）"><a href="#IOC操作Bean管理（FactoryBean）" class="headerlink" title="IOC操作Bean管理（FactoryBean）"></a>IOC操作Bean管理（FactoryBean）</h4><p>Spring有两种类型bean，一种是普通bean，另一种是工厂bean（FactoryBean）<br>普通bean：在配置文件中定义bean类型就是返回类型<br>工厂bean：在配置文件中定义bean类型可以和返回类型不一样    </p>
<ul>
<li>创建类，让这个类作为工厂bean，实现接口FactoryBean</li>
<li>实现接口里面的方法，在实现的方法中定义返回的bean类型</li>
</ul>
<h4 id="IOC操作Bean管理（bean作用域）"><a href="#IOC操作Bean管理（bean作用域）" class="headerlink" title="IOC操作Bean管理（bean作用域）"></a>IOC操作Bean管理（bean作用域）</h4><p>在Spring里面，设置创建bean实例是单实例还是多实例<br>在Spring里面，默认情况下，bean是单实例对象</p>
<p>在Spring配置文件中bean标签里面有属性值（scope）用于设置单实例还是多实例</p>
<blockquote>
<p>scope属性<br>    singleton表示单实例[默认值]<br>    prototype：表示多实例<br>singleton与prototype区别<br>    singleton单实例，prototype多实例<br>    设置scope值是singleton时，加载Spring配置文件时候就会创建单实例对象<br>    设置scope值是prototype，不是在加载Spring配置文件时不会创建bean对象，在调用getBean()方法时创建多实例对象<br>request、session</p>
</blockquote>
<h4 id="IOC操作Bean管理（生命周期）"><a href="#IOC操作Bean管理（生命周期）" class="headerlink" title="IOC操作Bean管理（生命周期）"></a>IOC操作Bean管理（生命周期）</h4><ul>
<li>通过构造器创建bean实例（无参构造）</li>
<li>为bean的属性设置值和其他bean引用（调用set方法）</li>
<li>调用bean的初始化的方法（需要进行配置初始化的方法）<br>bean标签init-method属性</li>
<li>bean可以使用（已获取对象）</li>
<li>当容器关闭时，调用bean的销毁的方法（需要进行配置销毁的方法）<br>bean标签destroy-method属性</li>
</ul>
<p>bean的后置处理器，bean生命周期的七步</p>
<ol>
<li>通过构造器创建bean实例（无参构造）</li>
<li>为bean的属性设置值和其他bean引用（调用set方法）</li>
<li>把bean实例传递bean后置处理器的方法<br>postProcessBeforeInitialization(Object bean, String beanName)</li>
<li>调用bean的初始化的方法（需要进行配置初始化的方法）</li>
<li>把bean实例传递bean后置处理器的方法<br>postProcessAfterInitialization(Object bean, String beanName)</li>
<li>bean可以使用（已获取对象）</li>
<li>当容器关闭时，调用bean的销毁的方法（需要进行配置销毁的方法）</li>
</ol>
<p>后置处理器<br>接口：BeanPostProcessor</p>
<h4 id="IOC操作Bean管理（xml自动装配）"><a href="#IOC操作Bean管理（xml自动装配）" class="headerlink" title="IOC操作Bean管理（xml自动装配）"></a>IOC操作Bean管理（xml自动装配）</h4><h5 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h5><p>根据指定装配规则（属性名称或属性类型），Spring自动将配置的属性值进行注入</p>
<p>bean标签autowire属性</p>
<ul>
<li>byName根据属性名称注入，注入值bean的id值和类属性名称一样</li>
<li>byType根据属性类型注入        </li>
</ul>
<h5 id="自动装配过程"><a href="#自动装配过程" class="headerlink" title="自动装配过程"></a>自动装配过程</h5><p>根据属性名称自动注入</p>
<p>根据属性类型自动注入</p>
<h4 id="IOC操作Bean管理（外部属性文件）"><a href="#IOC操作Bean管理（外部属性文件）" class="headerlink" title="IOC操作Bean管理（外部属性文件）"></a>IOC操作Bean管理（外部属性文件）</h4><p>直接配置数据库信息<br>配置连接池—德鲁伊druid（Alibaba）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/study"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入外部属性文件配置数据库连接池</p>
<ul>
<li>创建外部属性文件，properties格式文件，写数据库信息</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/study</span></span><br><span class="line"><span class="meta">prop.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">prop.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>把外部properties属性文件引入到Spring配置文件<br>引入context名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line">xsi:schemaLocation=”http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span><br></pre></td></tr></table></figure>
<p>在Spring配置文件中使用标签  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.userName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="IOC操作Bean管理（基于注解方式）"><a href="#IOC操作Bean管理（基于注解方式）" class="headerlink" title="IOC操作Bean管理（基于注解方式）"></a>IOC操作Bean管理（基于注解方式）</h4><p>Spring针对Bean管理中创建对象提供的注解</p>
<ul>
<li>@Component    </li>
<li>@Service    业务逻辑层</li>
<li>@Controller     Web层</li>
<li>@Repository     Dao层        </li>
</ul>
<p>以上四个注解功能是一样的，都可以用来创建bean实例</p>
<h5 id="基于注解方式实现对象创建"><a href="#基于注解方式实现对象创建" class="headerlink" title="基于注解方式实现对象创建"></a>基于注解方式实现对象创建</h5><ol>
<li><p>引入依赖    <code>spring-aop.jar</code></p>
</li>
<li><p>开启组件扫描<br>使用context命名空间<br><code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code></p>
</li>
<li><p>创建类，在类上面添加相应的注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">use-default-filters="false" 不适用默认的filter</span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">expression</span>=<span class="string">""</span>/&gt;</span> 设置扫描哪些内容</span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">expression</span>=<span class="string">""</span>/&gt;</span>设置哪些内容不进行扫描</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h5><ul>
<li><p>@Autowired：根据属性类型进行自动装配<br>把service和dao对象创建，在service和dao实现类添加创建对象注解<br>在service注入dao对象，在service类添加dao类型属性，在属性上面使用注解</p>
</li>
<li><p>@Qualifier：根据属性名称进行注入</p>
<p>@Qualifier注解的使用和@Autowired一起使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(value = <span class="string">"userDaoImpl"</span>)   <span class="comment">// 根据名称进行注入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>@Resource：可以根据类型注入；可以根据名称注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span>   <span class="comment">// 根据类型注入</span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"userDaoImpl"</span>) <span class="comment">// 根据名称注入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>@Value：注入普通类型属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(value = <span class="string">"Spring"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h5><ol>
<li><p>创建配置类，替代xml配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.spring5"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    UserService us = ac.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    us.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="AOP（概念）"><a href="#AOP（概念）" class="headerlink" title="AOP（概念）"></a>AOP（概念）</h4><p>面向切面编程，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</p>
<p>不通过修改源代码方式，在主干功能里面添加新功能    </p>
<p>登录—权限判断模块</p>
<h4 id="AOP（底层原理）"><a href="#AOP（底层原理）" class="headerlink" title="AOP（底层原理）"></a>AOP（底层原理）</h4><p>AOP底层使用动态代理<br>两种情况动态代理</p>
<ul>
<li>有接口情况，使用JDK动态代理<br>创建接口实现类的代理对象，增强类的方法</li>
<li>没有接口情况，使用CGLIB动态代理<br>创建当前类子类的代理对象，增强类的方法    </li>
</ul>
<h5 id="AOP（JDK动态代理）"><a href="#AOP（JDK动态代理）" class="headerlink" title="AOP（JDK动态代理）"></a>AOP（JDK动态代理）</h5><p>使用Proxy类里面的方法创建代理对象</p>
<p>调用newProxyInstance()方法</p>
<ul>
<li>ClassLoader:类加载器</li>
<li>&lt;?&gt;[]interface:增强方法所在的类，这个类实现的接口，支持多接口</li>
<li>InvocationHandler:实现这个接口，创建代理对象，写增强的方法</li>
</ul>
<h4 id="AOP（术语）"><a href="#AOP（术语）" class="headerlink" title="AOP（术语）"></a>AOP（术语）</h4><p>连接点：类里面可以被增强的方法</p>
<p>切入点：实际被真正增强的方法</p>
<p>通知（增强）：实际增强的逻辑部分<br>通知有多种类型</p>
<ul>
<li>前置通知</li>
<li>后置通知</li>
<li>环绕通知</li>
<li>异常通知</li>
<li>最终通知    </li>
</ul>
<p>切面：把通知应用到切入点过程        </p>
<h4 id="AOP操作（准备）"><a href="#AOP操作（准备）" class="headerlink" title="AOP操作（准备）"></a>AOP操作（准备）</h4><ol>
<li>Spring框架一般基于AspectJ实现AOP操作<br>AspectJ：独立的AOP框架</li>
<li>基于AspectJ实现AOP操作<ol>
<li>基于xml配置文件实现</li>
<li>基于注解方式实现</li>
</ol>
</li>
<li>在项目工程里面引入AOP相关依赖<br>cglib.jar<br>aopalliance.jar<br>weaver.jar<br>spring-aspects.jar</li>
<li>切入点表达式<br>切入点表达式作用：知道对哪个类里面的哪个方法进行增强<br>语法结构：<code>exexcution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))</code>            </li>
</ol>
<h4 id="AOP操作（AspectJ注解）"><a href="#AOP操作（AspectJ注解）" class="headerlink" title="AOP操作（AspectJ注解）"></a>AOP操作（AspectJ注解）</h4><ol>
<li>创建类，在类里面定义方法</li>
<li>创建增强类（编写增强逻辑）<br>在增强类里面创建方法，让不同方法待变不同通知类型</li>
<li>进行通知的配置<ol>
<li>在Spring配置文件中，开启注解扫描</li>
<li>使用注解创建User和UserProxy对象</li>
<li>在增强类上面添加注解@Aspect</li>
<li>在Spring配置文件中开启生成代理对象</li>
</ol>
</li>
<li>配置不同类型的通知<br>在增强类里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</li>
<li>相同切入点抽取</li>
<li>有多个增强类中在同一个方法增强，设置增强类的优先级<br>在增强类上面添加注解@Order(数字类型值)，数字类型值越小优先级越高</li>
</ol>
<h4 id="AOP操作（AspectJ配置文件）"><a href="#AOP操作（AspectJ配置文件）" class="headerlink" title="AOP操作（AspectJ配置文件）"></a>AOP操作（AspectJ配置文件）</h4><ol>
<li>创建两个类，增强类和被增强类，创建方法</li>
<li>在Spring配置文件中创建两个类对象</li>
<li>在Spring配置文件中配置切入点    </li>
</ol>
<h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><h4 id="JdbcTemplate（概念和准备）"><a href="#JdbcTemplate（概念和准备）" class="headerlink" title="JdbcTemplate（概念和准备）"></a>JdbcTemplate（概念和准备）</h4><p>JdbcTemplate：Spring框架对JDBC进行封装，使用JDBCTemplate方便实行数据库操作</p>
<p>准备</p>
<ol>
<li>引入相关jar包<br>druid<br>mysql-connector<br>spring-jdbc<br>spring-tx<br>spring-orm</li>
<li>在Spring配置文件配置数据库连接池</li>
<li>配置JdbcTemplate对象，注入DataSource</li>
<li>创建service类，创建dao类，在service中注入dao对象，在dao中注入JdbcTemplate对象</li>
</ol>
<h4 id="JdbcTemplate操作数据库（添加）"><a href="#JdbcTemplate操作数据库（添加）" class="headerlink" title="JdbcTemplate操作数据库（添加）"></a>JdbcTemplate操作数据库（添加）</h4><ol>
<li>对应数据库创建实体类</li>
<li>编写service和dao<ol>
<li>在dao进行数据库添加操作</li>
<li>调用JdbcTemplate对象里面update(String sql,Object.. args)方法实现添加操作<ul>
<li>参数1：sql语句</li>
<li>参数2：可变参数，设置sql语句值</li>
</ul>
</li>
</ol>
</li>
<li>测试类</li>
</ol>
<h4 id="JdbcTemplate操作数据库（查询、修改、删除）"><a href="#JdbcTemplate操作数据库（查询、修改、删除）" class="headerlink" title="JdbcTemplate操作数据库（查询、修改、删除）"></a>JdbcTemplate操作数据库（查询、修改、删除）</h4><p>调用JdbcTemplate对象里面update(String sql,Object.. args)方法</p>
<h5 id="JdbcTemplate操作数据库（查询）"><a href="#JdbcTemplate操作数据库（查询）" class="headerlink" title="JdbcTemplate操作数据库（查询）"></a>JdbcTemplate操作数据库（查询）</h5><p>查询表里面有多少条记录，返回是某个值</p>
<p>使用JdbcTemplate对象里面<code>selectForObject(String sql,Class&lt;T&gt; requiredType)</code>方法实现查询操作</p>
<ul>
<li>参数1：sql语句</li>
<li>参数2：返回类型.class</li>
</ul>
<h5 id="JdbcTemplate操作数据库（查询返回对象）"><a href="#JdbcTemplate操作数据库（查询返回对象）" class="headerlink" title="JdbcTemplate操作数据库（查询返回对象）"></a>JdbcTemplate操作数据库（查询返回对象）</h5><p>查询表返回对象</p>
<p>使用JdbcTemplate对象里面selectForObject(String sql,RowMapper&lt;? extends Object&gt; rowMapper,Object ..args )方法实现查询操作</p>
<ul>
<li>参数1：sql语句</li>
<li>参数2：RowMapper,接口，返回不同的数据类型，使用这个接口的实现类完成数据封装</li>
<li>参数3：sql语句值</li>
</ul>
<h5 id="JdbcTemplate操作数据库（查询返回集合）"><a href="#JdbcTemplate操作数据库（查询返回集合）" class="headerlink" title="JdbcTemplate操作数据库（查询返回集合）"></a>JdbcTemplate操作数据库（查询返回集合）</h5><p>查询表返回集合</p>
<p>使用JdbcTemplate对象里面query(String sql,RowMapper&lt;? extends Object&gt; rowMapper,Object ..args )方法实现查询操作</p>
<ul>
<li>参数1：sql语句</li>
<li>参数2：RowMapper,接口，返回不同的数据类型，使用这个接口的实现类完成数据封装</li>
<li>参数3：sql语句值</li>
</ul>
<h5 id="JdbcTemplate操作数据库（批量添加）"><a href="#JdbcTemplate操作数据库（批量添加）" class="headerlink" title="JdbcTemplate操作数据库（批量添加）"></a>JdbcTemplate操作数据库（批量添加）</h5><p>批量操作：操作表里面多条记录</p>
<p>JdbcTemplate实现批量操作batchUpdate(String sql,List<Object[]> batchArgs)</p>
<ul>
<li>参数1：sql语句</li>
<li>参数2：List集合，添加多条记录数据</li>
</ul>
<h5 id="JdbcTemplate操作数据库（批量修删除）"><a href="#JdbcTemplate操作数据库（批量修删除）" class="headerlink" title="JdbcTemplate操作数据库（批量修删除）"></a>JdbcTemplate操作数据库（批量修删除）</h5><p>批量操作：操作表里面多条记录</p>
<p>JdbcTemplate实现批量操作batchUpdate(String sql,List<Object[]> batchArgs)</p>
<ul>
<li>参数1：sql语句</li>
<li>参数2：List集合，添加多条记录数据</li>
</ul>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果一个失败所有操作都失败</p>
<p>典型场景：银行转账</p>
<h5 id="事务四个特性（ACID）"><a href="#事务四个特性（ACID）" class="headerlink" title="事务四个特性（ACID）"></a>事务四个特性（ACID）</h5><ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<h6 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h6><ol>
<li>创建数据库表，添加记录</li>
<li>创建service，搭建dao，完成对象创建和注入关系<br>service注入dao，在dao注入JdbcTemplate，在JdbcTemplate注入DataSource</li>
<li>在dao创建两个方法，多钱和少钱，在service创建方法（转账的方法），调用dao中的两个方法</li>
<li>在执行过程中出现异常时，数据会出错</li>
</ol>
<p>解决方法：使用事务</p>
<h6 id="事务操作过程"><a href="#事务操作过程" class="headerlink" title="事务操作过程"></a>事务操作过程</h6><ol>
<li>开启事务</li>
<li>进行业务操作</li>
<li>没有异常，提交事务</li>
<li>出现异常，事务回滚</li>
</ol>
<h5 id="事务操作（Spring事务管理介绍）"><a href="#事务操作（Spring事务管理介绍）" class="headerlink" title="事务操作（Spring事务管理介绍）"></a>事务操作（Spring事务管理介绍）</h5><ol>
<li>事务添加到Java EE三层结构里面Service层（业务逻辑层）</li>
<li>在Spring进行事务管理操作<br>编程式事务管理和声明式事务管理（使用）</li>
<li>声明式事务管理<ol>
<li>基于注解方法</li>
<li>基于xml配置文件方式</li>
</ol>
</li>
<li>在Spring进行声明式事务管理，底层使用AOP原理</li>
<li>SPring事务管理API<br>PlatformTransactionManager 接口—事务管理器，针对不同框架提供不同实现类</li>
</ol>
<h5 id="事务操作（注解声明式事务管理）"><a href="#事务操作（注解声明式事务管理）" class="headerlink" title="事务操作（注解声明式事务管理）"></a>事务操作（注解声明式事务管理）</h5><ol>
<li><p>在Spring配置文件配置事务管理器</p>
</li>
<li><p>在Spring配置文件中，开启事务注解</p>
<ol>
<li>在Spring配置文件中引入名称空间tx</li>
<li>开启事务注解</li>
</ol>
</li>
<li><p>在Service类上面（或者Service类方法上面）添加事务注解</p>
<p>@Transactional</p>
<ul>
<li>类：所有的方法都添加事务</li>
<li>方法：只为当前方法添加事务</li>
</ul>
</li>
</ol>
<h5 id="事务操作（注解声明式事务管理参数配置）"><a href="#事务操作（注解声明式事务管理参数配置）" class="headerlink" title="事务操作（注解声明式事务管理参数配置）"></a>事务操作（注解声明式事务管理参数配置）</h5><ol>
<li><p>在Service类上面添加注解@Transactional，注解参数配置</p>
</li>
<li><p>Propagation：事务传播行为<br>多事务方法（对数据库表数据进行变化的操作）进行调用</p>
<p>| 行为         |                             描述                             |<br>| —————— | :—————————————————————————————: |<br>| REQUIRED     | 如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行 |<br>| REQUIRED_NEW | 当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将它挂起 |<br>| SUPPORTS     | 如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中 |<br>| NOT_SUPPORTS |   当前的方法不应该运行在事务中，如果有运行的事务，将它挂起   |<br>| MANDATORY    | 当前的方法必须运行在事物内部，如果没有正在运行的事务，就抛出异常 |<br>| NEVER        |  当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常  |<br>| NESTED       | 如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行 |</p>
</li>
<li><p>Ioslation：事务隔离级别<br>事务有特性称为隔离性，多事务操作之间不会产生影响，不考虑隔离性产生很多问题<br>读问题：脏读、不可重复读、虚（幻）读</p>
<ol>
<li>脏读：一个未提交事务读取到另一个未提交事务的数据</li>
<li>不可重复读：一个未提交的事务读取到另一提交事务修改的数据</li>
<li>虚读：一个未提交事务读取到另一提交事务添加数据</li>
</ol>
<p>| 隔离级别                    | 脏读 | 不可读 | 虚读 |<br>| —————————————- | —— | ——— | —— |<br>| READ_UNCOMMITED（读未提交） | 有   | 有     | 有   |<br>| READ_COMMITTED（读已提交）  | 无   | 有     | 有   |<br>| REPEATABLE_READ（可重复读） | 无   | 无     | 有   |<br>| SERIALIZABLE（串行化）      | 无   | 无     | 无   |</p>
</li>
<li><p>TimeOut：超时时间</p>
<p>事务需要在一定时间内进行提交，如果不提交进行回滚<br>默认值是-1，设置时间以秒为单位进行计算</p>
</li>
<li><p>ReadOnly：是否只读<br>读：查询操作，写：添加修改删除操作</p>
<ol>
<li>默认值为false，表示可以查询，可以添加修改删除操作</li>
<li>设置为true，表示只能查询</li>
</ol>
</li>
<li><p>RollbcakFor：回滚<br>设置出现哪些异常进行事务回滚</p>
</li>
<li><p>NoRollbackFor：不回滚<br>设置出现哪些异常不进行事务回滚</p>
</li>
</ol>
<h5 id="事务操作（XML声明式事务管理）"><a href="#事务操作（XML声明式事务管理）" class="headerlink" title="事务操作（XML声明式事务管理）"></a>事务操作（XML声明式事务管理）</h5><p>在Spring配置文件中进行配置</p>
<ul>
<li>配置事务管理器</li>
<li>配置通知</li>
<li>配置切入点和切面</li>
</ul>
<h5 id="事务操作（完全注解声明式事务管理）"><a href="#事务操作（完全注解声明式事务管理）" class="headerlink" title="事务操作（完全注解声明式事务管理）"></a>事务操作（完全注解声明式事务管理）</h5><p>创建配置类，使用配置类代替</p>
<h3 id="Spring5框架新特性"><a href="#Spring5框架新特性" class="headerlink" title="Spring5框架新特性"></a>Spring5框架新特性</h3><ol>
<li><p>整个Spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除</p>
</li>
<li><p>Spring5框架自带了通用的日志封装<br>Spring5已经移除Log4jConfigListener，官方建议使用Log4j2<br>Spring5框架整合Log4j2</p>
<ol>
<li>引入jar包<br>log4j-api-2<br>log4j-core-2<br>log4j-slf4j-impl-2<br>slf4j-api</li>
<li>创建log4j2.xml</li>
</ol>
</li>
<li><p>Spring5框架核心容器支持@Nullable注解<br>@Nullable注解可以用在方法、属性、参数上，表示方法返回值可以为空，属性值可以为空，参数值可以为空</p>
</li>
<li><p>Spring5核心容器支持函数式风格GenericApplicationContext<br>注册对象</p>
</li>
<li><p>Spring5支持整合JUnit5</p>
<ul>
<li><p>整合JUnit4</p>
<ol>
<li>引入Spring相关针对测试依赖<br>spring-test</li>
<li>编写测试类<br>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(“classpath:.xml”)    </li>
</ol>
<p>注意：@Test导入的包为import org.junit.Test;</p>
</li>
<li><p>整合JUnit5</p>
<ol>
<li>引入JUnit的jar包</li>
<li>编写测试类<br>@ExtendWith(SpringExtension.class)<br>@ContextConfiguration(“classpath:.xml”)</li>
</ol>
<p>注意：@Test导入的包为import org.junit.jupiter.api.Test;</p>
</li>
<li><p>使用复合注解<br>@SpringJUnitConfig(locations=”classpath:.xml”)    </p>
</li>
</ul>
</li>
</ol>
<h4 id="Spring5框架新功能"><a href="#Spring5框架新功能" class="headerlink" title="Spring5框架新功能"></a>Spring5框架新功能</h4><h5 id="SpringWebFlux"><a href="#SpringWebFlux" class="headerlink" title="SpringWebFlux"></a>SpringWebFlux</h5><p>Spring5新添加的模块，用于web开发的，功能SpringMVC类似的，WebFlux使用当前比较流程响应式编程出现的框架</p>
<p>传统web框架，例如SpringMVC，基于Servlet容器</p>
<p>WebFlux是一种异步非阻塞的框架，异步非阻塞的框架只在Servlet3.1以后才支持，核心是基于Reactor的相关API实现的</p>
<h6 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h6><p>异步与同步—调用者，调用者发送请求，对方回应后就去做其他事情—同步，不等待回应就去做其他事情—异步</p>
<p>非阻塞与阻塞—被调用者，被调用者收到请求之后，收到请求任务之后才给出反馈—阻塞，收到请求后马上给出反馈再去做其他事情—非阻塞</p>
<h6 id="WebFlux特点"><a href="#WebFlux特点" class="headerlink" title="WebFlux特点"></a>WebFlux特点</h6><p>非阻塞式：在有限资源下，提高系统吞吐量和伸缩性，以Reactor为基础实现响应式编程</p>
<p>函数式编程：Spring5框架基于Java8，webFlux使用Java8函数式编程方式实现路由请求</p>
<p>比较SpringMVC</p>
<ul>
<li>都可以使用注解方式，运行在Tomcat等容器中</li>
<li>SpringMVC采用命令式编程，WebFlux采用异步响应式编程</li>
</ul>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Spring/WebFlux对比SpringMVC.png" alt="WebFlux对比SpringMVC"></p>
<h5 id="响应式编程ReactiveProgramming"><a href="#响应式编程ReactiveProgramming" class="headerlink" title="响应式编程ReactiveProgramming"></a>响应式编程ReactiveProgramming</h5><p>响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。</p>
<p>Java8及其之前版本<br>提供的观察者模式两个类Observer和Observable    —伪响应式编程</p>
<p>Flow：Publisher、Subscriber</p>
<h6 id="响应式编程Reactor实现"><a href="#响应式编程Reactor实现" class="headerlink" title="响应式编程Reactor实现"></a>响应式编程Reactor实现</h6><ol>
<li><p>响应式编程操作中，满足Reactive规范框架</p>
</li>
<li><p>Mono和Flux两个类都实现了接口Publisher，提供丰富操作符</p>
<ol>
<li>Flux对象实现发布者，返回N个元素</li>
<li>Mono实现发布者，返回0或1个元素</li>
</ol>
</li>
<li><p>Flux和Mono都是数据流的发布者，使用Flux和Mono都可以发出三种数据信号<br>元素值、错误信号、完成信号<br>错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束<br>错误信号终止数据流同时把错误信息传递给订阅者</p>
</li>
<li><p>代码演示<br>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>三种信号特点</p>
<ol>
<li>错误信号和完成信号都是终止信号，不能共存</li>
<li>如果没有发送任何元素值，而是直接发送错误信号或者完成信号，表示是空数据流</li>
<li>如果没有错误信号，没有完成信号，表示是无限数据流</li>
</ol>
</li>
<li><p>调用just或者其他方法只是声明数据流，数据流并没有发出，只有进行订阅之后才会触发数据流，不订阅什么都不会发生的<br>subscribe()</p>
</li>
<li><p>操作符<br>对数据流进行一道道操作，称为操作符</p>
<ul>
<li>map    元素映射为新元素</li>
<li>flatMap 元素映射为流<br>把每个元素转换成流，把转换后的多个流合成更大的流    </li>
</ul>
</li>
</ol>
<h5 id="WebFlux执行流程和核心API"><a href="#WebFlux执行流程和核心API" class="headerlink" title="WebFlux执行流程和核心API"></a>WebFlux执行流程和核心API</h5><p>SpringWebFlux基于Reactor，默认容器是Netty，Netty是高性能的NIO框架，异步非阻塞的框架</p>
<ul>
<li><p>Netty</p>
<ul>
<li>BIO：Blocking I/O</li>
<li>NIO：Non-Blocking I/O</li>
</ul>
</li>
<li><p>SpringWebFlux执行过程和SpringMVC相似<br>SpringWebFlux核心控制器 DispatchHandler，实现接口WebHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebHandler</span> </span>&#123;</span><br><span class="line">    <span class="function">Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringWebFlux里面DispatchHandler，负责请求的处理</p>
<ul>
<li>HandlerMapping：请求查询到处理的方法</li>
<li>HandlerAdapter：真正负责请求处理</li>
<li>HandlerResultHandler：响应结果处理</li>
</ul>
</li>
<li><p>SpringWebFlux实现函数式编程，两个接口：RouterFunction（路由处理）,HandlerFunction（处理函数）</p>
</li>
</ul>
<h5 id="SpringWebFlux（基于注解编程模型）"><a href="#SpringWebFlux（基于注解编程模型）" class="headerlink" title="SpringWebFlux（基于注解编程模型）"></a>SpringWebFlux（基于注解编程模型）</h5><p>只需要把相关依赖配置到项目中，SpringBoot自动配置相关运行容器，默认情况下使用Netty容器</p>
<p>举例：SpringBoot    2.2.1.RELEASE</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置启动端口号</p>
<p>创建相关包和类service、controller</p>
<p>说明：</p>
<ul>
<li>SpringMVC方式实现，同步阻塞的方式，基于SpringMVC+Servlet+Tomcat</li>
<li>SpringWebFlux方式实现，异步非阻塞方式，基于SpringWebFlux+Reactor+Netty</li>
</ul>
<h5 id="SpringWebFlux（基于函数式编程模型）"><a href="#SpringWebFlux（基于函数式编程模型）" class="headerlink" title="SpringWebFlux（基于函数式编程模型）"></a>SpringWebFlux（基于函数式编程模型）</h5><ul>
<li><p>在使用函数式编程模型操作时，需要自己初始化服务器</p>
</li>
<li><p>基于函数式编程模型，两个核心接口：</p>
<ul>
<li>RouterFunction：实现路由功能，请求转发给对应的handler</li>
<li>HandlerFunction：处理请求生成响应的函数</li>
</ul>
<p>核心任务定义两个函数式接口的实现并且启动需要的服务器</p>
</li>
<li><p>SpringWebFlux请求和响应不再是ServletRequest和ServletResponse，而是ServerRequest和ServerResponose</p>
</li>
</ul>
<h5 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h5><ol>
<li>配置项目</li>
<li>创建相关包和类service</li>
<li>创建Handler</li>
<li>初始化服务器，编写Router</li>
<li>创建服务器完成适配</li>
<li>普通调用或使用WebClient调用</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中使用Solr作为搜索引擎</title>
    <url>/articles/4499c37a.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在Spring Boot中，从数据库中通过关键字查询需要通过 like , equal 等，而且中文分词的操作比较复杂，不利于逻辑实现和代码书写。使用Solr作为Spring Boot项目的全文搜索引擎，效率更高，代码更简易。</p>
<p>以文章为模型，演示Solr的增删改查。</p>
<a id="more"></a>
<h5 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h5><p>文章：</p>
<ul>
<li>id 编号</li>
<li>title 标题</li>
<li>content 内容</li>
<li>labels 标签</li>
<li>createTime 创建时间</li>
</ul>
<p>通过关键词对文章的标题、内容、标签中进行搜索。</p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>配置部分包括Solr部分和Spring Boot项目两个部分。</p>
<h6 id="Solr配置"><a href="#Solr配置" class="headerlink" title="Solr配置"></a>Solr配置</h6><p>修改<code>Solr\server\solr\example_core\conf\managed-schema</code>，在\<schema\>标签内添加文章相关配置</p>
<ul>
<li>field 为字段名</li>
<li><code>&lt;copyField source=&quot;字段名&quot; dest=&quot;search_item&quot;/&gt;</code>  作为搜索项</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文章 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_title"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_content"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_create_time"</span> <span class="attr">type</span>=<span class="string">"pdate"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_labels"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索item --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"search_item"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_title"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_content"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_labels"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="Spring-Boot项目配置"><a href="#Spring-Boot项目配置" class="headerlink" title="Spring Boot项目配置"></a>Spring Boot项目配置</h6><ol>
<li><p>创建以maven为依赖管理的spring boot项目</p>
</li>
<li><p>添加web，solr，gson 相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- gson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- solr --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-solr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>application.yml</code> 中配置项目端口号和solr的相关配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="comment"># 配置solr</span></span><br><span class="line">    <span class="attr">solr:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">http://localhost:8983/solr/example_core</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><p>项目文件的结构</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">├─java</span><br><span class="line">│  └─com</span><br><span class="line">│      └─study</span><br><span class="line">│          └─springbootsolr</span><br><span class="line">│              │  SpringBootSolrApplication.java </span><br><span class="line">│              │</span><br><span class="line">│              ├─controller</span><br><span class="line">│              │      SolrController.java</span><br><span class="line">│              │</span><br><span class="line">│              ├─pojo</span><br><span class="line">│              │      PageList.java</span><br><span class="line">│              │      SolrSearchResult.java</span><br><span class="line">│              │</span><br><span class="line">│              └─service</span><br><span class="line">│                      SolrService.java</span><br><span class="line">│</span><br><span class="line">└─resources</span><br><span class="line">    │  application.yml</span><br><span class="line">    │</span><br><span class="line">    ├─<span class="keyword">static</span></span><br><span class="line">    └─templates</span><br></pre></td></tr></table></figure>
<h6 id="SolrSearchResult-java"><a href="#SolrSearchResult-java" class="headerlink" title="SolrSearchResult.java"></a>SolrSearchResult.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrSearchResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_content"</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_create_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_labels"</span>)</span><br><span class="line">    <span class="keyword">private</span> String labels;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_title"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    </span><br><span class="line">    getters/setters...</span><br><span class="line">    toString...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="PageList-java"><a href="#PageList-java" class="headerlink" title="PageList.java"></a>PageList.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> currentPage;   <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalCount;    <span class="comment">// 总共有多少条</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pageSize;      <span class="comment">// 每页内容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalPage;     <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> first;  <span class="comment">// 是否是第一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> last;   <span class="comment">// 是否是最后一页</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; content;   <span class="comment">// 内容</span></span><br><span class="line">    </span><br><span class="line">    getters/setters...</span><br><span class="line">    toString...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="SolrController-java"><a href="#SolrController-java" class="headerlink" title="SolrController.java"></a>SolrController.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SolrService solrService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/solr/&#123;page&#125;/&#123;size&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrSearch</span><span class="params">(@PathVariable(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page,</span></span><br><span class="line"><span class="function">                                 @<span class="title">PathVariable</span><span class="params">(<span class="string">"size"</span>)</span> <span class="keyword">int</span> size,</span></span><br><span class="line"><span class="function">                                 @<span class="title">RequestParam</span><span class="params">(<span class="string">"keyword"</span>)</span> String keyword) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.search(keyword, page, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="SolrService-java"><a href="#SolrService-java" class="headerlink" title="SolrService.java"></a>SolrService.java</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SolrClient solrClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SolrInputDocument doc = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line">        doc.addField(<span class="string">"id"</span>, <span class="string">"730469770008199168"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_title"</span>, <span class="string">"SpringBoot中使用Solr作为搜索引擎"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_content"</span>, <span class="string">"这是测试solr添加的文章内容。"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_create_time"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        doc.addField(<span class="string">"article_labels"</span>, <span class="string">"后端-测试-solr"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            solrClient.add(doc);</span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章添加失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SolrInputDocument doc = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line">        doc.addField(<span class="string">"id"</span>, <span class="string">"730469770008199168"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_title"</span>, <span class="string">"SpringBoot中使用Solr作为搜索引擎"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_content"</span>, <span class="string">"&lt;p&gt;文章更新，这是测试solr更新的文章内容。&lt;/p&gt;"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_create_time"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        doc.addField(<span class="string">"article_labels"</span>, <span class="string">"后端-测试-solr"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            solrClient.add(doc);</span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章更新失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章更新成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 单独删除一条记录</span></span><br><span class="line">            solrClient.deleteById(<span class="string">"730469770008199168"</span>);</span><br><span class="line">            <span class="comment">// 提交</span></span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章删除失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章删除成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">search</span><span class="params">(String keyword, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数检查</span></span><br><span class="line">        <span class="keyword">if</span> (page &lt; <span class="number">1</span>) page = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">5</span>) size = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页设置</span></span><br><span class="line">        SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line">        solrQuery.setRows(size);    <span class="comment">// 每页数量</span></span><br><span class="line">        solrQuery.setStart(size * (page - <span class="number">1</span>));   <span class="comment">// 设置开始位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置搜索条件</span></span><br><span class="line">        solrQuery.set(<span class="string">"df"</span>, <span class="string">"search_item"</span>); <span class="comment">//  设置搜索关键字：标题，内容，标签</span></span><br><span class="line">        solrQuery.set(<span class="string">"q"</span>, TextUtils.isEmpty(keyword) ? <span class="string">"*"</span> : keyword); <span class="comment">// 条件过滤</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时间的降序</span></span><br><span class="line">        solrQuery.setSort(<span class="string">"article_create_time"</span>, SolrQuery.ORDER.desc);</span><br><span class="line"></span><br><span class="line">        solrQuery.setHighlight(<span class="keyword">true</span>);   <span class="comment">// 开启高亮</span></span><br><span class="line">        solrQuery.addHighlightField(<span class="string">"article_title,article_content"</span>); <span class="comment">// 高亮字段</span></span><br><span class="line">        solrQuery.setHighlightSimplePre(<span class="string">"&lt;font color='red'&gt;"</span>);  <span class="comment">// 高亮前缀</span></span><br><span class="line">        solrQuery.setHighlightSimplePost(<span class="string">"&lt;/font&gt;"</span>);            <span class="comment">// 高亮后缀</span></span><br><span class="line">        solrQuery.setHighlightFragsize(<span class="number">400</span>);    <span class="comment">// 设置字符数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置返回字段</span></span><br><span class="line">        solrQuery.addField(<span class="string">"id,article_content,article_create_time,article_labels,article_title"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理搜索结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryResponse result = solrClient.query(solrQuery);</span><br><span class="line">            <span class="comment">// 获取高亮内容</span></span><br><span class="line">            Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = result.getHighlighting();</span><br><span class="line">            <span class="comment">// 把数据转换成bean类</span></span><br><span class="line">            List&lt;SolrSearchResult&gt; beans = result.getBeans(SolrSearchResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">for</span> (SolrSearchResult item : beans) &#123;</span><br><span class="line">                Map&lt;String, List&lt;String&gt;&gt; stringListMap = highlighting.get(item.getId());</span><br><span class="line">                <span class="keyword">if</span> (stringListMap == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                List&lt;String&gt; title = stringListMap.get(<span class="string">"article_title"</span>);</span><br><span class="line">                <span class="comment">// 替换文章标题为高亮</span></span><br><span class="line">                <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setTitle(title.get(<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;String&gt; content = stringListMap.get(<span class="string">"article_content"</span>);</span><br><span class="line">                <span class="comment">// 替换文章内容为高亮</span></span><br><span class="line">                <span class="keyword">if</span> (content != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setContent(content.get(<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 封装结果：列表，页面，每页数量</span></span><br><span class="line">            PageList&lt;SolrSearchResult&gt; pageList = <span class="keyword">new</span> PageList&lt;&gt;();</span><br><span class="line">            pageList.setContent(beans);</span><br><span class="line">            pageList.setCurrentPage(page);</span><br><span class="line">            pageList.setTotalCount(result.getResults().getNumFound());</span><br><span class="line">            pageList.setPageSize(size);</span><br><span class="line">            pageList.setTotalPage((<span class="keyword">int</span>) (pageList.getTotalCount() / size + <span class="number">0.5</span>));</span><br><span class="line">            pageList.setFirst(pageList.getCurrentPage() == <span class="number">1</span>);</span><br><span class="line">            pageList.setLast(pageList.getCurrentPage() == pageList.getTotalPage());</span><br><span class="line">            <span class="comment">// 返回搜索结果</span></span><br><span class="line">            Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(pageList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"搜索失败，请稍后重试！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>使用postman测试增删改查，以及solr客户端查询</p>
<h6 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h6><p>postman</p>
<ul>
<li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li>
<li>请求方式：post</li>
</ul>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0.png" alt="solr添加文章"></p>
<h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>solr网页客户端进行查询（查询所有，不过滤）</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C.png" alt="solr网页客户端搜索结果"></p>
<p>postman 模拟搜索</p>
<ul>
<li>请求url：<a href="http://localhost:8000/test/solr/1/5?keyword=solr" target="_blank" rel="noopener">http://localhost:8000/test/solr/1/5?keyword=solr</a></li>
<li>请求方式：get</li>
</ul>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/postman%E6%90%9C%E7%B4%A2%E6%B7%BB%E5%8A%A0%E7%BB%93%E6%9E%9C.png" alt="postman搜索添加文章结果"></p>
<h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><p>postman</p>
<ul>
<li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li>
<li>请求方式：put</li>
</ul>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0.png" alt="solr文章g更新"></p>
<p>solr客户端查看更新结果</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E7%BB%93%E6%9E%9C.png" alt="solr客户端查看更新结果"></p>
<h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p>postman</p>
<ul>
<li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li>
<li>请求方式：delete</li>
</ul>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E5%88%A0%E9%99%A4.png" alt="solr删除文章"></p>
<p>solr客户端查看删除结果</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%A0%E9%99%A4%E7%BB%93%E6%9E%9C.png" alt="solr客户端删除结果"></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>solr</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/articles/e94425f6.html</url>
    <content><![CDATA[<h1 id="SpringBoot笔记"><a href="#SpringBoot笔记" class="headerlink" title="SpringBoot笔记"></a>SpringBoot笔记</h1><blockquote>
<p>官方文档：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">springboot</a></p>
</blockquote>
<h2 id="SpringBoot基础"><a href="#SpringBoot基础" class="headerlink" title="SpringBoot基础"></a>SpringBoot基础</h2><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul>
<li>创建独立的Spring应用程序</li>
<li>直接嵌入Tomcat，Jetty或Undertow（无需部署WAR文件）</li>
<li>提供“入门”依赖项，以简化构建配置</li>
<li>尽可能自动配置Spring和3rd Party库</li>
<li>提供可用于生产的功能，例如指标，运行状况检查和外部化配置</li>
<li>完全没有代码生成，也不需要XML配置</li>
</ul>
<h4 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h4><p><strong>SNAPSHOT</strong>：开发版</p>
<p><strong>CURRENT</strong>：最新版，不一定是稳定版</p>
<p><strong>GA</strong>：General Availability 正式发布的版本</p>
<a id="more"></a>
<h4 id="创建基于SpringBoot的项目"><a href="#创建基于SpringBoot的项目" class="headerlink" title="创建基于SpringBoot的项目"></a>创建基于SpringBoot的项目</h4><ul>
<li>官网</li>
<li>IDEA的脚手架工具</li>
<li>IDEA的Maven项目</li>
</ul>
<h6 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h6><blockquote>
<p><a href="https://start.spring.io/" target="_blank" rel="noopener">spring initializr</a></p>
</blockquote>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Spring/官网创建项目.png" alt="官网创建项目"></p>
<p>填写完信息后点击<code>Generate</code>即可生成文件，下载解压后就是一个项目</p>
<h6 id="IDEA的脚手架工具"><a href="#IDEA的脚手架工具" class="headerlink" title="IDEA的脚手架工具"></a>IDEA的脚手架工具</h6><p>使用 IDEA 的 Spring Initalizr 工具创建 SpringBoot 项目</p>
<ul>
<li><p>打开创建项目,选择 Spring Initializr ，选择对应的JDK路径和URL</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Spring/IDEA-Spring-Initializr.png" alt="IDEA 的 Spring Initalizr创建项目"></p>
</li>
<li><p>填写项目设置</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Spring/IDEA-Spring-Initializr-Project-Settings.png" alt="IDEA 的 Spring Initalizr创建项目"></p>
</li>
<li><p>添加依赖和SpringBoot版本</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Spring/IDEA-Spring-Initializr-Dependencies.png" alt="IDEA 的 Spring Initalizr创建项目"></p>
</li>
<li><p>选择项目名和路径，以及其他设置</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Spring/IDEA-Spring-Initializr-Name-Location.png" alt="IDEA 的 Spring Initalizr创建项目"></p>
</li>
</ul>
<h6 id="IDEA的Maven项目"><a href="#IDEA的Maven项目" class="headerlink" title="IDEA的Maven项目"></a>IDEA的Maven项目</h6><p>使用IDEA创建<code>Maven</code>项目后，修改<code>pom.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>	<span class="comment">&lt;!-- SpringBoot版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>	<span class="comment">&lt;!-- JDK版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>	<span class="comment">&lt;!-- SpringBoot Web启动器，项目不使用可以不需要添加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>	<span class="comment">&lt;!-- SpringBoot测试启动器，可以不添加 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>	<span class="comment">&lt;!-- SpringBoot打包插件，必须有 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="SpringBoot项目结构"><a href="#SpringBoot项目结构" class="headerlink" title="SpringBoot项目结构"></a>SpringBoot项目结构</h4><h5 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h5><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SpringBoot的父级依赖，只有继承它才是SpringBoot项目<br><code>spring-boot-starter-parent</code> 是一个特殊的starter，它用来提供相关的Maven默认依赖。使用它之后，常用的包依赖可以省去version标签</p>
<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动器依赖<br>举例：web启动器</p>
<p>可使用第三方启动器</p>
<h6 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring-boot-maven-plugin</code> 插件是将<code>springboot</code>的应用程序打包成<code>jar</code>包的插件。将所有应用启动运行所需要的<code>jar</code>包都包含进来，从逻辑上将具备了独立运行软件的条件。当运行<code>mvn package</code>进行打包后，使用<code>java-jar</code>命令就可以直接运行</p>
<h5 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h5><p>Spring Boot 的启动类的作用是启动Spring Boot 项目，是基于<code>Main</code>方法来运行的<br>启动类在启动时会做注解扫描(<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>…)</p>
<h6 id="启动类与启动器区别"><a href="#启动类与启动器区别" class="headerlink" title="启动类与启动器区别"></a>启动类与启动器区别</h6><p>启动类：项目的启动入口</p>
<p>启动器：<code>jar</code>包的坐标</p>
<h6 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>		<span class="comment">//注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootDemoApplication</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        SpringApplication.run(SpringBootDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;	<span class="comment">//启动类</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>INFO 13284 —- [           main] c.s.s.SpringBootDemoApplication          : Starting SpringBootDemoApplication on Dell with PID 13284<br>INFO 13284 —- [           main] c.s.s.SpringBootDemoApplication          : No active profile set, falling back to default profiles: default<br>INFO 13284 —- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)<br>INFO 13284 —- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]<br>INFO 13284 —- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]<br>INFO 13284 —- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext<br>INFO 13284 —- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2335 ms<br>INFO 13284 —- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService ‘applicationTaskExecutor’<br>INFO 13284 —- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ‘’<br>INFO 13284 —- [           main] c.s.s.SpringBootDemoApplication          : Started SpringBootDemoApplication in 4.181 seconds (JVM running for 9.543)</p>
</blockquote>
<h5 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h5><p>Spring Boot 将所有的功能场景都抽取出来，做成一个个的 starter ，只要在项目里引入这些 starter 相关场景的所有依赖都会导入进来，要用什么功能就导入什么场景，在<code>jar</code>包上管理非常方便，最终实现一站式开发</p>
<p>Spring Boot 提供多达 44 个启动器</p>
<blockquote>
<p>spring-boot-starter 核心启动器，包含了自动配置、日志和YAML</p>
<p>spring-boot-starter-actuator 帮助监控和管理应用</p>
<p>spring-boot-starter-web 支持全栈式Web开发，包括Tomcat 和 spring-webmvc</p>
<p>spring-boot-starter-amqp 通过spring-rabbit 来支持AMQP协议(Advanced Message Queuing Protocol)</p>
<p>spring-boot-starter-jdbc 支持JDBC数据库</p>
<p>…</p>
<p>官网：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">springboot文档</a></p>
</blockquote>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>Spring Boot 提供一个名称为application的全局配置文件，支持两种格式：Properties格式和YAML格式</p>
<h6 id="Properties格式"><a href="#Properties格式" class="headerlink" title="Properties格式"></a>Properties格式</h6><p>配置Tomcat监听端口</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>
<h6 id="YAML格式"><a href="#YAML格式" class="headerlink" title="YAML格式"></a>YAML格式</h6><p>YAML格式的扩展名可以是<code>.yaml</code>或<code>.yml</code></p>
<p>基本格式：</p>
<ul>
<li>区分大小写</li>
<li>使用缩进代表层级关系</li>
<li>相同的部分只出现一次</li>
</ul>
<p>配置Tomcat监听端口</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure>
<h5 id="配置文件存放位置"><a href="#配置文件存放位置" class="headerlink" title="配置文件存放位置"></a>配置文件存放位置</h5><ul>
<li>项目根目录中</li>
<li>项目根目录下的一个congfig子目录中</li>
<li>项目的resources即classpath根路径中</li>
<li>项目的resources即classpath根路径下的config目录中</li>
</ul>
<h5 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h5><h6 id="不同格式的加载顺序"><a href="#不同格式的加载顺序" class="headerlink" title="不同格式的加载顺序"></a>不同格式的加载顺序</h6><p>如果在同一个目录下有application.yml 也有 application.properties，默认先读取application.properties</p>
<p>如果同一个配置属性，在多个配置文件都配置了，默认使用第一个读取到的，后面读取的不覆盖前面读取的</p>
<h6 id="不同位置的加载顺序"><a href="#不同位置的加载顺序" class="headerlink" title="不同位置的加载顺序"></a>不同位置的加载顺序</h6><p>项目根目录下的config子目录(最高)<br>config/application.properties<br>config/applicaiton.yml</p>
<p>项目根目录(其次)<br>application.properties<br>applicaiton.yml</p>
<p>项目的resources即classpath根路径下的config目录(一般)<br>resources/config/application.properties<br>resources/config/application.yml</p>
<p>项目的resources即classpath根路径(最后)<br>resources/application.properties<br>resources/application.yml</p>
<h5 id="配置文件中的占位符"><a href="#配置文件中的占位符" class="headerlink" title="配置文件中的占位符"></a>配置文件中的占位符</h5><h6 id="占位符语法"><a href="#占位符语法" class="headerlink" title="占位符语法"></a>占位符语法</h6><p>语法：<code>${}</code></p>
<h6 id="占位符作用"><a href="#占位符作用" class="headerlink" title="占位符作用"></a>占位符作用</h6><p><code>${}</code>中可以获取框架提供的方法中的值，如：<code>random.int</code> …</p>
<p>占位符可以获取配置文件中的键的值赋给另一个键作为值</p>
<h6 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h6><p><code>${random.value}</code>  类似于uuid的随机数，没有 - 连接</p>
<p><code>${random.int}</code> 随机取整型范围内的一个值</p>
<p><code>${random.long}</code> 随机取长整型范围内的一个值</p>
<p><code>${random.uuid}</code> 生成一个uuid，有 - 连接</p>
<p><code>${random.int(value)}</code> 随机生成value以内的整型的值</p>
<p><code>${random.int(value,max)}</code> 随机生成value-max之间的整型的值</p>
<h5 id="bootstrap配置文件"><a href="#bootstrap配置文件" class="headerlink" title="bootstrap配置文件"></a>bootstrap配置文件</h5><p>Spring Boot中有两种上下文对象：bootstrap ， application<br>bootstrap是应用程序的<strong>父上下文</strong>，其加载优先于application，bootstrap主要从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性<br>这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源<br>bootstrap里面的属性会优先加载，它们默认也不能被本地相同配置覆盖</p>
<h6 id="bootstrap配置文件特征"><a href="#bootstrap配置文件特征" class="headerlink" title="bootstrap配置文件特征"></a>bootstrap配置文件特征</h6><p>bootstrap 由父ApplicationContext加载，比application优先加载</p>
<p>bootstrap里面的属性不能被覆盖</p>
<h6 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h6><p>application 配置文件主要用于Spring Boot项目的自动化配置</p>
<p>bootstrap 配置文件应用场景：</p>
<ul>
<li>使用Spring Cloud Config 配置中心时，需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息</li>
<li>一些固定的不能被覆盖的属性</li>
<li>一些加密/解密的场景</li>
</ul>
<h5 id="SpringBoot核心注解"><a href="#SpringBoot核心注解" class="headerlink" title="SpringBoot核心注解"></a>SpringBoot核心注解</h5><h6 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h6><p>配置Spring Boot的启动类</p>
<p>等同于 <code>@Configuration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code> 的组合</p>
<h6 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h6><p><code>@SpringBootConfiguration</code> 是 @<code>Configuration</code> 注解的派生注解，跟 <code>@Configuration</code>注解的功能一致，标注这个类是一个配置类，只不过<code>@SpringBootConfiguration</code> 是 springboot的注解，而<code>@Configuration</code> 是 spring的注解</p>
<h6 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h6><p>通过对bean对象的操作替代 spring 中 的xml 配置文件</p>
<h6 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h6><p>Spring Boot 自动配置：根据添加的jar依赖自动配置Spring应用<br>是 @AutoConfiguration 和 @Import({AutoConfigurationImportSelector.class})注解的组合</p>
<h6 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h6><p>自动注入主类下所在包下所有的加了注解的类(<code>@Controller</code>，<code>@Service</code>)</p>
<h6 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})"></a>@Import({AutoConfigurationImportSelector.class})</h6><p>直接导入普通的类<br>导入实现了 ImportSelector 接口的类</p>
<p>导入实现了ImportBeanDefinitionRegister 接口的类</p>
<h6 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h6><p>组件扫描，可自动发现和装载一些 Bean</p>
<h6 id="ConfigurationPropertiesScan"><a href="#ConfigurationPropertiesScan" class="headerlink" title="ConfigurationPropertiesScan"></a>ConfigurationPropertiesScan</h6><p>扫描配置属性</p>
<p>作用：使用 <code>@ConfigurationProperties</code> 注解的类生效</p>
<h5 id="编写HelloWord"><a href="#编写HelloWord" class="headerlink" title="编写HelloWord"></a>编写HelloWord</h5><ul>
<li>项目创建</li>
<li>修改POM文件</li>
<li>修改Tomcat端口</li>
<li>创建启动类</li>
<li>创建Controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理请求 Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">// @Controller + @ResponseBody 直接返回字符串（json）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/helloWorld"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>启动应用后</p>
<p>访问 <a href="http://localhost:8080/helloWorld" target="_blank" rel="noopener">http://localhost:8080/helloWorld</a></p>
</blockquote>
<h5 id="SpringBoot在Controller中常用注解"><a href="#SpringBoot在Controller中常用注解" class="headerlink" title="SpringBoot在Controller中常用注解"></a>SpringBoot在Controller中常用注解</h5><h6 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h6><p>相当于 @Controller + @ResponseBody 注解组合</p>
<p>如果使用 @RestController 注解，Controller中的方法无法返回页面，相当于在方法上面自动加了 @ResponseBody 注解，所以没办法跳转并传输数据到另一个页面，所以 InternalResourceResolver 也不起作用，返回的内容就是 return 里面的内容</p>
<h6 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h6><p>RequestMapping(method = RequestMethod.Get) 的缩写</p>
<h6 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h6><p>RequestMapping(method = RequestMethod.Post) 的缩写</p>
<h6 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h6><p>RequestMapping(method = RequestMethod.Put) 的缩写</p>
<h6 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h6><p>RequestMapping(method = RequestMethod.Delete) 的缩写</p>
<h4 id="SpringBoot整合Web层技术"><a href="#SpringBoot整合Web层技术" class="headerlink" title="SpringBoot整合Web层技术"></a>SpringBoot整合Web层技术</h4><h5 id="整合Servlet"><a href="#整合Servlet" class="headerlink" title="整合Servlet"></a>整合Servlet</h5><h6 id="整合Servlet方式一"><a href="#整合Servlet方式一" class="headerlink" title="整合Servlet方式一"></a>整合Servlet方式一</h6><p>通过注解扫描完成Servlet组件的注册</p>
<ul>
<li>创建Servlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Servlet方式一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"FirstServlet"</span>, urlPatterns = <span class="string">"/first"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is from first servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>修改启动类，添加<code>@ServletComponentScan</code>注解</p>
<p>在SpringBoot启动时会扫描<code>@WebServlet</code>注解，并将该类实例化</p>
</li>
</ul>
<h6 id="整合Servlet方式二"><a href="#整合Servlet方式二" class="headerlink" title="整合Servlet方式二"></a>整合Servlet方式二</h6><p>通过方法完成Servlet组件的注册</p>
<ul>
<li>创建Servlet     <code>servlet/SecondServlet.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Servlet方式二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is from second servlet."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建Servlet配置类     <code>config/ServletConfig.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet组件注册类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成Servlet组件的注册</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServletConfigurationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> SecondServlet());</span><br><span class="line">        bean.addUrlMappings(<span class="string">"/second"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="整合Filter"><a href="#整合Filter" class="headerlink" title="整合Filter"></a>整合Filter</h5><h6 id="整合Filter方式一"><a href="#整合Filter方式一" class="headerlink" title="整合Filter方式一"></a>整合Filter方式一</h6><p>通过注解扫描完成Filter组件的注册</p>
<ul>
<li>创建Filter    <code>filter/FisrtFilter.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Filter方式一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// urlPatterns = &#123;"*.do", "*.jsp"&#125;	匹配多个url</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"FirstFilter"</span>, urlPatterns = <span class="string">"/first"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------in first filter--------"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"--------out first filter--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改启动类，添加 <code>@ServletComponentScan</code> 注解</li>
</ul>
<h6 id="整合Filter方式二"><a href="#整合Filter方式二" class="headerlink" title="整合Filter方式二"></a>整合Filter方式二</h6><p>通过方法完成Filter组件的注册</p>
<ul>
<li>创建Filter    <code>filter/SecondFilter.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Filter方式二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------in Second filter--------"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"--------out Second filter--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建Filter配置类 <code>config/SecondFilter.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">getFilterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> SecondFilter());</span><br><span class="line">        <span class="comment">//bean.addUrlPatterns("*.do", "*.jsp"); //不定项参数，可以不使用 new String[]&#123;&#125;</span></span><br><span class="line">        bean.addUrlPatterns(<span class="string">"/second"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="整合Listener"><a href="#整合Listener" class="headerlink" title="整合Listener"></a>整合Listener</h5><h6 id="整合Listener方式一"><a href="#整合Listener方式一" class="headerlink" title="整合Listener方式一"></a>整合Listener方式一</h6><p>通过注解扫描完成Listener组件注册</p>
<ul>
<li>编写Listener     <code>listener/FirstListener.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Listener方式一</span></span><br><span class="line"><span class="comment"> * ServletContextListener 监听上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Listener--initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改启动类 添加 <code>@ServletComponentScan</code> 注解</li>
</ul>
<h6 id="整合Listener方式二"><a href="#整合Listener方式二" class="headerlink" title="整合Listener方式二"></a>整合Listener方式二</h6><p>通过方法完成Listener组件的注册</p>
<ul>
<li>创建Listener     <code>listener/SecondListener.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Listener方式二</span></span><br><span class="line"><span class="comment"> * ServletContextListener 监听上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Second Listener--initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建Listener配置类     <code>config/ListenerConfig.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Listener配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">getServletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean bean = <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> SecondListener());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SpringBoot访问静态资源"><a href="#SpringBoot访问静态资源" class="headerlink" title="SpringBoot访问静态资源"></a>SpringBoot访问静态资源</h4><p>在SpringBoot项目中没有常规web开发的WebContent(WebApp)，它只有src目录。在src/main/resources下面有两个文件夹，static和templates。SpringBoot默认在static目录存放静态页面，而templates中放动态页面。</p>
<h5 id="static目录"><a href="#static目录" class="headerlink" title="static目录"></a>static目录</h5><p>SpringBoot 通过classpath/static 目录访问静态资源</p>
<p>存放静态资源的目录名称必须是static</p>
<blockquote>
<p>文件：static/index.html</p>
<p>直接访问：<a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a></p>
</blockquote>
<p>通过controller跳转访问    controller/IndexPageController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexPageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showIndexPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>文件：static/index.html</p>
<p>访问地址：<a href="http://localhost:8080/index" target="_blank" rel="noopener">http://localhost:8080/index</a></p>
</blockquote>
<h5 id="templtates目录"><a href="#templtates目录" class="headerlink" title="templtates目录"></a>templtates目录</h5><p>SpringBoot 中不推荐使用jsp作为视图层技术，而是默认使用Thymeleaf来做动态页面</p>
<p>Teammates目录用来存放Thymeleaf的页面</p>
<h5 id="静态资源存放其他位置"><a href="#静态资源存放其他位置" class="headerlink" title="静态资源存放其他位置"></a>静态资源存放其他位置</h5><h6 id="SpringBoot访问静态资源的位置"><a href="#SpringBoot访问静态资源的位置" class="headerlink" title="SpringBoot访问静态资源的位置"></a>SpringBoot访问静态资源的位置</h6><blockquote>
<p>classpath:    与java文件夹同级的resources目录</p>
</blockquote>
<p>classpath:/META-INF/resources/</p>
<p>classpath:/resources/</p>
<p>classpath:/static/</p>
<p>classpath:/public/</p>
<h6 id="自定义静态资源位置"><a href="#自定义静态资源位置" class="headerlink" title="自定义静态资源位置"></a>自定义静态资源位置</h6><p>在application.properties文件中配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/自定义资源位置1/,classpath:/自定义资源位置2/</span></span><br></pre></td></tr></table></figure>
<h4 id="SpringBoot文件上传"><a href="#SpringBoot文件上传" class="headerlink" title="SpringBoot文件上传"></a>SpringBoot文件上传</h4><ul>
<li>创建项目</li>
<li>配置POM文件</li>
<li>编写启动类</li>
<li>编写上传页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/fileUploadController"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"OK"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 参数名必须与fileupload.xml中的input标签的value值一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/fileUploadController"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(file.getOriginalFilename());</span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(<span class="string">"D:/upload/"</span> + file.getOriginalFilename()));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改上传文件大小</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置单文件上传的容量限制</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">2MB</span></span><br><span class="line"><span class="comment"># 配置在一次请求中上传文件总容量的限制</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">20MB</span></span><br></pre></td></tr></table></figure>
<h4 id="SpringBoot整合视图层技术"><a href="#SpringBoot整合视图层技术" class="headerlink" title="SpringBoot整合视图层技术"></a>SpringBoot整合视图层技术</h4><h5 id="SpringBoot整合JSP技术"><a href="#SpringBoot整合JSP技术" class="headerlink" title="SpringBoot整合JSP技术"></a>SpringBoot整合JSP技术</h5><p>创建项目</p>
<p>修改POM文件，添加JSP引擎与JSTL标签库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加jsp引擎依赖，SpringBoot内置Tomcat没有此依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jsper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加JSTL标签库依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建webapp目录</p>
<p>main目录下与java、resource同级</p>
<p>标记为web目录</p>
<p>创建JSP</p>
<p>修改配置文件，配置视图解析器</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/WEB-INF/jsp/</span></span><br><span class="line"><span class="comment"># 后缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure>
<p>创建Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 页面跳转</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;page&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showPage</span><span class="params">(@PathVariable String page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果在IDEA中项目为聚合工程，在运行jsp时是需要指定路径。</p>
<h5 id="SpringBoot整合Freemarker"><a href="#SpringBoot整合Freemarker" class="headerlink" title="SpringBoot整合Freemarker"></a>SpringBoot整合Freemarker</h5><p>创建项目</p>
<p>修改POM文件，添加Freemarker启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Freemarker依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建User实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String uname, String gender, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/showUsers"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showUsers</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"李四"</span>, <span class="string">"男"</span>, <span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"王五"</span>, <span class="string">"男"</span>, <span class="number">18</span>));</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"userlist"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建视图 <code>templates/userlist.ftl</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot整合Freemarker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#list</span> <span class="attr">list</span> <span class="attr">as</span> <span class="attr">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.uname&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.gender&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置Freemarker文件后缀（SpringBoot2.x后默认为.ftlh）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.freemarker.suffix</span>=<span class="string">.ftl</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记</title>
    <url>/articles/67c8035e.html</url>
    <content><![CDATA[<h5 id="Spring-Cloud与Spring-Cloud-Alibaba"><a href="#Spring-Cloud与Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud与Spring Cloud Alibaba"></a>Spring Cloud与Spring Cloud Alibaba</h5><p>Spring Cloud为开发人员提供了工具来快速构建分布式系统中的一些常见模式(例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话、集群状态)。分布式系统的协调产生了模板模式，使用Spring Cloud开发人员可以快速建立实现这些模式的服务和应用程序。它们在任何分布式环境中都能很好地工作，包括开发者自己的笔记本电脑、裸机数据中心以及云计算等托管平台。</p>
<p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">Spring Cloud 官网</a><br><a href="https://github.com/alibaba/spring-cloud-alibaba" target="_blank" rel="noopener">Spring Cloud Alibaba</a></p>
<a id="more"></a>
<h6 id="Spring-Cloud的几大痛点"><a href="#Spring-Cloud的几大痛点" class="headerlink" title="Spring Cloud的几大痛点"></a>Spring Cloud的几大痛点</h6><ul>
<li>Spring Cloud 部分组件停止维护和更新，给开发带来不便</li>
<li>Spring Cloud 部分环境搭建复杂，没有完善的可视化界面，需要大量的二次开发和定制</li>
<li>Spring Cloud 配置复杂，难以上手，部分配置差别难以区分和合理应用</li>
</ul>
<h6 id="Spring-Cloud-Alibaba的优势"><a href="#Spring-Cloud-Alibaba的优势" class="headerlink" title="Spring Cloud Alibaba的优势"></a>Spring Cloud Alibaba的优势</h6><p>成套的产品搭配完善的可视化界面给开发运维带来极大的便利<br>搭建简单，学习曲线低。</p>
<h6 id="结合Spring-Cloud-Alibaba最终的技术搭配方案"><a href="#结合Spring-Cloud-Alibaba最终的技术搭配方案" class="headerlink" title="结合Spring Cloud Alibaba最终的技术搭配方案"></a>结合Spring Cloud Alibaba最终的技术搭配方案</h6><p>Spring Cloud Alibaba </p>
<ul>
<li>Nacos<ul>
<li>注册中心（服务发现/注册）</li>
<li>配置中心（动态配置管理）</li>
</ul>
</li>
<li>Sentinel：服务容错（限流、降级、熔断）</li>
<li>Seata：原Fescar，即分布式事务解决方案</li>
</ul>
<p>Spring Cloud</p>
<ul>
<li>Ribbon：负载均衡</li>
<li>Feign：声明式HTTP客户端（调用远程服务）</li>
<li>Gateway：API网关（webflux编程模式）</li>
<li>Sleuth：调用链监控</li>
</ul>
<h5 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h5><h6 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h6><ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos服务的注册发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置nacos注册中心的地址</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@EnableDiscoveryClient</code>注解开启服务注册与发现功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EchoController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping</span>(value = <span class="string">"/echo/&#123;string&#125;"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(@PathVariable String string)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> string;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h6><p>远程调用别的服务</p>
<ol>
<li>引入open-feign</li>
<li>编写一个接口，告诉spring cloud这个接口需要调用远程服务<ol>
<li>声明接口的每一个方法都是调用哪个远程服务的哪个方法</li>
</ol>
</li>
<li>开启远程调用功能</li>
</ol>
<h5 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h5><h6 id="使用nacos作为配置中心统一管理配置"><a href="#使用nacos作为配置中心统一管理配置" class="headerlink" title="使用nacos作为配置中心统一管理配置"></a>使用nacos作为配置中心统一管理配置</h6><ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务的配置中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个bootstarp.properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需要给配置中心默认添加一个数据集（Data Id）gulimall-coupon.properties，默认规则：应用名.properties</p>
</li>
<li><p>给 应用名.properties 添加任何配置</p>
</li>
<li><p>动态获取配置：</p>
<ul>
<li><p>@RefreshScope                        动态获取并刷新</p>
</li>
<li><p>@Value(${“配置项的key”});      获取到配置</p>
<p>如果配置中心和当前应用的配置文件都配置了相同的项，优先使用配置中心的配置</p>
</li>
</ul>
</li>
</ol>
<h6 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h6><ul>
<li><p>命名空间：配置隔离<br>默认：public（保留空间），默认新增的的所有配置都在public空间</p>
<ol>
<li>开发dev、测试test、生产prod，利用命名空间进行环境隔离<font color='red'>注意：在bootstarp.properties上配置需要使用哪个命名空间的配置</font></li>
<li>每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</li>
</ol>
</li>
<li><p>配置集：所有配置的集合</p>
</li>
<li>配置集ID：类似文件名；DataId</li>
<li>配置分组：<br>默认所有的配置集都属于：DEFAULT_GROUP</li>
</ul>
<p>每个微服务创建自己的命名空间，使用分组区分环境，dev，test，prod</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="comment"># 配置nacos的服务地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 配置nacos命名空间</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">a177d187-5110-464e-9844-fe4b09cc0ebb</span></span><br><span class="line"><span class="comment"># 设置配置分组</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>
<p>同时加载多个配置集</p>
<ul>
<li>微服务任何配置信息，任何配置文件都可以放在配置中心中</li>
<li>只需要在<code>bootstrap.properties</code>说明加载配置中心中哪些配置文件即可</li>
<li>@Value，@ConfiguartionProperties<br>SpringBoot从配置文件中获取值的任何方式，都能使用<br>配置中心有的优先使用，没有的配置使用微服务的配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="comment"># 配置nacos的服务地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 配置nacos命名空间</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">a177d187-5110-464e-9844-fe4b09cc0ebb</span></span><br><span class="line"><span class="comment"># 设置配置分组</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"># database source数据源</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">datasource.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># mybatis</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].data-id</span>=<span class="string">mybatis.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].data-id</span>=<span class="string">other.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<h5 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h5><p>网关作为流量的入口，常用功能包括路由转发、权限校验、限流控制等，而Spring Cloud Gateway作为Spring Cloud官方推出的第二代网关框架，替代Zuul网关。</p>
<p>官方文档：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#" target="_blank" rel="noopener">spring-cloud-gateway-2.2.3.RELEASE</a></p>
<ul>
<li>路由（Route）</li>
<li>断言（Predicate）</li>
<li>过滤器（Filter）</li>
</ul>
<h6 id="Gateway简单配置"><a href="#Gateway简单配置" class="headerlink" title="Gateway简单配置"></a>Gateway简单配置</h6><ol>
<li>开启服务注册发现（配置nacos的注册中心地址）</li>
<li>配置路由、断言和过滤器</li>
</ol>
<blockquote>
<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">88</span></span><br></pre></td></tr></table></figure>
<p>bootstrap.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">7c44370b-0de0-400c-8650-9ef824a54818</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">gulimall-gateway.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p>application.yaml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 测试gateway的导入</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,baidu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,qq</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>当请求url中包含url=baidu时跳转到baidu.com，url=qq时跳转到qq.com</p>
<h6 id="商城项目配置"><a href="#商城项目配置" class="headerlink" title="商城项目配置"></a>商城项目配置</h6><p>通过<code>GateWay</code>网关将以<code>api</code>请求分别转发到指定的服务。</p>
<blockquote>
<p>application.yaml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="comment"># load balance 负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">          <span class="comment"># 断言</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">          <span class="comment"># load balance 负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">          <span class="comment"># 断言</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<font color=red>注意：断言的 </font>`Path`<font color=red>作用域越大的放在后面，避免出现指定的断言的</font>`Path`<font color=red>不生效。</font>

<h5 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h5><p>Spring Cloud Alibaba-OSS</p>
<h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p>对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储服务，适合存放任何类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成本。</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%AD%BE%E5%90%8D%E5%90%8E%E7%9B%B4%E4%BC%A0.png" alt="阿里云对象存储-服务端签名后直传"></p>
<h6 id="阿里云-OSS-的文件上传功能"><a href="#阿里云-OSS-的文件上传功能" class="headerlink" title="阿里云 OSS 的文件上传功能"></a>阿里云 OSS 的文件上传功能</h6><ol>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line">String endpoint = <span class="string">"http://oss-cn-hangzhou.aliyuncs.com"</span>;</span><br><span class="line"><span class="comment">// 云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，创建并使用RAM子账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建。</span></span><br><span class="line">String accessKeyId = <span class="string">"&lt;yourAccessKeyId&gt;"</span>;</span><br><span class="line">String accessKeySecret = <span class="string">"&lt;yourAccessKeySecret&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件流。</span></span><br><span class="line">InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"&lt;yourlocalFile&gt;"</span>);</span><br><span class="line">ossClient.putObject(<span class="string">"&lt;yourBucketName&gt;"</span>, <span class="string">"&lt;yourObjectName&gt;"</span>, inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭OSSClient。</span></span><br><span class="line">ossClient.shutdown();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="通过Spring-Boot对OSS进行管理"><a href="#通过Spring-Boot对OSS进行管理" class="headerlink" title="通过Spring Boot对OSS进行管理"></a>通过Spring Boot对OSS进行管理</h6><ol>
<li><p>引入对象存储依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alicloud-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置相关信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">application.properties</span></span><br><span class="line"><span class="meta">alibaba.cloud.access-key</span>=<span class="string">your-ak</span></span><br><span class="line"><span class="meta">alibaba.cloud.secret-key</span>=<span class="string">your-sk</span></span><br><span class="line"><span class="meta">alibaba.cloud.oss.endpoint</span>=<span class="string">***</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 OSSClient 进行相关操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OSSClient ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// download file to local</span></span><br><span class="line">        ossClient.getObject(<span class="keyword">new</span> GetObjectRequest(bucketName, objectName), <span class="keyword">new</span> File(<span class="string">"pathOfYourLocalFile"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
        <tag>spring cloud alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记</title>
    <url>/articles/e545fed0.html</url>
    <content><![CDATA[<h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><h5 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h5><p><strong>SpringMVC</strong>是基于Java实现<strong>MVC</strong>设计模型的请求驱动类型的轻量级Web框架，属于<strong>SpringFrameWork</strong>的后续产品，已经融合在<strong>SpringWebFlow</strong>中。</p>
<p>SpringMVC通过一套注解，让一个简单的Java类成为处理请求的控制器，而无须实现任何接口，同时支持<strong>RESTful</strong>编程风格的请求。</p>
<a id="more"></a>
<h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><ol>
<li>导入SpringMVC相关依赖包</li>
<li>配置SpringMVC核心控制器<b>DispatcherServlet</b></li>
<li>编写Controller类和视图页面—“@Controller与@RequestMapping”</li>
<li>将Controller使用注解配置到Spring容器中</li>
<li>配置spring-mvc.xml文件(配置组件扫描)</li>
<li>客户端发起请求测试</li>
</ol>
<h5 id="SpringMVC中重要组件"><a href="#SpringMVC中重要组件" class="headerlink" title="SpringMVC中重要组件"></a>SpringMVC中重要组件</h5><p>DispatcherServlet：前端控制器，接收所有请求（如果配置/不包含jsp）</p>
<p>HandlerMapping：解析请求格式，判断希望要执行哪个具体的方法</p>
<p>HandlerAdapter：负责调用具体的方法</p>
<p>Handler：处理器</p>
<p>ViewResolver：视图解析器，解析结果，准备跳转到具体的物理视图</p>
<p>View：视图</p>
<h5 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h5><ol>
<li>客户端向Tomcat发送请求</li>
<li>前端控制器DispatcherServlet—请求查询Handler</li>
<li>处理器映射器HandlerMapping</li>
<li>HandlerAdapter</li>
<li>Controller</li>
<li>ViewResolver</li>
<li>前端控制器返回处理器执行链HandlerExecuctionChain</li>
</ol>
<h5 id="SpringMVC注解-RequestMappping"><a href="#SpringMVC注解-RequestMappping" class="headerlink" title="SpringMVC注解@RequestMappping"></a>SpringMVC注解@RequestMappping</h5><h6 id="RequestMappping"><a href="#RequestMappping" class="headerlink" title="@RequestMappping"></a>@RequestMappping</h6><p>作用：用于建立请求URL和处理方法之间的对应关系</p>
<p><strong>位置</strong></p>
<ul>
<li>类：请求URL的第一级访问目录，此处不写就相当于应用的根目录</li>
<li>方法：请求URL的第二级访问目录，与类上使用的@RequestMapping标注的一级目录一起组成访问虚拟路径</li>
</ul>
<p><strong>属性</strong></p>
<ul>
<li>value：用于指定请求的URL，和path属性的作用是一样的</li>
<li>method：用于指定请求的方式</li>
<li>params：用于指定限制请求参数的条件，它支持简单的表达式，要求请求参数的key和value必须和配置的一模一样</li>
<li>params={“accountName”}：表示请求参数必须有accountName</li>
<li>params={“moeny!100”}：表示请求参数中money不能是100</li>
</ul>
<h6 id="视图解析器配置"><a href="#视图解析器配置" class="headerlink" title="视图解析器配置"></a>视图解析器配置</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h4><h5 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h5><ul>
<li><p>直接返回字符串：将返回的字符串与视图解析的前后缀拼接后跳转</p>
<p>举例    返回”index”    </p>
<p>前缀为<code>/jsp/</code>    后缀为<code>.jsp</code></p>
<p><strong>转发资源</strong> <code>/jsp/index.jsp</code></p>
<p><strong>转发</strong> <code>forward:/jsp/index.jsp</code></p>
<p><strong>重定向</strong> <code>redirect:/index.jsp</code></p>
</li>
<li><p>通过ModelAndView对象返回</p>
</li>
</ul>
<h5 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h5><ul>
<li><p>直接返回字符串（json）：使用@ResponseBody注解</p>
<p>通过SpringMVC框架注入的response对象，使用response.getWriter.write()回写数据，此时不需要视图跳转，业务方法返回值为void</p>
<p>json格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--配置编码格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置jackson转换器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回对象或集合<br>mvc注解驱动替代上述配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>在SpringMVC各个组件中，处理器映射器、处理器适配器、视图解析器成为SpringMVC的三大组件，使用<code>&lt;mvc:annotation-driven/&gt;</code>自动加载RequestMappingHandlerMapping（）处理映射器和RequestMappingHanlderAdapter（处理适配器），可用在spring-xml.xml配置文件中使用<code>&lt;mvc:annotation-driven/&gt;</code>替代注解注解处理器和适配器的配置。</p>
<p>使用<code>&lt;mvc:annotation-driven/&gt;</code>默认底层就会继承jackson进行对象或集合的json格式字符串的转换</p>
</li>
</ul>
<h4 id="SpringMVC获取请求数据"><a href="#SpringMVC获取请求数据" class="headerlink" title="SpringMVC获取请求数据"></a>SpringMVC获取请求数据</h4><p>客户端请求参数的格式是：name=value&amp;name=value…</p>
<p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收的参数类型为</p>
<ul>
<li>基本类型参数</li>
<li>POJO类型参数</li>
<li>数组类型参数</li>
<li>集合类型参数</li>
</ul>
<h5 id="获取基本类型参数"><a href="#获取基本类型参数" class="headerlink" title="获取基本类型参数"></a>获取基本类型参数</h5><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">param</span><span class="params">(String uname, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    System.out.println(uname + <span class="string">":"</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="获取POJO类型参数"><a href="#获取POJO类型参数" class="headerlink" title="获取POJO类型参数"></a>获取POJO类型参数</h5><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*POJO实体*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    getter/setter...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Controller*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/parampojo"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramPojo</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user.getUname() + <span class="string">":"</span> + user.getGender() + <span class="string">":"</span> + user.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="获取数组类型参数"><a href="#获取数组类型参数" class="headerlink" title="获取数组类型参数"></a>获取数组类型参数</h5><p>Controller中的业务方法的数组名称与请求参数的name一致，参数值会自动映射匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/paramarray"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramArray</span><span class="params">(String[] arr)</span> </span>&#123;</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="获得集合类型参数"><a href="#获得集合类型参数" class="headerlink" title="获得集合类型参数"></a>获得集合类型参数</h5><p>获取集合参数时，要将集合包装到一个POJO中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*POJO包装集合参数*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; lu;</span><br><span class="line">    getter/setter</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Controller*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/paramset"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramSet</span><span class="params">(ViewObject vo)</span> </span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--form.jsp--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;测试获取集合类型参数&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">"paramset"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            unmae:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[0].uname"</span>&gt;&lt;br&gt;</span><br><span class="line">            gender:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[0].gender"</span>&gt;&lt;br&gt;</span><br><span class="line">            age:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[0].age"</span>&gt;&lt;br&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            unmae:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[1].uname"</span>&gt;&lt;br&gt;</span><br><span class="line">            gender:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[1].gender"</span>&gt;&lt;br&gt;</span><br><span class="line">            age:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[1].age"</span>&gt;&lt;br&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>当使用ajax提交时，可以指定contentType为json形式，在方法参数位置使用@ReqeustBody可以直接接收集合数据而无需使用POJO进行包装。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--ajax.jsp--%&gt;</span><br><span class="line">&lt;!--引入jquery--&gt;</span><br><span class="line">&lt;script src="js/jquery-3.3.1.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> userList = [];</span><br><span class="line">    userList.push(&#123;uname: <span class="string">"张三"</span>, gender: <span class="string">"Male"</span>, age: <span class="number">19</span>&#125;);</span><br><span class="line">    userList.push(&#123;uanme: <span class="string">"李四"</span>, gender: <span class="string">"Female"</span>, age: <span class="number">20</span>&#125;);</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"paramajax"</span>,</span><br><span class="line">        data: JSON.stringify(userList),</span><br><span class="line">        contentType: <span class="string">"application/json;charset=utf-8"</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Controller*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/paramajax"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramAjax</span><span class="params">(@RequestBody List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要在<code>spring-mvc.xml</code>中需要配置文件资源路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件资源路径映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/*"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="参数绑定注解-RequestParam"><a href="#参数绑定注解-RequestParam" class="headerlink" title="参数绑定注解@RequestParam"></a>参数绑定注解@RequestParam</h5><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显式的绑定。</p>
<ul>
<li>value：请求参数名称</li>
<li>required：在指定的请求参数是否必须包括，默认是true，提交时没有此参数则报错</li>
<li>defaultValue：当没有指定请求参数时，则使用指定的默认值赋值</li>
</ul>
<h5 id="获取Restful风格的参数"><a href="#获取Restful风格的参数" class="headerlink" title="获取Restful风格的参数"></a>获取Restful风格的参数</h5><p>Restful是一种架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互的软件，基于这个风格设计的软件更简洁，更有层次，更易于实现缓存机制。</p>
<p>Restful风格的请求是使用”url+请求方式”表示一次请求的目的，HTTP协议里面四个表示操作方式</p>
<ul>
<li>GET：用于获取资源</li>
<li>POST：用于新建资源</li>
<li>PUT：用于更新资源</li>
<li>DELETE：用于删除资源</li>
</ul>
<p>SpringMVC中使用占位符进行参数绑定，地址<code>/user/1</code>可以写成<code>/user/{id}</code>，占位符<code>{id}</code>对应的就是<code>1</code>的值，在业务方法中可以使用@PathVariable注解进行占位符的匹配获取。</p>
<h5 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h5><p>SpringMVC默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int类型进行参数设置。</p>
<p>自定义类型转换器开发步骤</p>
<ol>
<li>定义转换器类实现Convert接口</li>
<li>在配置文件中声明转换器</li>
<li>在<code>&lt;annotation-driven&gt;</code>标签中引用转换器</li>
</ol>
<h6 id="自定义日期类型转换器"><a href="#自定义日期类型转换器" class="headerlink" title="自定义日期类型转换器"></a>自定义日期类型转换器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Controller*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/param/&#123;date&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramDate</span><span class="params">(@PathVariable(value = <span class="string">"date"</span>)</span> Date date) </span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.study.converter.DateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"myConverter"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h5><p>使用@RequestHeader注解可以获取请求头信息，相当于request.getHeader(String name)</p>
<ul>
<li>value：请求头的名称</li>
<li>required：是否必须携带此请求头</li>
</ul>
<p>使用@CookieValue注解可以获取指定Cookie信息</p>
<ul>
<li>value：指定cookie的名称</li>
<li>required：是否必须携带此cookie</li>
</ul>
<h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p>文件上传客户端三要素</p>
<ul>
<li><p>表单项 type=”file”</p>
</li>
<li><p>表单的提交方式时post</p>
</li>
<li><p>表单的enctype属性是多部分表单形式，即enctype=”multipart/form-data”</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"upload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    文件名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"filename"</span>&gt;&lt;br&gt;</span><br><span class="line">    文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h6><ul>
<li>当form表单修改为多部分表单时，request.getParameter将失效</li>
<li>enctype=”application/x-www-form-urlencoded”时，form表单正文内容格式是key=value&amp;key=value…</li>
<li>当form表单的enctype的取值是multipart/form-data时，请求正文内容为多部分形式</li>
</ul>
<h6 id="单文件上传步骤"><a href="#单文件上传步骤" class="headerlink" title="单文件上传步骤"></a>单文件上传步骤</h6><ol>
<li>导入fileupload和io坐标</li>
<li>配置文件上传解析器</li>
<li>编写文件上传代码</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件的编码格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件总大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传单个文件大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSizePerFile"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String uname, MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ParamController.upload"</span>);</span><br><span class="line">    <span class="comment">// 获取文件名称</span></span><br><span class="line">    String filename = file.getOriginalFilename();</span><br><span class="line">    System.out.println(uname + <span class="string">"上传了"</span> + filename);</span><br><span class="line">    <span class="comment">// 存储</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> File(<span class="string">"D:/upload/"</span> + filename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h6><p>只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型改为MultipartFile[]即可。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"upload-multiply"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span>&gt;&lt;br&gt;</span><br><span class="line">    文件<span class="number">1</span>:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    文件<span class="number">2</span>:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload-multiply"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadMultiplyFile</span><span class="params">(String uname, MultipartFile[] file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ParamController.upload"</span>);</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : file) &#123;</span><br><span class="line">        <span class="comment">// 获取文件名称</span></span><br><span class="line">        String filename = multipartFile.getOriginalFilename();</span><br><span class="line">        System.out.println(uname + <span class="string">"上传了"</span> + filename);</span><br><span class="line">        <span class="comment">// 存储</span></span><br><span class="line">        multipartFile.transferTo(<span class="keyword">new</span> File(<span class="string">"D:/upload/"</span> + filename));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h4><p>拦截器（interceptor）</p>
<p>SpringMVC的拦截器类似于Servlet开发中的过滤器Filter，用于对处理器的<strong>预处理</strong>和<strong>后处理</strong>。</p>
<p>将拦截器按一定的顺序联结成一条链，称为拦截器链（Interceptor Chain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。</p>
<p>拦截器是AOP思想的具体实现</p>
<h5 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h5><div class="table-container">
<table>
<thead>
<tr>
<th>区别</th>
<th>过滤器</th>
<th>拦截器</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用范围</td>
<td>过滤器是Servlet规范中的一部分，任何JavaWeb工程都可以使用</td>
<td>SpringMVC框架，只有使用了SpringMVC框架的工程才能使用</td>
</tr>
<tr>
<td>拦截范围</td>
<td>在url-pattern中配置了/*之后，可以对所有要访问的资源拦截</td>
<td>只会拦截访问的控制器方法，如果访问的是jsp，html，css，image或者js是不会进行拦截</td>
</tr>
</tbody>
</table>
</div>
<h5 id="自定义拦截器步骤"><a href="#自定义拦截器步骤" class="headerlink" title="自定义拦截器步骤"></a>自定义拦截器步骤</h5><ol>
<li>创建拦截器类实现HandlerInterceptor接口</li>
<li>配置拦截器</li>
<li>测试拦截器的拦截效果</li>
</ol>
<blockquote>
<p><code>HandlerInterceptor</code>接口源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行于目标方法之前</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;	<span class="comment">// true表示放行，false表示不放行</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 执行于目标方法之后，视图对象返回之前</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 执行于视图对象返回之后</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>在<code>spring-mvc.xml</code>中配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"自定义的Interceptor实现类全路径"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="拦截器方法说明"><a href="#拦截器方法说明" class="headerlink" title="拦截器方法说明"></a>拦截器方法说明</h5><div class="table-container">
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>preHandle()</td>
<td>该方法在请求处理之前进行调用，其返回值为boolean类型，当它返回false时，表示请求结束，后续的Interceptor和Controller都不会在执行；当它返回true时，会继续调用下一个Interceptor的preHandle方法。</td>
</tr>
<tr>
<td>postHandle()</td>
<td>该方法实在当前请求进行处理之后被调用，前提是preHandle方法的返回值为true时才能被调用，且它会在DispatcherServlet进行视图返回渲染之前被调用，所以可以在这个方法中对Controller处理之后的ModelAndView对象进行操作。</td>
</tr>
<tr>
<td>afterCompletion()</td>
<td>该方法将在整个请求结束之后，也就是在DispatcherServlet渲染了对应的视图对象之后执行，前提是preHandle方法放行才能被调用。</td>
</tr>
</tbody>
</table>
</div>
<h4 id="SpringMVC异常处理机制"><a href="#SpringMVC异常处理机制" class="headerlink" title="SpringMVC异常处理机制"></a>SpringMVC异常处理机制</h4><h5 id="异常处理的思路"><a href="#异常处理的思路" class="headerlink" title="异常处理的思路"></a>异常处理的思路</h5><p>系统中异常包括两类：<strong>预期异常</strong>和<strong>运行异常RuntimeException</strong>，前者能通过捕获异常从而获取异常信息，或者主要通过规范代码开发、测试等手段减少运行时异常的发生。</p>
<p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理。</p>
<p>客户端—请求—&gt;前端控制器—请求—&gt;Controller—请求—&gt;Service—请求—&gt;Dao<br>处理：前端控制器—&gt;HandlerExceptionResolver</p>
<h5 id="SpringMVC异常处理两种方式"><a href="#SpringMVC异常处理两种方式" class="headerlink" title="SpringMVC异常处理两种方式"></a>SpringMVC异常处理两种方式</h5><ul>
<li>使用MVC提供的简单异常处理器SimpleMappingExceptionResolver</li>
<li>实现Spring的异常处理接口HandlerExceptionResolver自定义异常处理器</li>
</ul>
<h6 id="简单异常处理器SimpleMappingExceptionResolver"><a href="#简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="简单异常处理器SimpleMappingExceptionResolver"></a>简单异常处理器SimpleMappingExceptionResolver</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认错误视图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--异常映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"com.study.exception.MyException"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"java.lang.ClassCastException"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="自定义异常处理步骤"><a href="#自定义异常处理步骤" class="headerlink" title="自定义异常处理步骤"></a>自定义异常处理步骤</h6><ul>
<li>创建异常处理类实现HandlerExceptionResolver</li>
<li>配置异常处理器</li>
<li>编写异常页面</li>
<li>测试异常跳转</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req  请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e    异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 要跳转的错误视图信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MyException) &#123;</span><br><span class="line">            mav.addObject(<span class="string">"info"</span>, <span class="string">"自定义异常"</span>);</span><br><span class="line">            mav.setViewName(<span class="string">"my-error"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ClassCastException) &#123;</span><br><span class="line">            mav.addObject(<span class="string">"info"</span>, <span class="string">"类型转换异常"</span>);</span><br><span class="line">            mav.setViewName(<span class="string">"class-cast-error"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mav.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.study.resolver.MyExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>spring mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Web技术复习笔记大纲</title>
    <url>/articles/71c32ee5.html</url>
    <content><![CDATA[<h5 id="C-S架构与B-S架构"><a href="#C-S架构与B-S架构" class="headerlink" title="C/S架构与B/S架构"></a>C/S架构与B/S架构</h5><p>C/S架构：client/server</p>
<ul>
<li>socket、serversocket、awt/swing做一个客户端软件</li>
<li>建好socket连接后，通过io流来交换，数据格式开发者自定义绑定</li>
</ul>
<p>B/S架构：browser/server</p>
<ul>
<li>浏览器也是一种客户端软件</li>
<li>HTTP协议定义了浏览器和服务器通讯的基本规则之一</li>
</ul>
<p>浏览器和服务器之间的交互</p>
<ul>
<li>交互模式：请求-响应</li>
<li>客户端先发出请求，服务器根据请求内容发送响应的内容，客户端根据响应内容进行显示</li>
</ul>
<a id="more"></a>
<h6 id="客户端发出请求的格式"><a href="#客户端发出请求的格式" class="headerlink" title="客户端发出请求的格式"></a>客户端发出请求的格式</h6><ol>
<li><p>请求行：服务器的地址、端口、资源地址</p>
</li>
<li><p>请求头</p>
</li>
<li><p>请求实体</p>
<font color="red">注：客户端向服务器传参，如果将参数放到请求行，即为*get*方式，如果将参数放在实体中，即为*post*请求</font>

</li>
</ol>
<h6 id="服务器收到请求内容后发送响应内容"><a href="#服务器收到请求内容后发送响应内容" class="headerlink" title="服务器收到请求内容后发送响应内容"></a>服务器收到请求内容后发送响应内容</h6><ul>
<li>响应内容定义<ul>
<li>状态行 200、404、500</li>
<li>响应行</li>
<li>响应实体</li>
</ul>
</li>
</ul>
<h6 id="客户端收到响应内容后，显示内容"><a href="#客户端收到响应内容后，显示内容" class="headerlink" title="客户端收到响应内容后，显示内容"></a>客户端收到响应内容后，显示内容</h6><ul>
<li>HTML超文本标记语言</li>
<li>HTML元素动态 javascript（livescript）</li>
<li>控制页面元素 css Cascading Style Sheets层叠样式表</li>
</ul>
<h6 id="服务器根据请求内容发送响应的内容"><a href="#服务器根据请求内容发送响应的内容" class="headerlink" title="服务器根据请求内容发送响应的内容"></a>服务器根据请求内容发送响应的内容</h6><ol>
<li>收请求内容<ol>
<li>建立监听，ServletSocket s.accept()</li>
<li>启动一个线程（轻量级进程），为请求的客户提供服务</li>
<li>为了封装客户端提供的请求信息，定义一个对象：HttpServletRequest</li>
<li>为了封装回送给服务端的相应内容，定义一个对象：HTTPServletResponse</li>
</ol>
</li>
<li>根据请求内容调用相应的程序（Servlet）<ol>
<li>通过web.xml中定义的url和Servlet的关系，找到对应的Serlvet程序</li>
<li>定义了HttpServlet抽象类，service(HttpServletRequset req,HttpServletResponse resp)方法</li>
<li>将response对象中的信息，转译成基于http协议的响应内容，再将这些响应内容通过socket传送给客户端<br>为了统一处理上述流程，使用Tomcat服务器，也成为web容器，Servlet容器</li>
</ol>
</li>
</ol>
<h6 id="规范、增强Servlet程序"><a href="#规范、增强Servlet程序" class="headerlink" title="规范、增强Servlet程序"></a>规范、增强Servlet程序</h6><ul>
<li>浏览器发送给服务器的请求内容    HttpServletRequest对象</li>
<li>服务器回送给浏览器的相应内容    HttpServletResponse对象</li>
<li>Serlvet类读取web.xml中自己的配置信息    ServletConfig</li>
<li>需要读取web.xml中的公共信息    \<context-param>    ServletContext</li>
<li>将所有Servlet放入一个容器中统一管理        ServletContext</li>
<li>保存以前操作的状态    客户端保存Cookie     服务器保存Session<br>Servlet擅于业务逻辑处理，不擅于页面展示的代码处理    改进Servlet—-&gt;JSP<br>统一的转译程序，将jsp文件内容转译成java类代码，产生了jsp引擎（一般服务器自带了这个功能）</li>
</ul>
<h6 id="ajax异步模式局部刷新效果"><a href="#ajax异步模式局部刷新效果" class="headerlink" title="ajax异步模式局部刷新效果"></a>ajax异步模式局部刷新效果</h6><p>XmlHttpRequest</p>
<p>通过增加XMLHttpRequet对象，使用XHR对象发送请求，获得数据后，也是先传给XHR对象，再通过js代码操作dom模型，实现局部刷新效果。</p>
<h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><h6 id="非表单标签"><a href="#非表单标签" class="headerlink" title="非表单标签"></a>非表单标签</h6><ul>
<li>b粗体    u下划线    i斜体    del删除效果</li>
<li>a 超链接 href 、target </li>
<li>img 图片</li>
<li>frameset 框架 （frame）框架集</li>
<li>table表格 th、tr、td（单元格table data cell）colspan、rowspan单元格合并</li>
<li>ul li ol 列表标签</li>
<li>embed 用来播放MP3、视频等</li>
<li>div 虚拟矩形区域    span 行内元素（不会换行）    </li>
</ul>
<h6 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h6><ul>
<li>form表单标签 action提交表单的地址 method表单提交的方式（） name（命名方式：regFrm）</li>
<li>表单域（表单域一定要有name属性，否则该表单域的值不会被提交）<ul>
<li>文本域 text单行文本域、password密码框、textarea多行文本域</li>
<li>radio单选按钮（组，name属性一致即为一组，每组只能提交一个值）</li>
<li>chcekbox复选框（组，name属性一致即为一组，每组恶意体骄傲多个值）</li>
<li>select option下拉框（可以实现多选一，多选多）</li>
<li>file 文件域，用来实现文件上传（method=past,enctype=”multipart/form-data”）</li>
<li>hidden 隐藏域（不需要用用户输入，但是服务器又需要的值）</li>
<li>reset 重置</li>
<li>submit 提交按钮</li>
<li>button 普通按钮（通常用来激活一个js函数）        </li>
</ul>
</li>
</ul>
<h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><ul>
<li>引用css信息<ul>
<li>通过html元素的style属性，class属性</li>
<li>通过\<style>块</li>
<li>通过引入外部的css文件\<link></li>
</ul>
</li>
<li>css选择器<ul>
<li>id选择器    #id名字</li>
<li>class选择器 .类名</li>
<li>元素选择器</li>
</ul>
</li>
<li>css属性<ul>
<li>文本属性</li>
<li>定位属性    静态定位、相对定位、绝对定位、固定定位、z-index</li>
<li>列表属性</li>
<li>布局属性</li>
<li>边框属性</li>
</ul>
</li>
</ul>
<h5 id="JavScript"><a href="#JavScript" class="headerlink" title="JavScript"></a>JavScript</h5><h6 id="js的基本语法"><a href="#js的基本语法" class="headerlink" title="js的基本语法"></a>js的基本语法</h6><ul>
<li>基本数据类型    undefined、null、number、字符串、Boolean、Object</li>
<li>变量定义 var</li>
<li>控制语句</li>
<li>内置语句 eval()、escape()、unescape()</li>
<li>常用的对象    Date、Math、String、RegExp</li>
<li>数组 var a=[];    var b=new Array();</li>
<li>对象的定义</li>
<li>JSON:    声明：var user=(name:””,pwd:””,sleep:function(){});    使用：user.sleep;</li>
<li>函数也是对象</li>
<li>继承是通过prototype属性来模拟    String prototype.trim=function(){return this.replace(“(^\s+)||(\s+$)”,””)}     “ 123 “.trim()</li>
<li>对话框    alert警告框    prompt询问框 confirm确认框</li>
<li>浏览器对象<ul>
<li>window<ul>
<li>open 打开子窗口    close关闭窗口</li>
<li>定时操作    setTimeout,clearTimeout    setInterval,clearInterval</li>
</ul>
</li>
<li>navigator：浏览器信息</li>
<li>history：访问历史    history.go(1)            </li>
<li>location：地址栏信息</li>
</ul>
</li>
</ul>
<h6 id="dom操作"><a href="#dom操作" class="headerlink" title="dom操作"></a>dom操作</h6><ul>
<li><p>获取节点</p>
<ul>
<li>直接获得<ul>
<li>id</li>
<li>name</li>
<li>class</li>
<li>tagName</li>
</ul>
</li>
<li>间接获得<ul>
<li>通过父节点获得子节点<ul>
<li>childNode</li>
<li>firstChild、lastChild</li>
</ul>
</li>
<li>通过子节点获得父节点：parentNode</li>
<li>兄弟节点：nextSibling、preSibling                    </li>
</ul>
</li>
</ul>
</li>
<li><p>操作节点</p>
<ul>
<li>判断节点类型 nodeType    1元素节点    3文本节点</li>
<li>节点的属性    通过点操作符</li>
<li>节点的文本内容    innerHTML</li>
</ul>
</li>
<li><p>改变DOM结构</p>
<ul>
<li>增加节点 appendChild，insertBefore</li>
<li>删除节点 removeChild</li>
<li>替换节点 replaceChild</li>
</ul>
</li>
<li><p>表单的操作</p>
<ul>
<li><p>通用属性 value，disabled，表单对象.elements</p>
</li>
<li><p>单选按钮和复选框操作的时候，一般采用遍历</p>
</li>
<li><p>表单验证 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">submit</span> <span class="attr">value</span> <span class="attr">onclick</span>=<span class="string">"return check(this.from)"</span></span></span><br><span class="line">    &lt;form onsubmit="return check(this)"</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h5 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h5><p>Tomcat服务器</p>
<ul>
<li>server.xml</li>
<li>web.xml</li>
<li>目录结构的作用<ul>
<li>lib</li>
<li>work（存放jsp编译后的Java文件）</li>
<li>webapps（项目部署）</li>
<li>conf</li>
</ul>
</li>
</ul>
<h5 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h5><p>浏览器发送给服务器的请求内容    HttpServletRequest对象</p>
<ul>
<li>getParameter()，getParameterValues()处理复选框</li>
<li>作用域方法：setAttribute()，getAttibute()，removeAttribue()</li>
<li>getReqeustURL()，getReqeuestURI()，getQueryString()，getContextPath()</li>
<li>获取客户端ip和端口：getRemoteAddr(),getRemotePort()</li>
<li>request.setCharacterEncoding()    设置请求实体的编码，对post请求有效，对get请求无效（可通过Tomcat调整<code>server.xml</code>）</li>
<li><strong>请求转发</strong>：rqeuset.getReqeustDispatcher().forward(requset,response)</li>
</ul>
<p>服务器回送给浏览器的相应内容    HttpServletResponse对象</p>
<ul>
<li>setCharacterEndoding()设置响应编码格式</li>
<li>setContentType()设置响应内容</li>
<li>getWriter()输出文本    getOutSteam()    输出非文本</li>
<li><strong>重定向</strong>：resposne.sendRedire()</li>
</ul>
<p>Serlvet类读取<code>web.xml</code>中自己的配置信息    ServletConfig</p>
<ul>
<li>getInitParameter</li>
</ul>
<p>需要读取<code>web.xml</code>中的公共信息    \<context-param>    ServletContext</p>
<ul>
<li>获取：this.getServletContext()</li>
<li>作用域：可以被所有的Servlt共享</li>
<li>其他方法：getRealPath()，getResourcePaths()</li>
</ul>
<p>将所有Servlet放入一个容器中统一管理        ServletContext</p>
<p>保存以前操作的状态    客户端保存<strong>Cookie</strong>     服务器保存<strong>Session</strong></p>
<ul>
<li>客户端保存cookie流程<ol>
<li>服务器端写代码：Cookie c=new Cookie(); response.setCookie(c);</li>
<li>响应头中就会有一个SetCookie</li>
<li>浏览器收到以后，先放到内存中，如果cookie设置了有效期，则会写到硬盘的cookie文件中</li>
<li>浏览器以后访问服务器时，就会自动携带（请求头）有效的cookie信息    </li>
</ol>
</li>
<li>服务器端保存信息session的跟踪机制<ol>
<li>服务器会new一个session对象，同时指定一个id给session对象</li>
<li>通过响应头设置</li>
<li>浏览器收到sessionId这个信息，下次访问一定会携带sessionId</li>
<li>服务器收到session后，根据session找到对应的session对象，然后就可以查看对象里面的内容，从而，确定之前我们进行了什么操作，也就是实现了状态的保存</li>
</ol>
</li>
</ul>
<h6 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h6><ol>
<li>加载<ul>
<li>第一个请求的时候（Servlet是单例，只有一个Servlet对象）</li>
<li>如果配置了load-on-startup，启动时加载</li>
</ul>
</li>
<li>初始化：执行init()</li>
<li>调用：service()、doGet()、doPost()</li>
<li>销毁：destroy()</li>
</ol>
<h6 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h6><ul>
<li>实现Filter相关接口</li>
<li>doFilter</li>
<li>配置位于\<servlet>之前</li>
</ul>
<h6 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h6><ul>
<li>实现Listener相关接口</li>
<li>配置位于\<filter>之后，\<servlet>之前</li>
</ul>
<h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><p>&lt;%%&gt;java脚本段</p>
<p>&lt;%=%&gt;表达式</p>
<p>&lt;%! %&gt; 声明</p>
<p>&lt;%——%&gt; 注释</p>
<p>&lt;%@ include file=”” %&gt;静态导入，两个jsp文件编译时合并到一起</p>
<p>\<jsp:include>相当于一个类调用另一个类</p>
<p>jsp九个内置对象：</p>
<ul>
<li>page：<code>java.lang.object</code></li>
<li><strong>request</strong>：<code>javax.servlet.http.HttpServletrequest</code> 获取用户的请求信息</li>
<li><strong>resposne</strong>：<code>javax.servlet.http.HttpServletResponse</code> 服务器向客户端的回应信息</li>
<li>out ：<code>javax.servlet.jsp.jspWriter</code> 页面输出</li>
<li>session：<code>javax.servlet.http.HttpSession</code> 用来保存每一个用户的信息</li>
<li><strong>pageContext</strong>：<code>javax.servlet.jsp.PageContext</code> JSP的页面容器</li>
<li>exception：<code>java.lang.Throwable</code></li>
<li>config：<code>javax.servlet.ServletConfig</code> 服务器配置信息，可以取得初始化参数</li>
<li><strong>application</strong>：<code>javax.servlet.ServletContext</code>表示所有用户的共享信息</li>
</ul>
<h5 id="EL和JSTL"><a href="#EL和JSTL" class="headerlink" title="EL和JSTL"></a>EL和JSTL</h5><p>EL表达式：操作的是作用域中的属性</p>
<p>使用：<code>${}</code></p>
<p>JSTL标签库:</p>
<ul>
<li>foreach</li>
<li>if</li>
<li>choose when otherwise</li>
<li>set</li>
<li>remove</li>
<li>import</li>
</ul>
<p>菜鸟教程JSTL：<a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p>
<h5 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h5><p>核心技术：通过XHR对象发送请求，通过XHR对象接收响应，再通过js操作dom对象，将收到的新的信息，赋给某个元素，实现局部刷新效果    </p>
<p>基本流程</p>
<ol>
<li>创建XHR对象</li>
<li>创建一个请求</li>
<li>设置监听，处理服务器发送的响应内容</li>
<li>发送请求</li>
</ol>
<h5 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h5><p>XML基本语法</p>
<p>XML的解析（DOM方式、SAX方式、JDOM、DOM4J）</p>
<p>dtd/schema    定义xml数据的语法规则</p>
<p>xslt    定义xml数据的显示方式</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>adb简单命令</title>
    <url>/articles/9632f7ff.html</url>
    <content><![CDATA[<h4 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h4><h6 id="1-设备查看"><a href="#1-设备查看" class="headerlink" title="1. 设备查看"></a>1. 设备查看</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<h6 id="2-设备重新挂载"><a href="#2-设备重新挂载" class="headerlink" title="2. 设备重新挂载"></a>2. 设备重新挂载</h6><p>对android的内部系统文件进行查看,需要获得root权限(adb root)，模拟器Android 6.0以后需要第三方软件root才能成功<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb remount</span><br><span class="line">//有的Android系统需要两次root才能挂载</span><br><span class="line">adb root</span><br><span class="line">adb reboot</span><br><span class="line">adb root</span><br><span class="line">adb remount</span><br></pre></td></tr></table></figure></p>
<h6 id="3-设备重启"><a href="#3-设备重启" class="headerlink" title="3.设备重启"></a>3.设备重启</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure>
<h6 id="4-设备关机"><a href="#4-设备关机" class="headerlink" title="4.设备关机"></a>4.设备关机</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb reboot -p</span><br></pre></td></tr></table></figure>
<h6 id="5-多设备操作"><a href="#5-多设备操作" class="headerlink" title="5.多设备操作"></a>5.多设备操作</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb -s 设备名称(devices查看) 命令</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="常用shell命令"><a href="#常用shell命令" class="headerlink" title="常用shell命令"></a>常用shell命令</h4><ul>
<li>列出所有文件   ls(相当于dos中的dir命令)</li>
<li>切换路径    cd</li>
<li>打印当前路径    pwd</li>
<li>创建文件/文件夹    touch 文件名 / mkdir 文件夹名</li>
<li>复制文件    cp &nbsp; 原文件名(绝对路径)  (路径)新文件名</li>
<li>移动文件   mv &nbsp; 原文件名(绝对路径)  (路径)新文件名</li>
<li>删除文件/文件夹    rm  文件名 /  rm -r 文件夹名</li>
<li>文本内容查看    cat 文件名(注意带后缀) (*.后缀名 打开本路径下所有的此后缀的文件) </li>
<li>清除屏幕    clear</li>
</ul>
<h4 id="Push与Pull"><a href="#Push与Pull" class="headerlink" title="Push与Pull"></a>Push与Pull</h4><h6 id="把文件推进系统"><a href="#把文件推进系统" class="headerlink" title="把文件推进系统"></a>把文件推进系统</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb push (本地)文件路径 (android)文件新路径</span><br></pre></td></tr></table></figure>
<h6 id="把文件拖出系统"><a href="#把文件拖出系统" class="headerlink" title="把文件拖出系统"></a>把文件拖出系统</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb pull (android)文件路径 (本地)文件路径</span><br></pre></td></tr></table></figure>
<h4 id="logcat"><a href="#logcat" class="headerlink" title="logcat"></a>logcat</h4><h6 id="捕捉"><a href="#捕捉" class="headerlink" title="捕捉"></a>捕捉</h6><p>用于抓取log日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb logcat &gt; (本地路径)文件名.log</span><br><span class="line">ctrl+c 可停止捕捉</span><br></pre></td></tr></table></figure>
<h6 id="获取应用包名"><a href="#获取应用包名" class="headerlink" title="获取应用包名"></a>获取应用包名</h6><p>应用打开后开始记录log</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb logcat | grep START (grep为Linux系统的指令)</span><br><span class="line">adb logcat | findstr START (Win10系统下)</span><br></pre></td></tr></table></figure>
<h4 id="adb控制应用"><a href="#adb控制应用" class="headerlink" title="adb控制应用"></a>adb控制应用</h4><h6 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用"></a>安装应用</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb install 应用的全路径(.apk文件)</span><br></pre></td></tr></table></figure>
<h6 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start -n 包名路径/.应用入口</span><br></pre></td></tr></table></figure>
<h6 id="删除应用数据"><a href="#删除应用数据" class="headerlink" title="删除应用数据"></a>删除应用数据</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell pm clear 包名路径</span><br></pre></td></tr></table></figure>
<h6 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb uninstall 包名路径</span><br></pre></td></tr></table></figure>
<h4 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell broadcast -a [action] 参数[--类型 key value]</span><br></pre></td></tr></table></figure>
<h4 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h4><p>截图，存放在指定位置，拖出系统到当前路径下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell screencap -p /sdacrd/screen.png</span><br><span class="line">adb pull /sdcard/screen.png ./</span><br></pre></td></tr></table></figure>
<h4 id="模拟按键"><a href="#模拟按键" class="headerlink" title="模拟按键"></a>模拟按键</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 键码(keycode)</span><br><span class="line">eg.home键</span><br><span class="line">adb shell input ketevent 3</span><br></pre></td></tr></table></figure>
<p>键码可查看 <code>android.view.KeyEvent.java</code>文件</p>
]]></content>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7配置docker</title>
    <url>/articles/55112ca0.html</url>
    <content><![CDATA[<h6 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h6><p>建议根据官方文档的步骤进行安装，不然容易出错。</p>
<blockquote>
<p>官方文档：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p>
</blockquote>
<a id="more"></a>
<h6 id="docker的启动"><a href="#docker的启动" class="headerlink" title="docker的启动"></a>docker的启动</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images  <span class="comment"># 查看启动的镜像</span></span></span><br></pre></td></tr></table></figure>
<h6 id="设置docker开机自启"><a href="#设置docker开机自启" class="headerlink" title="设置docker开机自启"></a>设置docker开机自启</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure>
<h6 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /etc/docker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span></span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://aruwgrgs.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将docker设置为后台启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure>
<h6 id="当无法直接删除镜像时，操作步骤："><a href="#当无法直接删除镜像时，操作步骤：" class="headerlink" title="当无法直接删除镜像时，操作步骤："></a>当无法直接删除镜像时，操作步骤：</h6><ol>
<li>查看进程 <code>docker ps -a</code>     </li>
<li>移除使用的镜像的容器 <code>docker rm [id号]</code></li>
<li>移除指定镜像 <code>docker rmi [镜像名]</code></li>
</ol>
<h6 id="将当前用户添加到docker用户组中"><a href="#将当前用户添加到docker用户组中" class="headerlink" title="将当前用户添加到docker用户组中"></a>将当前用户添加到docker用户组中</h6><p>在当前用户没有添加到 docker 用户组时，使用 docker 命令时需要使用 <code>sudo</code>命令，将当前用户添加到docker用户组中可以直接使用 docker 命令。</p>
<ol>
<li>添加docker用户组</li>
<li>将登录用户加入到docker用户组中</li>
<li>更新用户组</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd docker     		<span class="comment"># 添加docker用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gpasswd -a <span class="variable">$USER</span> docker    <span class="comment"># 将登录用户加入到docker用户组中</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> newgrp docker     				<span class="comment"># 更新用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps    					<span class="comment"># 测试docker命令是否可以使用sudo正常使用</span></span></span><br></pre></td></tr></table></figure>
<h6 id=""><a href="#" class="headerlink" title=" "></a> </h6>]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome抓包抓取动态网站json数据</title>
    <url>/articles/aea01abd.html</url>
    <content><![CDATA[<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul>
<li>用chrome的开发者工具获取动态网址的json数据的url  <ul>
<li>在chrome中右键检查，选择network选项</li>
<li>重新加载页面，找到需要爬取的数据</li>
<li>查看request url即为真实请求的url</li>
<li>url即为json数据</li>
</ul>
</li>
<li>使用json库下的loads函数将数据的类型转换成字典类型</li>
</ul>
<a id="more"></a>
<h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><p>举例：抓取百度搜索关键字—电影 的网站<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch</span><span class="params">(page)</span>:</span></span><br><span class="line">	<span class="comment"># 每一个网页的url中的 pn 是递增的--8</span></span><br><span class="line">    pn = page * <span class="number">8</span></span><br><span class="line">    url = <span class="string">"https://sp0.baidu.com/8aQDcjqpAAV3otqbppnN2DJv/api.php?resource_id=28286&amp;from_mid=1&amp;&amp;format=json&amp;ie=utf-8&amp;oe=utf-8&amp;query=%E7%94%B5%E5%BD%B1&amp;sort_key=16&amp;sort_type=1&amp;stat0=&amp;stat1=&amp;stat2=&amp;stat3=&amp;pn="</span> + str(</span><br><span class="line">        pn) + <span class="string">"&amp;rn=8&amp;cb=jQuery110204230762934017789_1575516372377&amp;_=1575516372379"</span></span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    json_str_re = re.compile(<span class="string">"&#123;.*&#125;"</span>)</span><br><span class="line">    json_str = json_str_re.search(res.text).group()</span><br><span class="line">    movie_dict = json.loads(json_str)</span><br><span class="line">    <span class="comment"># 根据json—handle工具，自动排列查看所获取信息</span></span><br><span class="line">    <span class="keyword">for</span> movie <span class="keyword">in</span> movie_dict[<span class="string">"data"</span>][<span class="number">0</span>][<span class="string">"result"</span>]:</span><br><span class="line">        print(movie[<span class="string">"ename"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    catch(<span class="number">1</span>)	<span class="comment"># 查询第一页内容</span></span><br></pre></td></tr></table></figure></p>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><p><a href="http://jsonhandle.sinaapp.com/" target="_blank" rel="noopener">json-handle插件</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>css基础</title>
    <url>/articles/eda1a9a9.html</url>
    <content><![CDATA[<h5 id="css声明"><a href="#css声明" class="headerlink" title="css声明"></a>css声明</h5><ol>
<li><p>在head标签中使用style标签声明：<br>作用：此声明一般声明当前网页的公共样式或者给某个标签的单独样式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-tag">hr</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;	</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在标签上使用style属性进行声明：<br>作用：此声明会将css样式直接作用于当前标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>  <span class="attr">style</span>=<span class="string">"background-color:blue; height:50px;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在head标签中使用link标签引入外部声明好的css文件<br>作用：此声明相当于调用,解决了不同网页间样式重复使用的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/my.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>一次声明，随处使用</p>
<p>问题：不同的声明给同一个标签操作了同一个样式，会使用谁的？<br>如果CSS的声明全部在head标签中，则遵循<font color="red">就近原则</font>，谁离标签近，谁就会被显示</p>
<a id="more"></a>
<h5 id="css的选择器"><a href="#css的选择器" class="headerlink" title="css的选择器"></a>css的选择器</h5><ul>
<li>标签选择器：<br>标签名{样式名1： 样式值1；……}<br>作用：会将当前网页内的所有该标签增加相同的样式</li>
<li>id选择器：<h1 id="标签名的id属性值-样式名1：样式值1；……"><a href="#标签名的id属性值-样式名1：样式值1；……" class="headerlink" title="标签名的id属性值{样式名1：样式值1；……}"></a>标签名的id属性值{样式名1：样式值1；……}</h1>作用：给某个指定的标签添加指定的样式</li>
<li>类选择器：<br>.类选择器名{样式名1：样式值1……}<br>作用：给不同的标签添加相同的样式</li>
<li>全部选择选择器：<br>*{样式名1：样式值1……}<br>作用：选择所有的HTML标签，并添加相同的样式                </li>
<li>组合选择器：<br>选择器1，选择器2，……{样式名1：样式值1……}<br>作用：解决不同的选择器之间重复样式的问题</li>
<li>子标签选择器：<br>选择器1 子标签选择器{样式名1：样式值1……}</li>
<li>属性选择器：<br>标签名[属性名=属性值]{样式名1：样式值1……}<br>作用：选择某标签指定具备某属性并且属性值为某属性值的标签</li>
</ul>
<h5 id="css的使用过程"><a href="#css的使用过程" class="headerlink" title="css的使用过程"></a>css的使用过程</h5><ol>
<li>声明css代码域</li>
<li>使用选择选择器要添加样式的标签<br>根据需要来：<ul>
<li>使用*选择器来给整个页面添加基础样式</li>
<li>使用类选择器给不同的标签添加基础样式</li>
<li>使用标签选择器给某类标签添加基础样式</li>
<li>使用id、属性选择器、style属性声明方式给某个标签添加个性化样式</li>
</ul>
</li>
<li>书写样式单<ul>
<li>边框设置<br>border：solid 1px；</li>
<li>字体设置<ul>
<li>font-size:10px;</li>
<li>font-family:”宋体”;(设置字体格式）</li>
<li>font-weight:bold;（设置字体加粗）</li>
</ul>
</li>
<li>字体颜色设置<br>color:颜色;</li>
<li>背景颜色设置<br>background-color:颜色;</li>
<li>背景图片设置<ul>
<li>background-img:url;(图片相对路径)</li>
<li>background-repeate：no-repeate；（设置图片不重复）</li>
<li>background-size：cover； （图片平铺整个页面）</li>
</ul>
</li>
<li>高和宽设置    width/height:数值px</li>
<li>浮动设置    float：left/right</li>
<li>行高设置    line-height：10；</li>
</ul>
</li>
</ol>
<h5 id="样式使用"><a href="#样式使用" class="headerlink" title="样式使用"></a>样式使用</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="comment">/*添加网页背景图*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/<span class="number">1</span>.jpg);<span class="comment">/*添加背景图片*/</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;<span class="comment">/*设置图片不同重复*/</span></span><br><span class="line">    <span class="attribute">background-size</span>:cover;    <span class="comment">/*设置图片平铺*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*使用标签选择器*/</span></span><br><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line">    <span class="comment">/*background-image: url(img/0.jpg);</span></span><br><span class="line"><span class="comment">    backgroud-size: cover;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*设置table的行高 */</span></span><br><span class="line"><span class="selector-tag">tr</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*设置td*/</span></span><br><span class="line"><span class="selector-tag">td</span>&#123;</span><br><span class="line">    width：100px;</span><br><span class="line">    <span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span> <span class="selector-tag">red</span>;</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span>; <span class="comment">/*圆环*/</span></span><br><span class="line">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>;</span><br><span class="line">    <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">blueviolet</span>;</span><br><span class="line">    <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line">    <span class="selector-tag">letter-spacing</span>: 10<span class="selector-tag">px</span>; <span class="comment">/*字间距*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*------------------------------------------------------*/</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none; <span class="comment">/*去除li的标识符*/</span></span><br><span class="line">    <span class="comment">/*display: inline;*/</span></span><br><span class="line">    <span class="attribute">float</span>: left; <span class="comment">/*设置菜单左悬浮*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;     </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none; <span class="comment">/*设置超链接去除下划线*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: blod;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>css的样式使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>打球<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>客服<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="css盒子模型"><a href="#css盒子模型" class="headerlink" title="css盒子模型"></a>css盒子模型</h5><h6 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a>div标签</h6><p>块级标签：主要用来进行网页布局的， 会将其中的子元素内容作为一个独立的整体存在。</p>
<p>特点：默认宽度是页面的宽度，但可以设置</p>
<p>高度默认是没有的，但是可以设置（可以顶开）</p>
<font color='red'>如果子元素设置了百分比的高或者宽，占据的是div的百分比，不是页面的。</font>

<h6 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h6><p>外边距：margin<br>作用：用来设置元素与元素之间的间隔</p>
<p>居中设置：<code>margin：0px auto;</code>上下间隔是0px，水平居中<br>可以根据需求单独的设置上下左右的外边距</p>
<p>边框：border    作用：用来设置元素的边框大小，可以设置上下左右<br>内边距：padding    作用：设置内容和边框之间的间隔<br>注意：内边距不会改变内容区域的大小，可以单独设置上下左右的内边距</p>
<p>内容区域：<br>作用：改变内容区域的大小<br>设置宽和高即可改变内容区域大小</p>
<h5 id="css的定位"><a href="#css的定位" class="headerlink" title="css的定位"></a>css的定位</h5><p>position</p>
<ul>
<li>相对定位：relative<br>作用：相对于原有位置移动指定的距离<br>可以使用top，left，right，bottom来进行设置<br>注意：其他元素的位置是不改变的</li>
<li>绝对定位：absolute<br>作用：可以使用元素参照界面或者相对父元素来进行移动<br>注意：如果父级元素成为参照元素，必须使用相对定位属性<br>默认情况下以界面为基准进行移动的</li>
<li>固定定位：fixed<br>作用：将元素固定显示在页面的指定位置，不会随着滚动条的移动而改变位置<br>以上定位都可以使用top，bottom，left，right来进行移动；</li>
</ul>
<p>如果相对应的元素的父级元素没有对应的position属性，会逐级向上匹配，直到body元素为止。</p>
<p>z-index:此属性是用来声明元素的显示级别的，等级高的会比等级低的优先显示</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署SpringBoot项目</title>
    <url>/articles/a192e4a5.html</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>docker 部署基于 Spring Boot 的个人博客后端项目，首先要将项目中使用的 <code>localhost</code> 全部更换为虚拟机所对应的IP地址，其次，需要项目生成的 jar （通过 jar 包部署，也有通过 war 包部署的方式，需要使用 tomcat ），通过 jar 包部署使用Spring Boot项目内嵌的 tomcat 或 jetty 。</p>
<a id="more"></a>
<h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><ol>
<li>项目配置修改</li>
<li>项目打包生成<code>jar</code>包</li>
</ol>
<h6 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h6><p>博客项目中使用到 mysql，redis，solr ，在 <code>application-prod.yml</code> 中修改 url ，与虚拟机的IP地址相对应，<code>application.yml</code> 修改默认环境为 <em>prod</em>。项目中使用到 <code>localhost</code> 的位置，也需要进行修改。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-blog</span></span><br><span class="line">  <span class="comment"># 数据源mysql</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.134.128:3306/blog?useSSL=false</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="comment"># 配置redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.134</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">''</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 修改文件上传限制</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="number">5242880</span> <span class="comment"># 5MB</span></span><br><span class="line">  <span class="comment"># 配置solr</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">solr:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">http://192.168.134.128:8983/solr/blog_core</span></span><br><span class="line">  <span class="comment"># 控制jpa的sql语句输出</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义配置文件上传路径，以及文件大小上限</span></span><br><span class="line"><span class="attr">blog:</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">upload-path:</span> <span class="string">/usr/app/blog</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="number">5242880</span>   <span class="comment"># 5MB</span></span><br></pre></td></tr></table></figure>
<h6 id="jar-包生成"><a href="#jar-包生成" class="headerlink" title="jar 包生成"></a>jar 包生成</h6><ol>
<li><p>在打包前在 <code>pom.xml</code> 中配置好打包方式为 <em>jar</em> ，并且将 test 测试文件排除（否则在 maven 打包时出错）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包生成的jar名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>my-blog-1.0.0<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.study.BlogApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加打包时跳过测试文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 maven 工具，执行 <code>clean</code> ，清除项目生成的target文件夹，然后执行 <code>package</code>，对项目进行打包，打包完成后在target文件夹中生成项目的 <code>jar</code>。<br>命令行方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Docker/maven%E5%B7%A5%E5%85%B7%E6%A0%8F.png" alt="maven工具栏"></p>
</li>
</ol>
<h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><ol>
<li>通过xftp软件将 <code>jar</code>包 拷贝到虚拟机上。</li>
<li>生成镜像</li>
<li>运行容器</li>
</ol>
<h6 id="Docker生成博客项目镜像"><a href="#Docker生成博客项目镜像" class="headerlink" title="Docker生成博客项目镜像"></a>Docker生成博客项目镜像</h6><p>在 <code>jar</code> 包（项目生成的jar包为my-blog-1.0.0.jar）的当前目录下创建 <code>Dockerfile</code> 文件，<code>Dockerfile</code>内容如下。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于java8镜像构建，也可以通过配置好的jdk8镜像来构建</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/app</span></span><br><span class="line"><span class="comment"># 创建图片上传的路径</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/app/blog</span></span><br><span class="line"><span class="comment"># 复制程序到内部</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> my-blog-1.0.0.jar /usr/app</span></span><br><span class="line"><span class="comment"># 切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/app</span></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9000</span></span><br><span class="line"><span class="comment"># 镜像运行时执行</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"my-blog-1.0.0.jar"</span>]</span></span><br></pre></td></tr></table></figure>
<p>生成镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog-java]# docker build -t blog .</span><br><span class="line">Sending build context to Docker daemon  89.81MB</span><br><span class="line">Step 1/8 : FROM java:8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> d23bdf5b1b1b</span></span><br><span class="line">Step 2/8 : MAINTAINER zhouchao</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 564652b78de2</span></span><br><span class="line">Step 3/8 : RUN mkdir /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1f5db921f762</span></span><br><span class="line">Step 4/8 : RUN mkdir /usr/app/blog</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> cb4f18ee64f3</span></span><br><span class="line">Step 5/8 : ADD my-blog-1.0.0.jar /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 940b61cdd5a4</span></span><br><span class="line">Step 6/8 : WORKDIR /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 16c9ffc0c43c</span></span><br><span class="line">Step 7/8 : EXPOSE 9000</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a21afb67831c</span></span><br><span class="line">Step 8/8 : ENTRYPOINT ["java","-jar","my-blog-1.0.0.jar"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 05453583ff92</span></span><br><span class="line">Successfully built 05453583ff92</span><br><span class="line">Successfully tagged blog:latest</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">blog                latest              05453583ff92        2 seconds ago       733MB</span><br></pre></td></tr></table></figure>
<h6 id="Docker生成博客项目容器"><a href="#Docker生成博客项目容器" class="headerlink" title="Docker生成博客项目容器"></a>Docker生成博客项目容器</h6><ol>
<li><p>首先需要先创建图片挂载目录，使图片资源持久化。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog-java]# mkdir /mydata/blog</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建容器</p>
<ul>
<li><code>-d</code>后台运行</li>
<li><code>--name blog</code>容器名称为 blog</li>
<li><code>--restart=always</code>容器自启动</li>
<li><code>-p 9000:9000</code>端口映射</li>
<li><code>-v /mydata/blog:/usr/app/blog/src</code>图片资源目录挂载</li>
</ul>
</li>
</ol>
<ul>
<li><p><code>-v /mydata/blog/logs:/usr/app/logs</code>日志目录挂载</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name blog --restart=always -p 9000:9000 -v /mydata/blog/src:/usr/app/blog -v /mydata/blog/logs:/usr/app/logs blog</span></span><br><span class="line">b577dfcb31879743ee4bc05b54cc07ec864ba3ee4872924e91d7ca9609f37589</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h6><p>项目中使用了swagger生成api文档，通过访问swagger-ui.html来查看。</p>
<blockquote>
<p>地址 <a href="http://192.168.134.128:9000/swagger-ui.html" target="_blank" rel="noopener">http://192.168.134.128:9000/swagger-ui.html</a></p>
</blockquote>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Docker/%E5%90%8E%E7%AB%AF%E9%83%A8%E7%BD%B2%E8%AE%BF%E9%97%AE%E6%95%88%E6%9E%9C.png" alt="后端部署访问效果"></p>
<h5 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h5><p>在项目部署时遇到了一些问题</p>
<h6 id="容器反复重启"><a href="#容器反复重启" class="headerlink" title="容器反复重启"></a>容器反复重启</h6><p><font color="red">容器反复重启</font>，可能是后端代码问题，先移除当前容器，创建新容器，以控制台形式执行，输出 log ，用于查询错误。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -i --name blog  -p 9000:9000 -v /mydata/blog:/usr/app/blog blog</span></span><br></pre></td></tr></table></figure>
<h6 id="用户登录成功响应中没有生成-cookie"><a href="#用户登录成功响应中没有生成-cookie" class="headerlink" title="用户登录成功响应中没有生成 cookie"></a>用户登录成功响应中没有生成 cookie</h6><p>用户登录成功，但没有生成 cookie ，通过<code>F12</code>查看请求响应结果，响应结果中<code>setCookie</code>的<code>domain</code>为<code>localhost</code>，而不是虚拟机的IP，由于在 <code>CookieUtils.java</code> 中设置Cookie默认存储的域（domain）为  localhost（在打包前，没有修改过来），将其修改为虚拟机的IP即可，重新打包。</p>
<h6 id="mysql-无法访问"><a href="#mysql-无法访问" class="headerlink" title="mysql 无法访问"></a>mysql 无法访问</h6><p><em><font color=red>Could not get JDBC Connection; nested exception is com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure</font></em></p>
<p>mysql 无法访问，问题在 docker 的防火墙开启了，需要关闭防火墙。</p>
<ul>
<li>查看防火墙状态    <code>firewall-cmd --state</code><br>如果命令报错，赋予特权 <code>docker run -tdi --privileged centos init</code></li>
<li>停止防火墙  <code>systemctl stop firewalld.service</code></li>
<li>禁止firewall开机启动  <code>systemctl disable firewalld.service</code></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署vue项目</title>
    <url>/articles/2d5c549e.html</url>
    <content><![CDATA[<p>在虚拟机上部署了博客后端项目（Spring Boot）后，再来部署博客后台管理中心项目（vue）。采用 nginx 镜像为基础镜像来生成项目镜像，再通过 docker 的容器进行部署。</p>
<a id="more"></a>
<h6 id="项目配置与编译"><a href="#项目配置与编译" class="headerlink" title="项目配置与编译"></a>项目配置与编译</h6><p>在本机上通过 vue-cli 来编译项目，生成项目的资源文件。另一种方式是将项目拷贝到虚拟机上（删除不必要文件和依赖文件，传的速度会快一点，<code>node_modules</code> 这个文件夹中是依赖相关的，子文件比较多，影响传递速度），然后通过 node 和 Dockerfile 来编译生成项目资源文件。</p>
<p>在项目中添加编译相关的配置 <code>vue.config.js</code>（项目根目录下）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 公共路径(必须有的)，在生产环境下使用相对路径，在开发时，测试时使用绝对路径</span></span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'./'</span> : <span class="string">'/'</span>,</span><br><span class="line">    <span class="comment">// 输出文件目录</span></span><br><span class="line">    outputDir: <span class="string">"dist"</span>,</span><br><span class="line">    <span class="comment">// 静态资源存放的文件夹(相对于ouputDir)</span></span><br><span class="line">    assetsDir: <span class="string">"static"</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">true</span>,	<span class="comment">// 资源映射</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>, <span class="comment">// 启动端口</span></span><br><span class="line">        open: <span class="literal">false</span>, <span class="comment">// 启动后是否自动打开网页</span></span><br><span class="line">        <span class="comment">// 代理</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/user'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://192.168.134.128:9000'</span>,</span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/user'</span>: <span class="string">''</span> <span class="comment">// 通过pathRewrite重写地址，将前缀/api转为/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'/admin'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://192.168.134.128:9000'</span>,</span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/admin'</span>: <span class="string">''</span> <span class="comment">// 通过pathRewrite重写地址，将前缀/api转为/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    lintOnSave: <span class="literal">false</span>, <span class="comment">// 取消 eslint 验证</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过命令 <code>npm run build</code> 即可生成项目资源文件 ，存放在<code>dist</code>目录下。</p>
<h6 id="构建项目镜像"><a href="#构建项目镜像" class="headerlink" title="构建项目镜像"></a>构建项目镜像</h6><p>将 <code>dist</code>中的文件通过xftp工具拷贝到虚拟机上，创建<code>nginx.conf</code>文件，用于配置代理，创建dockerfile文件，用于构建镜像。</p>
<p><code>nginx.conf</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">user</span> <span class="string">nginx;</span></span><br><span class="line"><span class="attr">worker_processes</span> <span class="string">auto;</span></span><br><span class="line"><span class="comment"># 错误日志输出目录</span></span><br><span class="line"><span class="attr">error_log</span>  <span class="string">/var/log/nginx/error.log  warn;</span></span><br><span class="line"><span class="attr">pid</span>     <span class="string">/var/run/nginx.pid;</span></span><br><span class="line"><span class="attr">events</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">worker_connections</span>  <span class="string">1024;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    	# 监听端口</span></span><br><span class="line">        <span class="attr">listen</span>  <span class="string">80;</span></span><br><span class="line"><span class="comment">        # 名称可自定义</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">192.168.134.128;</span></span><br><span class="line"><span class="comment">        # access日志</span></span><br><span class="line">        <span class="attr">access_log</span>  <span class="string">/var/log/nginx/host.access.log;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">            <span class="attr">root</span>   <span class="string">/usr/share/nginx/html;</span></span><br><span class="line">            <span class="attr">index</span>  <span class="string">index.html index.htm;</span></span><br><span class="line">            <span class="attr">try_files</span> <span class="string">$uri $uri/ @router; </span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">        # vue的路由配置</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">@router &#123;</span></span><br><span class="line">            <span class="attr">rewrite</span> <span class="string">^.*$ /index.html last;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">        # 端口转发，对应axios的配置</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/user&#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span> <span class="string">http://192.168.134.128:9000;	</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/admin&#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span> <span class="string">http://192.168.134.128:9000;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>Dockerfile</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="comment"># 定义作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="comment"># 将dist文件中的内容复制到 /usr/share/nginx/html/ 这个目录下面</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dist/  /usr/share/nginx/html/</span></span><br><span class="line"><span class="comment"># 复制配置文件 </span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx.conf /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure>
<p>docker 编译生成镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost blog-manage]<span class="comment"># docker build -t blog-manage:1.0.0 .</span></span><br><span class="line">Sending build context to Docker daemon  6.773MB</span><br><span class="line">Step 1/4 : FROM nginx</span><br><span class="line"> ---&gt; 4bb46517cac3</span><br><span class="line">Step 2/4 : MAINTAINER zhouchao</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 09c5138b1196</span><br><span class="line">Step 3/4 : COPY dist/  /usr/share/nginx/html/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9851b6f52bb4</span><br><span class="line">Step 4/4 : COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 6bc149edde51</span><br><span class="line">Successfully built 6bc149edde51</span><br><span class="line">Successfully tagged blog-manage:1.0.0</span><br><span class="line"></span><br><span class="line">[root@localhost blog-manage]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">blog-manage         latest              6bc149edde51        3 seconds ago       139MB</span><br></pre></td></tr></table></figure>
<h6 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h6><p>在构建镜像成功后，以挂载的方式启动容器，方便修改配置文件，挂载后修改配置和更新项目资源不需要进入容器内部。先创建好挂载的目录和文件，再创建容器并启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog-manage]# cd /mydata</span><br><span class="line">[root@localhost blog-manage]# mkdir wwwroot</span><br><span class="line">[root@localhost blog-manage]# mkdir logs</span><br><span class="line">[root@localhost blog-manage]# mkdir conf</span><br><span class="line">[root@localhost blog-manage]# cd conf</span><br><span class="line">[root@localhost blog-manage]# touch nginx.conf</span><br></pre></td></tr></table></figure>
<p>注意 nginx.conf 为文件，如果不创建，在创建容器时，会把它当作一个目录。</p>
<ul>
<li>wwwroot 存储项目资源文件</li>
<li>logs 存储日志文件</li>
<li>conf 存储 nginx 配置文件</li>
</ul>
<p>创建并启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name blog-manage --restart always -p 9001:80 \</span><br><span class="line">-v /mydata/blog-manage/wwwroot:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/blog-manage/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /mydata/blog-manage/logs:/var/log/nginx \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>
<p>在后端项目容器启动状态下，即可访问后端管理中心项目。</p>
<blockquote>
<p>访问地址：<a href="http://192.168.134.128:9001/" target="_blank" rel="noopener">http://192.168.134.128:9001/</a></p>
</blockquote>
<h6 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h6><p><i style=color:red;>Resource interpreted as Stylesheet but transferred with MIME type text/plain</i></p>
<p>没有配置项目编译的相关配置，项目部署后访问 css 文件加载不出来，控制台报警告<code>Resource interpreted as Stylesheet but transferred with MIME type text/plain</code>，意思 css 文件是没有指定类型，默认加载为<code>text/plain</code>格式，通过查看 <code>index.html</code>，没有指定 css 文件的加载类型。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">prefetch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">preload</span> <span class="attr">as</span>=<span class="string">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>解决方案：</p>
<ol>
<li><p>将 <code>index.html</code>的头部声明 <code>&lt;!DOCTYPE html&gt;</code>去掉，这种方法确实有效，不过仍有部分css文件无法加载，而且这种方法需要每次都修改，比较麻烦。</p>
</li>
<li><p>在编译配置文件中添加静态资源存放的文件夹的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态资源存放的文件夹(相对于ouputDir)</span></span><br><span class="line">assetsDir: <span class="string">"static"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><em><font color=red>502 Bad Gateway</font></em> </p>
<p>错误的网关，问题在<code>nginx.conf</code>配置出错。</p>
<p><em>路由重定向失败 <font color=red>Redirected when going from “/login” to “/index” via a navigation guard</font></em></p>
<p>这个问题是由于博客后端部署错误的问题，登录成功后创建的cookie路径和域错误，导致在虚拟机 IP 下没有cookie产生，后端返回登录成功，但首页检查cookie中的token不存在，又重定向到登陆页面。</p>
<h6 id="经验小结"><a href="#经验小结" class="headerlink" title="经验小结"></a>经验小结</h6><p>在部署后项目访问时出现各种问题，比如<font color=red>连接拒绝</font>，<font color=red>404</font>，<font color=red>502</font>等，首先可以通过查看挂载目录下的错误日志，如果是配置错误问题，一般都会输出在这里。其次，可以通过浏览器 <code>F12</code>的<code>network</code>进行检查，看看是否是后端的问题。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>vue</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用指令</title>
    <url>/articles/c34887c6.html</url>
    <content><![CDATA[<h6 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h6><p><code>git config --global user.name &quot;Your Name&quot;</code>设置用户名</p>
<p><code>git config --global user.email &quot;email@example.com&quot;</code>设置邮箱</p>
<h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><p><code>git init</code>初始化生成.git文件</p>
<h6 id="查看本地仓库状态"><a href="#查看本地仓库状态" class="headerlink" title="查看本地仓库状态"></a>查看本地仓库状态</h6><p><code>git status</code>查看本地仓库状态</p>
<h6 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h6><p><code>git remote add origin https://github.com/xxxxx/demo.git</code>连接远程仓库</p>
<h6 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h6><p><code>git clone https://github.com/xxxxx/demo.git directory</code> 从远程仓库克隆到文件夹中，默认路径为当前路径</p>
<a id="more"></a>
<h6 id="添加文件-文件夹"><a href="#添加文件-文件夹" class="headerlink" title="添加文件/文件夹"></a>添加文件/文件夹</h6><p><code>touch filename</code>在本地仓库添加文件</p>
<p><code>git add filename</code>添加文件至暂存区</p>
<p><code>git add -f filename</code> 添加文件夹至暂存区</p>
<p><code>git add .</code> 添加目录下所有发生改变的文件至暂存区</p>
<p><code>git commit -m &#39; &#39;</code>添加到工作区，提交注释信息</p>
<h6 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h6><p><code>git fetch</code>从远程仓库获取目录(<strong>head</strong>)信息</p>
<p><code>git pull</code> 从远程仓库获取到本地仓库，获取的是<strong>代码</strong></p>
<p><code>git pull --rebase origin master</code> 解决本地缺少README.md文件问题，远程仓库在初始化时添加了README.md文件</p>
<p><code>git pull origin master --allow-unrelated-histories</code> 把远程仓库和本地同步，消除差异</p>
<h6 id="推送push"><a href="#推送push" class="headerlink" title="推送push"></a>推送push</h6><p><code>git push</code>推送到远程仓库</p>
<p><code>git push -u origin master</code> 本地仓库代码提交至远程仓库，第一次推送到远程仓库必须使用</p>
<h6 id="查看commit日志"><a href="#查看commit日志" class="headerlink" title="查看commit日志"></a>查看commit日志</h6><p><code>git log</code>返回commit的hash值，以及commit信息</p>
<h6 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h6><p><code>git reset</code>的三种操作：</p>
<p><code>git reset --soft xxxx(commit操作的hash值)</code>将文件提交至本地仓库后撤回暂存区</p>
<p><code>git reset --mixed xxxx(commit操作的hash值)</code> 将本地仓库文件撤回至工作区</p>
<p><code>git reset --hard xxxx(commit操作的hash值)</code> 将工作区、暂存区、本地仓库的所有提交的文件全都撤销（包括工作区文件，会删除）</p>
<h6 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h6><p><code>git branch temp</code> 创建分支temp</p>
<p><code>git checkout temp</code> 使用分支temp</p>
<p><code>git merge temp</code> 合并分支到当前分支</p>
<p><code>git branch -D temp</code>删除分支temp</p>
<h6 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h6><p><code>ll</code>显示当前路径下的所有文件及其属性</p>
<p><code>cd</code>切换路径</p>
<p><code>cd ../</code>切换至上一层路径</p>
<p><code>pwd</code> 查看当前全路径</p>
<h6 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h6><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">git官方文档</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置mysql镜像</title>
    <url>/articles/1a3905c2.html</url>
    <content><![CDATA[<h6 id="安装mysql的镜像"><a href="#安装mysql的镜像" class="headerlink" title="安装mysql的镜像"></a>安装mysql的镜像</h6><p>docker仓库中mysql版本 <a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">https://hub.docker.com/_/mysql</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull mysql:5.7</span></span><br></pre></td></tr></table></figure>
<p>验证是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               5.7                 d05c76dbbfcf        2 minutes ago         448MB</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h6 id="配置mysql容器"><a href="#配置mysql容器" class="headerlink" title="配置mysql容器"></a>配置mysql容器</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 3306:3306 --name mysql \</span></span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>
<p>参数介绍</p>
<ul>
<li><code>-p 3306:3306</code> 将容器的3306端口映射到主机的3306端口</li>
<li><code>-v /mydata/mysql/log:/var/log/mysql</code> 将日志文件挂载到主机</li>
<li><code>-v /mydata/mysql/data:/var/lib/mysql</code> 将数据文件挂载到主机</li>
<li><code>-v /mydata/mysql/conf:/etc/mysql</code> 将配置文件夹挂载到主机</li>
<li><code>-e MYSQL_ROOT_PASSWORD=root</code> 初始化root用户的密码</li>
<li><code>-d mysql:5.7</code> 后台运行mysql 5.7</li>
</ul>
<h6 id="进入mysql的容器内部"><a href="#进入mysql的容器内部" class="headerlink" title="进入mysql的容器内部"></a>进入mysql的容器内部</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vagrant]# docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>
<p>查看mysql容器结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vagrant]# docker exec -it mysql /bin/bash</span><br><span class="line"></span><br><span class="line">root@8177ea9826e4:/# ls /</span><br><span class="line">bin   dev                         entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  docker-entrypoint-initdb.d  etc            lib   media  opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line">root@8177ea9826e4:/# whereis mysql</span><br><span class="line">mysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql</span><br></pre></td></tr></table></figure>
<h6 id="修改字符编码"><a href="#修改字符编码" class="headerlink" title="修改字符编码"></a>修改字符编码</h6><ol>
<li><p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">default-time-zone</span>=<span class="string">'+08:00'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET collation_connection=utf8_unicode_ci'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8'</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看docker当前运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">8177ea9826e4        mysql:5.7           "docker-entrypoint.s…"   22 minutes ago      Up 22 minutes       0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# docker restart mysql</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>对插入的内容进行确认</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# docker exec -it mysql /bin/bash</span><br><span class="line">root@8177ea9826e4:/# cd etc/mysql/</span><br><span class="line">root@8177ea9826e4:/etc/mysql# ls</span><br><span class="line">my.cnf</span><br><span class="line">root@8177ea9826e4:/etc/mysql# cat my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init_connect='SET collation_connection = utf8_unicode_ci'</span><br><span class="line">init_connect='SET NAMES utf8'</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="mysql修改默认时区"><a href="#mysql修改默认时区" class="headerlink" title="mysql修改默认时区"></a>mysql修改默认时区</h6><p>如果忘记配置默认时区，会使用 UTC 作为默认时区，与中国采用的时间相差8小时，中国使用 <code>UTC+8</code> 。</p>
<ol>
<li><p>修改mysql的配置映射文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 [msqld] 后面添加内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">default-time-zone</span>=<span class="string">'+08:00'</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置jdk8镜像</title>
    <url>/articles/cc1858db.html</url>
    <content><![CDATA[<h5 id="docker配置jdk8镜像"><a href="#docker配置jdk8镜像" class="headerlink" title="docker配置jdk8镜像"></a>docker配置jdk8镜像</h5><p>配置方式分为通过 docker 仓库直接拉取 openjdk ，另一种方式是下载 jdk 8 linux版，通过 Dockerfile 进行配置。</p>
<a id="more"></a>
<h6 id="docker仓库拉取jdk8镜像"><a href="#docker仓库拉取jdk8镜像" class="headerlink" title="docker仓库拉取jdk8镜像"></a>docker仓库拉取jdk8镜像</h6><ol>
<li><p>拉取镜像<br> <code>docker pull openjdk:8-jre</code> </p>
</li>
<li><p>运行jdk容器<br><code>docker run -d -it --name jdk8 openjdk:8-jre</code> /bin/bash `</p>
</li>
<li><p>进入容器内部检查<br><code>docker exec -it myopenjdk /bin/bash</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@03005ebbf9c9]#</span><span class="bash"> java -version</span></span><br><span class="line">java version "1.8.0_261"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="Dockerfile配置jdk8镜像"><a href="#Dockerfile配置jdk8镜像" class="headerlink" title="Dockerfile配置jdk8镜像"></a>Dockerfile配置jdk8镜像</h6><ol>
<li><p>下载jdk1.8，并上传到/usr/local/src目录，然后解压</p>
<p>开启允许传输的权限<code>sudo chmod 777 /usr/local/src</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">jdk-8u261-linux-x64.tar.gz</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tar zxf jdk-8u261-linux-x64.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">jdk1.8.0_261  jdk-8u261-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Dockerfile<br>先在<code>/usr/local</code>目录下创建jdk目录，并将/usr/local/src下的 <code>jdk-8u261-linux-x64.tar.gz</code> 复制到<code>/usr/local/jdk</code>目录下，然后创建 <code>Dockerfile</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp ../src/jdk-8u261-linux-x64.tar.gz ./</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ls</span></span><br><span class="line">jdk-8u261-linux-x64.tar.gz</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vi Dockerfile</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> centos:centos7</span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u261-linux-x64.tar.gz /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk/jdk1.<span class="number">8.0</span>_261</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME /usr/local/jdk/jdk1.<span class="number">8.0</span>_261/jre</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Dockerfile构建jdk1.8镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t jdk1.8 .</span></span><br><span class="line">Sending build context to Docker daemon  143.1MB</span><br><span class="line">Step 1/8 : FROM centos:centos7</span><br><span class="line">centos7: Pulling from library/centos</span><br><span class="line">75f829a71a1c: Pull complete</span><br><span class="line">Digest: sha256:19a79828ca2e505eaee0ff38c2f3fd9901f4826737295157cc5212b7a372cd2b</span><br><span class="line">Status: Downloaded newer image for centos:centos7</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 7e6257c9f8d8</span></span><br><span class="line">Step 2/8 : MAINTAINER zhouchao</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 77ae01469661</span></span><br><span class="line">Removing intermediate container 77ae01469661</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a093e73e3ad0</span></span><br><span class="line">Step 3/8 : RUN mkdir /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 3669281a5047</span></span><br><span class="line">Removing intermediate container 3669281a5047</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 48038a16cc0c</span></span><br><span class="line">Step 4/8 : WORKDIR /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 49cf2fb9fa22</span></span><br><span class="line">Removing intermediate container 49cf2fb9fa22</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 7c9f9dd423b1</span></span><br><span class="line">Step 5/8 : ADD jdk-8u261-linux-x64.tar.gz /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a2112ce1417a</span></span><br><span class="line">Step 6/8 : ENV JAVA_HOME /usr/local/jdk/jdk1.8.0_261</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> c220252fe774</span></span><br><span class="line">Removing intermediate container c220252fe774</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 433e95e570d7</span></span><br><span class="line">Step 7/8 : ENV JRE_HOME /usr/local/jdk/jdk1.8.0_261/jre</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 654ac9d1adca</span></span><br><span class="line">Removing intermediate container 654ac9d1adca</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1cf2ae6ca829</span></span><br><span class="line">Step 8/8 : ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> a8e71af19743</span></span><br><span class="line">Removing intermediate container a8e71af19743</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f4e4ef5b6c42</span></span><br><span class="line">Successfully built f4e4ef5b6c42</span><br><span class="line">Successfully tagged jdk1.8:latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>在镜像仓库中查看是否构建成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">jdk1.8              latest              f4e4ef5b6c42        About a minute ago   556MB</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动jdk容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -di --name=jdk1.8 jdk1.8</span></span><br><span class="line">03005ebbf9c9ec65dd23977c527ce97578108c588c5cee0c1c7c0fd819d93053</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入jdk容器，查看是否安装正确</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it jdk1.8 /bin/bash</span></span><br><span class="line">[root@03005ebbf9c9 jdk]# pwd</span><br><span class="line">/usr/local/jdk</span><br><span class="line">[root@03005ebbf9c9 jdk]# ls</span><br><span class="line">jdk1.8.0_261</span><br><span class="line">[root@03005ebbf9c9 jdk]# java -version</span><br><span class="line">java version "1.8.0_261"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12, mixed mode)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置redis镜像</title>
    <url>/articles/cf9a8130.html</url>
    <content><![CDATA[<h6 id="安装redis镜像"><a href="#安装redis镜像" class="headerlink" title="安装redis镜像"></a>安装redis镜像</h6><p>从 docker 的仓库中拉取 redis 镜像，不写版本号时，默认使用 <code>latest</code> 最新版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull redis[:版本号]</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h6 id="创建redis容器与启动"><a href="#创建redis容器与启动" class="headerlink" title="创建redis容器与启动"></a>创建redis容器与启动</h6><ol>
<li><p>创建配置文件挂载文件夹和 redis 挂载的配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /mydata/redis/conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch /mydata/redis/conf/redis.conf</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 redis 容器，并将配置文件挂载到虚拟机本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span></span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查 redis 的相关配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# pwd</span><br><span class="line">/mydata/redis/conf</span><br><span class="line">[root@localhost conf]# ls</span><br><span class="line">redis.conf</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="配置redis自启动"><a href="#配置redis自启动" class="headerlink" title="配置redis自启动"></a>配置redis自启动</h6><p>配置 redis 容器在docker启动时同时启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vagrant]# docker update redis --restart=always</span><br></pre></td></tr></table></figure>
<h6 id="进入redis的客户端"><a href="#进入redis的客户端" class="headerlink" title="进入redis的客户端"></a>进入redis的客户端</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# docker exec -it redis redis-cli</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<h6 id="将redis数据持久化到硬盘"><a href="#将redis数据持久化到硬盘" class="headerlink" title="将redis数据持久化到硬盘"></a>将redis数据持久化到硬盘</h6><p>修改 <code>/mydata/redis/conf/redis.conf</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加以下内容</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<h6 id=""><a href="#" class="headerlink" title=" "></a> </h6>]]></content>
      <categories>
        <category>notes</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+yilia+github搭建个人博客</title>
    <url>/articles/73e911cd.html</url>
    <content><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>学习使用hexo框架搭建个人博客，开启博客之旅。</p>
<a id="more"></a>
<h6 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h6><ul>
<li>nodejs <a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs网址</a> 根据操作系统下载对应的版本</li>
<li>git <a href="https://git-scm.com/" target="_blank" rel="noopener">git网址</a></li>
</ul>
<h6 id="检查工具"><a href="#检查工具" class="headerlink" title="检查工具"></a>检查工具</h6><p>windows操作系统下打开命令行窗口，执行命令</p>
<ul>
<li><code>node -v</code></li>
<li><code>npm -v</code></li>
<li><code>git --version</code></li>
</ul>
<p>如果返回对应的版本号信息，说明安装成功</p>
<h6 id="博客框架基础配置"><a href="#博客框架基础配置" class="headerlink" title="博客框架基础配置"></a>博客框架基础配置</h6><p>在电脑的合适位置创建文件夹（blog）用于存放和管理博客，在此文件路径下执行命令行窗口（Mac用户需要获取管理员权限），执行下列命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//安装淘宝的cnpm管理器,其他国内镜像源也可</span><br><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org </span><br><span class="line"></span><br><span class="line">//安装hexo基础框架</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">//初始化生成框架文件</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>生成hexo框架文件后，默认会生成一篇hello word的博客，博客框架基本搭建好了，可以通过本地的端口预览，执行命令<code>hexo s</code> 即可通过本地的4000端口访问博客</p>
<p>地址<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p>
<h6 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h6><ul>
<li><p>在github创建公开仓库：github账户名.github.io</p>
<p>仓库名必须是以 github账户名+.github.io 命名</p>
</li>
<li><p>修改hexo本地设置：通过记事本更改文件夹<em>_config.yml</em>的以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxx/xxxx.github.io.git</span> <span class="comment">#仓库的ssh地址或http地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#默认是master分支</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在blog文件夹下执行窗口命令安装git自动部署插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 安装git自动部署插件</span><br><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>推送到github仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//清理</span><br><span class="line">hexo clean</span><br><span class="line">//生成 hexo generate</span><br><span class="line">hexo g</span><br><span class="line">//推送到仓库 hexo deploy</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>推送成功后即可通过<a href="https://xxxx.github.io/" target="_blank" rel="noopener">https://xxxx.github.io</a>    访问博客</p>
<h6 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h6><p>从github上clone导入yilia主题文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>
<p>数据以json的形式保存<code>cnpm i hexo-generator-json-content --save</code></p>
<p>修改hexo根目录下的<em>_config.yml</em> :</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yilia</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line">  <span class="attr">meta:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">pages:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">text:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">raw:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">content:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">slug:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">updated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">link:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">excerpt:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>配置yilia文件下的<em>_config.yml</em> : <em>目录：/themes/yilia/config.yml）</em>,根据个人喜好进行设置</p>
<p>修改好配置信息后，通过 <code>hexo clean</code> <code>hexo g</code> <code>hexo s</code>在本地预览</p>
<p>执行 <code>hexo clean</code> <code>hexo g</code> <code>hexo d</code>上传同步到github仓库</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo上传至gitee以及添加gitee评论功能</title>
    <url>/articles/6dfbadcb.html</url>
    <content><![CDATA[<h4 id="使用gitee-码云-作为博客地址"><a href="#使用gitee-码云-作为博客地址" class="headerlink" title="使用gitee(码云)作为博客地址"></a>使用gitee(码云)作为博客地址</h4><p>在完成github和hexo搭建好个人博客系统后，再将博客部署到在gitee上，提高访问速度。</p>
<a id="more"></a>
<h6 id="创建gitee仓库"><a href="#创建gitee仓库" class="headerlink" title="创建gitee仓库"></a>创建gitee仓库</h6><p><a href="https://gitee.com/projects/new" target="_blank" rel="noopener">新建仓库</a></p>
<p>为了使用<code>用户名.gitee.io</code>作为博客的地址，仓库名需要直接填写成gitee用户名，这一点是不同与github</p>
<p>原因：gitee pages在生成页面时会默认地添加后缀<code>.gitee.io</code></p>
<ul>
<li>仓库名：gitee用户名</li>
<li>开源：公开(可以作为giteement存放评论的仓库，另外新建一个也是可以的)</li>
</ul>
<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><p>修改博客根目录下的<code>_config.ym</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://用户名.gitee.io/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@gitee.com:用户名/用户名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h6 id="部署到gitee仓库"><a href="#部署到gitee仓库" class="headerlink" title="部署到gitee仓库"></a>部署到gitee仓库</h6><p>在博客根目录下运行<code>git bash</code>或命令行窗口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//清除数据</span><br><span class="line">hexo clean</span><br><span class="line">//重新渲染</span><br><span class="line">hexo g</span><br><span class="line">//本地local host预览</span><br><span class="line">hexo s</span><br><span class="line">//部署到gitee仓库</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h6 id="gitee使用gitee-pages"><a href="#gitee使用gitee-pages" class="headerlink" title="gitee使用gitee pages"></a>gitee使用gitee pages</h6><p>在gitee的仓库下依次点击服务——&gt;Gitee Pages——&gt;启动</p>
<p>提示：已开启 Gitee Pages 服务，网站地址：<code>https://用户名.gitee.io</code></p>
<p>即可访问</p>
<p>注意：使用gitee作为博客网站时，在每次推送到仓库后都要手动更新，即：服务——&gt;Gitee Pages——&gt;更新    网站才会更新</p>
<h4 id="giteement评论功能"><a href="#giteement评论功能" class="headerlink" title="giteement评论功能"></a>giteement评论功能</h4><h6 id="生成gitee第三方应用"><a href="#生成gitee第三方应用" class="headerlink" title="生成gitee第三方应用"></a>生成gitee第三方应用</h6><p><a href="https://gitee.com/oauth/applications/new" target="_blank" rel="noopener">创建第三方应用</a></p>
<ul>
<li>应用名称：自定义</li>
<li>应用描述：自定义</li>
<li>应用主页：<a href="https://用户名.gitee.io/" target="_blank" rel="noopener">https://用户名.gitee.io/</a></li>
<li>应用回调：<a href="https://用户名.gitee.io/" target="_blank" rel="noopener">https://用户名.gitee.io/</a></li>
<li>权限：issues    notes</li>
</ul>
<p>在创建成功后会生成<strong>Client ID</strong>     <strong>Client Secret</strong></p>
<h6 id="添加相关文件"><a href="#添加相关文件" class="headerlink" title="添加相关文件"></a>添加相关文件</h6><p>在<code>themes/yilia/layout</code>路径<code>index.ejs</code>文件中添加以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;giteement.oss-cn-beijing.aliyuncs.com&#x2F;oauthcallback.browser.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;</span><br><span class="line">    Oauthcallback();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>themes/yilia/layout/_partial</code>路径下<code>article.ejs</code>文件中添加以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;% if (theme.gitment_owner &amp;&amp; theme.gitment_repo &amp;&amp;theme.gitment_oauth &amp;&amp; theme.gitment_oauth.client_id &amp;&amp; theme.gitment_oauth.client_secret)&#123; %&gt;</span><br><span class="line">  &lt;%- partial(&#39;post&#x2F;gitment&#39;, &#123;</span><br><span class="line">      key: post.slug,</span><br><span class="line">      title: post.title,</span><br><span class="line">      url: config.url+url_for(post.path)</span><br><span class="line">    &#125;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;!--在此处以下代码--&gt;</span><br><span class="line">&lt;!--giteement评论功能--&gt;</span><br><span class="line">&lt;% if (theme.giteement.enable)&#123; %&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;giteementDiv&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;giteement.oss-cn-beijing.aliyuncs.com&#x2F;default.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;giteement.oss-cn-beijing.aliyuncs.com&#x2F;giteement.browser.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var giteement &#x3D; new Giteement(&#123;</span><br><span class="line">  id: &#39;&lt;%- post.date.format(&#39;YYYYMMDDHHmmss&#39;) %&gt;&#39;,</span><br><span class="line">  owner: &#39;&lt;%- theme.giteement.giteeID %&gt;&#39;,</span><br><span class="line">  repo: &#39;&lt;%- theme.giteement.repo %&gt;&#39;,</span><br><span class="line">  backcall_uri: &#39;&lt;%- theme.giteement.redirect_uri %&gt;&#39;,</span><br><span class="line">  oauth_uri: &#39;&lt;%- theme.giteement.oauth_uri %&gt;&#39;,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: &#39;&lt;%- theme.giteement.ClientID %&gt;&#39;,</span><br><span class="line">    client_secret: &#39;&lt;%- theme.giteement.ClientSecret %&gt;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">giteement.render(&#39;giteementDiv&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h6><p>修改themes/yilia目录下的<code>themes/yilia/_config.ym</code>文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">giteement:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span><span class="comment"># 是否启用码云评论系统</span></span><br><span class="line">  <span class="comment"># 是否使用官方js(false可以提升访问速度)</span></span><br><span class="line">  <span class="attr">remote:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">redirect_uri:</span> <span class="string">''</span>   <span class="comment"># 应用回调地址(请和配置的第三方应用保持一致)</span></span><br><span class="line">  <span class="attr">oauth_uri:</span> <span class="string">https://cors-anywhere.herokuapp.com/https://gitee.com/oauth/token</span></span><br><span class="line">  <span class="attr">giteeID:</span>   <span class="comment"># 你的码云账号英文名</span></span><br><span class="line">  <span class="comment"># 存储评论的 repo name(需要在码云仓库创建公开仓库)</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment">#公开仓库可直接填写用户名</span></span><br><span class="line">  <span class="attr">gitment_oauth:</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">''</span>           <span class="comment">#client ID</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">''</span>       <span class="comment">#client secret</span></span><br></pre></td></tr></table></figure>
<h6 id="渲染-预览-初始化"><a href="#渲染-预览-初始化" class="headerlink" title="渲染    预览    初始化"></a>渲染    预览    初始化</h6><p>重新渲染，预览 </p>
<p>分别执行 <code>hexo clean</code>  <code>hexo g</code>  <code>hexo s</code></p>
<p>在<code>localhost:4000</code>下预览</p>
<font color=red>注意：每篇博客需要登录gitee账号初始化评论后才能使用</font>

<h4 id="其他方式-推荐"><a href="#其他方式-推荐" class="headerlink" title="其他方式(推荐)"></a>其他方式(推荐)</h4><p>使用上述方法，评论区域的ui并不美观，可选择<code>yilia-plus</code>主题替代</p>
<h6 id="使用yilia-plus主题"><a href="#使用yilia-plus主题" class="headerlink" title="使用yilia-plus主题"></a>使用yilia-plus主题</h6><p><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">hexo-theme-yilia-plus</a></p>
<p>克隆地址：<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus.git" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus.git</a></p>
<p>这个主题支持giteement评论功能，只需要注册好gitee第三方应用然后直接进行配置，无需手动添加相关文件</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>gitee</tag>
        <tag>giteement</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo实现置顶文章</title>
    <url>/articles/28f80600.html</url>
    <content><![CDATA[<h4 id="hexo置顶文章"><a href="#hexo置顶文章" class="headerlink" title="hexo置顶文章"></a>hexo置顶文章</h4><h6 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h6><p>在博客根目录下运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save	#卸载index渲染器</span><br><span class="line">npm install hexo-generator-index-pin-top --save  #安装置顶插件</span><br><span class="line"><span class="meta">#</span><span class="bash">安装淘宝的镜像可以使用 cnpm 代替 npm</span></span><br></pre></td></tr></table></figure>
<h6 id="配置置顶标准"><a href="#配置置顶标准" class="headerlink" title="配置置顶标准"></a>配置置顶标准</h6><p>在<code>/themes/所使用的主题名/layout/post.ejs</code>文件最前面添加下列代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (page.top) &#123; %&gt;</span><br><span class="line">  &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;font color&#x3D;7D26CD&gt;置顶&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h6 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h6><p>在需要置顶的文章的<strong>Front Matter</strong>部分添加 <code>top: number</code></p>
<p>number的数值越大优先级越高</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">date:</span> <span class="string">YYYY-MM-DD</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">2</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<h6 id="优先级配置"><a href="#优先级配置" class="headerlink" title="优先级配置"></a>优先级配置</h6><p>修改根目录配置文件<code>/_config.yml</code>,<code>top</code>值<code>-1</code>根据<code>top</code>值倒序</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">6</span>	<span class="comment">#每页显示的文章数</span></span><br><span class="line">  <span class="attr">order_by:</span></span><br><span class="line">    <span class="attr">top:</span> <span class="number">-1</span>		<span class="comment">#按top倒序排列，number越大的优先显示</span></span><br><span class="line">    <span class="attr">date:</span> <span class="number">-1</span>	<span class="comment">#按时间倒序排列，最新的优先显示</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h6 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h6><p><img data-src="https://i.loli.net/2020/04/11/NjDQvAB6SOgKt4b.png" alt="hexo置顶效果图.png"  /></p>
<h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h6><p><a href="https://yangyang188.coding.me/archives/4392eea4/" target="_blank" rel="noopener">Hexo yilia 配置—置顶文章部分</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo添加RSS订阅功能</title>
    <url>/articles/b9d63583.html</url>
    <content><![CDATA[<h6 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h6><p>在博客根目录下运行 <code>npm install hexo--generator-feed</code></p>
<p>安装过淘宝镜像可使用 <code>cnpm install hexo--generator-feed</code> 命令</p>
<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><p>在<strong>根目录</strong>下的<code>_config.yml</code>文件中添加下列代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">#RSS订阅</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span> <span class="comment"># 生成路径</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span> <span class="comment"># 最新的20篇文章</span></span><br></pre></td></tr></table></figure>
<p>在<strong>主题目录</strong>下的<code>_config.yml</code>文件中添加下列代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># subNav-子导航</span></span><br><span class="line"><span class="attr">subNav:</span></span><br><span class="line">	<span class="attr">rss:</span> <span class="string">"/atom.xml"</span> <span class="comment"># 或 "atom.xml" ，这个路径与path一致</span></span><br></pre></td></tr></table></figure>
<h6 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h6><p>在博客根目录下重新渲染 <code>hexo g</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 955 ms</span><br><span class="line">INFO  Generated: atom.xml # 生成atom.xml文件</span><br><span class="line">INFO  1 files generated in 933 ms</span><br></pre></td></tr></table></figure>
<p>在<code>public</code>文件夹下生成<code>atom.xml</code></p>
<p>本地预览：<code>hexo s</code> 点击RSS会跳转保存窗口</p>
<p>推送到远程仓库：<code>hexo d</code> 点击RSS跳转到<code>atom.xml</code>页面</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>rss</tag>
      </tags>
  </entry>
  <entry>
    <title>javascrpit基础语法</title>
    <url>/articles/95725add.html</url>
    <content><![CDATA[<h3 id="js的声明"><a href="#js的声明" class="headerlink" title="js的声明"></a>js的声明</h3><ol>
<li><p>在head标签中使用script标签进行js代码域的声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	alert(<span class="string">"This is my first js."</span>)；<span class="comment">//测试</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>作用：声明js代码域<br>特点：js的代码只会作用于当前网页  </p>
</li>
<li><p>在head标签中使用script标签引入外部声明好的js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"相对路径"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>作用：引入外部声明好的js文件<br>特点：实现js代码的重复使用，避免代码的冗余<br>注意：</p>
<ul>
<li>因为js在HTML文档中是一门单独的语言，可以声明在文档中的任意位置    </li>
<li>一般情况下声明在head标签中</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h3 id="js的变量"><a href="#js的变量" class="headerlink" title="js的变量"></a>js的变量</h3><ul>
<li><p>js的所有变量声明只有var关键字<br>var 变量名=初始值；<br>注意： </p>
<ul>
<li>js的变量名是严格区分大小写的</li>
<li>js的字符串可以使用双引号也可以使用单引号</li>
<li>js中可以声明同名变量，不会报错，后面的声明会将前面的声明覆盖 </li>
</ul>
</li>
<li><p>js中的数据类型<br>数据类型判断关键字：<code>typeof</code><br>数据类型：</p>
<ul>
<li><p>number:数字类型 </p>
</li>
<li><p>string：字符串类型 </p>
</li>
<li><p>boolean：布尔型</p>
</li>
<li><p>object：对象</p>
</li>
<li><p>null：空对象赋值，主要是和undefined进行区分</p>
</li>
<li><p>undefined：变量声明不赋值，默认值是undefined</p>
<p>注意：在js中尽量给声明的变量赋初值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d;  </span><br><span class="line">alert(d);  			<span class="comment">// undefined</span></span><br><span class="line">alert(<span class="keyword">typeof</span> c);	<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>js变量强制转换</p>
<ul>
<li>使用Number函数，将其他数据类型转换成数值类型，转换失败返回NaN（Not a Number）</li>
</ul>
<p>| 数据类型 | 原始值     | 转换后            |<br>| ———— | ————— | ————————- |<br>| string   | 数字字符   | 对应的nunber数字  |<br>| string   | 非数字字符 | NaN（number类型） |<br>| boolean  | true       | 1                 |<br>| boolean  | false      | 0                 |<br>| object   | 有具体的值 | 一串数字          |<br>| object   | null       | 0                 |</p>
</li>
<li><p>Boolean()函数，将其他数据类型转换成布尔类型，有值返回true，无值返回false</p>
<p>| 数据类型         | 原始值       | 转换后的值 |<br>| ———————— | —————— | ————— |<br>| number           | 正数或者负数 | true       |<br>| number           | 0            | false      |<br>| string           | 非空字符串   | true       |<br>| string           | 空字符串””   | false      |<br>| object           | 具体的对象   | true       |<br>| object           | null         | false      |<br>| 声明不赋值的变量 |              | false      |</p>
</li>
<li><p>js运算符</p>
<p>算术运算符:加+    减-    乘*    除/    求余%<br>number类型和number类型的<br>number类型和boolean类型(true—1    false—0)<br>number类型和string类型<br>string和string类型的数字<br>string类型和boolean类型</p>
</li>
</ul>
<p>在算术运算中如果两边的数据类型并不是number，会使用Number()函数强制转换</p>
<p>注意：在字符串中”+”符号代表的是字符串的连接符,不会参与运算 </p>
<ul>
<li>逻辑运算符: 非 ！    与 &amp; &amp;&amp;      或 | || </li>
<li>关系运算符：！=    &gt;=    &lt;=</li>
<li><p>自增运算符：++    —    -=                 // 运算效率高（位运算）   </p>
</li>
<li><p>特殊关系运算符：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">等值运算符==：先判断类型，类型一致则直接比较，类型不一致，则先使用<span class="built_in">Number</span>（）进行强转后在进行比较</span><br><span class="line">eg:</span><br><span class="line"><span class="literal">null</span>==<span class="literal">undefined</span>            <span class="comment">//返回值为true</span></span><br><span class="line"></span><br><span class="line">等同运算符：===	先判断类型，类型一致则再比较内容，内容一致则返回<span class="literal">true</span>，内容不一致则返回<span class="literal">false</span></span><br><span class="line">eg:</span><br><span class="line"><span class="literal">null</span>===<span class="literal">undefined</span>         <span class="comment">//返回值为false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="js的逻辑结构与循环结构"><a href="#js的逻辑结构与循环结构" class="headerlink" title="js的逻辑结构与循环结构"></a>js的逻辑结构与循环结构</h3><p>js的逻辑结构：</p>
<ul>
<li>if结构：<ul>
<li>单分支结构 if()</li>
<li>双分支结构 if()  else()</li>
<li>多分支结构 if() else if() …else()</li>
</ul>
</li>
<li>switch选择结构：<code>switch（）{  case：break；}</code>    </li>
</ul>
<p>注意：判断的变量可以是number类型也可以是string类型，但不要混用</p>
<p>js的循环结构：</p>
<ul>
<li>for()循环</li>
<li>while()循环</li>
<li>do{}while()循环</li>
</ul>
<h3 id="js的数组"><a href="#js的数组" class="headerlink" title="js的数组"></a>js的数组</h3><ul>
<li><p>数组的声明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array=<span class="keyword">new</span> <span class="built_in">Array</span>();           <span class="comment">// 声明空数组对象</span></span><br><span class="line"><span class="keyword">var</span> array=<span class="keyword">new</span> <span class="built_in">Array</span>(length);     <span class="comment">// 声明数组长度指定的数组</span></span><br><span class="line"><span class="keyword">var</span> array=[元素...];             <span class="comment">// 直接声明数组（常用）</span></span><br></pre></td></tr></table></figure>
<p>注意：js中的数组声明不用指定长度，js数组的长度是不固定的，由元素的个数而定     </p>
</li>
<li><p>数组的赋值和取值<br>数组可以存储任意类型的数据</p>
<ul>
<li>组名[角标]=值；  角标可以是任意的正整数和零</li>
</ul>
<p>组的取出</p>
<ul>
<li>组名[角标]；       返回当前角标所对应存储的值如果角标不存在，返回undefined</li>
</ul>
</li>
<li><p>数组的length属性</p>
<ul>
<li>作用：<ul>
<li>数组名.length          返回当前数组长度</li>
<li>数组名.length=值    动态设置数组长度</li>
</ul>
</li>
<li>注意：<ul>
<li>length&gt;原有长度，则使用空进行填充</li>
<li>length&lt;原有长度，则从后面进行截取，最后的数据会被</li>
</ul>
</li>
</ul>
</li>
<li><p>数组的遍历</p>
<ul>
<li><p>普通for循环</p>
</li>
<li><p>for-in</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> array)&#123;</span><br><span class="line">    alert(i);   <span class="comment">// 获取的是角标</span></span><br><span class="line">    alert(array[i]);  <span class="comment">// 获取的是元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="js数组的常用操作"><a href="#js数组的常用操作" class="headerlink" title="js数组的常用操作"></a>js数组的常用操作</h4><ul>
<li><p>数组的合并：</p>
<p><code>var a=array.concat(数组);</code></p>
</li>
<li><p>数组指定间隔符转换字符串：</p>
<p><code>var b=array.join(&quot;-&quot;);</code></p>
</li>
<li><p>数组移除最后一个元素并返回元素：</p>
<p><code>var c=array.pop();</code></p>
</li>
<li><p>数组的追加,返回数组的新长度：</p>
<p><code>var d=array.push(元素);</code>   追加的元素可以是一个数组，但是作为一个角标值存在</p>
</li>
<li><p>数组移除第一个元素并返回该元素：</p>
<p><code>var e=array.shift();</code></p>
</li>
<li><p>数组在开始位置插入指定元素并返回数组的新长度：</p>
<p><code>var f=array.unshift(&quot;&quot;);</code></p>
</li>
<li><p>数组删除指定位置元素并返回移除的元素</p>
<p><code>var g=array.splice(start,deletecount,&quot;&quot;);</code> </p>
</li>
</ul>
<h3 id="js的函数："><a href="#js的函数：" class="headerlink" title="js的函数："></a>js的函数：</h3><p>作用：功能代码块的封顶，减少代码的冗余</p>
<ul>
<li><p>函数的声明</p>
<ul>
<li><p>方式一：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line">调用函数；函数名（实际参数）；</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二：<br><code>var 函数名=new Function（&quot;形参1&quot;，“形参2&quot;...&quot;函数执行体&quot;）；</code><br>注意：此声明表明在js函数中是作为对象存在的</p>
</li>
</ul>
<ul>
<li><p>方式三：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名=<span class="function"><span class="keyword">function</span>（形参...）</span>&#123;</span><br><span class="line">    函数体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>函数的参数<br>js的函数调用时，形参可以不赋值，不会报错<br>js的函数调用时，形参赋值可以不全部赋值，不会报错，但实参会依次赋值</p>
</li>
<li><p>函数的返回值<br>在js中如果有返回值则返回返回值，无返回值则返回undefined<br>注意：js的代码声明区域和执行区域是一起的，都是在js代码的代码域中</p>
</li>
<li><p>函数的执行符<br>在js中函数的执行符值()<br>没有小括号则函数名其实就是一个变量<br>加上小括号则函数会被执行</p>
</li>
<li>函数作为实参传递<br>在js中函数是可以作为实参进行传递的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testobj</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">	alert(a());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> testParam=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">"函数参数"</span>);</span><br><span class="line">&#125;</span><br><span class="line">testobj(testParam());</span><br></pre></td></tr></table></figure>
<h3 id="js的类和对象"><a href="#js的类和对象" class="headerlink" title="js的类和对象"></a>js的类和对象</h3><h4 id="js的类："><a href="#js的类：" class="headerlink" title="js的类："></a>js的类：</h4><ul>
<li><p>类的声明     </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 类名（形参...）</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.属性名=形参；</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">this</span>.属性名=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类的使用<br>  对象名=new 类名（实参…）;</p>
<pre><code>  注意：js中类的内容是对象的公共部分，每个对象还可以自定义地进行扩充
</code></pre></li>
<li><p>类的”继承”     prototype关键字<br>通过prototype关键字实现了不同对象之间的数据共享<br>作用:实现某个类的所有子对象的方法区对象的共享，节省内存</p>
<ul>
<li>prototype写在类里面，调用时要加上prototype</li>
<li><p>prototype写在类外面，调用时不加prototype</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.fav=<span class="string">"Sing"</span>;</span><br><span class="line">    <span class="keyword">this</span>.prototype=<span class="keyword">new</span> User();    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="comment">//或者Person.prototype=new User();</span></span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> Person(<span class="string">"盲侠"</span>,<span class="number">20</span>);</span><br><span class="line">User.prototype.testU=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"abcd"</span>);&#125;</span><br><span class="line"><span class="comment">//此处p1.prototype.testU();</span></span><br><span class="line">p1.prototype.testU();</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><p>对象的作用：用来存储整体数据</p>
<p>原因：不能预知一个对象的所有属性，创建一个临时对象来定义属性存储数据，来保证数据的完整性</p>
<p>应用：Ajax</p>
<p>使用：</p>
<ul>
<li><p>创建自定义对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">对象名.属性名=属性值;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 对象名=&#123;&#125;；</span><br><span class="line">对象名.属性名=属性值;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>一般用来存储数值，不会再自定义对象中存储函数对象    </li>
<li>js中的对象属性和内容是可以自定义的扩充到的，不是依赖于类的声明的，类只是对象公开部分的一种声明，是为了节省代码的冗余</li>
</ul>
<h3 id="常用对象和方法"><a href="#常用对象和方法" class="headerlink" title="常用对象和方法"></a>常用对象和方法</h3><h4 id="string对象"><a href="#string对象" class="headerlink" title="string对象"></a>string对象</h4><p>字符串大小写的转换</p>
<ul>
<li>str.toUpperCase();  将字符串转换为大写</li>
<li>str.toLowerCase();  将字符串转换为小写</li>
</ul>
<p>字符串的切割</p>
<ul>
<li>var str=string.split(“字符”)；按照指定的字符切割字符串，返回数组</li>
</ul>
<p>字符串的截取</p>
<ul>
<li>str.substr(start,end);      从指定的开始位置截取指定长度的子字符串</li>
<li>str.substring(start,end); 从指定的开始位置和指定的结束位置截取子字符串，含头不含尾</li>
</ul>
<p>查找子字符串第一次出现的角标</p>
<ul>
<li>indexOf(“字符”);   返回指定子字符串第一次出现的角标，没有则返回-1</li>
</ul>
<h4 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h4><p>获取当前年份</p>
<ul>
<li>d.getYear();           返回1990年开始距今的年份数</li>
<li>d.getFullYear();     返回当前年份</li>
<li>d.getMonth()+1;   返回当前月份的角标值，需要+1</li>
<li>d.getDate();           返回的是当前的日期数</li>
<li>d.getHours();         返回当前时间的小时数l</li>
<li>d.getMinutes();     返回当前时间的分钟数</li>
<li>d.getSeconds();     返回当前时间的秒数</li>
</ul>
<h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><ul>
<li><p>创建随机数字：<code>Math.random();</code> 返回0-1之间的随机数，不包括0和1</p>
</li>
<li><p>向下取整：<code>Math.floor();</code></p>
</li>
<li><p>向上取整：<code>Math.ceil();</code></p>
</li>
<li><p>四舍五入：<code>Math.round();</code></p>
</li>
<li><p>数值比较    </p>
<ul>
<li><code>Math.min(数据...);</code> 获取最小值</li>
<li><code>Math.max(数据...);</code>  获取最大值</li>
</ul>
</li>
</ul>
<h4 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h4><p>该对象从不直接使用并且不能new，直接写方法名调用即可</p>
<ul>
<li>使用eval将字符转换为可执行的js代码    eval();</li>
<li>使用isNaN判断是否值为NaN    isNaN();<ul>
<li>获取字符中的浮点数    parseFloat(“字符串”);</li>
</ul>
</li>
</ul>
<h3 id="js的事件机制"><a href="#js的事件机制" class="headerlink" title="js的事件机制"></a>js的事件机制</h3><h4 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h4><p>解释：当行为动作满足了一定的条件后，会触发某类事务的执行</p>
<p>作用：主要是结合js的函数来使用</p>
<p>内容：</p>
<ul>
<li>单双击事件<br>  单击：onclick<br>  双击：ondblclick</li>
<li>鼠标事件<br>  悬停：onmouseover<br>  移动：onmousemove<br>  移出：onmouseout</li>
<li>键盘事件<br>  松开：onkeyup<br>  按下：onkeydown</li>
<li>焦点事件<br>  获取：onfocus<br>  失去：onblur</li>
<li>网页加载事件<br>  加载：onload<br>  一般作为网页资源加载，页面加载成功</li>
</ul>
<p>注意：</p>
<ul>
<li>js中添加事件的第一种方式：在HTML上直接使用事件属性进行添加，属性值为所监听执行的函数</li>
<li>js中的事件只有在当前HTML元素上有效<br>一个HTML元素可以添加多个不同的事件<br>一个事件可以监听触发多个函数执行，不同函数要使用；间隔 </li>
</ul>
<h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ul>
<li><p>给合适的html标签添加合适的事件<br> onchange——-select下拉框<br> onload———-body标签<br> 单双击————用户进行点击动作的HTML元素<br> 鼠标事件———用户进行鼠标移动操作的<br> 键盘事件———用户进行键盘操作的HTML元素</p>
</li>
<li><p>给HTML元素添加多个事件，注意事件之间的冲突<br> eg：单双击<br> 当事件的触发事件包含相同部分的时候，会产生事件之间的冲突</p>
</li>
<li><p>事件的阻断<br> 当事件监听的函数的的返回值返回给事件时：<br> false：则会阻断当前事件所在的HTML标签的功能<br> true：则继续执行当前事件所在的HTML标签的功能</p>
</li>
<li><p>超链接调用js函数</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:函数名()"</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>BOM浏览器对象模型：是规范浏览器对js语言的支持（js掉用浏览器本身的功能）</p>
<p>BOM的具体实现是window对象</p>
<h4 id="window对象-1"><a href="#window对象-1" class="headerlink" title="window对象"></a>window对象</h4><ol>
<li><p>window对象不用new，直接进行使用，类似Math的使用方式，widow关键字可以省略</p>
</li>
<li><p>框体方法</p>
<ul>
<li>警告框     alert();           提示一个警告信息，无返回值<ul>
<li>确认框     confirm();     提示用户选择一项操作（确定/取消） 返回true或false</li>
<li>提示框    prompt();      提示用户某个信息的录入    点击确定返回当前用户录入的数据，默认返回空字符串；点击取消，返回null</li>
</ul>
</li>
</ul>
</li>
<li><p>定时和间隔执行方法</p>
<ul>
<li>定时<br>setTimeout(函数对象，时间(毫秒));    指定的时间后执行指定的函数</li>
<li>间隔执行<br>  setInterval(函数对象，时间(毫秒));     每间隔指定时间执行指定的函数</li>
<li>停止<ul>
<li>clearTimeout(定时器id);                停止当前的定时器 ,返回当前定时器id</li>
<li>clearInterval(间隔器id);                 停止当前指定的间隔器，返回当前间隔器id</li>
</ul>
</li>
</ul>
</li>
<li><p>子窗口方法</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open();   <span class="comment">//打开新页面</span></span><br><span class="line">参数(子页面资源（相对路径），打开方式，配置)       </span><br><span class="line"><span class="built_in">window</span>.close();  <span class="comment">//关闭子页面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">'page.html'</span>,<span class="string">'newwindow'</span>,<span class="string">'height=100px,width=100px,top=0px,left=0px,toolbar=no,menubar=no,scrollbar=no,resizeble=no,location=no,status=no'</span>);</span><br></pre></td></tr></table></figure>
<p>   注意：close（）只能关闭open（）打开的子页面！二者配套使用</p>
</li>
<li><p>子页面调用父页面的函数<br>window.opener.父类函数名();</p>
<h4 id="window对象常用属性"><a href="#window对象常用属性" class="headerlink" title="window对象常用属性"></a>window对象常用属性</h4></li>
</ol>
<ul>
<li><p>地址栏属性<br>window.location.href=”新的资源路径（相对路径/url）”;        跳转资源<br>window.location.reload();                                 重新加载页面资源</p>
</li>
<li><p>历史记录属性<br>window.history.forward();       页面资源前进，历史记录的前进<br>window.history.back();             页面资源后退，历史记录的后退<br>window.history.go(index);       跳转到指定的历史记录资源<br>注意：window.history.go(0)；相当于刷新页面</p>
</li>
<li><p>屏幕属性<br>var width=window.screen.width;    获取屏幕的宽度分辨率<br>var height=window.screen.height;  获取屏幕的高度分辨率</p>
</li>
<li><p>浏览器配置属性<br>window.navigator.userAgent();    获取用户的浏览器版本信息…</p>
</li>
<li><p>主体面板属性(document)</p>
<h3 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h3><h4 id="document对象的概念"><a href="#document对象的概念" class="headerlink" title="document对象的概念"></a>document对象的概念</h4><p>浏览器对外提供的支持js的用来操作HTML文档的一个对象，此对象存的HTML文档的所有信息（隶属于window对象）</p>
</li>
</ul>
<h4 id="使用document"><a href="#使用document" class="headerlink" title="使用document"></a>使用document</h4><h5 id="获取HTML元素对象"><a href="#获取HTML元素对象" class="headerlink" title="获取HTML元素对象"></a>获取HTML元素对象</h5><h6 id="直接获取方式"><a href="#直接获取方式" class="headerlink" title="直接获取方式"></a>直接获取方式</h6><div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>(window.)document.getElementById();</td>
</tr>
<tr>
<td>name属性值</td>
<td>(window.)document.getElementsByName();          //返回数组</td>
</tr>
<tr>
<td>标签名</td>
<td>(window.)doucument.getElementsByTagName();      //返回数组</td>
</tr>
<tr>
<td>class属性值</td>
<td>(window.)document.getElementsByClassName();     //返回数组</td>
</tr>
</tbody>
</table>
</div>
<h6 id="间接获取方式"><a href="#间接获取方式" class="headerlink" title="间接获取方式"></a>间接获取方式</h6><ul>
<li><p>父子关系<br>获取父级元素对象：var showdiv=document.getElementById();<br>获取所有的子元素对象数组：var childs=showdiv.childNodes;</p>
</li>
<li><p>子父关系<br>获取子元素对象<br>var inp=document.getElementByid();<br>var div=inp.parentNode;</p>
</li>
<li><p>兄弟关系<br>var inp=document.getElementById();<br>var pre=inp.previousSibling;<br>var next=inp.nextSibling;</p>
</li>
</ul>
<h5 id="操作HTML的元素属性"><a href="#操作HTML的元素属性" class="headerlink" title="操作HTML的元素属性"></a>操作HTML的元素属性</h5><ul>
<li>获取元素对象<br>直接or间接</li>
<li><p>操作元素属性</p>
<ul>
<li><p>元素对象名.属性名                                                获取固有属性</p>
<ul>
<li>元素对象名.getAttribute(“属性名”);                    获取自定义属性修改</li>
<li>元素对象名.属性值=属性值                                  修改固有属性</li>
<li>元素对象名.setAttribute(“属性名”,”属性值”);    修改自定义属性         </li>
</ul>
<p>注意：尽量不要修改元素对象的id，name属性<br>使用自定义方式获取固有属性内容，value的额值获取的是默认值，不能获取到实时的用户数据</p>
</li>
</ul>
</li>
</ul>
<h5 id="操作HTML元素对象的内容和样式"><a href="#操作HTML元素对象的内容和样式" class="headerlink" title="操作HTML元素对象的内容和样式"></a>操作HTML元素对象的内容和样式</h5><ul>
<li>元素内容<ul>
<li>获取元素对象</li>
<li>获取元素内容<br>对象名.innerHTML;                     返回当前元素对象的所有内容，包括HTML标签<br>对象名.innerText;                        返回当前元素对象的文本内容，不包括HTML标签</li>
<li>修改元素内容<br>对象名.innerHTML=””;                                      会将原有内容覆盖，且HTML标签会被执行<br>对象名.innerHTML=对象名.innerHTML+””;   不会将原有内容覆盖，且HTML标签会被执行<br>对象名.innerText=””;                                         会将原有内容覆盖，但HTML标签不会被执行，会作为普通文本显示</li>
</ul>
</li>
<li><p>元素样式(实际相当于操作元素属性)</p>
<ul>
<li>style属性</li>
<li><p>添加/修改元素样式</p>
<pre><code> 元素对象名.style.样式名=&quot;样式值&quot;;     样式名为css样式名去-且驼峰命名原则
</code></pre></li>
<li><p>删除</p>
<p>   元素对象名.style.样式名=””;<br>   注意：以上操作，操作的是HTML的style属性声明中的样式，而不是其他css代码域中的样式    </p>
</li>
</ul>
<ul>
<li>class属性<br>元素对象名.className=”新的值”   添加/修改/删除类选择器样式           <h5 id="操作HTML的文档结构"><a href="#操作HTML的文档结构" class="headerlink" title="操作HTML的文档结构"></a>操作HTML的文档结构</h5>增加节点：将innerHTML直接置空<br>删除节点</li>
</ul>
</li>
<li><p>使用innerHTML(适用下拉框内容填充)<br>div.innerHTML=div.innerHTML+’内容’;   增加节点<br>div.innerHTML=””;                                      删除所有子节点<br>父节点.removeChild(子节点对象)              删除指定子节点</p>
</li>
<li><p>使用document<br>var obj=document.createElement(“标签名”);<br>元素对象名.appendChild(obj);        添加<br>元素对象名.removeChild(obj);        删除</p>
</li>
</ul>
<h5 id="document操作form元素"><a href="#document操作form元素" class="headerlink" title="document操作form元素"></a>document操作form元素</h5><ul>
<li>获取form表单对象   (form 标签 id=”frm” name=”frm”)<br>  使用id： var fm=document.getElementById(“fm”);<br>  使用name属性: var frm=document.frm;</li>
<li>获取form表单的所有子元素标签<br>  表单对象.elements</li>
<li>form表单的常用方法<br>  表单对象.submit();         提交<br>  表单对象.reset();            重置</li>
<li>form的属性操作<br>  表单对象名.action=”新的值”      动态的改变数据的提交路径<br>  表单对象名.method=”新的值”   动态的改变数据的提交方式</li>
<li>表单元素的通用属性<br>  只读模式        readonly=”readonly”       不可以更改，但是数据可以提交<br>  关闭模式        disabled=”disabled”        不可进行任何操作，数据不会提交</li>
<li><p>操作表单元素</p>
<ul>
<li><p>多选框、单选框    </p>
<p>被选中状态在js中checked属性值为true，未选中为false</p>
</li>
<li><p>下拉框</p>
<p>被选择的option对象在js中selected属性值为true，未选中为false（select对象.options返回一个option数组）</p>
</li>
</ul>
</li>
</ul>
<h5 id="document对象实现form表单校验-验证码、用户名"><a href="#document对象实现form表单校验-验证码、用户名" class="headerlink" title="document对象实现form表单校验(验证码、用户名)"></a>document对象实现form表单校验(验证码、用户名)</h5><ul>
<li><p>创建验证码</p>
<ul>
<li><p>创建随机四位数字</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> code=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">9000</span>+<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将数字放在span中</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"span"</span>);</span><br><span class="line">span.innerHTML=code;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>验证(用户名   id=”uname”)<br>   封装校验…相同的保留，不同的传参</p>
<ol>
<li><p>获取用户名信息</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uname=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>).value;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建检验规则——-正则表达式</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>;      <span class="comment">//用户名：2-4个汉字</span></span><br><span class="line">/^[a-z]\w&#123;<span class="number">5</span>,<span class="number">7</span>&#125;$/;                      <span class="comment">//密码：字母打头后5-7位数字</span></span><br><span class="line">/^<span class="number">1</span>[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]\d&#123;<span class="number">9</span>&#125;$/;               <span class="comment">//手机号检验：1开头，第二位为[3,4,5,6,7,8]，共11位</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>获取span对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"unameSpan"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始校验</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(uname==<span class="string">""</span>||uname==<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">//输出校验结果</span></span><br><span class="line">    span.innerHTML=<span class="string">"用户名不能为空"</span>;</span><br><span class="line">    span.style.color=<span class="string">"red"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(reg.test(uname))&#123;</span><br><span class="line">    <span class="comment">//输出校验结果</span></span><br><span class="line">    span.innerHTML=<span class="string">"用户名可用"</span>;</span><br><span class="line">    span.style.color=<span class="string">"green"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//输出校验结果</span></span><br><span class="line">    span.innerHTML=<span class="string">"用户名不符合规范"</span>;</span><br><span class="line">    span.style.color=<span class="string">"red"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交判断：form  onchanged属性          </p>
</li>
</ul>
<h5 id="document操作表格"><a href="#document操作表格" class="headerlink" title="document操作表格"></a>document操作表格</h5><h6 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delRow</span>(<span class="params">btn</span>)</span>&#123;                                </span><br><span class="line">    <span class="keyword">var</span> table=<span class="built_in">document</span>.getElementById(<span class="string">""</span>);  <span class="comment">//获取表格table对象</span></span><br><span class="line">    <span class="keyword">var</span> tr=btn.parentNode.parentNode;       <span class="comment">//获取要删除的行号</span></span><br><span class="line">    table.deleteRow(tr.rowIndex);           <span class="comment">//tr.rowIndex返回行对象的角标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="修改行功能"><a href="#修改行功能" class="headerlink" title="修改行功能"></a>修改行功能</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateRow</span>(<span class="params">btn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tr=btn.parentNode.parentNode;   <span class="comment">//获取表格table对象</span></span><br><span class="line">    <span class="keyword">var</span> cell=tr.cell[];					<span class="comment">//获取行对象</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(cell.innerHTML))&#123;			<span class="comment">//判断cell.innerHTML的值是否为数字(修复修改功能的bug)</span></span><br><span class="line">        <span class="comment">//修改行内容</span></span><br><span class="line">        cell.innerHTML=<span class="string">"&lt;input type='text'"</span>+cell.innerHTML+<span class="string">"onblur='updateInp(this)'"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uodateInp</span>(<span class="params">inp</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cell=inp.parentNode;</span><br><span class="line">    cell.innerHTML=inp.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="选择删除指定行功能"><a href="#选择删除指定行功能" class="headerlink" title="选择删除指定行功能"></a>选择删除指定行功能</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> table=<span class="built_in">document</span>.getElementById(<span class="string">""</span>);    <span class="comment">//获取表格对象</span></span><br><span class="line"><span class="keyword">var</span> checks=<span class="built_in">document</span>.getElementsByName(<span class="string">""</span>);<span class="comment">//获取要删除的行号</span></span><br><span class="line"><span class="comment">//开始删除</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;checks.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(check[i].checked)&#123;</span><br><span class="line">        table.deleteRow(i);</span><br><span class="line">        i--;    <span class="comment">//数组的length值动态变化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> table=<span class="built_in">document</span>.getElementById(<span class="string">""</span>);    <span class="comment">//获取表格对象</span></span><br><span class="line"><span class="keyword">var</span> tr=table.insertRow(<span class="number">1</span>);                <span class="comment">//添加行</span></span><br><span class="line"><span class="keyword">var</span> cell=tr.insertCell(<span class="number">0</span>);                <span class="comment">//添加单元格</span></span><br><span class="line">cell.innerHTML=<span class="string">""</span>;                        <span class="comment">//单元格内容</span></span><br></pre></td></tr></table></figure>
<h6 id="复制行"><a href="#复制行" class="headerlink" title="复制行"></a>复制行</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> table=<span class="built_in">document</span>.getElementById(<span class="string">""</span>);            <span class="comment">//获取表格对象</span></span><br><span class="line"><span class="keyword">var</span> checks=<span class="built_in">document</span>.getElementsByName(<span class="string">""</span>);        <span class="comment">//获取选择行对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;checks.length;i++)&#123;                 <span class="comment">//i=1;保留表头</span></span><br><span class="line">    <span class="keyword">if</span>(checks[i].checked)&#123;</span><br><span class="line">        <span class="keyword">var</span> tr=table.insertRow(table.rows.length);</span><br><span class="line">        tr.innerHTML=table.rows[i].innerHTML;     <span class="comment">//复制行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="全选：用一个radio操作多个单选框-name相同"><a href="#全选：用一个radio操作多个单选框-name相同" class="headerlink" title="全选：用一个radio操作多个单选框(name相同)"></a>全选：用一个radio操作多个单选框(name相同)</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chekedAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> check=<span class="built_in">document</span>.getElementById(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">var</span> chks=<span class="built_in">document</span>.getElementsByName(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span>(check.checked)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;chks.length;i++)&#123;</span><br><span class="line">            chks[i].checked=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;chks.length;i++)&#123;</span><br><span class="line">            chks[i].checked=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    </p>
]]></content>
      <categories>
        <category>notes</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>html基础</title>
    <url>/articles/1a147173.html</url>
    <content><![CDATA[<h4 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>网页标题标签</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span> HTML5网页解析编码格式配置</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span>  <span class="attr">content</span>=<span class="string">"text/html; charset</span></span></span><br><span class="line"><span class="tag"><span class="string">=utf-8"</span>/&gt;</span>HTML4文档编码格式设置</span><br></pre></td></tr></table></figure>
<p>搜索优化标签：关键字、网页描述、作者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"关键字，关键字"</span>/&gt;</span>	网页关键字</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"描述"</span>/&gt;</span>		网页描述</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"人名"</span>/&gt;</span>	网页作者</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span>  <span class="attr">content</span>=<span class="string">"5(秒数) ; url= (网址)"</span>&gt;</span>	设置网页自动跳转</span><br></pre></td></tr></table></figure>
<p>其他：css引入标签，js引入标签</p>
<a id="more"></a>
<h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h(序号)</span> &gt;</span> <span class="tag">&lt;/<span class="name">h(序号)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>h1到h6：数据加粗显示，显示依次减弱，标题标签自动换行(属于块级标签)</p>
<p>属性 align：center，left，right    设置位置（对齐）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>  水平线 默认居中</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">"600px"</span> <span class="attr">size</span>=<span class="string">"20px"</span> <span class="attr">color</span>=<span class="string">" "</span> <span class="attr">align</span>=<span class="string">" "</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>width：水平线宽度</p>
</li>
<li><p>size：水平线高度</p>
</li>
<li><p>color：水平线颜色</p>
</li>
<li><p>align：水平线位置</p>
</li>
</ul>
<p>像素单位(px)：占据电脑屏幕的大小</p>
<p>百分比单位(%)：占据浏览器比例的大小</p>
<h4 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h4><p>段落标签 p：会将一段数据作为整体进行显示，主要是进行css和js操作时比较方便，会自动换行(块级标签)</p>
<ul>
<li>特点：段与段的间距比较大</li>
</ul>
<p>换行符：br 告诉浏览器此位置进行换行    </p>
<p>空格符：&amp;nbsp 告诉浏览器在此位置增加空格</p>
<p>权重标签:</p>
<ul>
<li>b 会将内容加黑显示</li>
<li>i 会将内容斜体显示</li>
<li>u 会将内容增加下划线</li>
<li>del 增加中划线</li>
</ul>
<p>(以上不会自动换行可嵌套使用)</p>
<h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ol>
<li><p>无序列表 </p>
<p>ul    li 该标签中书写列表内容，一个li标签代表列表中的一行数据</p>
<p>特点：默认数据前有一个黑圆圈</p>
</li>
<li><p>有序列表 </p>
<p>ol   li 该标签中书写列表内容，一个li标签代表列表中的一行数据</p>
<p>特点：会自动的给列表进行顺序编码，格式从小到大并且是连续的</p>
<p>属性：type 可以改变顺序编码的值，可以是1，A，a，Ⅰ默认使用阿拉伯数字进行顺序编码</p>
</li>
<li><p>自定义列表</p>
<p>dl  dt数据的标题</p>
<p>dd数据的具体内容，一个dd表示一条数据</p>
</li>
</ol>
<h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><p>img 图片资源：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">本地资源 <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.png "</span> <span class="attr">width</span>=<span class="string">" px"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">网络资源<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">" URL "</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>src 图片路径：</p>
<ul>
<li>相对路径 从当前文件出发查找另一个文件所经过的路径</li>
<li>绝对路径 从根盘符出发所查找文件的路径</li>
</ul>
<p>属性：</p>
<ul>
<li>width 设置图片的宽度，如果是单独设置，则在图片保证不失真的情况下自动缩小或放大，单位可以是px也可以是百分比 </li>
<li>height 设置图片的高度</li>
<li>title 设置图片标题，鼠标放在图片上的时候显示</li>
<li>alt 图片加载失败显示</li>
</ul>
<font color="#f00">图片不会自动换行(图片属于行内元素)</font>

<h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><p>a标签   href 要跳转的网页资源路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">本地资源       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"路径"</span>/&gt;</span>文字描述<span class="tag">&lt;/<span class="name">a</span>&gt;</span>		相对路径或绝对路径</span><br><span class="line"></span><br><span class="line">网络资源      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"URL"</span>/&gt;</span>文字描述<span class="tag">&lt;/<span class="name">a</span>&gt;</span>        网络资源(网页)的URL，以http://...</span><br></pre></td></tr></table></figure>
<p>属性：target =”_” 指明要跳转的网页资源的显示位置</p>
<ul>
<li>_self在当前页中刷新显示</li>
<li>_blank在新的标签页中显示</li>
<li>_top在顶层页面中显示</li>
<li>_parent在父级页面中显示</li>
</ul>
<font color="#f00">超链接标签中一定要声明访问方式，可以是文字也可以是图片</font>

<h5 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h5><p>作用：在一张网页中进行资源跳转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">使用：先使用超链接标签在指定的网页位置增加锚点              格式为<span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span> =<span class="string">"锚点名"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">再使用a标签可以跳转指定的锚点，达到网页内部资源跳转的目的    格式为<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">"#锚点名"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">回到网页顶部   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">"#"</span>&gt;</span>文字描述<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><p>table</p>
<ul>
<li>tr 声明一行</li>
<li>th声明一个单元格，表头格，默认居中加黑显示</li>
<li>td声明一个单元格，默认局左显示原始数据</li>
</ul>
<font color="#f00">行高即改行所有单元格的宽度，单元格的宽度即列宽</font>

<p>属性：</p>
<ul>
<li>border 给表格添加边框</li>
<li>width 设置表格的宽度</li>
<li>height 设置表格的高度</li>
<li>cellpadding 设置内容居边框的距离</li>
<li>cellspacing 设置边框的大小(以上单位均为px)</li>
<li>colspan=”个数” 合并左右单元格(实现行合并)</li>
<li>rowspan=”个数” 合并上下单元格(实现列合并)</li>
</ul>
<p>特点：默认根据数据的多少进行表格的大小显示</p>
<p>单元格的合并</p>
<ol>
<li><p>首先确保表格是一个规整的表格</p>
</li>
<li><p>根据要合并的单元格，找到其所在的源码位置</p>
</li>
<li><p>行合并：在要合并的单元格的第一个单元格使用其属性colspan，并删除其要合并的单元格</p>
<p>列合并：在要合并的单元格的任一个单元格使用其属性rowspan，并删除其要合并的单元格</p>
</li>
</ol>
<h4 id="内嵌标签"><a href="#内嵌标签" class="headerlink" title="内嵌标签"></a>内嵌标签</h4><p>iframe </p>
<p>src：要显示的网页资源路径(本地资源or网络资源)</p>
<p>​        默认当前页面打开及加载src指向的资源</p>
<p>width：设置显示区域的宽度</p>
<p>height：设置显示区域的高度</p>
<p>name：设置内嵌区域的名字，结合超链接标签的target属性使用</p>
<font color="#f00">作用 在当前网页中加载其他网页的资源，达到不同网页资源之间不相互干扰，并能在同一个页面中展现给用户的目的。</font>

<h4 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h4><p>frameset</p>
<p>rows：按照行进行切分页面</p>
<p>cols：按照列进行切分页面</p>
<p>子标签frame：进行分区域的占位，一个frame可以单独加载网页资源</p>
<p> 属性：</p>
<ul>
<li>src：资源路径 (本地资源or网络资源)</li>
<li>name：区域名</li>
</ul>
<font color="#ff0000">构建frameset，一定要删除body标签</font>

<h4 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h4><p>form表单标签</p>
<p>作用：收集并提交用户的数据给指定服务器</p>
<p>属性：</p>
<p>action：收集的数据提交地址(URL)</p>
<p>method：收集的数据的提交方式</p>
<ul>
<li>get：适合小量数据，表单数据以？隔开拼接在URL后面，不同键值对使用&amp;符号隔开，不安全</li>
<li>post：适合大量数据，安全，隐式提交</li>
</ul>
<font color="#f00">表单数据的提交，要提交的表单项必须拥有name属性值，否则不会提交。提交的表单数据为键值对，键为name属性的值，值为用户书写的数据</font>

<font color="#f00">form标签会收集其标签内部的数据</font>

<font color="#f00">form表单的数据提交需要依赖于submit提交按钮</font>

<font color="#f00">表单数据提交的是表单域标签的value值</font>

<p>form表单标签的使用：在点击数据提交时，form标签会将其内部所有form表单域标签中用户书写的数据按照method指明的提交方式提交给action属性所指明的提交地址</p>
<p>form表单域标签</p>
<p>作用：给用户提供可以进行数据书写或者选择的标签</p>
<p>使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--账号密码的提交--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="文本框：input"><a href="#文本框：input" class="headerlink" title="文本框：input"></a>文本框：input</h6><ul>
<li><p>type：</p>
<ul>
<li>text  收集少量文本数据，用户可见</li>
<li>password 收集用户密码数据</li>
</ul>
</li>
<li><p>name：数据提交的键，也会被js使用</p>
</li>
<li><p>value：默认值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="单选框：input"><a href="#单选框：input" class="headerlink" title="单选框：input"></a>单选框：input</h6><p>type：<code>radio</code></p>
<ul>
<li><p>name：属性值相同的单选框只能选择一项数据</p>
</li>
<li><p>value：要提交的数据</p>
</li>
<li><p>checked：使用此属性的单选默认是选择状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">checked</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="多选框：input"><a href="#多选框：input" class="headerlink" title="多选框：input"></a>多选框：input</h6><p>type：<code>checkbox</code></p>
<ul>
<li>name：一个多远组需要使用相同的name属性值</li>
<li>value：要提交的数据</li>
<li>checked：使用此属性的多选框默认是选择状态</li>
</ul>
<h6 id="下拉框：select"><a href="#下拉框：select" class="headerlink" title="下拉框：select"></a>下拉框：select</h6><p>name：数据提交的键名，必须声明</p>
<p>子标签 option：一个option标签表示一个下拉选项   </p>
<p>value：要提交的数据</p>
<h6 id="文本域-input"><a href="#文本域-input" class="headerlink" title="文本域 input"></a>文本域 input</h6><p> textarea：声明一个可以书写大量文字的文本区域</p>
<p> name：数据提交的键名，js和css会使用</p>
<p> rows：声明文本框的行数</p>
<p> cols：声明文本框的列数</p>
<h6 id="普通按钮-input"><a href="#普通按钮-input" class="headerlink" title="普通按钮: input"></a>普通按钮: input</h6><p>type：button</p>
<p>value 按钮显示的文字内容</p>
<h6 id="隐藏标签-input"><a href="#隐藏标签-input" class="headerlink" title="隐藏标签 input"></a>隐藏标签 input</h6><p>type：hidden</p>
<p>name</p>
<p>value</p>
<p>一般用于提交给服务器作为方法标识，不显示在网页上。</p>
<h4 id="编译预显示"><a href="#编译预显示" class="headerlink" title="编译预显示"></a>编译预显示</h4><p>将源代码显示在浏览器页面中  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span>浏览预显示</span><br><span class="line"><span class="tag">&lt;&gt;</span>需要进行替换，否则浏览器会编译执行</span><br><span class="line"><span class="tag">&lt;     &amp;<span class="attr">lt</span>   尖括号不会被编码</span></span><br><span class="line"><span class="tag">&gt;</span>     &amp;gt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据结构与算法--串</title>
    <url>/articles/7e56a691.html</url>
    <content><![CDATA[<p>内容受限的线性表</p>
<h4 id="串的定义"><a href="#串的定义" class="headerlink" title="串的定义"></a>串的定义</h4><p>串(String)：零个或多个任意字符组成的有限序列</p>
<ul>
<li>串名</li>
<li>串值</li>
<li>串长</li>
</ul>
<h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><h6 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h6><p>一个串中任意个连续字符组成的<strong>子序列</strong>（含空串）称为该串的子串</p>
<p>真子串：不包含自身的所有子串</p>
<h6 id="主串"><a href="#主串" class="headerlink" title="主串"></a>主串</h6><p>包含子串的串称为主串</p>
<h6 id="字符位置"><a href="#字符位置" class="headerlink" title="字符位置"></a>字符位置</h6><p>字符在序列中的序号为该字符在串中的位置</p>
<h6 id="子串位置"><a href="#子串位置" class="headerlink" title="子串位置"></a>子串位置</h6><p>子串第一个字符在主串中的位置</p>
<h6 id="空格串"><a href="#空格串" class="headerlink" title="空格串"></a>空格串</h6><p>由一个或多个空格组成的串（与空串不同）</p>
<h6 id="串相等"><a href="#串相等" class="headerlink" title="串相等"></a>串相等</h6><p>当且仅当两个串的长度相等并且各个对应位置上的字符都相同时，这两个串才是相等的</p>
<p>注：所有空串都是相等的</p>
<h5 id="串的类型定义"><a href="#串的类型定义" class="headerlink" title="串的类型定义"></a>串的类型定义</h5><p>数据对象：D={a<sub>i</sub> | a<sub>i</sub>∈ CharacterSet, i = 1,2,…n}</p>
<p>数据关系：R<sub>1</sub>={<a<sub>i-1&lt;/sub&gt;,a<sub>i</sub>&gt;|a<sub>i-1</sub>,a<sub>i</sub> ∈ D , i = 1,2,…,n}</p>
<a id="more"></a>
<h4 id="串的存储结构"><a href="#串的存储结构" class="headerlink" title="串的存储结构"></a>串的存储结构</h4><h6 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h6><p>顺序串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[n] strings;	<span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">int</span> length;	<span class="comment">//串长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h6><p>链串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据域：每个结点存储n个字符</span></span><br><span class="line"><span class="comment">//指针域：存储下一个结点的地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[n] data;	<span class="comment">//数据--n个字符</span></span><br><span class="line">    Node next;	<span class="comment">//直接后继</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span>&#123;</span><br><span class="line">    Node head;	<span class="comment">//头结点</span></span><br><span class="line">    Node tail;	<span class="comment">//尾结点</span></span><br><span class="line">    <span class="keyword">int</span> length; <span class="comment">//串长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>存储密度 = (串值所占的内存) / 实际分配的内存</p>
<h4 id="串的基本操作"><a href="#串的基本操作" class="headerlink" title="串的基本操作"></a>串的基本操作</h4><p>详细代码见String源码 <a href="https://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">Java API文档</a></p>
<ul>
<li><p>串赋值 </p>
<p><code>String str = &quot;content&quot;;</code></p>
<p><code>String str = new String(&quot;content&quot;);</code></p>
</li>
<li><p>串比较 </p>
<p><code>str.compareTo(String anotherString)</code></p>
</li>
<li><p>求串长</p>
<p><code>int len = str.length();</code></p>
</li>
<li><p>串连结 </p>
<p><code>String newString=str.concat(String anotherString);</code></p>
</li>
<li><p>求子串 </p>
<p><code>String seq = str.substring( int beginIndex);</code></p>
<p><code>String seq = str.substring( int beginIndex, int endIndex);</code></p>
</li>
<li><p>串拷贝 </p>
<p><code>String s = String.copyValueOf(str);</code></p>
</li>
<li><p>串判空 </p>
<p><code>boolean empty = str.isEmpty();</code></p>
</li>
<li><p>子串的位置</p>
<p><code>int index = str.indexOf(char seq)</code></p>
<p><code>int index = str.indexOf(String seq);</code></p>
</li>
<li><p>串替换 </p>
<p><code>String seq = str.replace();</code></p>
</li>
</ul>
<h4 id="串的匹配模式算法"><a href="#串的匹配模式算法" class="headerlink" title="串的匹配模式算法"></a>串的匹配模式算法</h4><p>确定主串中所含子串(模式串)第一次出现的位置</p>
<h5 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h5><p>简单匹配算法 Brute-Force(暴力算法) 采用的是<strong>穷举法</strong></p>
<h6 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h6><p>从主串的每一个字符开始依次与模式串的字符进行匹配</p>
<p>如果当前字符匹配成功，则继续匹配</p>
<p>如果匹配失败，回溯，从主串该次匹配成功的第一个字符的下一个字符开始直到模式串</p>
<h6 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串匹配--暴力算法</span></span><br><span class="line"><span class="comment"> * 时间复杂度：O(n*m)	//m为主串长度，n为模式串长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text      主串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern   模式串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 匹配成功返回模式串第一次出现的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexByBruteForce</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sLen = text.length();       <span class="comment">//主串字符长度</span></span><br><span class="line">    <span class="keyword">int</span> pLen = pattern.length();    <span class="comment">//模式串字符长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] s = text.toCharArray();      <span class="comment">//主串字符</span></span><br><span class="line">    <span class="keyword">char</span>[] p = pattern.toCharArray();   <span class="comment">//模式串字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sLen &lt; pLen)    <span class="comment">//主串长度比模式串长度小，直接返回不匹配</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">//主串指针位置</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;  <span class="comment">//模式串指针位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen) &#123;</span><br><span class="line">	<span class="comment">//while (i &lt; sLen &amp;&amp; j &lt; pLen &amp;&amp; sLen - i + j &gt;= pLen) &#123;  // 优化sLen - i + j &gt;= pLen保证主串有剩余字符能匹配成功</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j]) &#123;   <span class="comment">//如果当前字符匹配成功，则继续匹配</span></span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">//如果失配，回溯</span></span><br><span class="line">            i = i - (j - <span class="number">1</span>);    <span class="comment">//从该次匹配成功的第一个字符的下一个字符开始</span></span><br><span class="line">            j = <span class="number">0</span>;              <span class="comment">//从第一个字符开始</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//匹配成功返回第一个字符的位置，匹配不成功，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> j == pLen ? i - j : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> index = indexByBruteForce(<span class="string">"this is for test"</span>, <span class="string">"test"</span>);</span><br><span class="line">System.out.println(index);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h5 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h5><p>Knuth Morris Pratt</p>
<h6 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h6><p>利用已经部分匹配的结果加快模式串的滑动速度，且主串s的指针i不必回溯</p>
<p>在<strong>已经匹配的模式串的子串</strong>中，找出最长的相同的前缀和后缀，然后移动使它们重叠，定义next[j]数组，表明当模式中第j个字符与主串中相应字符，不匹配时，在模式中需要重新和主串中该字符进行比较的字符的位置</p>
<script type="math/tex; mode=display">
next[j]={\begin{cases}max\{k|1<k<j,且P_1...P_{k-1} = P_{j-k+1}...P_{j-1}\} & 集合为空\\
0 & j=1    \\
1 & 其他情况
\end{cases}}</script><p>时间复杂度：O(m+n)</p>
<p>可参考资料：<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html" target="_blank" rel="noopener">字符串匹配的KMP算法—阮一峰</a></p>
<h6 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h6><p>在next[j]数组的基础上引入nextval[j]数组</p>
<p>nextval[j]数组</p>
<script type="math/tex; mode=display">
nextval[j]=\begin{cases}next[j]的next值 & 当前元素的符号与第next[j]的元素符号相同(循环比较直至不相同)\\
next[j]\end{cases}</script><p>nextval[j]数组：相同填next值对应的比较后的值，不同为自己的next值</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">模式串</td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">a</td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center">next值</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">nextval值</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
</div>
<h6 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text 主串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern 模式串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果匹配成功，返回下标，否则返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (text.length() &lt; pattern.length() || pattern.length() == <span class="number">0</span> || <span class="keyword">null</span> == pattern) <span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//求模式串的next数组</span></span><br><span class="line">    <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()];</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, k = -<span class="number">1</span>; i &lt; pattern.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == -<span class="number">1</span> || pattern.charAt(i - <span class="number">1</span>) == pattern.charAt(k)) &#123;</span><br><span class="line">            k++;</span><br><span class="line">            next[i] = k;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next[i] = <span class="number">0</span>;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行匹配</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; text.length(); ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.charAt(i) != pattern.charAt(j)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next[j] == -<span class="number">1</span>)</span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                j = next[j];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == pattern.length() - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i - pattern.length() + <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> index = KMP(<span class="string">"this is for test"</span>, <span class="string">"test"</span>);</span><br><span class="line">System.out.println(index);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>串</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据结构与算法--图</title>
    <url>/articles/c88bf7ec.html</url>
    <content><![CDATA[<h4 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h4><h6 id="图的基本概念：多对多关系"><a href="#图的基本概念：多对多关系" class="headerlink" title="图的基本概念：多对多关系"></a>图的基本概念：多对多关系</h6><p>图(<code>graph</code>)是一种网状数据结构，图是由非空的顶点集合和一个描述之间关系的集合组成</p>
<p>形式化定义：</p>
<ul>
<li><p>Graph = (V,E)  </p>
</li>
<li><p>V={x | x∈某个数据对象}  </p>
</li>
<li><p>E={<u,v> | P(u,v)^(u,v∈V)}</p>
<p>V是具有相同特性的数据元素的集合，V中数据元素通常称为顶点(Vertex)</p>
<p>E是两个顶点之间的集合，P(u,v)表示u和v之间有特定的关联属性</p>
</li>
<li><p>若<u,v>∈E，则<u,v>表示从顶点u到顶点v的一条弧，并称u为弧尾或起始点，称v为弧头或终止点，此时图的顶点之间的连线是有方向的，称之为<strong>有向图</strong>(<code>directed graph</code>)</p>
</li>
<li>若<u,v>∈E，则必有<v,u>∈E，即关系是对称的，此时可以使用一个无序对(u,v)来代替两个有序对，它表示顶点u和顶点v之间的一条边，此时图中顶点之间的连线是没有方向的，称之为<strong>无向图</strong>(<code>undirected graph</code>)</li>
</ul>
<a id="more"></a>
<p>在无向图和有向图中V的元素都称为顶点，而顶点之间的关系却又不同的称谓，即<strong>弧</strong>或<strong>边</strong>，在不影响理解的前提下，统称为<strong>边</strong>(<code>edge</code>)</p>
<p>顶点集与边集都是有限的，并记顶点与边的数量为|V|和|E|</p>
<p><img data-src="https://i.loli.net/2020/04/11/gLHlX3bun8zMKOc.png" alt="有向图与无向图.png"></p>
<p>无向图实际上也是有向图，是双向图</p>
<hr>
<p>带权图：图的每条边都与它相关的实数，称之为权，这些权值可以并表示一个顶点到另一个顶点的距离或消耗等信息，这种边上具有权值的图称为<strong>带权图</strong>(<code>weighted graph</code>)</p>
<p><img data-src="https://i.loli.net/2020/04/11/IVHT4lDUem3WJnC.png" alt="加权图.png"></p>
<h4 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h4><h6 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h6><p>二维数组（顺序存储结构），无向图关于对角线对称</p>
<p><img data-src="https://i.loli.net/2020/04/11/gfWwLFYU1rIuy9d.png" alt="图的存储-邻接矩阵.png"></p>
<h6 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h6><p>链表（链式存储结构）</p>
<p><img data-src="https://i.loli.net/2020/04/11/PGmLUVzS4YaNoTk.png" alt="图的存储-邻接表.png"></p>
<h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><p>图的遍历：从图中某个顶点出发，按某种方法对图中所有顶点访问且仅访问一次</p>
<p>图的遍历算法是求解图的连通性问题、拓扑排序和求关键路径等算法的基础</p>
<ul>
<li><strong>深度优先排序</strong>(DFS depth-first search)：类似于树的先根排序，是树的先根遍历的推广（可采用递归和借助栈的非递归方式实现）</li>
<li><strong>广度优先排序</strong>(BFS breadth-first search)：类似于树的层次遍历，是树的按层次遍历的推广（借助队列的非递归方式实现）</li>
</ul>
<p><img data-src="https://i.loli.net/2020/04/11/CAftQBO9Rzvrlaq.png" alt="图的遍历-图例.png"></p>
<ul>
<li>无向图的深度优先遍历：0-&gt;1-&gt;3-&gt;7-&gt;4-&gt;2-&gt;5-&gt;6</li>
<li>无向图的广度优先遍历：0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7</li>
</ul>
<p><img data-src="https://i.loli.net/2020/04/11/eU6MfF7P9EnOpAu.png" alt="图的遍历-图例2.png"></p>
<ul>
<li>无向图的深度优先遍历：A-&gt;B-&gt;E-&gt;F-&gt;C-&gt;D-&gt;G-&gt;H-&gt;I</li>
<li>无向图的广度优先遍历：A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G-&gt;H-&gt;I</li>
</ul>
<h4 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h4><h6 id="最短路径概念"><a href="#最短路径概念" class="headerlink" title="最短路径概念"></a>最短路径概念</h6><p>带权图两点之间的最小消耗路径</p>
<ul>
<li><p><strong>段数最少的最短路径</strong>：类似于树的层次遍历，需要借助队列来实现（广度优先搜索）</p>
<p>算法：对于已经检查过结点，标记为已检查，且不再检查它，可以使用另一个列表存放已经检查过的结点，找到即为可达，第一次找到，即为跳转最少，如果到最后队列为空，则表明没有路径可以到达</p>
</li>
<li><p><strong>权值最小的最短路径</strong>：权值之和最小，狄克斯特拉算法</p>
<p>狄克斯特拉算法是从一个顶点到其余各顶点的最短路径算法，解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是从起始点开始，采用贪心算法的策略，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。</p>
</li>
</ul>
<h4 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h4><h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h6><p>该算法复杂度为$n^2$,我们可以发现，如果边数远小于$n^2$,对此可以考虑用堆这种数据结构进行优化，取出最短路径的复杂度降为O(1)；每次调整的复杂度降为$O（e log_2 n）$；e为该点的边数，所以复杂度降为$O((m+n)log_2 n)$。</p>
<h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><ul>
<li>将源点加入堆，并调整堆</li>
<li>选出堆顶元素u（即代价最小的元素），从堆中删除，并对堆进行调整</li>
<li>处理与u相邻的，未被访问过的，满足三角不等式的顶点</li>
<li>若该点在堆里，更新距离，并调整该元素在堆中的位置</li>
<li>若该点不在堆里，加入堆，更新堆</li>
<li>若取到的u为终点，结束算法；否则重复步骤2、3</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设起点为src, 终点为dst, 图以二维矩阵的形式存储，若graph[i][j] == 0, 代表i,j不相连    </span></span><br><span class="line"><span class="comment">//visit[i] == 0,代表未访问,visit[0] == -1代表已访问    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span>[][] graph,<span class="keyword">int</span>[] visit)</span></span>&#123;</span><br><span class="line">    <span class="comment">//节点个数        </span></span><br><span class="line">    <span class="keyword">int</span> n = graph.length;        </span><br><span class="line">    PriorityQueue&lt;Node&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Node());        </span><br><span class="line">    <span class="comment">//将起点加入pq        </span></span><br><span class="line">    pq.add(<span class="keyword">new</span> Node(src, <span class="number">0</span>));        </span><br><span class="line">    <span class="keyword">while</span> (!pq.isEmpty())&#123;            </span><br><span class="line">        Node t = pq.poll();            </span><br><span class="line">        <span class="comment">//当前节点是终点，即可返回最短路径            </span></span><br><span class="line">        <span class="keyword">if</span>(t.node == dst)                </span><br><span class="line">            <span class="keyword">return</span> t.cost;            </span><br><span class="line">        <span class="comment">//t节点表示还未访问            </span></span><br><span class="line">        <span class="keyword">if</span> (visit[t.node]==<span class="number">0</span>)&#123;                </span><br><span class="line">            <span class="comment">//将节点设置为已访问                </span></span><br><span class="line">            visit[t.node] = -<span class="number">1</span>;                </span><br><span class="line">            <span class="comment">//将当前节点相连且未访问的节点遍历                </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;                    </span><br><span class="line">                <span class="keyword">if</span> (graph[t.node][i]!=<span class="number">0</span> &amp;&amp; visit[i]==<span class="number">0</span>) &#123;                        </span><br><span class="line">                    pq.add(<span class="keyword">new</span> Node(i, t.cost + graph[t.node][i]));                    </span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">//定义一个存储节点和离起点相应距离的数据结构    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Node</span>&gt; </span>&#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> node;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> cost;</span><br><span class="line">             </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> cost)</span></span>&#123;            </span><br><span class="line">        <span class="keyword">this</span>.node = node;            </span><br><span class="line">        <span class="keyword">this</span>.cost = cost;        </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="meta">@Override</span>        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node node1, Node node2)</span></span>&#123;            </span><br><span class="line">        <span class="keyword">return</span> node1.cost-node2.cost;       </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据结构与算法--排序</title>
    <url>/articles/765a6dde.html</url>
    <content><![CDATA[<h4 id="排序基本概念"><a href="#排序基本概念" class="headerlink" title="排序基本概念"></a>排序基本概念</h4><h6 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h6><p>排序是将一个数据元素的任意序列，重新排列成一个按关键字有序的序列</p>
<h6 id="内部排序和外部排序"><a href="#内部排序和外部排序" class="headerlink" title="内部排序和外部排序"></a>内部排序和外部排序</h6><p>内部排序：整个排序过程在内存储器中进行</p>
<p>外部排序：待排序元素量太大，内存储器无法容纳全部数据，排序需要借助外部存储设备才能完成</p>
<h6 id="稳定排序和不稳定排序"><a href="#稳定排序和不稳定排序" class="headerlink" title="稳定排序和不稳定排序"></a>稳定排序和不稳定排序</h6><p>如果在待排序的序列中存在多个具有相同关键字的元素</p>
<p>假设K<sub>i</sub>=K<sub>j</sub> { 1≤i≤n，1≤j≤n，i≠j }，排序前序列中的R<sub>i</sub>在R<sub>j</sub>之前，经过排序后得到的序列R<sub>i</sub>仍在R<sub>j</sub>之前，则称所用排序方法是<strong>稳定的</strong>，反之则是<strong>不稳定的</strong></p>
<h6 id="比较排序和非比较排序"><a href="#比较排序和非比较排序" class="headerlink" title="比较排序和非比较排序"></a>比较排序和非比较排序</h6><p>大部分排序需要通过比较来判断大小，作为排序的依据，而计数排序、基数排序不需要进行比较</p>
<h6 id="其他排序"><a href="#其他排序" class="headerlink" title="其他排序"></a>其他排序</h6><ul>
<li>插入排序：将无序子序列中的一个或几个记录“插入”到有序序列中，从而增加记录的有序子序列的长度</li>
<li>交换排序：通过“交换”无序序列中的记录从而得到其中关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度</li>
<li>选择排序：从记录的无序子序列中“选择”关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度</li>
<li>归并排序：通过“归并”两个或两个以上的记录有序子序列，逐步增加记录有序序列的长度</li>
</ul>
<a id="more"></a>
<h4 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><h6 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h6><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ul>
<h6 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 冒泡排序</span></span><br><span class="line"><span class="comment">* 按小到大排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array 待排序数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                array[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(array));	<span class="comment">//输出当前排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">bubbleSort(arr);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><p>快速排序是冒泡排序的改进版，也是最好的一种内排序，涉及到分治和递归</p>
<p>分治法(Dvide-and-Conquer Method)</p>
<h6 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a>算法步骤：</h6><ul>
<li>从数列中去一个数作为基准数（简单起见可以取第一个数）</li>
<li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到他的左边（<strong>分区</strong>）</li>
<li>再对左右区间重复第一步、第二步，直到各区间只有一个数（<strong>递归</strong>）</li>
</ul>
<h6 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = array.length - <span class="number">1</span>;</span><br><span class="line">    quickSort(array, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 快速排序递归部分</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array 待排数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> start </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> end </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &lt; end) &#123;  <span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="comment">//从数列中取一个数作为基准数（简单起见取第一个数）</span></span><br><span class="line">        <span class="keyword">int</span> base = array[start];</span><br><span class="line">        <span class="keyword">int</span> pLeft = start;	<span class="comment">//左指针</span></span><br><span class="line">        <span class="keyword">int</span> pRight = end;	<span class="comment">//右指针</span></span><br><span class="line">        <span class="comment">//分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到他的左边（**分区**）</span></span><br><span class="line">        <span class="keyword">while</span> (pLeft &lt; pRight) &#123;    <span class="comment">//pLeft!=pRight</span></span><br><span class="line">            <span class="comment">//从右到左，找到第一个小于基准值的值，将其移动到左指针的位置，并左指针+1</span></span><br><span class="line">            <span class="keyword">while</span> (pRight &gt; pLeft) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[pRight] &lt; base) &#123;</span><br><span class="line">                    array[pLeft] = array[pRight];</span><br><span class="line">                    pLeft++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pRight--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从左到右，找到第一个大于基准值的值，将其移动到右指针的位置，并右指针-1</span></span><br><span class="line">            <span class="keyword">while</span> (pLeft &lt; pRight) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[pLeft] &gt; base) &#123;</span><br><span class="line">                    array[pRight] = array[pLeft];</span><br><span class="line">                    pRight--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pLeft++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//基准值填坑</span></span><br><span class="line">        array[pLeft] = base;</span><br><span class="line">        <span class="comment">//对左区间快排</span></span><br><span class="line">        quickSort(array, start, pLeft - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//对右区间快排</span></span><br><span class="line">        quickSort(array, pRight + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>,<span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>&#125;;</span><br><span class="line">quickSort(arr);	<span class="comment">//快速排序</span></span><br><span class="line">System.out.println(Arrays.toString(arr));	</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h5 id="基本选择排序"><a href="#基本选择排序" class="headerlink" title="基本选择排序"></a>基本选择排序</h5><h6 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h6><ul>
<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>
<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>重复第二步，直到所有元素均排序完毕。</li>
</ul>
<h6 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 选择排序</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;    <span class="comment">//记录最小值的位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &lt; array[min]) &#123;</span><br><span class="line">                <span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将找到的最小值和i位置所在的值进行交换</span></span><br><span class="line">        <span class="keyword">if</span> (i != min) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = array[i];</span><br><span class="line">            array[i] = array[min];</span><br><span class="line">            array[min] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>&#125;;</span><br><span class="line">selectionSort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><h5 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h5><h6 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h6><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p>
<p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>
<h6 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 插入排序</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录要插入的数据</span></span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; temp &lt; array[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存在比其小的数，插入</span></span><br><span class="line">        <span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">            array[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">insertSort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<h5 id="二分法插入排序"><a href="#二分法插入排序" class="headerlink" title="二分法插入排序"></a>二分法插入排序</h5><h6 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h6><p>在插入第i个元素时，对前面的0～i-1元素进行折半，先跟他们中间的那个元素比，如果小，则对前半再进行折半，否则对后半进行折半，直到left&lt;right，然后再把第i个元素前1位与目标位置之间的所有元素后移，再把第i个元素放在目标位置上。</p>
<ul>
<li>二分法查找插入位置</li>
<li>后移</li>
<li>插入</li>
</ul>
<p>[2, 3, 10, 9, 4, 8, 1, 7, 6, 5]</p>
<p>[2, <font color="red">3</font>, 10, 9, 4, 8, 1, 7, 6, 5]<br>[2, 3, <font color="red">10</font>, 9, 4, 8, 1, 7, 6, 5]<br>[2, 3,<font color="red"> 9</font>, 10, 4, 8, 1, 7, 6, 5]<br>[2, 3, <font color="red">4</font>, 9, 10, 8, 1, 7, 6, 5]<br>[2, 3, 4, <font color="red">8</font>, 9, 10, 1, 7, 6, 5]<br>[<font color="red">1</font>, 2, 3, 4, 8, 9, 10, 7, 6, 5]<br>[1, 2, 3, 4, <font color="red">7</font>, 8, 9, 10, 6, 5]<br>[1, 2, 3, 4, <font color="red">6</font>, 7, 8, 9, 10, 5]<br>[1, 2, 3, 4, <font color="red">5</font>, 6, 7, 8, 9, 10]</p>
<p>时间复杂度：O(n<sup>2</sup>)</p>
<p>空间复杂度：O(1)</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binaryInsertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];  <span class="comment">//要操作的数</span></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; arr[mid])</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从后往前移动数组，直到temp要插入的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= low; j--)</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        <span class="comment">//插入</span></span><br><span class="line">        arr[low] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">binaryInsertSort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<h4 id="各种排序比较"><a href="#各种排序比较" class="headerlink" title="各种排序比较"></a>各种排序比较</h4><h6 id="排序类型"><a href="#排序类型" class="headerlink" title="排序类型"></a>排序类型</h6><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/SortAlgorithm/排序算法.png" alt="排序算法类型"></p>
<h6 id="排序效率"><a href="#排序效率" class="headerlink" title="排序效率"></a>排序效率</h6><table border="1" >
  <tr align="center">
    <th colspan="7" >各种常用排序算法</th>
  </tr>
  <tr align="center" >
    <td rowspan="2">类别</td>
    <td rowspan="2">排序方法</td>
    <td colspan="3">时间复杂度</td>
    <td >空间复杂度</td>
    <td rowspan="2">稳定性</td>
  </tr>
  <tr align="center">
    <td>平均情况</td>
    <td>最好情况</td>
    <td>最坏情况</td>
    <td>辅助存储</td>
  </tr>
  <tr align="center">
    <td rowspan="2">插入排序</td>
    <td>直接插入</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(n)</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(1)</td>
    <td>稳定</td>
  </tr>
  <tr align="center">
    <td>希尔排序</td>
    <td>O(n<sup>1.3</sup>)或O(nlog<sub>2</sub>n)</td>
    <td>O(n)</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(1)</td>
    <td>不稳定</td>
  </tr>
  <tr align="center">
    <td rowspan="2">选择排序</td>
    <td>直接选择</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(1)</td>
    <td>不稳定</td>
  </tr>
  <tr align="center">
    <td>堆排序</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>O(1)</td>
    <td>不稳定</td>
  </tr>
  <tr align="center">
    <td rowspan="2">交换排序</td>
    <td>冒泡排序</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(n)</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(1)</td>
    <td>稳定</td>
  </tr>
  <tr align="center">
    <td>快速排序</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>O(n<sup>2</sup>)</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>不稳定</td>
  </tr>
  <tr align="center">
    <td colspan="2">归并排序</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>O(nlog<sub>2</sub>n)</td>
    <td>链表：O(1)或数组：O(n)</td>
    <td>稳定</td>
  </tr>
  <tr align="center">
    <td colspan="2">基数排序</td>
    <td>O(d(r+n))</td>
    <td>O(d(n+rd))</td>
    <td>O(d(r+n))</td>
    <td>O(rd+n)</td>
    <td>稳定</td>
  </tr>
  <tr align="center">
    <td colspan="7">注：基数排序的算法复杂度中，r代表关键字的基数，d代表长度，n代表关键字的个数</td>
  </tr>
</table>


<h4 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a>菜鸟教程</h4><p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html" target="_blank" rel="noopener">十大经典排序算法</a></p>
<h4 id="相关代码下载"><a href="#相关代码下载" class="headerlink" title="相关代码下载"></a>相关代码下载</h4><p><a href="/download/sort.rar">代码</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据结构与算法--基础</title>
    <url>/articles/f2c524f6.html</url>
    <content><![CDATA[<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h6 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h6><p>数据是描述客观事物的数值、字符以及能输入机器且能被处理的各种符号集合。</p>
<h6 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h6><p>数据项具有原子性，是不可分割的<font color="red">最小数据单位</font>。</p>
<h6 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h6><p>数据元素是数据的基本单位，是数据集合的个体，通常由若干个数据项组成，在计算机程序中通常作为一个整体来进行处理。</p>
<h6 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h6><p>数据对象是心智相同的数据元素的集合，是数据的子集。</p>
<h6 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h6><p>数据结构是指相互之间存在一种或多种的数据元素的集合。</p>
<ul>
<li><p>逻辑结构：数据结构的逻辑层面</p>
<ul>
<li>线性结构<ul>
<li>线性表</li>
<li>栈</li>
<li>队列</li>
<li>串及数组</li>
</ul>
</li>
<li>非线性结构<ul>
<li>树形结构</li>
<li>图形结构</li>
</ul>
</li>
</ul>
</li>
<li><p>数据的存储结构：存在于计算机世界的物理层面</p>
<ul>
<li>顺序存储</li>
<li>链式存储</li>
<li>索引存储</li>
<li>散列存储</li>
</ul>
</li>
<li><p>数据结构的运算：检索、排序、插入、删除、修改…</p>
</li>
</ul>
<a id="more"></a>
<h4 id="数据结构类型"><a href="#数据结构类型" class="headerlink" title="数据结构类型"></a>数据结构类型</h4><ul>
<li><font color="red">线性表</font></li>
<li>栈</li>
<li>队列</li>
<li>(字符)串</li>
<li>数组</li>
<li>广义表</li>
<li>树</li>
<li><font color="red">二叉树</font></li>
<li>图</li>
</ul>
<h6 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h6><p>数据的逻辑结构指数据元素之间的逻辑关系（和实现无关）</p>
<ul>
<li>线性结构与非线性结构<ul>
<li>线性结构：有且只有一个开始结点和一个终端结点，并且所有结点都最多只有一个直接前驱和一个后继<ul>
<li>集合中必存在唯一的一个”第一个元素”</li>
<li>集合中必存在唯一的一个”最后的元素”</li>
<li>除最后元素之外，其他数据元素均有唯一的”后继”</li>
<li>除第一元素之外，其他元素均有唯一的”前驱”</li>
</ul>
</li>
<li>非线性结构：一个结点元素可能对应多个直接前驱和多个直接后继<ul>
<li>树状（二叉树…）</li>
<li>图（网…）</li>
</ul>
</li>
</ul>
</li>
<li>集合结构、线性结构、树状结构、网状结构<ul>
<li>集合结构(Set)<ul>
<li>确定性：集合中的元素必须是确定的</li>
<li>唯一性：结合中的元素互不相同</li>
<li>无序性：集合中的元素没有先后之分</li>
</ul>
</li>
<li>线性结构：数据元素之间存在着”一对一”的线性关系的数据结构</li>
<li>树状结构：除了一个数据元素以外每个数据元素有且仅有一个直接前驱元素，但是可以有多个直接后续元素（一对多）</li>
<li>网状结构：每个数据元素可以有多个直接前驱元素，也可以有多个直接后续元素（多对多）</li>
</ul>
</li>
</ul>
<h6 id="数据的存储结构"><a href="#数据的存储结构" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h6><p>数据的存储结构主要包括数据元素本身的存储以及数据元素之间关系表示，是数据的逻辑结构在计算机的表示。</p>
<ul>
<li><p>顺序储存结构：把逻辑上相邻的结存储在物理位置上相邻的存储单元中，结点之间的逻辑关系由存储单元的邻接关系来体现</p>
<ul>
<li>优点：节省存储空间（分配数据的存储单元全用存放结点的数据，不考虑C/C++语言中数组需指定大小的需求），结点之间的关系没有占用额外的存储空间，可实现对结点的随机存取（一个结点对应一个序号）</li>
<li>缺点：插入和删除操作需要移动元素，效率较低</li>
</ul>
</li>
<li><p>链式存储结构：数据元素的存储结构是不连续的存储空间，每个存储结点对应一个需要存储的数据元素，每个结点是由数据域和指针组成，元素之间的逻辑关系通过存储结点之间的链接关系反映。</p>
<ul>
<li>比顺序存储结构的存储密度小（每个结点都由数据域和指针域组成，所以相同空间内假设全存满时顺序比链式存储更多）</li>
<li>逻辑上相邻的结点物理上不必相邻</li>
<li>插入、删除灵活（不必移动结点，之哟啊改变结点中的指针）</li>
<li>查找结点时链式存储结构要比顺序存储慢</li>
</ul>
</li>
<li><p>索引结构：除建立存储结点信息外，还建立附加的索引表来标识结点的地址</p>
</li>
<li><p>散列结构（hash表）：根据结点的关键字直接计算出该结点的存储地址</p>
</li>
</ul>
<p><img data-src="https://i.loli.net/2020/03/27/DbWwQTzojYs6Sn4.png" alt="数据结构总结.png"></p>
<h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p>算法是指令的集合，是为解决特定问题而规定的一系列操作。它是明确定义的可计算过程，以一个数据集合作为输入，并产生一个数据集合作为输出。</p>
<ul>
<li>输入：一个算法应以待解决的问题的信息作为输入。</li>
<li>输出：输入对应指令集后得到的信息。</li>
<li>可行性：算法是可行的，即算法中的每一条指令都是可以实现的，均能在有限的时间内完成。</li>
<li>有穷性：算法执行的指令个数是有限的，每个指令又是在有限时间内完成的，因此整个算法也是在有限时间内可以结束的。</li>
<li>确定性：算法对于特定的合法输入，其对应输出是唯一的，即当算法从一个特定输入开始，多次执行同一指令集结果总是相同的。</li>
</ul>
<p>算法的复杂性体现在运行该算法时的计算机所需资源的多少上，计算机资源最重要的是时间和空间资源，复杂度分为时间复杂度和空间复杂度。</p>
<h4 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h4><p>时间复杂度是执行算法所需要的计算工作量</p>
<h6 id="时间频度"><a href="#时间频度" class="headerlink" title="时间频度"></a>时间频度</h6><p>一个算法执行所耗费的时间(需在机器上运行才能测出)</p>
<p>一个算法花费的时间与算法中语句执行次数成正比例，哪个算法中语句执行次数多，花费时间就多。</p>
<p>一个算法中的语句执行次数为语句频度或时间频度，表示为T(n),n表示问题的规模。</p>
<h6 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h6><p>一般情况下，算法中基本操作重复执行的次数是问题规模的某个函数，用T(n)表示。</p>
<p>若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数时，则称f(n)时T(n)的同数量级函数。记作T(n)=O(f(n))为渐进时间复杂度，简称时间复杂度。T(n)=O(f(n))</p>
<p><strong>时间复杂度是时间频度去掉低阶项和首项常数。</strong></p>
<p>时间频度与时间复杂度是不相同的，时间频度不同但时间复杂度可能相同。</p>
<p>eg：某两个算法的时间频度分别是</p>
<ul>
<li><p>T(n)<sub>1</sub>=100 n<sup>2</sup>+100    </p>
</li>
<li><p>T(n)<sub>2</sub>=10000 n<sup>2</sup>+10 n+6</p>
</li>
</ul>
<p>其时间复杂度均为O(n<sup>2</sup> )</p>
<h6 id="最坏时间复杂度与平均时间复杂度"><a href="#最坏时间复杂度与平均时间复杂度" class="headerlink" title="最坏时间复杂度与平均时间复杂度"></a>最坏时间复杂度与平均时间复杂度</h6><ul>
<li>最坏时间复杂度：最坏情况下的时间复杂度(一般情况下时间复杂度都是指最坏时间复杂度)。</li>
<li>平均时间复杂度：指所有可能的输入实例均以等概率出现的情况下，算法的期望运行时间。<ul>
<li>难计算</li>
<li>有很多算法的平均情况和最差情况的复杂度是一样的</li>
</ul>
</li>
</ul>
<p><em>O符号：算法时间复杂度的上界(最坏情况 &lt;=)</em></p>
<p><em>Ω符号：算法时间复杂度的下界(最好情况 &gt;=)</em></p>
<p><em>Θ符号：算法时间复杂度的精确阶(最好和最坏是同一个阶 =)</em></p>
<h6 id="时间复杂度计算"><a href="#时间复杂度计算" class="headerlink" title="时间复杂度计算"></a>时间复杂度计算</h6><ol>
<li>找出算法中的基本语句：算法中执行次数最多的那条语句，通常是最内层循环的循环体</li>
<li>计算基本语句的执行次数的数量级：<strong>只需计算基本语句执行次数的数量级</strong>(可以忽略所有低次幂和最高次幂的系数)</li>
<li>用大O记号表示算法的时间性能：将基本语句执行次数的数量级放入大O记号中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;				<span class="comment">// T(n)=O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">...						    <span class="comment">// T(n)=O(1)</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>,n=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n;i++)</span><br><span class="line">    count++;				<span class="comment">// T(n)=O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>,n=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n;i*=<span class="number">2</span>)</span><br><span class="line">    count++;				<span class="comment">// T(n)=O(log2 n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>, n = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        count++;            <span class="comment">// T(n)=O(n^2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>, n = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i *= <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        count++;            <span class="comment">// T(n)=O(nlog2 n)</span></span><br></pre></td></tr></table></figure>
<h6 id="常用时间复杂度级别"><a href="#常用时间复杂度级别" class="headerlink" title="常用时间复杂度级别"></a>常用时间复杂度级别</h6><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">算法阶数</th>
<th style="text-align:center">算法时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">常数阶</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">对数阶</td>
<td style="text-align:center">O(log <sub>2</sub> n )</td>
</tr>
<tr>
<td style="text-align:center">线性阶</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">线性对数阶</td>
<td style="text-align:center">O(n log <sub>2</sub> n)</td>
</tr>
<tr>
<td style="text-align:center">平方阶</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
</tr>
<tr>
<td style="text-align:center">立方阶</td>
<td style="text-align:center">O(n<sup>3</sup>)</td>
</tr>
<tr>
<td style="text-align:center">k次方阶</td>
<td style="text-align:center">O(n<sup>k</sup>)</td>
</tr>
<tr>
<td style="text-align:center">指数阶</td>
<td style="text-align:center">O(2<sup>n</sup>)</td>
</tr>
<tr>
<td style="text-align:center">阶乘阶</td>
<td style="text-align:center">O(n!)</td>
</tr>
</tbody>
</table>
</div>
<p><strong>时间复杂度越高，执行效率越低</strong></p>
<h4 id="算法空间复杂度"><a href="#算法空间复杂度" class="headerlink" title="算法空间复杂度"></a>算法空间复杂度</h4><p>空间复杂度是执行这个算法所需要的内存空间</p>
<h6 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h6><p>算法的存储容量包括：</p>
<ul>
<li>程序本身所占空间</li>
<li>输入数据所占空间</li>
<li>辅助变量所占空间</li>
</ul>
<p>输入数据所占空间只取决于问题本身，和算法无关，只需要分析除输入和程序之外的<em>辅助变量</em>所占额外空间。</p>
<p>空间复杂度是对一个算法在运行过程中临时占用的存储空间大小的度量，一般也作为问题规模n的函数，以数量级形式给出，S(n)=O(g(n))</p>
<h6 id="空间复杂度分析一"><a href="#空间复杂度分析一" class="headerlink" title="空间复杂度分析一"></a>空间复杂度分析一</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, s;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= j; k++)</span><br><span class="line">                s++;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>算法中临时变量的个数与问题规模n无关，因此空间复杂度均为<em>S(n)=O(1)</em></p>
<h6 id="空间复杂度分析二"><a href="#空间复杂度分析二" class="headerlink" title="空间复杂度分析二"></a>空间复杂度分析二</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//n为数组a的元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (k == n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            System.out.print(a[i]);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = k; i &lt; n; i++)</span><br><span class="line">            a[i] = a[i] + i * i;</span><br><span class="line">        fun(a, n, k + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递归算法，每次调用本身都要分配空间，fun(a,n,0)的空间复杂度为O(n)</p>
<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ol>
<li>空间复杂度相比时间复杂度分析要少</li>
<li>对于<strong>递归算法</strong>来说，代码一般都比较简短，算法本身所占用的存储空间较少，但运行时需要占用较多的临时工作单元；若改写成<strong>非递归算法</strong>，代码可能会较长，算法本身占用的存储空间较多，但运行时占用较少的临时工作单元。</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>java数据结构与算法--查找</title>
    <url>/articles/e1d5c8a7.html</url>
    <content><![CDATA[<h4 id="线性表查找"><a href="#线性表查找" class="headerlink" title="线性表查找"></a>线性表查找</h4><h5 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h5><p>存储结构：顺序表或链表</p>
<p>逐个比较查询，如果找到，返回数据或索引，如果最后没找到就返回null</p>
<p>在各个结点查找概率相同情况下，平均查询长度为表的一半长度，所以时间复杂度T(n)=O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 顺序查找</span></span><br><span class="line"><span class="comment">* 功能：在数组中查找指定的值，返回返回第一个匹配到的索引值</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 所求的值存在，返回第一个匹配到的索引值</span></span><br><span class="line"><span class="comment">* 所求的值不存在，返回-1</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 时间复杂度：T(n)=O(n)</span></span><br><span class="line"><span class="comment">* 空间复杂度：S(n)=O(1)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array 查找表</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value 所求的值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">orderSearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] == value) &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">//去除break则返回最后一个匹配到的值的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="折半查找-二分查找"><a href="#折半查找-二分查找" class="headerlink" title="折半查找(二分查找)"></a>折半查找(二分查找)</h5><p>待查的查找表满足条件：</p>
<ul>
<li>顺序存储结构</li>
<li>查找表按关键字大小有序排列</li>
</ul>
<h6 id="递归实现折半查找"><a href="#递归实现折半查找" class="headerlink" title="递归实现折半查找"></a>递归实现折半查找</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二分查找--递归</span></span><br><span class="line"><span class="comment">*时间复杂度：T(n)=O(log2 n)</span></span><br><span class="line"><span class="comment">*空间复杂度：S(n)=O(log2 n)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearchByRecursion</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定low和high</span></span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> binarySearchByRecursion(array, value, low, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearchByRecursion</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) <span class="comment">//递归结束条件--没找到</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (value == array[middle]) <span class="comment">//递归结束条件--找到</span></span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; array[middle])</span><br><span class="line">        <span class="keyword">return</span> binarySearchByRecursion(array, value, low, middle);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> binarySearchByRecursion(array, value, middle, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="非递归实现折半查找"><a href="#非递归实现折半查找" class="headerlink" title="非递归实现折半查找"></a>非递归实现折半查找</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二分查找</span></span><br><span class="line"><span class="comment">* 功能：在数组中查找指定的值，返回返回第一个匹配到的索引值</span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* 所求的值存在，返回第一个匹配到的索引值</span></span><br><span class="line"><span class="comment">* 所求的值不存在，返回-1</span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* 时间复杂度：T(n)=O(log2 n)</span></span><br><span class="line"><span class="comment">* 空间复杂度：S(n)=O(n)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array 有序表</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value 所求值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定low和high</span></span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//二分查找</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="comment">//求得middle</span></span><br><span class="line">        <span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (array[middle] == value) <span class="comment">//判断是否等于</span></span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (array[middle] &gt; value) <span class="comment">//在小的部分</span></span><br><span class="line">            high = middle - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//在大的部分</span></span><br><span class="line">            low = middle + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查找树"><a href="#查找树" class="headerlink" title="查找树"></a>查找树</h4><h5 id="二叉查找-搜索-排序树-BST-binary-search-sort-tree"><a href="#二叉查找-搜索-排序树-BST-binary-search-sort-tree" class="headerlink" title="二叉查找/搜索/排序树 BST (binary search/sort tree)"></a>二叉查找/搜索/排序树 BST (binary search/sort tree)</h5><ul>
<li>一颗空树</li>
<li>具有以下性质的二叉树：<ul>
<li>若它的左子树不为空，则左子树上所有结点均小于它的根结点的值</li>
<li>若它的右子树不为空，则右子树上所有结点均大于它的根结点的值</li>
<li>它的左、右子树也分别为二叉排序树</li>
</ul>
</li>
</ul>
<p>对二叉查找树进行<strong>中序遍历</strong>，得到<strong>有序集合</strong></p>
<h5 id="平衡二叉树-Self-balancing-binary-search-tree"><a href="#平衡二叉树-Self-balancing-binary-search-tree" class="headerlink" title="平衡二叉树(Self-balancing binary search tree)"></a>平衡二叉树(Self-balancing binary search tree)</h5><p>自平衡二叉查找树，AVL树</p>
<ul>
<li>一颗空树</li>
<li>具有以下性质的二叉树：<ul>
<li>它的左右两个子树的高度差(平衡因子)的绝对值不超过1</li>
<li>左右两个子树都是一颗平衡二叉树</li>
</ul>
</li>
</ul>
<p>平衡二叉树必定是二叉搜索树，但二叉搜索树不一定是平衡树</p>
<h6 id="平衡因子-平衡度"><a href="#平衡因子-平衡度" class="headerlink" title="平衡因子(平衡度)"></a>平衡因子(平衡度)</h6><p>结点的平衡因子是结点的左子树减去右子树的高度</p>
<h6 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h6><p>定义：每个结点的平衡因子都为1,-1,0的二叉排序树</p>
<p>目的是减少二叉查找树的层次，提高查找速度</p>
<p><a href="https://baike.baidu.com/item/平衡树" target="_blank" rel="noopener">百度百科：平衡二叉树</a></p>
<h6 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h6><p>AVL、红黑树<a href="https://baike.baidu.com/item/%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="noopener">RBT</a>、<a href="https://baike.baidu.com/item/替罪羊树" target="_blank" rel="noopener">替罪羊树</a>、<a href="https://baike.baidu.com/item/Treap" target="_blank" rel="noopener">Treap</a>、伸展树<a href="https://baike.baidu.com/item/%E4%BC%B8%E5%B1%95%E6%A0%91" target="_blank" rel="noopener">Splay</a>、<a href="https://baike.baidu.com/item/SBT" target="_blank" rel="noopener">SBT</a></p>
<h6 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h6><p><a href="https://baike.baidu.com/item/平衡树" target="_blank" rel="noopener">平衡树</a></p>
<p>B-树：在它内部结点中存储键值，但不需在叶子结点上存储这些键值的记录</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Btree/B-树.jpg" alt="B-树.jpg"></p>
<p>B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引，B+树总是到叶子结点才命中</p>
<p>数据库的索引的默认数据结构就是采用B+树</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Btree/B+树.jpg" alt="B+树.jpg"></p>
<p>B*树：B+树的变体，在B+树的非根和非子叶结点再增加指向兄弟的指针</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Btree/B※树.jpg" alt="B*树.jpg"></p>
<h4 id="哈希表查找"><a href="#哈希表查找" class="headerlink" title="哈希表查找"></a>哈希表查找</h4><h6 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h6><p>不需要通过关键字值与定值比较，来确定位置，根据定值能直接定位记录的存储位置</p>
<h6 id="哈希表的结构和特点"><a href="#哈希表的结构和特点" class="headerlink" title="哈希表的结构和特点"></a>哈希表的结构和特点</h6><p>hashtable：散列表</p>
<p>特点：</p>
<ul>
<li>添加、查询、删除、更新数据快</li>
<li>无序</li>
<li>唯一</li>
</ul>
<p>结构（多种）：</p>
<ul>
<li><p>顺序表+链表：主结构是顺序表，每个顺序表的结点在单独引出一个链表</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Hashtable/hashtable顺序表&amp;链表结构.jpg" alt="hashtable顺序表&amp;链表结构.jpg"></p>
<p>哈希表初始操作状态</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Hashtable/hashtable初始操作状态.jpg" alt="hashtable初始操作状态.jpg"></p>
</li>
</ul>
<h6 id="哈希表添加数据"><a href="#哈希表添加数据" class="headerlink" title="哈希表添加数据"></a>哈希表添加数据</h6><ul>
<li>计算哈希码(调用<code>hashCode()</code>），结果是一个int值，整数的哈希码取自身即可</li>
<li>计算在哈希表中的存储位置 <code>y = k(x) = x % 11</code>    x:哈希码，k(x):函数，y:在哈希表的存储位置</li>
<li>存入哈希表<ul>
<li>一次添加成功</li>
<li>多次添加成功（出现冲突，调用<code>equals()</code>和对应链表的元素进行比较，比较到最后，结果都是<code>false</code>，创建新结点，存储数据，并加入链表末尾）</li>
<li>不添加（出现冲突，调用<code>equals()</code>和对应的元素进行比较，经过一次或多次比较后，结果都是<code>true</code>，表明重复，不添加）</li>
</ul>
</li>
</ul>
<p>哈希表最终状态</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Hashtable/hashtable最终状态.jpg" alt="hashtable最终状态.jpg"></p>
<h6 id="哈希表查找、删除、更新"><a href="#哈希表查找、删除、更新" class="headerlink" title="哈希表查找、删除、更新"></a>哈希表查找、删除、更新</h6><p>查找：与添加相似，通过函数计算对应位置</p>
<p>删除：改变直接前驱结点指向直接后继结点</p>
<p>更新：先查找到位置，更新数据</p>
<h6 id="hashCode与equals"><a href="#hashCode与equals" class="headerlink" title="hashCode与equals"></a>hashCode与equals</h6><p><code>hashCode()</code>：计算哈希码，根据哈希码可以计算出数据在哈希表中的存储位置</p>
<p><code>equals()</code>：添加时出现冲突和查询时，通过<code>equals()</code>进行比较，判断是否相同</p>
<h6 id="各种类型数据的哈希码的获取"><a href="#各种类型数据的哈希码的获取" class="headerlink" title="各种类型数据的哈希码的获取"></a>各种类型数据的哈希码的获取</h6><div class="table-container">
<table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:left">方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td style="text-align:left">取自身</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:left"><code>long bits=doubleToLongBits(value);</code><br /><code>(int)(bits ^ (bits &gt;&gt;&gt; 32));</code></td>
</tr>
<tr>
<td>String</td>
<td style="text-align:left"><code>int h=hash;</code><br /><code>if(h==0 &amp;&amp; value.length &gt; 0){</code><br />    <code>char var[] = value;</code><br />    <code>for(int i=0; i&lt;value.length; i++){</code><br />         <code>h = 31 * h + val[i];</code><br />      }<br />      <code>hash=h;</code><br /><code>}</code><br /><code>return hash;</code></td>
</tr>
<tr>
<td>对象</td>
<td style="text-align:left">各个属性的哈希码进行某些相加相乘的运算</td>
</tr>
</tbody>
</table>
</div>
<h6 id="减少冲突"><a href="#减少冲突" class="headerlink" title="减少冲突"></a>减少冲突</h6><ul>
<li><p>哈希表的长度和表中的记录数的比例—装填因子：</p>
<p>根据最终记录存储个数和关键字的分布特点来确定哈希表大小</p>
<p>动态变化<strong>装填因子 = 表中的记录的数 / 哈希表的长度</strong></p>
<ul>
<li>装填因子越小，表中还有很多的空单元，则添加发生冲突的可能性越小</li>
<li>装填因子越小，发生冲突可能性越大，在查找时所耗费的事件越多</li>
<li>装填因子=0.5时，哈希表性能能达到最优</li>
</ul>
</li>
<li><p>哈希函数的选择：</p>
<p>直接定址法，平方取中法，折叠法，<strong>除留去余法</strong>(y= x % 11)</p>
</li>
<li><p>处理冲突方法：</p>
<p><strong>链地址法</strong>，开放地址法，再散列法，建立一个公共溢出区</p>
</li>
</ul>
<h4 id="Java中的查找树和哈希表"><a href="#Java中的查找树和哈希表" class="headerlink" title="Java中的查找树和哈希表"></a>Java中的查找树和哈希表</h4><h6 id="TreeSet和TreeMap"><a href="#TreeSet和TreeMap" class="headerlink" title="TreeSet和TreeMap"></a>TreeSet和TreeMap</h6><p><code>TreeSet</code>和<code>TreeMap</code>底层使用红黑树</p>
<p><code>TreeSet</code>底层结构是<code>TreeMap</code></p>
<p>添加结点过程会通过旋转等方法，保证每次添加前后都是平衡树</p>
<h6 id="HashSet-HashMap-HashTable-过时"><a href="#HashSet-HashMap-HashTable-过时" class="headerlink" title="HashSet HashMap HashTable(过时)"></a>HashSet HashMap HashTable(过时)</h6><p><code>HashSet</code> <code>HashMap</code> <code>HashTable</code>底层使用哈希表</p>
<p>在<code>JDK1.7</code>及其之前，<code>HashMap</code>存储结构为：<code>table数组</code>+<code>链表</code></p>
<p>在<code>JDK1.8</code>中，当链表的存储数据个数大于等于<code>8</code>时，不再采用链表存储，而采用红黑树存储结构（在查询时间复杂度上：链表为<strong>O(n)</strong>,红黑树为<strong>O(lon<sub>2</sub>n)</strong>）</p>
<p><code>HashSet</code>底层结构是<code>HashMap</code>，<code>HashSet的元素</code>作为<code>HashMap的key</code>，统一使用<code>Object</code>对象作为<code>value</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* HashSet部分源码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="相关代码下载"><a href="#相关代码下载" class="headerlink" title="相关代码下载"></a>相关代码下载</h4><p><a href="/download/search.rar">相关代码</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据结构与算法--栈和队列</title>
    <url>/articles/f483932c.html</url>
    <content><![CDATA[<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><p>栈（stack）：堆栈，是<em>运算受限</em>的线性表</p>
<p>仅允许在表的一端进行插入和删除操作，不允许在其他任何位置进行插入、查找、删除等操作</p>
<p>表中进行插入、删除操作的一端称为栈顶（top），栈顶保存的元素称为<em>栈顶元素</em>，相对的，表的另一端为栈底（bottom）</p>
<ul>
<li>当栈中没有元素时成为空栈</li>
<li>向一个栈插入元素又称为入栈或进栈</li>
<li>从一个栈中删除元素又称为出栈或退栈</li>
<li>由于栈的插入和删除操作仅在栈顶进行，后进的元素必定先出栈，堆栈又称为<strong>后进先出表</strong>（Last In First Out， LIFO）</li>
</ul>
<a id="more"></a>
<h6 id="栈接口"><a href="#栈接口" class="headerlink" title="栈接口"></a>栈接口</h6><p><code>push</code> 入栈    <code>pop</code> 出栈     <code>peek</code> 取栈顶元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回堆栈的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断栈顶是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据元素e入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈顶元素出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="栈的存储结构"><a href="#栈的存储结构" class="headerlink" title="栈的存储结构"></a>栈的存储结构</h6><ul>
<li>顺序栈：使用顺序存储结构实现的堆栈，即利用一组地址连续的存储单元依次存放堆栈中的数据元素</li>
<li>链栈：采用链表作为存储结构实现的栈</li>
</ul>
<p>顺序栈、链栈操作数据元素的时间复杂度均为O（1）</p>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><h6 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h6><p>队列（queue）简称为队，是运算受限的线性表</p>
<p>仅允许在表的一端进行插入，而在表的另一端进行删除</p>
<ul>
<li>在队列把插入数据元素的一端成为队尾（rear），删除数据元素的一端称为队首（front）</li>
<li>向队尾插入元素称为进队或入队，新元素入队后成为新的队尾元素</li>
<li>向队列中删除元素称为离队或出队，元素出队后，其后续元素成为新的队首元素</li>
<li>先进队的元素先离队，队列：先进先出表（First In First Out，FIFO）</li>
</ul>
<h6 id="队列接口"><a href="#队列接口" class="headerlink" title="队列接口"></a>队列接口</h6><p>入队、出队</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回队列的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据元素e入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队首元素出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取队首元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="队列存储结构"><a href="#队列存储结构" class="headerlink" title="队列存储结构"></a>队列存储结构</h6><ul>
<li>顺序队列<ul>
<li>使用数组作为存储结构：使用普通数组实现队列，不能使用front之前的空间，会导致大量空间丢失</li>
<li>使用循环数组作为存储结构：末尾元素的下一个元素为数组的头元素</li>
</ul>
</li>
<li>链式队列：使用单链表实现</li>
</ul>
<h6 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h6><p>双端队列：两端都可以进行进队和出队的队列</p>
<p>输出受限的双端队列：一个端点允许插入和删除元素，另一个端点只允许<em>插入</em>的双端队列</p>
<p>输入受限的双端队列：一个端点允许插入和删除元素，另一个端点只允许<em>删除</em>的双端队列</p>
<h4 id="java中的栈和队列"><a href="#java中的栈和队列" class="headerlink" title="java中的栈和队列"></a>java中的栈和队列</h4><h6 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h6><p>栈类（已过时）<code>public class Stack&lt;E&gt; extends Vector&lt;E&gt;</code></p>
<h6 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h6><p>队列类    </p>
<p><code>public interface Queue&lt;E&gt; extends Collection</code>  扩展了<code>java.util.Collection</code>接口</p>
<h6 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h6><p>双端队列    <code>public interface Deque&lt;E&gt; extends Queue&lt;E&gt;</code></p>
<h6 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h6><p>栈+队列</p>
<p><code>public class LinkedList&lt;E&gt;
    extends AbstractSequentialList&lt;E&gt;
    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</code></p>
<h6 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h6><p>数组形式的双端队列</p>
<p><code>public class ArrayDeque&lt;E&gt; extends AbstractCollection&lt;E&gt;
                           implements Deque&lt;E&gt;, Cloneable, Serializable</code></p>
<h6 id="使用栈实现进制转换"><a href="#使用栈实现进制转换" class="headerlink" title="使用栈实现进制转换"></a>使用栈实现进制转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">int</span> temp = num;</span><br><span class="line"><span class="comment">//定义空栈</span></span><br><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//取余数</span></span><br><span class="line">    <span class="keyword">int</span> mod = temp % <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    stack.push(mod);</span><br><span class="line">    <span class="comment">//除2</span></span><br><span class="line">    temp = temp &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(num + <span class="string">"---&gt;"</span>);</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    System.out.print(stack.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据结构与算法--树和二叉树</title>
    <url>/articles/49f58aa9.html</url>
    <content><![CDATA[<h4 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h4><h6 id="树"><a href="#树" class="headerlink" title="树"></a>树</h6><p>树是由一个集合以及在该集合上定义的一种关系构成的，集合中的元素称为树的结点，所定义的关系称为父子关系</p>
<ul>
<li>父子关系在书的结点之间建立了一个层次结构</li>
<li>树的结点包含一个数据元素及若干指向其子树的若干分支</li>
<li>特殊位置的结点，树的根结点，简称为树根</li>
</ul>
<p>树是n（n≥0）个结点的有限集</p>
<ul>
<li>n=0    空树，不包含任何结点</li>
<li>n&gt;0    非空树，有且仅有一个特定的称为<em>根</em>（root）的结点</li>
</ul>
<a id="more"></a>
<h6 id="结点的度与树的度"><a href="#结点的度与树的度" class="headerlink" title="结点的度与树的度"></a>结点的度与树的度</h6><p>结点拥有的子树的数目称为结点的度（Degree）</p>
<ul>
<li>度为0的结点称为叶子（leaf）或终端结点</li>
<li>度不为0的结点称为非终端节点或分支结点，除根之外的分支结点也称为内部结点</li>
<li>树内各结点的度的最大值称为树的度</li>
</ul>
<p><img data-src="https://i.loli.net/2020/04/10/tnWjOpQkV2KIChH.png" alt="结点的度.png"></p>
<h6 id="结点的层次与树的深度"><a href="#结点的层次与树的深度" class="headerlink" title="结点的层次与树的深度"></a>结点的层次与树的深度</h6><p><strong>结点的层次</strong>从根开始定义，层次数为1的结点是根节点，其子树的根的层次数为2</p>
<p>树中的结点的最大层次数为<strong>树的深度或高度</strong></p>
<p><img data-src="https://i.loli.net/2020/04/10/hwtWHY5pPCSuQe7.png" alt="结点的层次数.png"></p>
<h6 id="父亲-儿子-兄弟"><a href="#父亲-儿子-兄弟" class="headerlink" title="父亲  儿子 兄弟"></a>父亲  儿子 兄弟</h6><p><strong>父亲</strong>：一个结点的直接前驱结点</p>
<p><strong>儿子</strong>：一个结点的直接后继结点</p>
<p><strong>兄弟</strong>：同一个父亲结点的其他结点</p>
<h6 id="祖先-子孙-堂兄弟"><a href="#祖先-子孙-堂兄弟" class="headerlink" title="祖先 子孙 堂兄弟"></a>祖先 子孙 堂兄弟</h6><p>结点的<strong>祖先</strong>是从根结点到该点路径上的所有结点</p>
<p>以某结点为根的树中的任一结点都称为该点的<strong>子孙</strong></p>
<p>父亲在同一层次的结点互为<strong>堂兄弟</strong></p>
<h6 id="有序树-m叉树-森林"><a href="#有序树-m叉树-森林" class="headerlink" title="有序树  m叉树  森林"></a>有序树  m叉树  森林</h6><p>如果将树中结点的各子树看成是从左至右是有次序的，则称该树为<strong>有序树</strong></p>
<p>若不考虑子树的顺序则称为<strong>无序树</strong></p>
<ul>
<li>有序树的子树之间不能互换位置</li>
</ul>
<p><strong>m叉树</strong>：树中所有结点最大度数为m的有序树</p>
<p><strong>森林</strong>：m(m≥0)棵互不相交的树的集合，对树中每个结点而言，其子树的集合即为森林</p>
<p>树和森林的概念相近</p>
<ul>
<li>树→森林：删除一棵树的根，就可以得到一个森林</li>
<li>森林→树：加上一个结点作为树根，森林就变成一棵树</li>
</ul>
<h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><h5 id="二叉树概念"><a href="#二叉树概念" class="headerlink" title="二叉树概念"></a>二叉树概念</h5><p><strong>二叉树</strong>：每个结点的度<strong>均不超过2</strong>的<strong>有序树</strong></p>
<p>二叉树的递归定义：二叉树或者是一颗空树，或是由一个根结点和两颗互不相交的分别称为根的左子树和右子树的子树所组成的非空树</p>
<ul>
<li>二叉树每个结点的孩子数只能是0、1或2，并且每个孩子都有左右之分</li>
<li>位于左边的孩子称为左孩子，位于右边的孩子称为右孩子</li>
<li>以左孩子为根的子树称为左子树，以右孩子为根的子树称为右子树</li>
</ul>
<p><img data-src="https://i.loli.net/2020/04/10/uC8m2JexAwyDtEG.png" alt="二叉树子树.png"></p>
<h5 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h5><p>高度为k并且由2<sup>k+1</sup>-1个结点的二叉树</p>
<p>在满二叉树中，每层结点都达到最大数，即每层节点都是满的</p>
<h5 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h5><p>若在一颗满二叉树中，在最下层从最右侧起去掉相邻若干的若干叶子结点，得到的二叉树即为完全二叉树</p>
<p><img data-src="https://i.loli.net/2020/04/10/uj16T3eG4tJmoMF.png" alt="满二叉树与完全二叉树.png"></p>
<p>满二叉树必为完全二叉树，而完全二叉树不一定是满二叉树</p>
<h5 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h5><ul>
<li>在二叉树的第i层上最多有2<sup>i-1</sup>个结点(根是第1层)</li>
<li>高度为h的二叉树至多有2<sup>h</sup>-1个结点</li>
<li>对任何一棵二叉树T ,如果其终端结点数为n<sub>0</sub>, 度为2的结点数为n<sub>2</sub>，则n<sub>0</sub> = n<sub>2</sub>+ 1</li>
<li>有n个结点的完全二叉树的高度为 log<sub>2</sub>n + 1 ,其中 log<sub>2</sub>n 是向下取整</li>
<li>含有n≥1个结点的二叉树的高度至多为n-1 ;高度至少为 log<sub>2</sub>n + 1 ,其中 log<sub>2</sub>n是向下取整</li>
<li>如果对-棵有n个结点的完全二叉树的结点进行编号,则对任结点i( 1≤i≤n ), 有<ul>
<li>如果i=1,则结点i是二叉树的根,无双亲;如果i&gt;1 ,则其双亲结点PARENT(i)是结点 i/2</li>
<li>如果2i&gt;n.则结点i无左孩子;否则其左孩子是结点2i</li>
<li>如果2i+1&gt;n,则结点i无右孩子;否则其右孩子是结点2i+1</li>
</ul>
</li>
</ul>
<h5 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h5><h6 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h6><p>对于满二叉树和完全二叉树来说，可以将其数据元素逐层存放到一组连续的存储单元中</p>
<p>用一维数组来实现顺序存储结构时，将二叉树中变好为i的结点存放到数组的第i个分量中</p>
<p>根据二叉树的性质，可以得到结点i的父节点、左右孩子节点分别存放在2i以及2i+1分量中</p>
<p><img data-src="https://i.loli.net/2020/04/10/8PNs9rgDuYLkUXy.png" alt="二叉树的顺序存储结构.png"></p>
<ul>
<li>满二叉树和完全二叉树才用顺序存储结构既不浪费空间，也可通过公式很快地确定结点之间的关系</li>
<li>一般二叉树：必须用”虚结点”将二叉树补成一棵满二叉树来存储（浪费空间）</li>
</ul>
<h6 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h6><p>设计不同的结点结构可构成不同的链式存储结构</p>
<ul>
<li><p><strong>二叉链表</strong>结点：数据域、左孩子域、右孩子域</p>
<p><code>Data lChild rChild</code></p>
<p><img data-src="https://i.loli.net/2020/04/10/MAsnYuV96kOyBrJ.png" alt="二叉链表结点.png"></p>
</li>
<li><p><strong>三叉链表</strong>结点：数据域、左孩子域、父结点、右孩子域</p>
<p><code>Data lChild parent rChild</code></p>
<p><img data-src="https://i.loli.net/2020/04/10/uYqsLXa2bwzUZkF.png" alt="三叉链表结点.png"></p>
</li>
</ul>
<h4 id="二叉树的实现"><a href="#二叉树的实现" class="headerlink" title="二叉树的实现"></a>二叉树的实现</h4><h6 id="二叉树遍历策略"><a href="#二叉树遍历策略" class="headerlink" title="二叉树遍历策略"></a>二叉树遍历策略</h6><p>遍历(Traverse)：按照某种次序访问树中的所有结点，且每个结点恰好访问一次（<strong>非线性结构线性化</strong>）</p>
<p>二叉树：根、左子树、右子树</p>
<p>遍历方式</p>
<ul>
<li>先序/根遍历DLR：根  左子树  右子树</li>
<li>中序/根遍历LDR：左子树  根  右子树</li>
<li>后序/根遍历LRD：左子树  右子树  根</li>
</ul>
<p>题：<u>已知一颗二叉树的后序遍历的序列为<code>5 4 3 7 6 2 1</code>，中序遍历的序列为<code>4 5 1 3 2 6 7</code>，则其先序遍历的序列是什么?</u></p>
<p>解：<code>1  4  5  2  3  6  7</code></p>
<p>思路：</p>
<ul>
<li><p>根据后序可知1为根结点，则有根：1 左子树：45 右子树：2637</p>
</li>
<li><p>中序54 + 后序45可知 4 为根，5为右子树</p>
</li>
<li><p>后序3762可知 2 为根，中序3267则 367为右子树，3为2的左子树，67为2的右子树</p>
</li>
<li><p>中序3267可知6为根，7为右子树</p>
<p><img data-src="https://i.loli.net/2020/04/10/iIL6xv9DlOYd2Bn.png" alt="二叉树遍历题.png" style="zoom:80%;" /></p>
</li>
</ul>
<h6 id="二叉树结点"><a href="#二叉树结点" class="headerlink" title="二叉树结点"></a>二叉树结点</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链式二叉表的结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object value;  <span class="comment">//值</span></span><br><span class="line">    <span class="keyword">private</span> Node leftChild; <span class="comment">//左子树的引用</span></span><br><span class="line">    <span class="keyword">private</span> Node rightChild; <span class="comment">//右子树的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value, Node leftChild, Node rightChild)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.leftChild = leftChild;</span><br><span class="line">        <span class="keyword">this</span>.rightChild = rightChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getLeftChild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftChild</span><span class="params">(Node lNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftChild = lNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getRightChild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rightChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightChild</span><span class="params">(Node rNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rightChild = rNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="二叉树接口"><a href="#二叉树接口" class="headerlink" title="二叉树接口"></a>二叉树接口</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二叉树操作接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为空树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 树结点数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 树的高度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定值的结点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">findKey</span><span class="params">(Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序递归遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序递归遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderTraverse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序递归遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraverse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历非递归操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderByStack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历非递归操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderByStack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历非递归操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderByStack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照层次遍历二叉树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrderByStack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="二叉树实现"><a href="#二叉树实现" class="headerlink" title="二叉树实现"></a>二叉树实现</h6><ul>
<li>递归遍历</li>
<li><font color="red">前序、中序、后序非递归遍历</font></li>
<li><font color="blue">按层次遍历</font>

</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二叉链表实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBinaryTree</span> <span class="keyword">implements</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">//根结点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedBinaryTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedBinaryTree</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.root == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"二叉树的结点数："</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//左子树结点数</span></span><br><span class="line">            <span class="keyword">int</span> leftSize = <span class="keyword">this</span>.size(root.getLeftChild());</span><br><span class="line">            <span class="comment">//右子树结点数</span></span><br><span class="line">            <span class="keyword">int</span> rightSize = <span class="keyword">this</span>.size(root.getRightChild());</span><br><span class="line">            <span class="keyword">return</span> leftSize + rightSize + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"二叉树的高度："</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getHeight(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//左子树的高度</span></span><br><span class="line">            <span class="keyword">int</span> leftHeight = <span class="keyword">this</span>.getHeight(root.getLeftChild());</span><br><span class="line">            <span class="comment">//右子树的高度</span></span><br><span class="line">            <span class="keyword">int</span> rightHeight = <span class="keyword">this</span>.getHeight(root.getRightChild());</span><br><span class="line">            <span class="comment">//返回结点的高度</span></span><br><span class="line">            <span class="keyword">return</span> leftHeight &gt; rightHeight ? leftHeight + <span class="number">1</span> : rightHeight + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">findKey</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.findKey(value, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">findKey</span><span class="params">(Object value, Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root.getValue().equals(value))</span><br><span class="line">            <span class="comment">//是否为根节点</span></span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node leftChild = <span class="keyword">this</span>.findKey(value, root.getLeftChild());</span><br><span class="line">            Node rightChild = <span class="keyword">this</span>.findKey(value, root.getRightChild());</span><br><span class="line">            <span class="keyword">if</span> (leftChild != <span class="keyword">null</span> &amp;&amp; leftChild.getValue().equals(value))</span><br><span class="line">                <span class="comment">//是否为左子树</span></span><br><span class="line">                <span class="keyword">return</span> leftChild;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rightChild != <span class="keyword">null</span> &amp;&amp; rightChild.getValue().equals(value))</span><br><span class="line">                <span class="comment">//是否为右子树</span></span><br><span class="line">                <span class="keyword">return</span> rightChild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         if (this.root != null) &#123;</span></span><br><span class="line"><span class="comment">         //根结点的值</span></span><br><span class="line"><span class="comment">         System.out.print(root.getValue() + " ");</span></span><br><span class="line"><span class="comment">         //对左子树进行先序遍历</span></span><br><span class="line"><span class="comment">         BinaryTree leftTree = new LinkedBinaryTree(root.getLeftChild());</span></span><br><span class="line"><span class="comment">         leftTree.preOrderTraverse();</span></span><br><span class="line"><span class="comment">         //对右子树进行先序遍历</span></span><br><span class="line"><span class="comment">         BinaryTree rightTree = new LinkedBinaryTree(root.getRightChild());</span></span><br><span class="line"><span class="comment">         rightTree.preOrderTraverse();</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"前序遍历--递归"</span>);</span><br><span class="line">        <span class="keyword">this</span>.preOrderTraverse(<span class="keyword">this</span>.root);</span><br><span class="line">        System.out.println();	<span class="comment">//换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//输出结点的值</span></span><br><span class="line">            System.out.print(root.getValue() + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//遍历左子树</span></span><br><span class="line">            <span class="keyword">this</span>.preOrderTraverse(root.getLeftChild());</span><br><span class="line">            <span class="comment">//遍历右子树</span></span><br><span class="line">            <span class="keyword">this</span>.preOrderTraverse(root.getRightChild());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         if (this.root != null) &#123;</span></span><br><span class="line"><span class="comment">         //对左子树进行中序遍历</span></span><br><span class="line"><span class="comment">         BinaryTree leftTree = new LinkedBinaryTree(root.getLeftChild());</span></span><br><span class="line"><span class="comment">         leftTree.inOrderTraverse();</span></span><br><span class="line"><span class="comment">         //根结点的值</span></span><br><span class="line"><span class="comment">         System.out.print(root.getValue() + " ");</span></span><br><span class="line"><span class="comment">         //对右子树进行中序遍历</span></span><br><span class="line"><span class="comment">         BinaryTree rightTree = new LinkedBinaryTree(root.getRightChild());</span></span><br><span class="line"><span class="comment">         rightTree.inOrderTraverse();</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         System.out.println();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"中序遍历--递归"</span>);</span><br><span class="line">        <span class="keyword">this</span>.inOrderTraverse(<span class="keyword">this</span>.root);</span><br><span class="line">        System.out.println();	<span class="comment">//换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrderTraverse</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历左子树</span></span><br><span class="line">            <span class="keyword">this</span>.inOrderTraverse(root.getLeftChild());</span><br><span class="line">            <span class="comment">//输出结点的值</span></span><br><span class="line">            System.out.print(root.getValue() + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//遍历右子树</span></span><br><span class="line">            <span class="keyword">this</span>.inOrderTraverse(root.getRightChild());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         if (this.root != null) &#123;</span></span><br><span class="line"><span class="comment">         //对左子树进行后序遍历</span></span><br><span class="line"><span class="comment">         BinaryTree leftTree = new LinkedBinaryTree(root.getLeftChild());</span></span><br><span class="line"><span class="comment">         leftTree.postOrderTraverse();</span></span><br><span class="line"><span class="comment">         //对右子树进行后序遍历</span></span><br><span class="line"><span class="comment">         BinaryTree rightTree = new LinkedBinaryTree(root.getRightChild());</span></span><br><span class="line"><span class="comment">         rightTree.postOrderTraverse();</span></span><br><span class="line"><span class="comment">         //根结点的值</span></span><br><span class="line"><span class="comment">         System.out.print(root.getValue() + " ");</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"后序遍历--递归"</span>);</span><br><span class="line">        <span class="keyword">this</span>.postOrderTraverse(<span class="keyword">this</span>.root);</span><br><span class="line">        System.out.println();	<span class="comment">//换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrderTraverse</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//对左子树进行后序遍历</span></span><br><span class="line">            <span class="keyword">this</span>.postOrderTraverse(root.getLeftChild());</span><br><span class="line">            <span class="comment">//对右子树进行后序遍历</span></span><br><span class="line">            <span class="keyword">this</span>.postOrderTraverse(root.getRightChild());</span><br><span class="line">            <span class="comment">//根结点的值</span></span><br><span class="line">            System.out.print(root.getValue() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderByStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.println(<span class="string">"前序非递归遍历"</span>);</span><br><span class="line">        Deque&lt;Node&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Node current = root;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span> || !deque.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">                deque.push(current);</span><br><span class="line">                System.out.print(current.getValue() + <span class="string">" "</span>);</span><br><span class="line">                current = current.getLeftChild();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!deque.isEmpty()) &#123;</span><br><span class="line">                current = deque.pop();</span><br><span class="line">                current = current.getRightChild();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();	<span class="comment">//换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderByStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.println(<span class="string">"中序非递归遍历"</span>);</span><br><span class="line">        Deque&lt;Node&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Node current = root;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span> || !deque.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">                deque.push(current);    <span class="comment">//入栈</span></span><br><span class="line">                current = current.getLeftChild();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!deque.isEmpty()) &#123;</span><br><span class="line">                current = deque.pop();   <span class="comment">//出栈</span></span><br><span class="line">                System.out.print(current.getValue() + <span class="string">" "</span>);</span><br><span class="line">                current = current.getRightChild();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();	<span class="comment">//换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来记录最新出栈的节点，</span></span><br><span class="line"><span class="comment">     * 如果当前节点的右孩子与flag相同，说明当前节点右子树已完成遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderByStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.println(<span class="string">"后序非递归遍历"</span>);</span><br><span class="line">        Deque&lt;Node&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Node current = root;</span><br><span class="line">        Node flag = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根结点及其根结点的左子树(最左侧的所有结点+根节点)...全部入栈</span></span><br><span class="line">            deque.push(current);</span><br><span class="line">            current = current.getLeftChild();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            current = deque.pop();  <span class="comment">//出栈</span></span><br><span class="line">            <span class="keyword">if</span> (current.getRightChild() == <span class="keyword">null</span> || current.getRightChild() == flag) &#123;</span><br><span class="line">                System.out.print(current.getValue() + <span class="string">" "</span>); <span class="comment">//输出当前值</span></span><br><span class="line">                flag = current;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                deque.push(current);</span><br><span class="line">                current = current.getRightChild();</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    deque.push(current);</span><br><span class="line">                    current = current.getLeftChild();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();	<span class="comment">//换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrderByQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.print(<span class="string">"按照层次进行遍历"</span>);</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);    <span class="comment">//root入队</span></span><br><span class="line">        <span class="keyword">while</span> (queue.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                Node temp = queue.poll();   <span class="comment">//出队</span></span><br><span class="line">                <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.print(temp.getValue() + <span class="string">" "</span>);</span><br><span class="line">                    <span class="keyword">if</span> (temp.getLeftChild() != <span class="keyword">null</span>)</span><br><span class="line">                        queue.add(temp.getLeftChild());</span><br><span class="line">                    <span class="keyword">if</span> (temp.getRightChild() != <span class="keyword">null</span>)</span><br><span class="line">                        queue.add(temp.getRightChild());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();	<span class="comment">//换行符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="树与二叉树相关代码下载"><a href="#树与二叉树相关代码下载" class="headerlink" title="树与二叉树相关代码下载"></a>树与二叉树相关代码下载</h4><p><a href="/download/binarytree.rar">树与二叉树相关代码</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据结构与算法--线性表</title>
    <url>/articles/5b4e0ff4.html</url>
    <content><![CDATA[<h4 id="线性表及其结构"><a href="#线性表及其结构" class="headerlink" title="线性表及其结构"></a>线性表及其结构</h4><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><p>线性表是n个类型<em>相同数据</em>元素的<em>有限序列</em></p>
<ul>
<li>相同数据类型：相同数据类型意味着在内存中存储时，每个元素占用相同的内存空间，便于后续的查询定位</li>
<li>序列(顺序性)：在线性表的相邻数据元素之间存在着序偶关系<ul>
<li>a<sub>i-1</sub>是a<sub>i</sub>的直接前驱，则a<sub>i+1</sub>是a<sub>i</sub>的直接后续</li>
<li>唯一没有直接前驱的元素a<sub>0</sub>一端称为表头</li>
<li>唯一没有直接后续的元素a<sub>n-1</sub>一端称为表尾</li>
<li>除表头和表尾元素外，任何一个元素都有且仅有一个直接前驱和直接后继</li>
</ul>
</li>
<li>有限：线性表中数据元素的个数n定义为线性表的长度，n是一个有限值<ul>
<li>n=0时线性表为空表</li>
<li>在非空的线性表中每个数据元素中都有唯一确定的序号</li>
<li>在一个具有n&gt;0个数据元素的线性表中，数据元素序号的范围是[0,n-1]</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h6 id="线性表的存储结构"><a href="#线性表的存储结构" class="headerlink" title="线性表的存储结构"></a>线性表的存储结构</h6><ul>
<li><p>顺序表———顺序存储结构</p>
<ul>
<li><p>特点：在内存中分配连续的空间，只存储数据，不需要存储地址信息。位置中隐含着地址</p>
</li>
<li><p>优点：</p>
<ul>
<li><p>节省存储空间，分配给数据的存储单元全用存放结点的数据，结点之间的逻辑关系没有占用额外的存储空间；</p>
</li>
<li><p>索引查找效率高</p>
<p>序号为i+1的数据元素存储地址可表示为LOC(a<sub>i</sub>)=LOC(a<sub>0</sub>))+i*K  K为数据所占存储单元</p>
</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>插入和删除操作需要移动元素，效率较低</li>
<li>必须提前分配固定数量的空间，如果存储元素少，可能导致空闲浪费</li>
<li>按照内容查询效率低（逐个比较判断）</li>
</ul>
</li>
</ul>
</li>
<li><p>链表———链式存储结构</p>
<ul>
<li><p>特点：数据元素的存储对应的是不连续的存储空间，每个存储结点对应一个需要存储的数据元素。</p>
<p>每个结点是由数据域和指针组成，元素之间的逻辑关系通过存储结点之间的链接关系反映出来，逻辑上相邻的结点物理上不必相邻。</p>
</li>
<li><p>优点：</p>
<ul>
<li>插入、删除灵活（不必移动结点，只需要改变结点中的指针，但是需要先定位到元素上）</li>
<li>有元素才会分配结点空间， 不会有闲置的结点</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>比顺序存储结构的存储密度小</li>
<li>查找结点时链式存储要比顺序存储慢（每个结点地址不连续、无规律，导致按照索引查找效率低下）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="线性表操作"><a href="#线性表操作" class="headerlink" title="线性表操作"></a>线性表操作</h4><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">Java API文档</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回线性表的大小，即元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回线性表中序号为i的数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果线性表为空返回true，否则返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断线性表是否包含数据元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数据元素e在线性表中的序号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据元素e插入到线性表中i号位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据元素e插入到线性表末尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据元素e插入到obj之前</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(Object obj, Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据元素e插入到元素obj之后</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAfter</span><span class="params">(Object obj, Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除线性表中序号为i的元素，并返回之</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除线性表中第一个与e相同的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//替换线性表中序号为i的数据元素为e，返回数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">replace</span><span class="params">(<span class="keyword">int</span> i, Object e)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;    <span class="comment">//元素数据</span></span><br><span class="line">    <span class="keyword">private</span> Node next;      <span class="comment">//下一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="顺序表实现—模拟ArrayList"><a href="#顺序表实现—模拟ArrayList" class="headerlink" title="顺序表实现—模拟ArrayList"></a>顺序表实现—模拟ArrayList</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺序表</span></span><br><span class="line"><span class="comment"> * 底层采用数组，但长度可以动态变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span> <span class="keyword">implements</span> <span class="title">List</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;    <span class="comment">//底层为数组，长度未定</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;    <span class="comment">//元素的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != size - <span class="number">1</span>) &#123;</span><br><span class="line">                builder.append(elementData[i]).append(<span class="string">","</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                builder.append(elementData[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//没有指定长度，默认长度是4;</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//没有指定长度，长度是0</span></span><br><span class="line">        <span class="comment">//elementData=new Object[]&#123;&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//给数组分配指定数量的空间</span></span><br><span class="line">        elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        <span class="comment">//指定顺序表的元素个数,默认是0</span></span><br><span class="line">        <span class="comment">//size=0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数组索引越界异常："</span> + i); <span class="comment">//可使用自定义异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elementData[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(e) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i] == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (e.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, Object e)</span> </span>&#123;</span><br><span class="line">        rangeCheck(i);</span><br><span class="line">        <span class="comment">//数组满了，就扩容</span></span><br><span class="line">        <span class="keyword">if</span> (size == elementData.length) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后移i及其后面的位置，从最后一个开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = size; j &gt; i; j--) &#123;</span><br><span class="line">            elementData[j] = elementData[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给数组第i个位置赋值</span></span><br><span class="line">        elementData[i] = e;</span><br><span class="line">        <span class="comment">//元素个数加1</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断i是否为异常值</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数组索引越界异常："</span> + index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(size, e);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         //数组满了，就扩容</span></span><br><span class="line"><span class="comment">         if (size == elementData.length) &#123;</span></span><br><span class="line"><span class="comment">         grow();</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         //给数组赋值</span></span><br><span class="line"><span class="comment">         //elementData[size]=e;</span></span><br><span class="line"><span class="comment">         //元素个数加1</span></span><br><span class="line"><span class="comment">         //size++;</span></span><br><span class="line"><span class="comment">         elementData[size++] = e;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新创建一个新的数组，长度是旧数组的2倍,源码是增长50%</span></span><br><span class="line">        Object[] newArr = <span class="keyword">new</span> Object[elementData.length * <span class="number">2</span>];</span><br><span class="line">        <span class="comment">//将旧数组的数据拷贝到新数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newArr[i] = elementData[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//让elementData指向新数组</span></span><br><span class="line">        elementData = newArr;</span><br><span class="line">        <span class="comment">//等价于elementData = Arrays.copyOf(elementData,elementData.length*2);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(Object obj, Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; index &lt; size; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elementData[index].equals(obj)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.add(index, e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAfter</span><span class="params">(Object obj, Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; index &lt; size; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elementData[index].equals(obj)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.add(index + <span class="number">1</span>, e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        rangeCheck(i);</span><br><span class="line">        Object oldElement = elementData[i];</span><br><span class="line">        fastRemove(i);</span><br><span class="line">        <span class="keyword">return</span> oldElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (e.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Object[] newArr = <span class="keyword">new</span> Object[size - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> newI = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newArr[newI] = elementData[i];</span><br><span class="line">            newI++;</span><br><span class="line">        &#125;</span><br><span class="line">        elementData = newArr;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">replace</span><span class="params">(<span class="keyword">int</span> i, Object e)</span> </span>&#123;</span><br><span class="line">        rangeCheck(i);</span><br><span class="line">        elementData[i] = e;</span><br><span class="line">        <span class="keyword">return</span> elementData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单链表实现—模拟LinkedList"><a href="#单链表实现—模拟LinkedList" class="headerlink" title="单链表实现—模拟LinkedList"></a>单链表实现—模拟LinkedList</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> <span class="keyword">implements</span> <span class="title">List</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">new</span> Node();     <span class="comment">//头结点，不存储数据，只为操作链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;      <span class="comment">//结点数，不包括头结点</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">        Node p = head.getNext();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != size - <span class="number">1</span>) &#123;</span><br><span class="line">                builder.append(p.getData()).append(<span class="string">","</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                builder.append(p.getData());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//移动指针</span></span><br><span class="line">            p = p.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            p = p.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(e) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; index &lt; size; index++) &#123;</span><br><span class="line">                p = p.getNext();</span><br><span class="line">                <span class="keyword">if</span> (p.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; index &lt; size; index++) &#123;</span><br><span class="line">                p = p.getNext();</span><br><span class="line">                <span class="keyword">if</span> (p.getData().equals(e)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, Object e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查索引是否越界</span></span><br><span class="line">        rangeCheck(i);</span><br><span class="line">        <span class="comment">//找到前一个结点，从头结点开始</span></span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            p = p.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建新结点</span></span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node();</span><br><span class="line">        newNode.setData(e);</span><br><span class="line">        <span class="comment">//指明新结点的直接后继</span></span><br><span class="line">        newNode.setNext(p.getNext());</span><br><span class="line">        <span class="comment">//指明新结点的直接前驱</span></span><br><span class="line">        p.setNext(newNode);</span><br><span class="line">        <span class="comment">//元素个数+1</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断i是否为异常值</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数组索引越界异常："</span> + index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addBefore</span><span class="params">(Object obj, Object e)</span> </span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="comment">//先找到前一个结点，在前一个结点后面添加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.getNext().getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.add(i, e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.getNext().getData().equals(obj)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.add(i, e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAfter</span><span class="params">(Object obj, Object e)</span> </span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            p = p.getNext();</span><br><span class="line">            <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.add(i + <span class="number">1</span>, e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.getData().equals(obj)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.add(i + <span class="number">1</span>, e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        rangeCheck(i);</span><br><span class="line">        <span class="comment">//拿到前一个结点</span></span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            p = p.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取该节点</span></span><br><span class="line">        Node now = p.getNext();</span><br><span class="line">        <span class="comment">//删除该结点：前一个结点直接指向该结点的直接后续</span></span><br><span class="line">        p.setNext(now.getNext());</span><br><span class="line">        <span class="comment">//元素数量-1</span></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> now.getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拿到前一个结点</span></span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.getNext().getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//删除操作</span></span><br><span class="line">                    Node next = p.getNext().getNext();</span><br><span class="line">                    p.setNext(next);</span><br><span class="line">                    <span class="comment">//元素数量-1</span></span><br><span class="line">                    size--;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.getNext().getData().equals(e)) &#123;</span><br><span class="line">                    <span class="comment">//删除操作</span></span><br><span class="line">                    Node next = p.getNext().getNext();</span><br><span class="line">                    p.setNext(next);</span><br><span class="line">                    <span class="comment">//元素数量-1</span></span><br><span class="line">                    size--;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">replace</span><span class="params">(<span class="keyword">int</span> i, Object e)</span> </span>&#123;</span><br><span class="line">        rangeCheck(i);</span><br><span class="line">        <span class="comment">//拿到前一个结点</span></span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            p = p.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        Object oldData = p.getData();</span><br><span class="line">        p.setData(e);</span><br><span class="line">        <span class="keyword">return</span> oldData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="其他链表"><a href="#其他链表" class="headerlink" title="其他链表"></a>其他链表</h4><h6 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h6><p>双向链表每一个结点有三部分组成：前驱指针域、数据域、后继指针域</p>
<p><code>Node:    pre,data,next</code></p>
<p>头结点：<code>Node head=Node(null,data,next)</code></p>
<p>尾结点：<code>Node tail=Node(pre,data,null)</code></p>
<h6 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h6><p>单链表—头结点的直接前驱为尾节点，最后一个结点的直接后继为头结点</p>
<p><em>单链表为空时：</em><code>head.next=head</code></p>
<p>双链表—头结点的直接前驱为尾节点，尾结点的直接后继为头结点</p>
<p><code>head.pre=tail</code>        <code>tail.next=head</code></p>
<h4 id="Java中线性表"><a href="#Java中线性表" class="headerlink" title="Java中线性表"></a>Java中线性表</h4><h6 id="Vector-顺序表"><a href="#Vector-顺序表" class="headerlink" title="Vector 顺序表"></a>Vector 顺序表</h6><ul>
<li>底层为可变的数组</li>
<li>增加线程安全，效率低下</li>
<li>扩容每次增长<em>1</em>倍（未指定capacity Increment时）</li>
</ul>
<h6 id="ArrayList顺序表"><a href="#ArrayList顺序表" class="headerlink" title="ArrayList顺序表"></a>ArrayList顺序表</h6><ul>
<li>底层为可变的数组</li>
<li>去除了线程安全换取高效率</li>
<li>扩容每次增长<em>50%</em></li>
</ul>
<h6 id="LinkedList双向链表"><a href="#LinkedList双向链表" class="headerlink" title="LinkedList双向链表"></a>LinkedList双向链表</h6><ul>
<li>双向循环链表</li>
</ul>
<h4 id="相关代码下载"><a href="#相关代码下载" class="headerlink" title="相关代码下载"></a>相关代码下载</h4><p><a href="/download/lineartable.rar">线性表相关代码</a></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>java</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/articles/8e40d0ad.html</url>
    <content><![CDATA[<h3 id="数据库的常用操作"><a href="#数据库的常用操作" class="headerlink" title="数据库的常用操作"></a>数据库的常用操作</h3><h4 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h4><p><code>mysql -h服务器地址 -u用户名 -p密码</code>（不安全）  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql <span class="literal">-hlocalhost</span>(本地) <span class="literal">-u</span>... <span class="literal">-p</span>...</span><br></pre></td></tr></table></figure>
<p>相对安全的登录形式<br>mysql -h服务器地址 -u用户名 -p(回车后输入密码)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql <span class="literal">-hlocalhost</span> <span class="literal">-uroot</span> <span class="literal">-p</span></span><br><span class="line">Enter password:...</span><br></pre></td></tr></table></figure>
<h4 id="退出服务器"><a href="#退出服务器" class="headerlink" title="退出服务器"></a>退出服务器</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="查看当前数据库编码"><a href="#查看当前数据库编码" class="headerlink" title="查看当前数据库编码"></a>查看当前数据库编码</h4><p><code>mysql&gt; show create database 数据库名称;</code>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create database mysql;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line">| Database | <span class="keyword">Create</span> <span class="keyword">Database</span>                                                |</span><br><span class="line">+<span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line">| mysql    | <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`mysql`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> |</span><br><span class="line">+<span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><code>create datebase 数据库的名称 [编码]</code><br>编码可有可无，如果没有就是此服务器的默认编码(安装时选择的编码形式)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database demo;(默认编码)</span><br><span class="line">mysql&gt; create database demo character set gbk;(gbk格式编码)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| demo               |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="修改数据库名称"><a href="#修改数据库名称" class="headerlink" title="修改数据库名称"></a>修改数据库名称</h4><p><code>rename database 旧名称 to 新名称;</code>(<del>5.5版本无法使用</del> )  </p>
<ul>
<li>强制修改数据库名称：<ol>
<li>退出MySQL服务器</li>
<li>进入数据库储存位置,找到文件夹并修改数据库名称(文件夹)</li>
<li>重新登陆MySQL服务器</li>
</ol>
</li>
</ul>
<h4 id="修改数据库的编码"><a href="#修改数据库的编码" class="headerlink" title="修改数据库的编码"></a>修改数据库的编码</h4><p><code>alter database 数据库名称 character set 编码格式;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter database demo character set gbk;</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p><code>drop database 数据库名称;</code>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database demo;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="查看当前使用的数据库"><a href="#查看当前使用的数据库" class="headerlink" title="查看当前使用的数据库"></a>查看当前使用的数据库</h4><p><code>select database();</code>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select database();</span><br><span class="line"></span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| demo       |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><p><code>use 数据库名称;</code>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; use demo;</span><br><span class="line"></span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>
<h3 id="数据表的常用操作"><a href="#数据表的常用操作" class="headerlink" title="数据表的常用操作"></a>数据表的常用操作</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p><code>create table 数据表名称 (字段1 数据类型，字段2 数据类型，字段3 数据类型,...);</code> </p>
<ul>
<li>字段类型 <ul>
<li>int ：整数 -2147483648~2147483647，4个字节</li>
<li>varchar(长度) ： 字符串，可变字节</li>
<li>double ： 小数，8个字节</li>
<li>datetime：时间，7个字节</li>
<li>bit(M)：位数据类型，默认为1位，0或1</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table demolist(</span><br><span class="line">-&gt; id int,</span><br><span class="line">-&gt; name varchar(10),</span><br><span class="line">-&gt; age int,</span><br><span class="line">-&gt; salary double,</span><br><span class="line">-&gt; sex varchar(5)</span><br><span class="line">-&gt; );</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="查看所有数据表"><a href="#查看所有数据表" class="headerlink" title="查看所有数据表"></a>查看所有数据表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_demo |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| demolist       |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="查看数据表编码"><a href="#查看数据表编码" class="headerlink" title="查看数据表编码"></a>查看数据表编码</h4><p><code>mysql&gt; show create database 数据表名称;</code>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table demolist;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table    | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                 |</span><br><span class="line">+<span class="comment">----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| demolist | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`demolist`</span> (</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`salary`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="修改数据表的编码"><a href="#修改数据表的编码" class="headerlink" title="修改数据表的编码"></a>修改数据表的编码</h4><p><code>alter database 数据表名称 character set 编码格式;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demolist character set gbk;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<h4 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h4><p><code>desc 数据表名称;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; use demo;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; desc demolist;</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(10) | YES  |     | NULL    |       |</span><br><span class="line">| age    | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| salary | double      | YES  |     | NULL    |       |</span><br><span class="line">| sex    | varchar(5)  | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="修改数据表结构"><a href="#修改数据表结构" class="headerlink" title="修改数据表结构"></a>修改数据表结构</h4><h5 id="增加列（字段）"><a href="#增加列（字段）" class="headerlink" title="增加列（字段）"></a>增加列（字段）</h5><p><code>alter table 数据表名称 add 字段名称 字段数据类型;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demolist add adress varchar(100);</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demolist;</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------+--------------+------+-----+---------+-------+</span></span><br><span class="line">| Field  | Type         | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">--------+--------------+------+-----+---------+-------+</span></span><br><span class="line">| id     | int(11)      | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(10)  | YES  |     | NULL    |       |</span><br><span class="line">| age    | int(11)      | YES  |     | NULL    |       |</span><br><span class="line">| salary | double       | YES  |     | NULL    |       |</span><br><span class="line">| sex    | varchar(5)   | YES  |     | NULL    |       |</span><br><span class="line">| adress | varchar(100) | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">--------+--------------+------+-----+---------+-------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<h5 id="修改长度-类型-约束"><a href="#修改长度-类型-约束" class="headerlink" title="修改长度/类型/约束"></a>修改长度/类型/约束</h5><p><code>alter table 数据表名称 modify 字段名称 字段新数据类型(新长度 );</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demolist modify name varchar(20);</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demolist;</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------+--------------+------+-----+---------+-------+</span></span><br><span class="line">| Field  | Type         | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">--------+--------------+------+-----+---------+-------+</span></span><br><span class="line">| id     | int(11)      | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(20)  | YES  |     | NULL    |       |</span><br><span class="line">| age    | int(11)      | YES  |     | NULL    |       |</span><br><span class="line">| salary | double       | YES  |     | NULL    |       |</span><br><span class="line">| sex    | varchar(5)   | YES  |     | NULL    |       |</span><br><span class="line">| adress | varchar(100) | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">--------+--------------+------+-----+---------+-------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<h5 id="修改列名（字段名称）"><a href="#修改列名（字段名称）" class="headerlink" title="修改列名（字段名称）"></a>修改列名（字段名称）</h5><p><code>alter table 数据表名称 change 旧的字段名称 新的字段名称 字段数据类型(长度);</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demolist change name username varchar(30);</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demolist;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+--------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type         | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+--------------+------+-----+---------+-------+</span></span><br><span class="line">| id       | int(11)      | YES  |     | NULL    |       |</span><br><span class="line">| username | varchar(30)  | YES  |     | NULL    |       |</span><br><span class="line">| age      | int(11)      | YES  |     | NULL    |       |</span><br><span class="line">| salary   | double       | YES  |     | NULL    |       |</span><br><span class="line">| sex      | varchar(5)   | YES  |     | NULL    |       |</span><br><span class="line">| adress   | varchar(100) | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+--------------+------+-----+---------+-------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<h5 id="删除列（删除字段）"><a href="#删除列（删除字段）" class="headerlink" title="删除列（删除字段）"></a>删除列（删除字段）</h5><p><code>alter table 数据表名称 drop 字段名称;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demolist drop adress;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demolist;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| id       | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| username | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| age      | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| salary   | double      | YES  |     | NULL    |       |</span><br><span class="line">| sex      | varchar(5)  | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="修改数据表名称"><a href="#修改数据表名称" class="headerlink" title="修改数据表名称"></a>修改数据表名称</h4><p><code>rename table 旧的数据表名称 to 新的数据表名称;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; rename table demolist to demotable;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_demo |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| demotable      |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="单表约束"><a href="#单表约束" class="headerlink" title="单表约束"></a>单表约束</h4><h5 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束 primary key"></a>主键约束 primary key</h5><p>为了保证一个列，数据不重复；一般来说，一个表里只有一个主键</p>
<p>修改：<code>alter table 数据表名称 modify 字段名称 primary key;</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter  table demotable modify id int primary key;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc  demotable;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| id       | int(11)     | NO   | PRI | NULL    |       |</span><br><span class="line">| username | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| age      | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| salary   | double      | YES  |     | NULL    |       |</span><br><span class="line">| sex      | varchar(5)  | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><br>创建：<code>alter table 数据表名称 add 字段名称 字段数据类型 primary key auto_increment;</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demotable add id int primary key auto_increment;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure></p>
<h5 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h5><p>为了保证不重复，与主键不同的是可以控制多个字段不重复<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table demoinfo(		</span><br><span class="line">	-&gt; id int primary key auto_increment,</span><br><span class="line">	-&gt; name varchar(50),</span><br><span class="line">	-&gt; dna varchar(32) unique,</span><br><span class="line">	-&gt; age int </span><br><span class="line">	-&gt; );</span><br><span class="line">	</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demoinfo;</span><br><span class="line"></span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(50) | YES  |     | NULL    |                |</span><br><span class="line">| dna   | varchar(32) | YES  | UNI | NULL    |                |</span><br><span class="line">| age   | int(11)     | YES  |     | NULL    |                |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure></p>
<h5 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h5><p>被约束的字段必须有数据<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demoinfo modify name varchar(50) not null;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demoinfo;</span><br><span class="line"></span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(50) | NO   |     | NULL    |                |</span><br><span class="line">| dna   | varchar(32) | YES  | UNI | NULL    |                |</span><br><span class="line">| age   | int(11)     | YES  |     | NULL    |                |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure></p>
<h5 id="删除主键约束-唯一约束-非空约束"><a href="#删除主键约束-唯一约束-非空约束" class="headerlink" title="删除主键约束/唯一约束/非空约束"></a>删除主键约束/唯一约束/非空约束</h5><h6 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h6><p><code>alter table 数据表名称  drop primary;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demoinfo drop primary key;</span><br><span class="line"></span><br><span class="line">ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</span><br><span class="line">//出现此错误，是因为这个是 自动增长的 主键</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//先修改掉自动增长</span><br><span class="line">mysql&gt; alter table demoinfo modify id int;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">//删除主键</span><br><span class="line">mysql&gt; alter table demoinfo drop primary key;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demoinfo;</span><br><span class="line"></span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| id    | int(11)     | NO   |     | 0       |       |</span><br><span class="line">| name  | varchar(50) | NO   |     | NULL    |       |</span><br><span class="line">| dna   | varchar(32) | YES  | UNI | NULL    |       |</span><br><span class="line">| age   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
<h6 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h6><p><code>alter table 数据表名称  drop index 字段名称;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demoinfo drop index dna;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demoinfo;</span><br><span class="line"></span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| id    | int(11)     | NO   |     | 0       |       |</span><br><span class="line">| name  | varchar(50) | NO   |     | NULL    |       |</span><br><span class="line">| dna   | varchar(32) | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<h6 id="删除非空约束"><a href="#删除非空约束" class="headerlink" title="删除非空约束"></a>删除非空约束</h6><p>直接修改即可<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table demoinfo modify name varchar(50);</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc demoinfo;</span><br><span class="line"></span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| id    | int(11)     | NO   |     | 0       |       |</span><br><span class="line">| name  | varchar(50) | YES  |     | NULL    |       |</span><br><span class="line">| dna   | varchar(32) | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></p>
<h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><p><code>drop table 数据表名称;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table demoinfo;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<h3 id="数据的常用操作"><a href="#数据的常用操作" class="headerlink" title="数据的常用操作"></a>数据的常用操作</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><h5 id="插入完整数据"><a href="#插入完整数据" class="headerlink" title="插入完整数据"></a>插入完整数据</h5><p><code>insert into 数据表名(字段名称1,字段名称2...) value(值1，值2...);</code><br><code>insert into 数据表名 value(值1，值2...);</code> (简洁写法)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into demotable(username,age,salary,sex,id) value("zhangsan",20,0,"man",123);</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into demotable value("lisi",20,0,"man",1234);</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p><a href="#data">查看数据</a></p>
<h5 id="插入部分数据"><a href="#插入部分数据" class="headerlink" title="插入部分数据"></a>插入部分数据</h5><p>字段与值对应着写<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into demotable(username,age,sex) value("wangwu",20,"man");</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><br><a href="#data">查看数据</a></p>
<h5 id="插入中文"><a href="#插入中文" class="headerlink" title="插入中文"></a>插入中文</h5><p>直接输入中文，报错<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into demotable(username,age) value("老王",20);</span><br><span class="line"></span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: '\xC0\xCF\xCD\xF5' for column 'username' at row 1</span><br></pre></td></tr></table></figure></p>
<font color="#ff0000">原因：控制台是gbk编码，mysql服务器是utf8编码</font>
<font color="#00ff00">找到mysql的安装文件中的my.ini文件，修改</font>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改前</span></span><br><span class="line">[mysql] </span><br><span class="line"><span class="keyword">default</span>-character-<span class="built_in">set</span>=utf8</span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line">[mysql] </span><br><span class="line"><span class="keyword">default</span>-character-<span class="built_in">set</span>=GBK</span><br></pre></td></tr></table></figure>
<font color="#00ff00">保存后，重启服务（我的电脑右键管理-->服务-->重新启动MySQL），重新进入mysql</font>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into demotable(username,age) value("老王",20);</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p><a href="#data">查看数据</a></p>
<h4 id="查询表中的数据"><a href="#查询表中的数据" class="headerlink" title="查询表中的数据"></a>查询表中的数据</h4><p><code>select * from 数据表名;</code><br><span id="data"></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select  * from demotable;</span><br><span class="line"></span><br><span class="line">//id 为auto_increment 自动增长</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| username | age  | salary | sex  | id   |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| zhangsan |   20 |      0 | man  |  123 |</span><br><span class="line">| lisi     |   20 |      0 | man  | 1234 |</span><br><span class="line">| wangwu   |   20 |   NULL | man  | 1235 |</span><br><span class="line">| 老王     |   20 |   NULL | NULL | 1236 |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>对数据进行更新<br><code>update 数据表名称 set 字段名称 = 值 条件 (where);</code> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; update demotable set salary = 1  where username = "wangwu";</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from demotable;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| username | age  | salary | sex  | id   |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| zhangsan |   20 |      0 | man  |  123 |</span><br><span class="line">| lisi     |   20 |      0 | man  | 1234 |</span><br><span class="line">| wangwu   |   20 |      1 | man  | 1235 |</span><br><span class="line">| 老王     |   20 |   NULL | NULL | 1236 |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="删除数据表中的数据"><a href="#删除数据表中的数据" class="headerlink" title="删除数据表中的数据"></a>删除数据表中的数据</h4><p><code>delete from 数据表名称 条件(where);</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from demotable where username = "wangwu";</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from demotable;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| username | age  | salary | sex  | id   |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| zhangsan |   20 |      0 | man  |  123 |</span><br><span class="line">| lisi     |   20 |      0 | man  | 1234 |</span><br><span class="line">| 老王     |   20 |   NULL | NULL | 1236 |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="数据表中的数据的查询详细"><a href="#数据表中的数据的查询详细" class="headerlink" title="数据表中的数据的查询详细"></a>数据表中的数据的查询详细</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ul>
<li><code>=</code>  等于</li>
<li><code>&lt;&gt;</code>  不等于</li>
<li><code>&gt;=</code>  大于等于</li>
<li><code>&lt;=</code> 小于等于</li>
<li><code>&gt;</code>  大于</li>
<li><code>&lt;</code>  小于</li>
<li><code>is null</code>  空</li>
<li><code>is not null</code>  非空</li>
<li><code>and</code>  且<ul>
<li>between … and … 在…与…之间，前面的要小于后面的</li>
</ul>
</li>
<li><code>or</code>  或<ul>
<li>列名 in(值1,值2,…)</li>
<li>列名 = 值1 or 列名 = 值2 or …</li>
</ul>
</li>
<li><code>not</code>  非</li>
<li><code>like</code> </li>
</ul>
<h4 id="select-from-数据表名称-where-条件"><a href="#select-from-数据表名称-where-条件" class="headerlink" title="select * from 数据表名称 [where 条件];"></a>select * from 数据表名称 [where 条件];</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from demotable where salary = 0;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| username | age  | salary | sex  | id   |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| zhangsan |   20 |      0 | man  |  123 |</span><br><span class="line">| lisi     |   20 |      0 | man  | 1234 |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="select-列名-列名-…-from-数据表名称-where-条件"><a href="#select-列名-列名-…-from-数据表名称-where-条件" class="headerlink" title="select 列名,列名,… from 数据表名称 [where 条件];"></a>select 列名,列名,… from 数据表名称 [where 条件];</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username,age from demotable;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">| username | age  |</span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">| zhangsan |   20 |</span><br><span class="line">| lisi     |   20 |</span><br><span class="line">| 老王     |   20 |</span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="select-列名-列名-…-from-数据表名称-by-列名-asc-升序-desc-降序"><a href="#select-列名-列名-…-from-数据表名称-by-列名-asc-升序-desc-降序" class="headerlink" title="select 列名,列名,… from 数据表名称 by 列名 asc(升序) / desc(降序);"></a>select 列名,列名,… from 数据表名称 by 列名 asc(升序) / desc(降序);</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from demotable order by id desc;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| username | age  | salary | sex  | id   |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">| 老王     |   20 |   NULL | NULL | 1236 |</span><br><span class="line">| lisi     |   20 |      0 | man  | 1234 |</span><br><span class="line">| zhangsan |   20 |      0 | man  |  123 |</span><br><span class="line">+<span class="comment">----------+------+--------+------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="select-列名-as-别名-列名-as-别名-…-from-数据表名称-where-条件"><a href="#select-列名-as-别名-列名-as-别名-…-from-数据表名称-where-条件" class="headerlink" title="select 列名 as 别名,列名 as 别名,… from 数据表名称 where 条件;"></a>select 列名 as 别名,列名 as 别名,… from 数据表名称 where 条件;</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username as "名字",age as "年龄" from demotable;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">| 名字     | 年龄 |</span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">| zhangsan |   20 |</span><br><span class="line">| lisi     |   20 |</span><br><span class="line">| 老王     |   20 |</span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p><code>select * from 数据表名称 where 字段名称 like 关键字%</code>  </p>
<ul>
<li>%表示通配符</li>
<li>_表示占位符<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from demotable where username like "zhang%";</span><br><span class="line">+<span class="comment">----------+------+--------+------+-----+</span></span><br><span class="line">| username | age  | salary | sex  | id  |</span><br><span class="line">+<span class="comment">----------+------+--------+------+-----+</span></span><br><span class="line">| zhangsan |   20 |      0 | man  | 123 |</span><br><span class="line">+<span class="comment">----------+------+--------+------+-----+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="count：-统计个数"><a href="#count：-统计个数" class="headerlink" title="count： 统计个数"></a>count： 统计个数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(age),age from demotable where age = 20;</span><br><span class="line">+<span class="comment">------------+------+</span></span><br><span class="line">| count(age) | age  |</span><br><span class="line">+<span class="comment">------------+------+</span></span><br><span class="line">|          3 |   20 |</span><br><span class="line">+<span class="comment">------------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="sum函数：-求和"><a href="#sum函数：-求和" class="headerlink" title="sum函数： 求和"></a>sum函数： 求和</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select sum(salary) from demotable;</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| sum(salary) |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">|           0 |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="avg函数：-求平均数"><a href="#avg函数：-求平均数" class="headerlink" title="avg函数： 求平均数"></a>avg函数： 求平均数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select avg(id) from demotable;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| avg(id)  |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| 864.3333 |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="max与min：求最大值与最小值"><a href="#max与min：求最大值与最小值" class="headerlink" title="max与min：求最大值与最小值"></a>max与min：求最大值与最小值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select max(id),min(id) from demotable;</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">| max(id) | min(id) |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    1236 |     123 |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>以某一个字段为组，相同的进行折叠<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from demotable group by age;</span><br><span class="line">+<span class="comment">----------+------+--------+------+-----+</span></span><br><span class="line">| username | age  | salary | sex  | id  |</span><br><span class="line">+<span class="comment">----------+------+--------+------+-----+</span></span><br><span class="line">| zhangsan |   20 |      0 | man  | 123 |</span><br><span class="line">+<span class="comment">----------+------+--------+------+-----+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<p>统计各年龄段人数<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select age,count(age) from demotable group by age;</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">| age  | count(age) |</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">|   20 |          3 |</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="数据库备份-恢复"><a href="#数据库备份-恢复" class="headerlink" title="数据库备份/恢复"></a>数据库备份/恢复</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p><code>mysqldump -h服务器地址 -u用户名 -p(密码/回车写) 数据库名称 &gt; 数据备份的路径</code></p>
<h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p><code>mysql -u用户名 -p(密码/回车写) 新数据库名称</code></p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>国内镜像网站网址</title>
    <url>/articles/2e851ff5.html</url>
    <content><![CDATA[<p>国内镜像网站：</p>
<p>中科大镜像站（地址：安徽）：<a href="http://mirrors.ustc.edu.cn" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn</a><br>清华大学镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn</a><br>浙江大学镜像站：<a href="http://mirrors.zju.edu.cn" target="_blank" rel="noopener">http://mirrors.zju.edu.cn</a><br>重庆大学镜像站：<a href="http://mirrors.cqu.edu.cn" target="_blank" rel="noopener">http://mirrors.cqu.edu.cn</a><br>兰州大学镜像站：<a href="http://mirror.lzu.edu.cn" target="_blank" rel="noopener">http://mirror.lzu.edu.cn</a></p>
]]></content>
  </entry>
  <entry>
    <title>python3使用webdriver模拟浏览器实现网页访问</title>
    <url>/articles/86288129.html</url>
    <content><![CDATA[<h4 id="webdriver"><a href="#webdriver" class="headerlink" title="webdriver"></a>webdriver</h4><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><ul>
<li>进入网址<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver/</a>下载与安装的google chrome版本相对应的chrome driver</li>
<li>将下载的chromedriver.exe添加到python项目文件夹中</li>
</ul>
<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p>通过对webdriver进行设置可以实现静默运行和通过窗口运行</p>
<a id="more"></a>
<h5 id="窗口运行"><a href="#窗口运行" class="headerlink" title="窗口运行"></a>窗口运行</h5><p>运行python文件后会打开一个chrome窗口对网页进行访问</p>
<h6 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># webdriver配置，静默运行</span></span><br><span class="line">driver = webdriver.Chrome()  </span><br><span class="line">driver.viewportSize = &#123;<span class="string">'width'</span>: <span class="number">1920</span>, <span class="string">'height'</span>: <span class="number">900</span>&#125;	<span class="comment"># 分辨率</span></span><br><span class="line">driver.maximize_window()	<span class="comment"># 可使窗口最大化</span></span><br><span class="line">url=<span class="string">''</span></span><br><span class="line">driver.get(url)	<span class="comment"># 对网页进行访问</span></span><br><span class="line">print(driver.page_source)	<span class="comment"># 打印网页源码</span></span><br></pre></td></tr></table></figure>
<h5 id="静默运行"><a href="#静默运行" class="headerlink" title="静默运行"></a>静默运行</h5><p>运行python文件后不会打开chrome窗口，以静默的方式对网页进行访问</p>
<h6 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># webdriver配置，静默运行</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">'headless'</span>)  <span class="comment"># 设置option</span></span><br><span class="line">driver = webdriver.Chrome(options=option)  <span class="comment"># 调用带参数的谷歌浏览器</span></span><br><span class="line">driver.viewportSize = &#123;<span class="string">'width'</span>: <span class="number">1920</span>, <span class="string">'height'</span>: <span class="number">900</span>&#125;	<span class="comment"># 分辨率</span></span><br><span class="line">url=<span class="string">''</span></span><br><span class="line">driver.get(url)</span><br><span class="line">print(driver.page_source)	<span class="comment"># 打印网页源码</span></span><br></pre></td></tr></table></figure>
<h4 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h4><p>可以通过网站<a href="https://www.w3.org/TR/webdriver/" target="_blank" rel="noopener">webdriver</a>进行相关文档的查询</p>
<h6 id="元素查找"><a href="#元素查找" class="headerlink" title="元素查找"></a>元素查找</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">element=driver.find_element_by_xpath()	<span class="comment"># 通过绝对路径对网页的某一元素进行查找</span></span><br><span class="line"></span><br><span class="line">element=driver.find_element_by_class_name()	<span class="comment"># 类名查找</span></span><br><span class="line"></span><br><span class="line">element=driver.find_element_by_id()		<span class="comment"># id查找</span></span><br><span class="line"></span><br><span class="line">element=driver.find_element_by_name()	<span class="comment"># name查找</span></span><br></pre></td></tr></table></figure>
<h6 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">element.screenshot(<span class="string">"文件名.png"</span>)	 <span class="comment"># 将元素内容截屏保存成png格式，静默运行方式下可以执行，在窗口模式下运行时</span></span><br></pre></td></tr></table></figure>
<h6 id="输入内容"><a href="#输入内容" class="headerlink" title="输入内容"></a>输入内容</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">element.send_keys(<span class="string">''</span>)	<span class="comment"># 对元素进行填写内容，可用于输入框</span></span><br></pre></td></tr></table></figure>
<h6 id="网页刷新"><a href="#网页刷新" class="headerlink" title="网页刷新"></a>网页刷新</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">driver.refresh()	<span class="comment"># 浏览器刷新网页</span></span><br></pre></td></tr></table></figure>
<h5 id="网页信息"><a href="#网页信息" class="headerlink" title="网页信息"></a>网页信息</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">driver.title() 			<span class="comment"># 获取网页的标题</span></span><br><span class="line"></span><br><span class="line">driver.page_source	<span class="comment"># 获取网页源码</span></span><br><span class="line"></span><br><span class="line">driver.get_cookies()	<span class="comment"># 获取浏览器cookie</span></span><br><span class="line"></span><br><span class="line">driver.current_url		<span class="comment"># 获取当前url</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>webdriver</tag>
      </tags>
  </entry>
  <entry>
    <title>python语法</title>
    <url>/articles/81b2f4bf.html</url>
    <content><![CDATA[<h2 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h2><p>python官方网站 <a href="https://www.python.org" target="_blank" rel="noopener">python</a>  </p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol>
<li>数值没有长度的限制  </li>
<li>可以直接执行运算  </li>
<li>使用缩进的空白代替大括号{}，缩进的空白数量是可变的，但所有代码块语句必须包含相同的缩进空白数量</li>
</ol>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>单行注释 #<br>多行注释 “”” “””或 ‘’’ ‘’’</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>‘’’ ‘’’  或  ‘ ‘  或 “ “</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>作用</th>
<th>函数名</th>
</tr>
</thead>
<tbody>
<tr>
<td>查找</td>
<td>find()</td>
</tr>
<tr>
<td>分割</td>
<td>split()</td>
</tr>
<tr>
<td>大小写转换</td>
<td>upper()/lower()</td>
</tr>
<tr>
<td>首字母大写</td>
<td>title()</td>
</tr>
<tr>
<td>截取</td>
<td>变量名[首:尾] (左闭右开)</td>
</tr>
<tr>
<td>追加</td>
<td>append()</td>
</tr>
<tr>
<td>取反</td>
<td>reverse()</td>
</tr>
<tr>
<td>替换</td>
<td>replace(‘要替换的字符’,’替换的字符’)</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>在内存中存储的数据可以有多种类型<br>python五个标准的数据类型：  </p>
<ul>
<li>Numbers（数字）<ul>
<li>int 整型</li>
<li>long int 长整型（在python3中统一为int整形）</li>
<li>e 科学计数法</li>
</ul>
</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Dictionary（字典）</li>
</ul>
<p>变量在定义时，没有指定的数据的类型，定义变量的一般格式为：</p>
<ol>
<li>变量名=值；  </li>
<li>变量1，变量2，··· 变量n=值1，值2，··· 值n （使用此种方式定义变量时，左右的变量个数和值必须保持一致）  </li>
</ol>
<p>数据类型转换</p>
<ul>
<li>整型 int(‘数值’)  数值必须为int类型才能转换 </li>
<li>单精度浮点数 float(‘数值’)  </li>
<li>字符串 str(数值)  </li>
</ul>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><h6 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h6><ul>
<li>加 +  </li>
<li>减 -  </li>
<li>乘 *  </li>
<li>除  /   </li>
<li>整除 //  </li>
<li>求余 %  </li>
<li>幂运算 <strong>  m</strong>n：n个m相乘  </li>
</ul>
<h6 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h6><p>与 and<br>或 or<br>非 not  </p>
<h6 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h6><p>in / not in 判断元素是否存在某个序列中  </p>
<h6 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h6><p>is / is not 判断两个标识符是否引用自同一个对象/不同对象</p>
<h4 id="python常用函数"><a href="#python常用函数" class="headerlink" title="python常用函数"></a>python常用函数</h4><h6 id="输入函数"><a href="#输入函数" class="headerlink" title="输入函数"></a>输入函数</h6><p>variable=input()</p>
<h6 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h6><p>print(“”,end=’\r\n’) 输出函数  默认以\r\n结尾 end参数可以调整print的输出结尾<br>print(“字符串” * 数值n) 将字符串输出n次<br>print(数值a 算术运算符 数值b) 执行运算并输出结果<br>print(“%d” % 变量名[int]) 输出变量值 [%s —字符串]</p>
<h6 id="type函数"><a href="#type函数" class="headerlink" title="type函数"></a>type函数</h6><p>type(数据) 能得到数据的数据类型</p>
<h6 id="isinstance函数"><a href="#isinstance函数" class="headerlink" title="isinstance函数"></a>isinstance函数</h6><p>isinstance(数据,数据类型) 判断数据是否为所给的数据类型</p>
<h6 id="id函数"><a href="#id函数" class="headerlink" title="id函数"></a>id函数</h6><p>id(数据) 返回所给数据在内存中的地址</p>
<h6 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h6><p>将字符串当成有效的表达式来求值并返回计算结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cal = input(<span class="string">"请输入一个算术式"</span>)</span><br><span class="line">print(eval(cal))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>请输入一个算术式3*2<br>6</p>
<p>Process finished with exit code 0</p>
</blockquote>
<p>eval直接转换input</p>
<blockquote>
<p>__import__(’os‘).system(’ls‘)</p>
<p>等价代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">"终端命令"</span>)</span><br></pre></td></tr></table></figure>
<p>执行成功，返回0<br>执行失败，返回错误信息</p>
</blockquote>
<h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><h5 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h5><h6 id="标准写法"><a href="#标准写法" class="headerlink" title="标准写法"></a>标准写法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件语句<span class="number">1</span> :  </span><br><span class="line">  执行语句<span class="number">1</span>  </span><br><span class="line"><span class="keyword">elif</span> 条件语句n :  </span><br><span class="line">  执行语句n  </span><br><span class="line"><span class="keyword">else</span> :  </span><br><span class="line">  执行语句n+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h6 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h6><p>variable= value1 if 条件语句1  else  value2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span> <span class="keyword">if</span> <span class="number">3</span> &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span>	<span class="comment"># 2和3之间取较小值</span></span><br></pre></td></tr></table></figure>
<h5 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#while循环语句</span></span><br><span class="line"><span class="keyword">while</span> 条件语句 :  <span class="comment">#条件符合</span></span><br><span class="line">  循环体语句  </span><br><span class="line"><span class="keyword">else</span> :  	<span class="comment">#条件不符合</span></span><br><span class="line">  执行语句  </span><br><span class="line"><span class="comment">#for循环语句</span></span><br><span class="line"><span class="comment">#遍历列表</span></span><br><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 列表名:</span><br><span class="line">  执行语句</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">  执行语句</span><br></pre></td></tr></table></figure>
<ul>
<li>break：中断循环，跳出循环体  </li>
<li>continue：循环向下一个执行  </li>
<li>pass：不执行任何操作，起到占位的作用 </li>
</ul>
<h5 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h5><p>lambda表达式不是函数，是实现简化语句的一种形式<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#eg.</span></span><br><span class="line">sum = <span class="keyword">lambda</span> 参数 : 执行语句</span><br></pre></td></tr></table></figure></p>
<h4 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h4><ul>
<li>列表中可存储不同的数据类型   </li>
<li>列表元素位置排序从0开始，可以用负数访问列表，最后一个元素的位置为-1<br>组合 不同的列表可以组合成一个列表，用+链接<br>重复 同一个列表重复n次，用*n实现  </li>
</ul>
<h6 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h6><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数名/关键字</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cmp()</td>
<td style="text-align:left">比较，（2.x版本适用）在3.x版本中以(a&gt;b)&gt;(a&lt;b)替代</td>
</tr>
<tr>
<td style="text-align:center">in</td>
<td style="text-align:left">元素是否存在于列表</td>
</tr>
<tr>
<td style="text-align:center">del</td>
<td style="text-align:left">删除列表</td>
</tr>
<tr>
<td style="text-align:center">len()</td>
<td style="text-align:left">列表长度</td>
</tr>
<tr>
<td style="text-align:center">max()</td>
<td style="text-align:left">列表中的最大值</td>
</tr>
<tr>
<td style="text-align:center">min()</td>
<td style="text-align:left">列表中的最小值</td>
</tr>
<tr>
<td style="text-align:center">list()</td>
<td style="text-align:left">将元组转换成列表</td>
</tr>
</tbody>
</table>
</div>
<h6 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h6><div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>append()</td>
<td>追加</td>
</tr>
<tr>
<td>extend(seq)</td>
<td>扩展</td>
</tr>
<tr>
<td>insert(index,object)</td>
<td>插入</td>
</tr>
<tr>
<td>index(object)</td>
<td>索引</td>
</tr>
<tr>
<td>count(object)</td>
<td>元素出现的次数</td>
</tr>
<tr>
<td>pop(index=-1) 默认为最后一个元素</td>
<td>移除指定位置的元素</td>
</tr>
<tr>
<td>remove(object)</td>
<td>移除匹配元素的第一个</td>
</tr>
<tr>
<td>reverse() / 列表名[::-1]</td>
<td>反向</td>
</tr>
<tr>
<td>sort(cmp=none,key=none,reverse=false) <br />cmp指定方法,<br />key指定元素,<br />reverse:true降序,false升序</td>
<td>排序</td>
</tr>
</tbody>
</table>
</div>
<h4 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h4><ul>
<li>与列表类似,元组中的元素值不能改变</li>
<li>元组中的元素不允许删除,只能删除整个元组</li>
<li>元组使用小括号 (),列表使用方括号 []</li>
<li><font color="red">创建空元组 tup=() 当元组中只包含一个元素时,要以逗号结尾</font><h6 id="元组函数"><a href="#元组函数" class="headerlink" title="元组函数"></a>元组函数</h6></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>cmp()</td>
<td>比较</td>
</tr>
<tr>
<td>len(tuple)</td>
<td>长度</td>
</tr>
<tr>
<td>max(tuple)</td>
<td>最大值</td>
</tr>
<tr>
<td>min(tuple)</td>
<td>最小值</td>
</tr>
<tr>
<td>tuple(seq)</td>
<td>列表转换成元组</td>
</tr>
</tbody>
</table>
</div>
<h4 id="字典dict"><a href="#字典dict" class="headerlink" title="字典dict"></a>字典dict</h4><ul>
<li>字典是一种可变容器模型，且可存储任意类型对象</li>
<li>字典是以键值对的形式存在的key:value</li>
<li>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不是唯一的</li>
<li>值是可以取任何数据类型,既可以是python的标准对象，也能是用户自定义对象</li>
<li>键必须不可变，可用数字，字符串，元组，但不能用列表</li>
<li>访问字典中不存在的键，会输出错误KeyError</li>
<li>字典的内容可以增添新的键/值对，修改或删除已有的键/值</li>
<li>删除键值对 del  字典名[‘键名’]</li>
<li>删除字典 del 字典名</li>
</ul>
<h6 id="字典函数"><a href="#字典函数" class="headerlink" title="字典函数"></a>字典函数</h6><p>比较两个字典元素 cmp(dict1,dict2)   <del>3.x不可用</del><br>计算字典元素个数 len(dict)<br>输出字典可打印的字符串表示 str(dict)<br>返回输入的变量类型 type(variable)  </p>
<h6 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h6><ul>
<li>{key1:value1,key2:value2}</li>
<li>返回一个字典的复制 dict.copy()</li>
<li>创建以指定序列的元素为键,value为初始值的新字典 dict.fromkeys(seq[,value])</li>
<li>返回指定键的值 dict.get(key,default=None)     当值不在字典时返回default值</li>
<li>字典的键查询 dict.has_key(key)</li>
<li>以列表返回可遍历的元素、数组 dict.items()  </li>
<li>查询所有键名 dict.keys()</li>
<li>以列表返回字典中的所有值 dict.values()</li>
<li>设置键的值 dict.setdefault(key,default=None)  当键不存在时，自动创建</li>
<li>更新字典的键值对 dict1.update(dict2)</li>
<li>删除 pop(key[,default]) 返回被删除的键值</li>
<li>随机返回并输出一对键值对 dict.popitem()</li>
</ul>
<h4 id="元组和字典的拆包"><a href="#元组和字典的拆包" class="headerlink" title="元组和字典的拆包"></a>元组和字典的拆包</h4><p>拆包语法：简化元组/字典变量的传递</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">gl_dict = &#123;<span class="string">"name"</span>: <span class="string">"ZhangSan"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素均被传递为元组</span></span><br><span class="line">func(gl_nums, gl_dict)</span><br><span class="line"><span class="comment"># 拆包语法</span></span><br><span class="line">func(*gl_nums, **gl_dict)</span><br><span class="line"><span class="comment"># 一般形式</span></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, name=<span class="string">"ZhangSan"</span>, age=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h4><ul>
<li>python内置数据结构（集合）    </li>
<li>{}</li>
<li>无序，可更改  </li>
<li>set集合类需要的参数必须是迭代器类型的  </li>
<li>一般用来去重，集合的求交集或并集  </li>
</ul>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数的定义：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span> :</span>	<span class="comment">#当参数是列表，字典等引用类型数据，函数内的执行语句会对其值改变</span></span><br><span class="line">    执行语句</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><br>函数的参数</p>
<ul>
<li>必备参数</li>
<li>关键字参数</li>
<li>默认参数</li>
<li>不定长参数 def 函数名(*参数名)<ul>
<li>*参数名 接收元组</li>
<li>**参数名 接收字典</li>
</ul>
</li>
</ul>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>异常的完整处理方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="comment"># 执行可能抛出异常的语句</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型:</span><br><span class="line">	<span class="comment"># 异常处理语句</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="comment"># 打印错误类型</span></span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">	<span class="comment"># 是否发生异常都执行的语句</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h5 id="简单异常捕获"><a href="#简单异常捕获" class="headerlink" title="简单异常捕获"></a>简单异常捕获</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">"请输入整数"</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"请输入正确的数字"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<h5 id="错误类型捕获"><a href="#错误类型捕获" class="headerlink" title="错误类型捕获"></a>错误类型捕获</h5><p>不同错误类型进行捕获</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">"请输入整数"</span>))</span><br><span class="line">    res = <span class="number">10</span> / num</span><br><span class="line">    print(res)</span><br><span class="line"><span class="keyword">except</span> ValueError:	<span class="comment"># 错误类型1</span></span><br><span class="line">    print(<span class="string">"请输入正确的数字"</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError: <span class="comment"># 错误类型2</span></span><br><span class="line">    print(<span class="string">"0不能作被除数"</span>)</span><br></pre></td></tr></table></figure>
<p>捕获未知错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">"请输入整数"</span>))</span><br><span class="line">    res = <span class="number">10</span> / num</span><br><span class="line">    print(res)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误%s"</span> % result)</span><br></pre></td></tr></table></figure>
<h5 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h5><p>当函数/方法执行出现异常，会将异常传递给函数/方法的调用一方</p>
<p>如果传递到主程序，仍没有异常处理，程序才会被终止</p>
<h5 id="主动抛出异常raise"><a href="#主动抛出异常raise" class="headerlink" title="主动抛出异常raise"></a>主动抛出异常raise</h5><p>抛出异常，由其他需要处理的函数捕获异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span> Exception(<span class="string">"异常信息"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="类class"><a href="#类class" class="headerlink" title="类class"></a>类class</h4><blockquote>
<p>class 类名:<br>    属性<br>    函数</p>
</blockquote>
<p>其中函数中的<code>self</code>，哪一个对象调用的方法，<code>self</code>就指向哪一个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,属性)</span>:</span> <span class="comment"># 构造函数，self是类的实例</span></span><br><span class="line">         self.name = <span class="string">"Tom"</span> <span class="comment"># 初始化内部属性</span></span><br></pre></td></tr></table></figure>
<p>一种给类的对象添加属性的方法，即在类的外部给对象增加属性，但<font color="red">不推荐</font>使用，因为没有对类进行实质性修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一种给类的对象添加属性的方法，但不推荐使用，因为没有对类进行实质性修改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Test()</span><br><span class="line">a.name = <span class="string">"A"</span></span><br><span class="line">print(a.name)</span><br></pre></td></tr></table></figure>
<h5 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h5><blockquote>
<p>私有属性或私有方法：<br>在属性或方法名前加 __ ,即为类的私有属性或方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 私有属性</span></span><br><span class="line">    	self.__age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">secret</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s的年龄是%d"</span> % (self.name, self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sing</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">girl = Women(<span class="string">"Mary"</span>)</span><br><span class="line"><span class="comment"># 私有属性在外界不能直接访问</span></span><br><span class="line"><span class="comment"># print(girl.__age)</span></span><br><span class="line"></span><br><span class="line">girl.secret()</span><br><span class="line"><span class="comment"># 私有属性在外界不能直接访问</span></span><br><span class="line"><span class="comment"># girl.__sing()</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>伪私有属性的访问:  类对象名.<em>类名_</em>属性名</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(girl._Women__age)</span><br><span class="line">print(girl._Women__sing())</span><br></pre></td></tr></table></figure>
<h5 id="dir内置函数"><a href="#dir内置函数" class="headerlink" title="dir内置函数"></a>dir内置函数</h5><table>
    <caption align="top">常用内置方法及属性</caption>
    <th align="center">
    <td>序号</td>
    <td>方法名</td>
    <td>类型</td>
    <td>作用</td>
    </th>
<tr align="center">
    <td>01</td>
    <td>__new__</td>
    <td>方法</td>
    <td>创建对象时，会被自动调用</td>
</tr>
<tr align="center">
    <td>02</td>
    <td>__init__</td>
    <td>方法</td>
    <td>对象初始化时，会被自动调用</td>
</tr>
<tr align="center">
    <td>03</td>
    <td>__del__</td>
    <td>方法</td>
    <td>从内存中销毁对象前，会被调用</td>
</tr>    
<tr align="center">
    <td>04</td>
    <td>__str__</td>
    <td>方法</td>
    <td>返回对象的描述信息，print()函数输出使用</td>
</tr>
</table>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看dir内置函数</span></span><br><span class="line">dir(func())</span><br><span class="line"><span class="comment"># ['__bool__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']</span></span><br></pre></td></tr></table></figure>
<p>del关键字 销毁对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"销毁前"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print()默认输出16进制的地址值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 必须返回一个字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">del</span> a</span><br></pre></td></tr></table></figure>
<blockquote>
<p>初始化<br>A<br>销毁前</p>
<p>Process finished with exit code 0</p>
</blockquote>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><ul>
<li>单继承：某个类只直接继承一个类</li>
<li>多继承：某个类直接继承多个类</li>
</ul>
<blockquote>
<p>注意：子类不能在自己的方法内部直接访问父类私有属性或私有方法，只能通过父类的公有方法间接调用</p>
<p>多继承父类之间不要有重名的属性或方法名，默认优先调用先继承的父类</p>
<p>MRO：method resolution order 多继承时判断属性、方法的调用路径<br>子类类名.__mro __</p>
</blockquote>
<ul>
<li><p>重写：子类对父类的方法进行重写</p>
<ul>
<li>完全重写</li>
<li>扩展重写：通过super().父类方法调用父类方法 python3.x<br>父类类名.方法名(self) python2.x</li>
</ul>
<blockquote>
<p>super是一个特殊类<br>super()就是使用super类创建出来的对象</p>
</blockquote>
</li>
<li><p>重载</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#A继承B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="params">(B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,attribute)</span>:</span></span><br><span class="line">        super(B, self).__init__(attribute)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    __sex = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"eating"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"sleepping"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(Person)</span>:</span></span><br><span class="line">    __sex = <span class="string">"man"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span><span class="params">(Person)</span>:</span></span><br><span class="line">    __sex = <span class="string">"female"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coder</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">code</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"coding"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span><span class="params">(Man, Coder)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Manager"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># override重写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">code</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().code()</span><br><span class="line">        Coder.code(self)	<span class="comment"># python2.x中</span></span><br><span class="line">        print(<span class="string">"check"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="新式类与旧式-经典-类"><a href="#新式类与旧式-经典-类" class="headerlink" title="新式类与旧式(经典)类"></a>新式类与旧式(经典)类</h5><p>新式类：以object为基类的类[推荐使用] python3.x没有指定父类，默认使用object作为类的基类</p>
<p>经典类：不以object为基类的类[不推荐使用] python2.x没有指定父类，不会以object作为基类</p>
<h5 id="类属性查找—向上查找"><a href="#类属性查找—向上查找" class="headerlink" title="类属性查找—向上查找"></a>类属性查找—向上查找</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span> <span class="comment"># 类属性，相当于静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.count += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>首先在对象内部查找属性    对象名.属性 [不推荐]</p>
<blockquote>
<p>注意：对象名.属性 =value 只会给对象添加一个 属性，并不会影响到类属性的值</p>
</blockquote>
</li>
<li><p>没有找到就向上查找类属性 类名.属性 [推荐]</p>
</li>
</ul>
<h5 id="类方法和静态方法"><a href="#类方法和静态方法" class="headerlink" title="类方法和静态方法"></a>类方法和静态方法</h5><p>类方法：针对类对象定义的方法，在类方法内部可以直接访问类属性或者调用其他的类方法</p>
<ul>
<li>类方法需要用 修饰器：<code>@classmethod</code>标识</li>
<li>类方法的第一个参数是<code>cls</code><ul>
<li>由哪一个类调用的方法，方法内部的<code>cls</code>就是哪一个类的引用</li>
<li><code>cls</code>可用其他变量名替代</li>
</ul>
</li>
<li>通过类名调用类方法，不需要传递<code>cls</code>参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 类属性，记录工具的数量</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_tool_count</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"Tool count==&gt;%d"</span> % cls.count)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 类属性的值+1</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">knife = Tool(<span class="string">"knife"</span>)</span><br><span class="line">fork = Tool(<span class="string">"fork"</span>)</span><br><span class="line"></span><br><span class="line">Tool.show_tool_count()  <span class="comment"># Tool count==&gt;2</span></span><br></pre></td></tr></table></figure>
<p>静态方法</p>
<ul>
<li>既不需要访问实例属性或者实例方法</li>
<li>也不需要访问类属性或者调用类方法</li>
<li><code>@staticmethod</code>标识静态方法</li>
<li>通过类名.方法名 调用静态方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"Tool is working"</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">Tool.work()  <span class="comment"># Tool is working</span></span><br></pre></td></tr></table></figure>
<h5 id="实例方法、类方法、静态方法"><a href="#实例方法、类方法、静态方法" class="headerlink" title="实例方法、类方法、静态方法"></a>实例方法、类方法、静态方法</h5><p>实例方法：方法内部需要访问实例属性，能访问到类属性</p>
<p>类方法：方法内部只需要访问类属性</p>
<p>静态方法：方法内部不需要访问实例属性和类属性</p>
<h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><p>单例模式<br>    让类创建的对象,在系统中只有为一个实例<br>    每一次执行类名()返回的对象,内存地址是相同的</p>
<p><code>__new__</code>方法<br>    在内存中为对象分配空间<br>    返回对象的引用</p>
<p>重写<code>__new__</code>方法一定要 <code>return super().__new__(cls)</code>,否则Python的计时器得不到分配了空间的对象引用,就不会调用对象的初始化方法</p>
<blockquote>
<p>注意:__new__是一个静态方法,在调用时需要主动传递cls参数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 定义类属性记录单例对象引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 定义类属性记录初始化是否调用</span></span><br><span class="line">    init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">""""# 创建对象</span></span><br><span class="line"><span class="string">        print("创建对象,分配内存空间")</span></span><br><span class="line"><span class="string">        # 分配内存空间</span></span><br><span class="line"><span class="string">        # 返回对象的引用</span></span><br><span class="line"><span class="string">        return super().__new__(cls)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 判断类属性是否是空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 调用父类的方法,为第一个对象分配空间</span></span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line">        <span class="comment"># 返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        # 初始化会被再次调用</span></span><br><span class="line"><span class="string">        print("初始化音乐播放器")</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 初始化方法只调用一次</span></span><br><span class="line">        <span class="keyword">if</span> MusicPlayer.init_flag:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(<span class="string">"初始化音乐播放器"</span>)</span><br><span class="line">        <span class="comment"># 修改标记</span></span><br><span class="line">        MusicPlayer.init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">player = MusicPlayer()</span><br><span class="line">print(player)</span><br><span class="line"></span><br><span class="line">newPlayer = MusicPlayer()</span><br><span class="line">print(newPlayer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个对象的地址是一样的</span></span><br></pre></td></tr></table></figure>
<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><h6 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h6><p>import关键字导入模块，使python文件可供同一目录下的其他python文件使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line">调用：模块名.工具名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 工具名	<span class="comment"># 导入指定工具</span></span><br><span class="line"><span class="comment"># 如果两个模块存在同名的函数，后导入的模块函数会覆盖先导入的函数</span></span><br><span class="line"><span class="comment"># 取别名可以解决冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *	<span class="comment"># 导入模块下所有工具</span></span><br></pre></td></tr></table></figure>
<p>起别名 <code>import 模块名 as 别名</code>   </p>
<p>模块搜索顺序</p>
<p>搜索当前目录指定模块名文件，如果有就直接导入<br>如果没有，再搜索系统目录</p>
<blockquote>
<p>在开发时，给文件起名，不要和系统的模块文件重名</p>
</blockquote>
<p>Python中每一个模块都有一个内置属性<code>__new__</code>可以查看模块的完整路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">print(random)</span><br><span class="line"><span class="comment"># &lt;module 'random' from 'D:\\Program Files\\Python37\\lib\\random.py'&gt;</span></span><br><span class="line">print(random.__file__)</span><br><span class="line"><span class="comment"># D:\Program Files\Python37\lib\random.py</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果当前目录下，存在一个random.py的文件，程序就无法执行</p>
</blockquote>
<h6 id="main-与-name"><a href="#main-与-name" class="headerlink" title="__main__ 与 __name__"></a>__main__ 与 __name__</h6><p>判断当前是否是主线程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">	print(<span class="string">"当前为主线程"</span>)</span><br></pre></td></tr></table></figure>
<h6 id="搜索路径"><a href="#搜索路径" class="headerlink" title="搜索路径"></a>搜索路径</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path	<span class="comment">#返回路径</span></span><br><span class="line">sys.path.append(路径)		<span class="comment">#追加需要导入的模块路径:本地路径</span></span><br></pre></td></tr></table></figure>
<h5 id="包Package"><a href="#包Package" class="headerlink" title="包Package"></a>包Package</h5><ul>
<li>包是一个包含多个模块的特殊的目录</li>
<li>目录下又有一个文件<code>__init__.py</code><ul>
<li>在外界使用包中的模块，需要在<code>__init__.py</code>中对外界提供的模块列表</li>
</ul>
</li>
<li>包名的命名方式和变量名一致，小写字母+<code>_</code></li>
</ul>
<h6 id="制作发布压缩包"><a href="#制作发布压缩包" class="headerlink" title="制作发布压缩包"></a>制作发布压缩包</h6><ul>
<li><p>创建<code>setup.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">"handle_message"</span>,  <span class="comment"># 包名</span></span><br><span class="line">      version=<span class="string">"1.0"</span>,  <span class="comment"># 版本</span></span><br><span class="line">      description=<span class="string">"描述信息"</span>,</span><br><span class="line">      long_description=<span class="string">"完整描述"</span>,</span><br><span class="line">      author=<span class="string">"author"</span>,  <span class="comment"># 作者</span></span><br><span class="line">      author_email=<span class="string">"email"</span>,  <span class="comment"># 作者邮箱</span></span><br><span class="line">      url=<span class="string">"www.xxx.com"</span>,  <span class="comment"># 主页</span></span><br><span class="line">      py_modules=[</span><br><span class="line">          <span class="string">"handle_message.send_message"</span>,</span><br><span class="line">          <span class="string">"handle_message.receive_message"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python setup.py build</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成发布压缩包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python setup.py sdist</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><h6 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h6><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">函数/方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">open</td>
<td>打开文件，并且返回文件操作对象</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">read</td>
<td>将文件内容读取到内存</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">write</td>
<td>将指定内容写入文件</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">close</td>
<td>关闭文件</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>read / write / close方法需要由文件对象来调用</p>
</blockquote>
<p>调用格式 f = open(filename, mode,buffering)<br>filename:文件的路径<br>mode：模式  </p>
<ul>
<li>w 写</li>
<li>r 读</li>
<li>a 追加  </li>
</ul>
<p>（b——二进制编码）不同模式可以混合<br>向文件中写入f.write(bytes)<br>文件读写完后要关闭  f.close()</p>
<p><code>with open() as file</code>  会自动关闭文件，不需要手动执行.close()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以二进制的方式写入图片到本地images文件夹中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl_image</span><span class="params">(image_url, image_local_path)</span>:</span></span><br><span class="line">    r = requests.get(image_url, stream=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(image_local_path, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            <span class="comment"># f.close()</span></span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:  <span class="comment"># 抛出异常</span></span><br><span class="line">        print(<span class="string">"save error"</span>)</span><br></pre></td></tr></table></figure>
<p>文件指针：第一次打开文件时，通常文件指针会指向文件的开始位置，当执行了<code>read()</code>方法后，文件指针会移动到读取内容的末尾</p>
<h6 id="按行读取文件内容"><a href="#按行读取文件内容" class="headerlink" title="按行读取文件内容"></a>按行读取文件内容</h6><p>readline()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = open(<span class="string">"../README.txt"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text = file.readline()</span><br><span class="line">    <span class="comment"># 判断是否读取到内容</span></span><br><span class="line">    <span class="comment"># if text is None:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(text)</span><br><span class="line"></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>
<h6 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h6><p>读取源文件，写入新文件</p>
<p>Python2.x默认使用ASCII编码，Python3.x默认为UTF-8编码，txt编码默认为GBK编码</p>
<blockquote>
<p>小文件的复制</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编码格式为UTF-8</span></span><br><span class="line">origin = open(<span class="string">"../README.txt"</span>, encoding=<span class="string">"UTF-8"</span>)</span><br><span class="line">new = open(<span class="string">"../README_NEW.txt"</span>, <span class="string">"wb"</span>)</span><br><span class="line"></span><br><span class="line">text = origin.read().encode(<span class="string">"UTF-8"</span>)</span><br><span class="line">new.write(text)</span><br><span class="line"></span><br><span class="line">origin.close()</span><br><span class="line">new.close()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>大文件的复制</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编码格式为UTF-8</span></span><br><span class="line">origin = open(<span class="string">"../README.txt"</span>, encoding=<span class="string">"UTF-8"</span>)</span><br><span class="line">new = open(<span class="string">"../README_NEW.txt"</span>, <span class="string">"wb"</span>)</span><br><span class="line"><span class="comment"># 读-写</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text = origin.readline().encode()</span><br><span class="line">    <span class="comment"># 判断是否读取到内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new.write(text)</span><br><span class="line"></span><br><span class="line">origin.close()</span><br><span class="line">new.close()</span><br></pre></td></tr></table></figure>
<h6 id="文件-目录的常用管理操作"><a href="#文件-目录的常用管理操作" class="headerlink" title="文件/目录的常用管理操作"></a>文件/目录的常用管理操作</h6><blockquote>
<p>导入os模块</p>
</blockquote>
<p>文件操作</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>序号</th>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>rename</td>
<td>重命名文件</td>
<td>os.rename(源文件名,目标文件名)</td>
</tr>
<tr>
<td>02</td>
<td>remove</td>
<td>删除文件</td>
<td>os.remove(文件名)</td>
</tr>
</tbody>
</table>
</div>
<p>目录操作</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>序号</th>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>listdir</td>
<td>目录列表</td>
<td>os.listdit(目录名)</td>
</tr>
<tr>
<td>02</td>
<td>mkdir</td>
<td>创建目录</td>
<td>os.mkdir(目录名)</td>
</tr>
<tr>
<td>03</td>
<td>rmdir</td>
<td>删除目录</td>
<td>os.rmdir(目录名)</td>
</tr>
<tr>
<td>04</td>
<td>getcwd</td>
<td>获取当前目录</td>
<td>os.getcwd()</td>
</tr>
<tr>
<td>05</td>
<td>chdir</td>
<td>修改工作目录</td>
<td>os.chdir(目标目录)</td>
</tr>
<tr>
<td>06</td>
<td>path.isdir</td>
<td>判断是否是文件</td>
<td>os.path.isdir(文件路径)</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>提示：文件/目录操作都支持绝对路径和相对路径</p>
</blockquote>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h6 id="bs4-beautiful-soup"><a href="#bs4-beautiful-soup" class="headerlink" title="bs4/beautiful soup"></a>bs4/beautiful soup</h6><p>替代正则<br><a href="https://beautifulsoup.readthedocs.io/zh_CN/latest" target="_blank" rel="noopener">beautiful soup</a></p>
<h6 id="tkiner"><a href="#tkiner" class="headerlink" title="tkiner"></a>tkiner</h6><p>基于视图化ui的模块库</p>
<h6 id="phantomJS"><a href="#phantomJS" class="headerlink" title="phantomJS"></a>phantomJS</h6><p>PhantomJS是可使用JavaScript编写脚本的无头Web浏览器。它可以在Windows，macOS，Linux和FreeBSD上运行。  </p>
<p>使用QtWebKit作为后端，它为各种Web标准提供了快速的本机支持：DOM处理，CSS选择器，JSON，Canvas和SVG。  </p>
<h6 id="selenium-webdriver"><a href="#selenium-webdriver" class="headerlink" title="selenium/webdriver"></a>selenium/webdriver</h6><p>通过模拟浏览器进行网络爬虫的库</p>
<h6 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h6><p>网络爬虫相关库，适用于静态网页页面的爬取</p>
<h6 id="PIL-Image-ImageTk"><a href="#PIL-Image-ImageTk" class="headerlink" title="PIL/Image, ImageTk"></a>PIL/Image, ImageTk</h6><p>图片处理库</p>
]]></content>
  </entry>
  <entry>
    <title>前端开发基础知识</title>
    <url>/articles/a87f55ab.html</url>
    <content><![CDATA[<h4 id="前后端技术栈类比"><a href="#前后端技术栈类比" class="headerlink" title="前后端技术栈类比"></a>前后端技术栈类比</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">前端</th>
<th style="text-align:center">后端</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">语法规范</td>
<td style="text-align:center">JavaScript es6,7,8…</td>
<td style="text-align:center">Java jdk8,9,10,11…</td>
</tr>
<tr>
<td style="text-align:center">框架</td>
<td style="text-align:center">Angular，Vue，React</td>
<td style="text-align:center">Spring，SpringMVC…</td>
</tr>
<tr>
<td style="text-align:center">工具</td>
<td style="text-align:center">webstorm，vscode</td>
<td style="text-align:center">idea，eclipse</td>
</tr>
<tr>
<td style="text-align:center">项目构建</td>
<td style="text-align:center">webpack，gulp</td>
<td style="text-align:center">maven，gradle</td>
</tr>
<tr>
<td style="text-align:center">依赖管理</td>
<td style="text-align:center">npm</td>
<td style="text-align:center">maven</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>ECMAScript 6.0，ECMAScript是一种由Ecma国际通过ESMA-262标准化的脚本程序设计语言，是JavaScript语言的下一代标准，在2015年6月正式发布，并且从ECMAScript 6开始，采用年号做版本，ECMAScript 2015即ECMAScript 6。ECMAScript是浏览器脚本语言的规范，JavaScript则是规范的具体实现。</p>
<h5 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h5><h6 id="变量-let-与-const"><a href="#变量-let-与-const" class="headerlink" title="变量 let 与 const"></a>变量 let 与 const</h6><ul>
<li><code>var</code> 声明的变量往往会越域</li>
<li><code>let</code> 声明的变量由严格局部作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);	<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>var</code> 可以声明多次</li>
<li><code>let</code> 只能声明一次</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> m=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> n=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> n=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m);	<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// Uncaught SyntaxError: Identifier 'n' has already been declared</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>var</code> 会变量提升</li>
<li><code>let</code> 不存在变量提升</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);	<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// Uncaught ReferenceError: Cannot access 'y' before initialization</span></span><br><span class="line"><span class="keyword">let</span> y=<span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p><code>const</code></p>
<ol>
<li>声明之后不允许改变</li>
<li>一旦声明必须初始化，否则会报错</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="number">1</span>;</span><br><span class="line">a=<span class="number">3</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"><span class="keyword">const</span> b; <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>
<h6 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h6><ol>
<li><p>数组解构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原始方式</span></span><br><span class="line"><span class="comment">let a=arr[0];</span></span><br><span class="line"><span class="comment">let b=arr[1];</span></span><br><span class="line"><span class="comment">let c=arr[2];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c]=arr;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象解构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    laguanges:[<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const name=person.name;</span></span><br><span class="line"><span class="comment">// const age=person.age;</span></span><br><span class="line"><span class="comment">// const laguanges=person.laguanges;</span></span><br><span class="line"><span class="comment">// const&#123;name,age,laguanges&#125;=person;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>取别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>&#123;<span class="attr">name</span>:abc,age,laguanges&#125;=person;</span><br><span class="line"><span class="built_in">console</span>.log(abc,age,laguanges);</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串扩展</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">"hello vue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">"hello"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">"vue"</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"e"</span>));       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"hello"</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串模板</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ss=<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;Hello World!&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ss);</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串插入变量和表达式<br>变量名写在<code>${}</code>中，<code>${}</code>中可以放入JavaScript表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="keyword">let</span> age=<span class="number">21</span>;</span><br><span class="line"><span class="keyword">let</span> info=<span class="string">`我是<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;age+<span class="number">10</span>&#125;</span>了`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串插入方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这是一个函数'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> info=<span class="string">`<span class="subst">$&#123;fun()&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h6><ol>
<li><p>默认参数<br>在es6以前，我们无法给一个函数参数设置默认值，只能采用变通写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断b是否为空，为空就给默认值1</span></span><br><span class="line">    b = b || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<p>es6直接给参数写上默认值，没传就会自动使用默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEs6</span>(<span class="params">a, b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(addEs6(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>不定参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>);		<span class="comment">// 2</span></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);	<span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数<br>原始方式声明一个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> print=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用es6的箭头函数声明方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> print=<span class="function"><span class="params">obj</span>=&gt;</span><span class="built_in">console</span>.log(obj);</span><br><span class="line">print(<span class="string">"hello"</span>);				<span class="comment">// hello</span></span><br></pre></td></tr></table></figure>
<p>箭头函数+解构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    language:[<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数+解构</span></span><br><span class="line"><span class="keyword">var</span> hello=<span class="function">(<span class="params">&#123;name&#125;</span>)=&gt;</span><span class="built_in">console</span>.log(<span class="string">'hello,'</span>+name);</span><br><span class="line">hello(person);	<span class="comment">// hellp,jack</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h6><p><code>Object.keys()</code>返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</p>
<p><code>Object.values()</code>返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用。</p>
<p><code>Object.entries()</code>返回一个给定对象自身可枚举属性的键值对数组，其排列与使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>, <span class="string">'js'</span>, <span class="string">'css'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)); <span class="comment">// ["name","age","language"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(person)); <span class="comment">// ["jack",21,Array(3)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(person)); <span class="comment">// [Array(2),Array(2),Array(2)]</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p><code>assign</code><br><code>Object.assign()</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line"><span class="built_in">console</span>.log(target); <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>声明对象简写，当对象属性的键与值相同时，可以省略值，只写键</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment">// const person = &#123; age: age, name: name &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = &#123; age, name &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person2);	<span class="comment">// age: 23 name: "zhangsan"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象的函数属性简写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    <span class="comment">//  函数属性</span></span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 箭头函数this不能使用，对象.属性</span></span><br><span class="line">    <span class="comment">// eat2: food =&gt; console.log(this.name + "在吃" + food)</span></span><br><span class="line">    eat2: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person3.name + <span class="string">"在吃"</span> + food),</span><br><span class="line">    eat3(food) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person3.eat(<span class="string">"香蕉"</span>);	<span class="comment">// jack在吃香蕉</span></span><br><span class="line"></span><br><span class="line">person3.eat2(<span class="string">"苹果"</span>); <span class="comment">// jack在吃苹果</span></span><br><span class="line"></span><br><span class="line">person3.eat3(<span class="string">"橘子"</span>); <span class="comment">// jack在吃橘子</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象扩展运算符<br>用于取出参数对象所有可遍历属性然后拷贝到当前对象</p>
<p>（1）拷贝对象（深拷贝）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = &#123; <span class="attr">neam</span>: <span class="string">"Amy"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> someone = &#123; ...p1 &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(someone); <span class="comment">// &#123;neam: "Amy", age: 18&#125;</span></span><br></pre></td></tr></table></figure>
<p>（2）合并对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age2 = &#123; <span class="attr">age</span>: <span class="number">15</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> name2 = &#123; <span class="attr">name</span>: <span class="string">"Amy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> p2 = &#123; ...age2, ...name2 &#125;; <span class="comment">// 如果两个对象的字段名重复，后面对象的字段值会覆盖前面对象的字段值</span></span><br><span class="line"><span class="built_in">console</span>.log(p2); <span class="comment">// &#123;age: 15, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure>
<h6 id="map和reduce方法"><a href="#map和reduce方法" class="headerlink" title="map和reduce方法"></a>map和reduce方法</h6><ul>
<li><p><code>map()</code> 接受一个函数，将原数组中的所有元素用这个函数处理后放入新建数组返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr = arr.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    return item * 2;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>reduce()</code>为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.reduce(callbackfn: <span class="built_in">Function</span>, initialValue?: any)</span><br></pre></td></tr></table></figure>
<ol>
<li>previousValue 上一次调用回调返回的值，或者是提供的初始值</li>
<li>currentValue 数组中当前被处理的元素</li>
<li>index 当前元素在数组中的索引</li>
<li>array 调用reduce的数组</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'上一次处理后：'</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前正在处理：'</span> + b);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h6 id="promise封装异步操作"><a href="#promise封装异步操作" class="headerlink" title="promise封装异步操作"></a>promise封装异步操作</h6><ol>
<li>查出当前用信息</li>
<li>按照当前用户的id查出他的课程</li>
<li>按照当前课程id查出分数</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"zhangsan"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user_course_1.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Chinsese"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// course_score_10.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"score"</span>: <span class="number">90</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过ajax实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"json/user.json"</span>,</span><br><span class="line">    success(data) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询用户：'</span>, data);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">`json/user_course_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">            success(data) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'查询到课程'</span>, data);</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: <span class="string">`json/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">                    success(data) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'查询到分数:'</span>, data);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error(error) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            error(error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error(error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Promise封装异步操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"json/user.json"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'查询用户信息：'</span>, data);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">pro.then(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">`json/user_course_<span class="subst">$&#123;obj.id&#125;</span>.json`</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'查询课程信息：'</span>, data);</span><br><span class="line">                resolve(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">`json/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'查询课程分数信息：'</span>, data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进行封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: url,</span><br><span class="line">            data: data,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>("json/user.json")</span><br><span class="line">    .then(data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户查询成功:'</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(`json/user_course_$&#123;data.id&#125;.json<span class="string">`, data);</span></span><br><span class="line"><span class="string">&#125;).then(data =&gt; &#123;</span></span><br><span class="line"><span class="string">    console.log('课程查询成功:', data);</span></span><br><span class="line"><span class="string">    return get(`</span>json/course_score_$&#123;data.id&#125;.json<span class="string">`, data);</span></span><br><span class="line"><span class="string">&#125;).then(data =&gt; &#123;</span></span><br><span class="line"><span class="string">    // 课程成绩查询成功</span></span><br><span class="line"><span class="string">    console.log('课程成绩', data);</span></span><br><span class="line"><span class="string">&#125;).catch(error =&gt; &#123;</span></span><br><span class="line"><span class="string">    console.log('出现异常', error);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>
<h6 id="module模块化"><a href="#module模块化" class="headerlink" title="module模块化"></a>module模块化</h6><p><code>export</code>导出，<code>export</code> 不仅可以导出对象，一切js变量都可以导出，比如：基本类型变量，函数，数组，对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">export const util = &#123;</span></span><br><span class="line"><span class="comment">    sum(a, b) &#123;</span></span><br><span class="line"><span class="comment">        return a + b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="comment">export &#123;util&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    sum(a, b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"jack"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>import</code>导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">"./hello.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">"./user.js"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(util.sum(<span class="number">1</span>, <span class="number">2</span>));	<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name:"</span> + name + <span class="string">"  age:"</span> + age);	<span class="comment">// name:jack age:18</span></span><br></pre></td></tr></table></figure>
<h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>Node.js是基于Chrome V8引擎的JavaScript运行环境</p>
<p><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">node.js相关api</a></p>
<p>NPM是随同NodeJS一起安装的包管理工具，JavaScript-NPM，Java-Maven。</p>
<h4 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h4><h5 id="MVVM思想"><a href="#MVVM思想" class="headerlink" title="MVVM思想"></a>MVVM思想</h5><ul>
<li>M：Model，模型，包括数据和一些基本操作</li>
<li>V：View，视图，页面渲染结果</li>
<li>VM：View-Model，模型与视图间的双向操作（无需开发人员干涉）</li>
</ul>
<p>在MVVM之前，开发人员从后端获取需要的数据模型，然后通过DOM操作Model渲染到View中，而后当用户操作视图，还需要通过DOM获取View中的数据，然后同步到Model中。</p>
<p>而MVVM中的VM要做的事情就是把DOM操作完全封装起来，开发人员不用再关心Model和View之间是如何互相影响的。</p>
<ul>
<li>只要Model发生了改变，View上自然就会表现出来</li>
<li>当用户修改了View，Model中的数据也会跟着改变</li>
</ul>
<p>把开发人员从繁琐的DOM操作中解放出来，把关注点放在如何操作Model上。</p>
<h5 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h5><ol>
<li>声明式渲染</li>
<li>双向绑定，模型变化，视图变化</li>
<li>事件处理</li>
</ol>
<p>具体流程：</p>
<p>1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的 2、指令来简化对DOM的一些操作 3、声明方法来做更复杂的操作。</p>
<h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><h6 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h6><ol>
<li><p>花括号<br>格式：<code>{ {表达式} }</code><br>说明：</p>
<ul>
<li>该表达式支持js语法，可以调用内置函数（<font color=red>必须有返回值</font>）</li>
<li>表达式必须有返回结果，没有结果的表达式不允许使用</li>
<li>可以直接获取Vue实例定义的数据或函数</li>
</ul>
</li>
<li><p>插值闪烁</p>
<p>使用双大括号方式在网速较慢时会出现问题，在数据未加载完成时，页面会显示出原始的双大括号，加载完毕后才显示正确数据。</p>
</li>
<li><p>v-text和v-html<br>v-text只显示文本内容，不会渲染html标签，而v-html会渲染html标签。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;&#123;&#123;hello()&#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;span v-html&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,		&#x2F;&#x2F; 绑定元素</span><br><span class="line">        data: &#123;			&#x2F;&#x2F; 封装数据</span><br><span class="line">            msg: &quot;&lt;h1&gt;Hello Vue&lt;&#x2F;h1&gt;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;		&#x2F;&#x2F; 封装方法</span><br><span class="line">            hello() &#123;</span><br><span class="line">                return &quot;world&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h6><p><code>v-bind</code>可以用于给HTML标签绑定属性，<font color=red>单向绑定</font>，<code>v-bind</code> 可以省略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 给HTML标签绑定属性 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- v-bind可以省略 --&gt;</span><br><span class="line">    &lt;!-- 单向绑定 --&gt;</span><br><span class="line">    &lt;a v-bind:href&#x3D;&quot;link&quot;&gt;gogogo&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;!-- class，style --&gt;</span><br><span class="line">    &lt;span v-bind:class&#x3D;&quot;&#123;active:isActive,&#39;text-danger&#39;:hasError&#125;&quot;</span><br><span class="line">          v-bind:style&#x3D;&quot;&#123;color:color,fontSize:size&#125;&quot;&gt;Hello&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            link: &quot;http:&#x2F;&#x2F;www.baidu.com&quot;,</span><br><span class="line">            isActive: true,</span><br><span class="line">            hasError: true,</span><br><span class="line">            color: &#39;blue&#39;,</span><br><span class="line">            size: &#39;20px&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h6><p>绑定数据，<code>v-model</code> 是<font color=red>双向绑定</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 表单项，自定义组件 --&gt;</span><br><span class="line">&lt;!-- v-model是双向绑定 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    精通的语言：&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;java&quot;&gt;java &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;python&quot;&gt;python&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;javascript&quot;&gt;javascript&lt;br&gt;</span><br><span class="line">    &lt;!-- 将数组中的内容以逗号的形式连接 --&gt;</span><br><span class="line">    选中&#123;&#123;language.join(&#39;,&#39;)&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            language: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h6><p><code>v-on</code>可用于为事件指定一个回调函数（Vue实例中定义的函数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 事件中直接写js片段 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;num&quot;&gt;</span><br><span class="line">    &lt;!-- 事件指定一个回调函数，必须是Vue实例中定义的函数 --&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;num++&quot;&gt;点赞&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;cancel&quot;&gt;取消&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;h1&gt;有&#123;&#123;num&#125;&#125;个人点赞&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 事件修饰符 --&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;border: 1px solid red;padding: 20px;&quot; v-on:click.once&#x3D;&#39;hello&#39;&gt;</span><br><span class="line">        大div &lt;br&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;border: 1px solid red;padding: 20px;&quot; @click.stop&#x3D;&#39;hello&#39;&gt;</span><br><span class="line">            小div&lt;br&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;ww.baidu.com&quot; @click.prevent.stop&#x3D;&#39;hello&#39;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 按键修饰符 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&#39;num&#39; v-on:keyup.up&#x3D;&#39;num+&#x3D;2&#39; @keyup.down&#x3D;&#39;num-&#x3D;2&#39; @click.ctrl&#x3D;&#39;num&#x3D;10&#39;&gt;&lt;br&gt;</span><br><span class="line">    提示:</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            cancel() &#123;</span><br><span class="line">                this.num--;</span><br><span class="line">            &#125;,</span><br><span class="line">            hello() &#123;</span><br><span class="line">                alert(&#39;点击了&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h6><p><i style=color:red>遍历的时候加上<code>:key</code>来区分不同数据，提高vue的渲染效率</i></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&#39;(user,index) in users&#39; :key&#x3D;&#39;index&#39; v-if&#x3D;&quot;&#39;female&#39;&#x3D;&#x3D;&#x3D;user.gender&quot;&gt;</span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.age&#125;&#125;--&#123;&#123;user.gender&#125;&#125;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            对象信息:</span><br><span class="line">            &lt;span v-for&#x3D;&quot;(v,k,i) in user&quot;&gt;</span><br><span class="line">                &#123;&#123;k&#125;&#125;--&#123;&#123;v&#125;&#125;--&#123;&#123;i&#125;&#125;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;!-- 1、显示user信息 --&gt;</span><br><span class="line">            &lt;!-- 2、获取数组下标 --&gt;</span><br><span class="line">            &lt;!-- 3、遍历对象 --&gt;</span><br><span class="line">            &lt;!-- 4、遍历的时候加上:key来区分不同数据，提高vue的渲染效率 --&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            users: [</span><br><span class="line">                &#123; name: &#39;张三&#39;, age: 18, gender: &#39;male&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;李四&#39;, age: 19, gender: &#39;male&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;王五&#39;, age: 20, gender: &#39;female&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;赵六&#39;, age: 21, gender: &#39;female&#39; &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h6><ul>
<li><code>v-if</code>条件判断，当得到结果为<code>true</code>时，所在的元素才被渲染</li>
<li><code>v-show</code>当得到的结果为<code>true</code>时，所在的元素才会被显示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;show&#x3D;!show&quot;&gt;click me&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;!-- 使用v-if显示 --&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;show&quot;&gt;if显示&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!-- 通过display:none;隐藏 --&gt;</span><br><span class="line">    &lt;!-- 使用v-show显示 --&gt;</span><br><span class="line">    &lt;h1 v-show&#x3D;&quot;show&quot;&gt;show显示&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            show: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="v-else和v-else-if"><a href="#v-else和v-else-if" class="headerlink" title="v-else和v-else-if"></a>v-else和v-else-if</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;random&#x3D;Math.random()&quot;&gt;click me&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;random&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;random&gt;&#x3D;0.75&quot;&gt;random &gt; &#x3D;0.75&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else-if&#x3D;&quot;random&gt;&#x3D;0.5&quot;&gt;random &gt; &#x3D;0.5&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else-if&#x3D;&quot;random&gt;&#x3D;0.25&quot;&gt;random &gt; &#x3D;0.25&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else&gt;random &lt; 0.25 &lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            random: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h5><p>某些结果是基于之前数据实时计算出来的，可以利用计算属性来完成 ，<code>watch</code>可以监控一个值的变化，从而作出相应的反应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;西游记，单价：&#123;&#123;xyjPrice&#125;&#125;，数量：&lt;input type&#x3D;&quot;number&quot; v-model&#x3D;&quot;xyjNum&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;水浒传，单价：&#123;&#123;shzPrice&#125;&#125;，数量：&lt;input type&#x3D;&quot;number&quot; v-model&#x3D;&quot;shzNum&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;总价：&#123;&#123;total&#125;&#125;&amp;nbsp;&amp;nbsp;&#123;&#123;msg&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            xyjPrice: 66.98,</span><br><span class="line">            shzPrice: 88.00,</span><br><span class="line">            xyjNum: 1,</span><br><span class="line">            shzNum: 1,</span><br><span class="line">            msg: &#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            total() &#123;</span><br><span class="line">                return this.xyjPrice * this.xyjNum + this.shzPrice * this.shzNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 侦听数据的变化</span><br><span class="line">        watch: &#123;</span><br><span class="line">            xyjNum: function (newVal, oldVal) &#123;</span><br><span class="line">                if (newVal &gt;&#x3D; 3) &#123;</span><br><span class="line">                    this.msg &#x3D; &#39;库存超出限制&#39;;</span><br><span class="line">                    this.xyjNum &#x3D; 3;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.msg &#x3D; &#39;&#39;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h6><p>过滤器通常用来处理文本格式化的操作<br>过滤器可以用在两个地方：</p>
<ul>
<li>双括号插值</li>
<li>v-bind表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(user,index) in userList&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">            &#123;&#123;user.id&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.gender&#x3D;&#x3D;&#x3D;1?&#39;男&#39;:&#39;女&#39;&#125;&#125;</span><br><span class="line">            --&#123;&#123;user.gender | genderFilter&#125;&#125;--&#123;&#123;user.gender | gFilter&#125;&#125;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(&quot;gFilter&quot;, function (val) &#123;</span><br><span class="line">        if (val &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">            return &quot;男&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;女&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            userList: [</span><br><span class="line">                &#123; id: 1, name: &#39;jack&#39;, gender: 1 &#125;,</span><br><span class="line">                &#123; id: 2, name: &#39;lucy&#39;, gender: 0 &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; filters定义局部过滤器，只能再vue实例中使用</span><br><span class="line">        filters: &#123;</span><br><span class="line">            genderFilter(val) &#123;</span><br><span class="line">                if (val &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                    return &quot;男&quot;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return &quot;女&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h5><p>Vue中可以通过注册局部或全局组件<code>component</code>，在HTML中直接使用该组件。如果是第三方组件，通过<code>import</code>导入后也可使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;counter&gt;&lt;&#x2F;counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 全局声明注册一个组件</span><br><span class="line">    Vue.component(&quot;counter&quot;, &#123;</span><br><span class="line">        template: &#96;&lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;&#96;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 局部声明</span><br><span class="line">    const buttonCounter &#x3D; &#123;</span><br><span class="line">        template: &#96;&lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;&#96;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#39;button-counter&#39;: buttonCounter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>第三方组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> component-x <span class="keyword">from</span> <span class="string">'component-x'</span> 		<span class="comment">// 导入第三方组件</span></span><br><span class="line">Vue.component(<span class="string">'component-x'</span>,component-x);	<span class="comment">// 注册</span></span><br></pre></td></tr></table></figure>
<h5 id="生命周期与钩子函数"><a href="#生命周期与钩子函数" class="headerlink" title="生命周期与钩子函数"></a>生命周期与钩子函数</h5><p>vue生命周期与钩子函数</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%89%8D%E7%AB%AF/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.png" alt="vue生命周期与钩子函数"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;num&quot;&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;num++&quot;&gt;赞&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;，有&#123;&#123;num&#125;&#125;个人点赞&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &quot;张三&quot;,</span><br><span class="line">            num: 10</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show() &#123;</span><br><span class="line">                return this.name;</span><br><span class="line">            &#125;,</span><br><span class="line">            add() &#123;</span><br><span class="line">                return this.num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.log(&#39;----------------before create-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型未加载--&#39; + this.name, this.num);</span><br><span class="line">            &#x2F;&#x2F; vue.js:634 [Vue warn]: Error in beforeCreate hook: &quot;TypeError: this.show is not a function&quot;</span><br><span class="line">            &#x2F;&#x2F; vue.js:1897 TypeError: this.show is not a function</span><br><span class="line">            console.log(&#39;方法未加载--&#39; + this.show());</span><br><span class="line">            console.log(&#39;html模板未加载--&#39; + document.getElementById(&#39;num&#39;));</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            console.log(&#39;----------------created-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已加载--&#39; + this.name, this.num);</span><br><span class="line">            console.log(&#39;方法已加载--&#39; + this.show());</span><br><span class="line">            console.log(&#39;html模板已加载--&#39; + document.getElementById(&#39;num&#39;));</span><br><span class="line">            console.log(&#39;html模板未渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">            console.log(&#39;----------------before mount-----------------&#39;);</span><br><span class="line">            console.log(&#39;html模板未渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.log(&#39;----------------mounted-----------------&#39;);</span><br><span class="line">            console.log(&#39;html模板已渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line">            console.log(&#39;----------------before update-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已更新--&#39; + this.num);</span><br><span class="line">            console.log(&#39;html模板未更新--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.log(&#39;----------------updated-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已更新--&#39; + this.num);</span><br><span class="line">            console.log(&#39;html模板已更新--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>Babel是一个JavaScript编译器，使用es的最新语法编程，通过Babel自动转化为浏览器兼容的代码。</p>
<h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><p>自动化项目构建工具，gulp也是同类产品。</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>异步请求跨域问题与解决方案</title>
    <url>/articles/5f94010c.html</url>
    <content><![CDATA[<h5 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h5><p>跨域指的是浏览器不能执行其他网站的脚本，它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。</p>
<p>同源策略：是指<em>协议</em>，<em>域名</em>，<em>端口</em>都要相同，其中有一个不同都会产生跨域。</p>
<a id="more"></a>
<h6 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h6><div class="table-container">
<table>
<thead>
<tr>
<th>URL</th>
<th>说明</th>
<th>是否允许通信</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td>
<td>同一域名下</td>
<td><font color=green>允许</font></td>
</tr>
<tr>
<td><a href="http://www.a.com/tab/a.js" target="_blank" rel="noopener">http://www.a.com/tab/a.js</a><br /><a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td>
<td>同一域名下不同文件夹</td>
<td><font color=green>允许</font></td>
</tr>
<tr>
<td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br /><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td>
<td>同一域名，不同端口</td>
<td><font color=red>不允许</font></td>
</tr>
<tr>
<td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br /><a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td>
<td>同一域名，不同协议</td>
<td><font color=red>不允许</font></td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://x.x.x.x/b.js" target="_blank" rel="noopener">http://x.x.x.x/b.js</a></td>
<td>域名和域名对应 IP</td>
<td><font color=red>不允许</font></td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://script.com/b.js" target="_blank" rel="noopener">http://script.com/b.js</a></td>
<td>主域相同，子域不同</td>
<td><font color=red>不允许</font></td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td>
<td>同一域名，不同二级域名</td>
<td><font color=red>不允许</font></td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://www.b.com/b.js" target="_blank" rel="noopener">http://www.b.com/b.js</a></td>
<td>不同域名</td>
<td><font color=red>不允许</font></td>
</tr>
</tbody>
</table>
</div>
<h6 id="跨域流程"><a href="#跨域流程" class="headerlink" title="跨域流程"></a>跨域流程</h6><p><strong>简单请求</strong>，不会触发 CORS <em>预检请求</em>。</p>
<ul>
<li>请求方法<ul>
<li><code>GET</code></li>
<li><code>HEAD</code></li>
<li><code>POST</code></li>
</ul>
</li>
<li>除了被用户代理自动设置的首部字段（例如 Connection ，User-Agent）和在 Fetch 规范中定义为 禁用首部名称 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合。该集合为：<ul>
<li><code>Accept</code></li>
<li><code>Accept-Language</code></li>
<li><code>Content-Language</code></li>
<li><code>Content-Type</code> （需要注意额外的限制）</li>
<li><code>DPR</code></li>
<li><code>Downlink</code></li>
<li><code>Save-Data</code></li>
<li><code>Viewport-Width</code></li>
<li><code>Width</code></li>
</ul>
</li>
<li><code>Content-Type</code>的值仅限于下列三者之一：<ul>
<li><code>text/plain</code></li>
<li><code>multipart/form-data</code></li>
<li><code>application/x-www-form-urlencoded</code></li>
</ul>
</li>
<li>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；<code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</li>
<li>请求中没有使用 <code>ReadableStream</code> 对象。</li>
</ul>
<p><strong>非简单请求</strong>（PUT、DELETE）等，需要先发送<em>预检请求</em>。</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Ajax/%E8%B7%A8%E5%9F%9F%E6%B5%81%E7%A8%8B.png" alt="Ajax跨域请求流程"></p>
<blockquote>
<p>官方文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP跨域</a></p>
</blockquote>
<h5 id="解决跨域方案"><a href="#解决跨域方案" class="headerlink" title="解决跨域方案"></a>解决跨域方案</h5><ol>
<li>前端通过Nginx部署将请求配置成同一域。</li>
<li>后端对请求进行处理，在预检请求的响应中添加允许跨域的相关配置。（后端开发时使用）</li>
</ol>
<h6 id="前端解决方案"><a href="#前端解决方案" class="headerlink" title="前端解决方案"></a>前端解决方案</h6><p>静态请求通过 <code>nginx</code> 直接转发到 vue-admin 【人人开源后端项目】，动态请求通过 nginx 转发到 gateway 网关，由网关请求具体的服务器。</p>
<p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Ajax/%E5%89%8D%E7%AB%AFnginx%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F.png" alt="前端nginx配置跨域请求"></p>
<font color=red>适用于前端项目部署时，后端不需要对跨域进行任何处理。</font>

<h6 id="后端解决方案"><a href="#后端解决方案" class="headerlink" title="后端解决方案"></a>后端解决方案</h6><p>配置当次请求允许跨域</p>
<ol>
<li><p>添加请求响应头</p>
<ul>
<li>Access-Control-Allow-Origin: 支持哪些来源的请求跨域</li>
<li>Access-Control-Allow-Methods: 支持哪些方法跨域</li>
<li>Access-Control-Allow-Credentials: 跨域请求默认不包含cookie，设置为true可以包含cookie</li>
<li>Access-Control-Expose-Headers: 跨域请求暴露的字段<ul>
<li>CORS 请求时，<code>XMLHttpRequest</code> 对象的 <code>getResponseHeader()</code> 方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。</li>
</ul>
</li>
<li>Access-Control-Max-Age: 表明该响应的有效时间为多少秒。在有效时间内，浏览器无须为同一请求再次发起预检请求。注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。</li>
</ul>
</li>
<li><p>针对多个请求，可以通过 <code>gateway</code> 网关添加过滤器对请求配置允许跨域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallCorsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置跨域</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>); <span class="comment">// 配置请求头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>); <span class="comment">// 配置请求方法</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>); <span class="comment">// 配置来源</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>); <span class="comment">// 允许cookie</span></span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration);	<span class="comment">// 注册跨域配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>cors</tag>
      </tags>
  </entry>
  <entry>
    <title>短暂解决ConnectionRefusedError:WinError 10061问题</title>
    <url>/articles/9d9c9508.html</url>
    <content><![CDATA[<h4 id="使用requests提示ConnectionRefusedError"><a href="#使用requests提示ConnectionRefusedError" class="headerlink" title="使用requests提示ConnectionRefusedError"></a>使用requests提示ConnectionRefusedError</h4><h6 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h6><p>ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接</p>
<h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><ul>
<li>首先检查是否使用代理<ul>
<li>打开win10的网络和Internet设置</li>
<li>勾选自动检测设置，关闭使用设置脚本，关闭手动设置代理的使用代理服务器</li>
</ul>
</li>
<li>打开注册表  </li>
<li>删除路径：计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings下的<ul>
<li>ProxyEnable</li>
<li>ProxyOverride </li>
<li>ProxyServer<br><img data-src="https://img-blog.csdnimg.cn/20191112200954515.png" alt=""></li>
</ul>
</li>
<li>重新运行python程序<br>这种方式只能短暂解决问题，这三个文件会自动生成，需要重复删除</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>requests</tag>
      </tags>
  </entry>
</search>
