<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周超的博客</title>
  
  <subtitle>记录编程学习的历程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lao-biao.github.io/"/>
  <updated>2020-07-14T15:03:22.813Z</updated>
  <id>https://lao-biao.github.io/</id>
  
  <author>
    <name>周超</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM虚拟机</title>
    <link href="https://lao-biao.github.io/articles/18701caa.html"/>
    <id>https://lao-biao.github.io/articles/18701caa.html</id>
    <published>2020-07-14T15:03:22.000Z</published>
    <updated>2020-07-14T15:03:22.813Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h4><h5 id="java从编码到执行"><a href="#java从编码到执行" class="headerlink" title="java从编码到执行"></a>java从编码到执行</h5><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Java%E4%BB%8E%E7%BC%96%E7%A0%81%E5%88%B0%E6%89%A7%E8%A1%8C.png" alt="Java从编码到执行"></p><h5 id="JVM：从跨平台的语言到跨语言的平台"><a href="#JVM：从跨平台的语言到跨语言的平台" class="headerlink" title="JVM：从跨平台的语言到跨语言的平台"></a>JVM：从跨平台的语言到跨语言的平台</h5><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%8F%B0.png" alt="从跨平台的语言到跨语言的平台"></p><h5 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h5><p>java虚拟机 java virtual machine </p><h6 id="jvm是一种规范"><a href="#jvm是一种规范" class="headerlink" title="jvm是一种规范"></a>jvm是一种规范</h6><ul><li>java虚拟机规范 java virtual machine specifications</li></ul><h6 id="jvm是虚构出来的一台计算机"><a href="#jvm是虚构出来的一台计算机" class="headerlink" title="jvm是虚构出来的一台计算机"></a>jvm是虚构出来的一台计算机</h6><ul><li>字节码指令集（汇编语言）</li><li>内存管理：栈 堆 方法区等</li></ul><h6 id="jvm分代模型"><a href="#jvm分代模型" class="headerlink" title="jvm分代模型"></a>jvm分代模型</h6><ul><li>新生代（Young Generation）</li><li>老年代（(Old Generation）</li><li><del>持久代（Permanent Generation）</del></li></ul><p>JDK 8 中已经把持久代（PermGen Space）移除了，取而代之的元空间（Metaspace）。Metaspace占用的是本地内存，不再占用虚拟机内存。</p><h5 id="jvm与class文件格式"><a href="#jvm与class文件格式" class="headerlink" title="jvm与class文件格式"></a>jvm与class文件格式</h5><p>jvm与java无关，任何语言都可以通过编译成字节码文件在jvm上运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">A[任何语言]--&gt;B(class字节码)--&gt;C[JVM虚拟机]</span><br></pre></td></tr></table></figure><h5 id="常见的JVM实现"><a href="#常见的JVM实现" class="headerlink" title="常见的JVM实现"></a>常见的JVM实现</h5><h6 id="Hotspot"><a href="#Hotspot" class="headerlink" title="Hotspot"></a>Hotspot</h6><ul><li>Oracle官方，做实验用的JVM</li><li>java -version</li></ul><h6 id="Jrockit"><a href="#Jrockit" class="headerlink" title="Jrockit"></a>Jrockit</h6><ul><li>BEA公司开发，曾经号称世界上最快的JVM</li><li>被Oracle收购</li></ul><h6 id="J9-IBM"><a href="#J9-IBM" class="headerlink" title="J9-IBM"></a>J9-IBM</h6><p>IBM公司开发，类似于HotSpot，主要用于IBM自己的产品。</p><h6 id="Microsoft-VM"><a href="#Microsoft-VM" class="headerlink" title="Microsoft VM"></a>Microsoft VM</h6><p>微软虚拟机</p><h6 id="TaobaoVM"><a href="#TaobaoVM" class="headerlink" title="TaobaoVM"></a>TaobaoVM</h6><p>Hotpost深度定制版</p><h6 id="LiquidVM"><a href="#LiquidVM" class="headerlink" title="LiquidVM"></a>LiquidVM</h6><p>直接针对硬件</p><h6 id="azul-zing"><a href="#azul-zing" class="headerlink" title="azul zing"></a>azul zing</h6><p>最新垃圾回收的行业标杆</p><h5 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK-JRE-JVM"></a>JDK-JRE-JVM</h5><p>JDK：开发集成工具+jre，java开发工具包，部署java开发环境</p><p>JRE：核心库+jvm，运行java环境</p><p>JVM：运行最终的字节码文件</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/JDK-JRE-JVM.png" alt="JDK-JRE-JVM"></p><a id="more"></a><h4 id="Garbage-Collector-与-GC-tuning"><a href="#Garbage-Collector-与-GC-tuning" class="headerlink" title="Garbage Collector 与 GC tuning"></a>Garbage Collector 与 GC tuning</h4><p>垃圾回收与垃圾回收调优</p><h5 id="垃圾的定义"><a href="#垃圾的定义" class="headerlink" title="垃圾的定义"></a>垃圾的定义</h5><p>内存</p><ul><li>多删</li><li>忘删：内存泄漏（Memory Leak）</li></ul><p>JVM中GC自动回收垃圾</p><h6 id="java与c-垃圾回收比较"><a href="#java与c-垃圾回收比较" class="headerlink" title="java与c++垃圾回收比较"></a>java与c++垃圾回收比较</h6><p>java</p><ul><li>GC处理垃圾</li><li>开发效率高，执行效率低</li></ul><p>C++</p><ul><li>手动处理垃圾</li><li>忘记回收：内存泄漏</li><li>回收多次：非法访问</li><li>开发效率低，执行效率高</li></ul><h5 id="垃圾的定位"><a href="#垃圾的定位" class="headerlink" title="垃圾的定位"></a>垃圾的定位</h5><p>垃圾是如何定位的</p><h6 id="Reference-Count-算法"><a href="#Reference-Count-算法" class="headerlink" title="Reference Count 算法"></a>Reference Count 算法</h6><p>引用计数</p><p>在空引用时进行回收</p><p>缺陷：RC不能解决循环引用的问题（一堆垃圾）</p><h6 id="Root-Searching-根可达算法"><a href="#Root-Searching-根可达算法" class="headerlink" title="Root Searching 根可达算法"></a>Root Searching 根可达算法</h6><p>由根节点可以连接到达为有效对象，其他的视为垃圾。</p><p>以下可视为根节点</p><ul><li>JVM stack    main方法的栈帧</li><li>native method  stack 本地方法栈</li><li>runtime constant pool 运行时的常量池</li><li>static references in method area 方法区内静态引用对象</li><li>Clazz 类对象</li></ul><p>GC roots：线程变量、静态变量、常量池、JNI指针</p><p>注意：</p><p>Java 不采用RC（Reference Count）算法，而是采用RS（Root Searching）算法。</p><h5 id="常见垃圾回收算法"><a href="#常见垃圾回收算法" class="headerlink" title="常见垃圾回收算法"></a>常见垃圾回收算法</h5><p>常见GC 算法</p><ul><li>Mark-Sweep 标记清除</li><li>Copying 拷贝</li><li>Mark-Compact 标记压缩</li></ul><h6 id="Mark-Sweep-标记清除"><a href="#Mark-Sweep-标记清除" class="headerlink" title="Mark-Sweep 标记清除"></a>Mark-Sweep 标记清除</h6><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Mark-Sweep-1.png" alt="Mark Sweep算法"></p><p>标记清除算法流程</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Mark-Sweep-2.png" alt="Mark Sweep算法"></p><p>优点：</p><ul><li>算法相对简单</li><li>存活对象比较多的情况下效率较高</li></ul><p>缺点：</p><ul><li>扫描两次，效率偏低</li><li>容易产生碎片化：不能存放连续的对象</li></ul><h6 id="Copying-复制"><a href="#Copying-复制" class="headerlink" title="Copying 复制"></a>Copying 复制</h6><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Copying-1.png" alt="Copying算法"></p><p>复制算法流程</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Copying-2.png" alt="Copying算法"></p><p>优点：</p><ul><li>适用于存活对象较少的情况</li><li>只扫描一次，效率提高</li><li>没有碎片</li></ul><p>缺点：</p><ul><li>空间浪费，每次只有一半内存被使用</li><li>移动复制对象，需要调整对象的引用</li></ul><h6 id="Mark-Compact-标记压缩"><a href="#Mark-Compact-标记压缩" class="headerlink" title="Mark Compact 标记压缩"></a>Mark Compact 标记压缩</h6><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Mark-Compact-1.png" alt="Mark Compact算法"></p><p>标记压缩算法流程</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Mark-Compact-2.png" alt="Mark Compact算法"></p><p>优点：</p><ul><li>不会产生碎片，方便对象分配</li><li>不会产生内存减半</li></ul><p>缺点：</p><ul><li>扫描两次</li><li>需要移动对象，效率偏低</li></ul><h5 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h5><ul><li><p>JDK 1.8默认 PS+PO</p></li><li><p>JDK 1.9 10 11 12 13 默认G1</p></li></ul><h6 id="常见垃圾回收器分类"><a href="#常见垃圾回收器分类" class="headerlink" title="常见垃圾回收器分类"></a>常见垃圾回收器分类</h6><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%88%86%E7%B1%BB.png" alt="垃圾收集器分类"></p><p>Young、Old 分代模型，新生代和老生代配合使用</p><ul><li>ParNew+CMS</li><li>ParNew+Serial Old</li><li>Serial+Serial Old</li><li>Serial+CMS+Serial Old</li><li>Parallel Scavenge+Parallel Old</li><li>Parallel Scavenge+Serial Old</li></ul><p>G1：物理上不分代，逻辑上分代</p><h6 id="堆内存逻辑分区（不适用不分代垃圾收集器）"><a href="#堆内存逻辑分区（不适用不分代垃圾收集器）" class="headerlink" title="堆内存逻辑分区（不适用不分代垃圾收集器）"></a>堆内存逻辑分区（不适用不分代垃圾收集器）</h6><p>新生代大量死去，少量存活，采用复制算法</p><p>老年代存活率高，回收较少，采用MC（Mark Compact）或MS（Mark Sweep）</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA.png" alt="堆内存逻辑分区"></p><p>CMS：经过6次GC–&gt;老年代</p><p>其他：经过15次GC</p><h6 id="GC概念"><a href="#GC概念" class="headerlink" title="GC概念"></a>GC概念</h6><p>MinorGC/YGC：年轻代空间耗尽时触发</p><p>MajorGC/FullGC：在老年代无法继续分配空间时触发，新生代老年代同时进行回收</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/GC%E6%A6%82%E5%BF%B5.png" alt="GC概念"></p><h6 id="GC详解"><a href="#GC详解" class="headerlink" title="GC详解"></a>GC详解</h6><p>栈上分配</p><ul><li>线程私有小对象</li><li>无逃逸：栈中存在引用</li><li>支持标量替换</li><li>无需调整</li></ul><p>线程本地分配TLAB（Thread Local Allocation Buffer）</p><ul><li>占用eden，默认1%</li><li>多线程的时候不用竞争eden就可以申请空间，提高效率</li><li>小对象</li><li>无需调整</li></ul><p>Old 老年代</p><ul><li>大对象</li></ul><p>eden 伊甸：对象刚出生时，刚new的时候</p><h6 id="YGC与FGC"><a href="#YGC与FGC" class="headerlink" title="YGC与FGC"></a>YGC与FGC</h6><p>YGC</p><ul><li>Young GC Minor（辅助） GC</li><li>Eden区不足</li></ul><p>FGC</p><ul><li>Full GC Major GC</li><li>Old空间不足</li><li>System.gc()</li></ul><h6 id="对象何时进入老年代"><a href="#对象何时进入老年代" class="headerlink" title="对象何时进入老年代"></a>对象何时进入老年代</h6><p>超过<code>XX:MaxTenuringThreshold</code>指定次数（YGC）</p><ul><li>Parallel Scavenge 经过15次GC进入老年代</li><li>CMS 经过6次GC进入老年代</li><li>G1 经过15次GC进入老年代</li></ul><p>动态年龄</p><ul><li>s1 - &gt; s2超过50%</li><li>把年龄最大的放入O（老年代）</li></ul><p>通过参数：<code>-XX:MaxTenuringThreshold</code>配置</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BB%8E%E5%87%BA%E7%94%9F%E5%88%B0%E6%B6%88%E4%BA%A1.png" alt="一个对象从出生到消亡"></p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/GC%E6%80%BB%E7%BB%93.png" alt="GC总结"></p><h6 id="ParNew垃圾回收器"><a href="#ParNew垃圾回收器" class="headerlink" title="ParNew垃圾回收器"></a>ParNew垃圾回收器</h6><p>PS（Parallel Scavenge）的变种，用来配合CMS使用。</p><ul><li>a stop-thr-world,copying collector with uses multiple GC threads.</li><li>It differs from “Parallel Scavenge” in that it has enhancements that make it uasable with CMS.</li><li>For example,”ParNew” doses the synchronization needed so that it can run during thr concurrent phases of CMS.</li><li>默认线程数位CPU的核数</li></ul><h6 id="Serial垃圾回收器与Serial-Old垃圾回收器"><a href="#Serial垃圾回收器与Serial-Old垃圾回收器" class="headerlink" title="Serial垃圾回收器与Serial Old垃圾回收器"></a>Serial垃圾回收器与Serial Old垃圾回收器</h6><p>此种组合基本不使用，效率太低</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Serial.png" alt="Serial"></p><ul><li>串行</li><li>STW</li><li>单线程拷贝算法（工作在年轻代）</li></ul><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/Serial-Old.png" alt="Serial-Old"></p><h6 id="Parallel-Scavenge垃圾回收器"><a href="#Parallel-Scavenge垃圾回收器" class="headerlink" title="Parallel Scavenge垃圾回收器"></a>Parallel Scavenge垃圾回收器</h6><ul><li>STW</li><li>多线程拷贝算法</li></ul><h6 id="Parallel-Old垃圾回收器"><a href="#Parallel-Old垃圾回收器" class="headerlink" title="Parallel Old垃圾回收器"></a>Parallel Old垃圾回收器</h6><p>A compacting collector that uses multiple GC threads.</p><ul><li>多线程压缩算法（工作在老年代）</li></ul><h6 id="CMS垃圾回收器"><a href="#CMS垃圾回收器" class="headerlink" title="CMS垃圾回收器"></a>CMS垃圾回收器</h6><ul><li>并发标记清理concurrent mark sweep</li><li>高并发低停顿收集器a mostly concurrent，low-pause collector</li><li>4个阶段（从线程角度）<ol><li>初始标记initial mark</li><li>并发标记concurrent mark</li><li>重新标记remark</li><li>并发清理concurrent sweep</li></ol></li></ul><h6 id="CMS垃圾回收器缺点"><a href="#CMS垃圾回收器缺点" class="headerlink" title="CMS垃圾回收器缺点"></a>CMS垃圾回收器缺点</h6><ul><li>memory fragmentation<ul><li>-XX:CMSFullGCsBeforeCompaction</li></ul></li><li>floating garbage<ul><li>Concurrent Mode Failure -XX:CMSInitiatingOccupancyFraction 92%</li><li>SerialOld</li></ul></li></ul><h6 id="CMS-Remark阶段的算法"><a href="#CMS-Remark阶段的算法" class="headerlink" title="CMS Remark阶段的算法"></a>CMS Remark阶段的算法</h6><p>三色扫描算法：白灰黑</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/JVM/%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E7%AE%97%E6%B3%95.png" alt="三色标记算法"></p><p>在并发按标记时，引用可能产生变化，白色对象有可能被错误回收</p><p>解决方案</p><ul><li>SATB<ul><li>在起始的时候做一个快照 snapshot at the beginning</li><li>当B-&gt;D消失时，要把这个引用推到GC的堆栈，保证D还能被GC扫描到</li><li>配合RSet，只用扫描哪些Region引用到D这个Region（区域）了</li></ul></li><li>Incremental Update<ul><li>当一个白色对象被一个黑色对象引用</li><li>将黑色对象重新标记为灰色，让collector重新扫描</li><li>这个容易产生问题，比如 A a， A b 都已经标记完，但是 A  a - D了，A成为灰色，这时mutator（设置方法）把A a 标记完了，又把 A变成了黑色</li><li>这也是为什么CMS的final mark必须再扫描一遍地原因</li></ul></li></ul><h5 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h5><h6 id="什么是调优"><a href="#什么是调优" class="headerlink" title="什么是调优"></a>什么是调优</h6><ol><li>根据需求进行JVM规划和预调优</li><li>优化运行JVM运行环境（慢、卡顿）</li><li>解决JVM运行过程中出现的任何问题（OOM）</li></ol><h6 id="调优方式"><a href="#调优方式" class="headerlink" title="调优方式"></a>调优方式</h6><p>简单粗暴的调优方式：重启</p><p>在线调优</p><h5 id="JVM命令行参数"><a href="#JVM命令行参数" class="headerlink" title="JVM命令行参数"></a>JVM命令行参数</h5><p>HotSpot参数分类</p><ul><li><p>标准：<code>-</code>开头，所有的HotSpot都支持</p></li><li><p>非标准：<code>-X</code>开头，特定版本HotSpot支持特定命令</p></li><li><p>不稳定：<code>-XX</code>开头，下个版本可能取消</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java # 列出所有的HotSpot都支持的命令</span><br><span class="line"></span><br><span class="line">java -X# 列出特定版本HotSpot支持的特定命令</span><br><span class="line"></span><br><span class="line">Java -XX:+PrintFlagsWithComments# 只有debug版本能用</span><br><span class="line">java -XX:+PrintFlagsFinal# 列出所有不稳定命令</span><br></pre></td></tr></table></figure></li></ul><h5 id="JVM调优实战"><a href="#JVM调优实战" class="headerlink" title="JVM调优实战"></a>JVM调优实战</h5><p>将xms（程序启动时初始内存大小），xmx（程序运行时最大可用内存大小）设置成一致的好处是可以防止内存抖动。</p><h6 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h6><p>OOM（Out Of Memory）：内存泄漏、内存溢出</p><p>当程序的GC垃圾回收在执行，而Memory只增不降，需要进行调优。</p><p>当执行到一定时间时，最终频繁Full GC ，每次GC只会回收2kB或1kB。</p><h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h6><p>阿里开源JVM在线调优工具 arthas</p><p>文档：<a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">Arthas</a></p><p>Arthas无法替代jvm唯一的命令jmap</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top # 类似于任务管理器，通过此命令找到java程序运行的端口号</span><br><span class="line">top -Hp 1196 # 可以查看该进程下各个线程的cpu使用情况；</span><br><span class="line">jps # 用于查询正在运行的JVM进程</span><br><span class="line">jstat # 可以实时显示本地或远程JVM进程中类装载、内存、垃圾收集、JIT编译等数据</span><br><span class="line">jmap -histo 1196 | head -20# 1196为运行端口号，以实际为主，20为获取前面的数据</span><br></pre></td></tr></table></figure><p>问题：当服务器cpu出现飙高怎么处理</p><ol><li>业务线程：列出堆栈，通过<code>jmap</code>命令找到占用内存最高的对象，无法进行GC处理掉的对象，查看代码，进行调整。</li><li>GC线程：通过在线调优工具进行排查</li></ol><p>导致Full GC的原因：</p><ul><li>年老代（Old）被写满</li><li>持久代（Perm）被写满</li><li><code>System.gc()</code>被显示调用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JVM基础&quot;&gt;&lt;a href=&quot;#JVM基础&quot; class=&quot;headerlink&quot; title=&quot;JVM基础&quot;&gt;&lt;/a&gt;JVM基础&lt;/h4&gt;&lt;h5 id=&quot;java从编码到执行&quot;&gt;&lt;a href=&quot;#java从编码到执行&quot; class=&quot;headerlink&quot; title=&quot;java从编码到执行&quot;&gt;&lt;/a&gt;java从编码到执行&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/zyy92/Pictures/raw/master/JVM/Java%E4%BB%8E%E7%BC%96%E7%A0%81%E5%88%B0%E6%89%A7%E8%A1%8C.png&quot; alt=&quot;Java从编码到执行&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;JVM：从跨平台的语言到跨语言的平台&quot;&gt;&lt;a href=&quot;#JVM：从跨平台的语言到跨语言的平台&quot; class=&quot;headerlink&quot; title=&quot;JVM：从跨平台的语言到跨语言的平台&quot;&gt;&lt;/a&gt;JVM：从跨平台的语言到跨语言的平台&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/zyy92/Pictures/raw/master/JVM/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%8F%B0.png&quot; alt=&quot;从跨平台的语言到跨语言的平台&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;jvm&quot;&gt;&lt;a href=&quot;#jvm&quot; class=&quot;headerlink&quot; title=&quot;jvm&quot;&gt;&lt;/a&gt;jvm&lt;/h5&gt;&lt;p&gt;java虚拟机 java virtual machine &lt;/p&gt;
&lt;h6 id=&quot;jvm是一种规范&quot;&gt;&lt;a href=&quot;#jvm是一种规范&quot; class=&quot;headerlink&quot; title=&quot;jvm是一种规范&quot;&gt;&lt;/a&gt;jvm是一种规范&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;java虚拟机规范 java virtual machine specifications&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;jvm是虚构出来的一台计算机&quot;&gt;&lt;a href=&quot;#jvm是虚构出来的一台计算机&quot; class=&quot;headerlink&quot; title=&quot;jvm是虚构出来的一台计算机&quot;&gt;&lt;/a&gt;jvm是虚构出来的一台计算机&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;字节码指令集（汇编语言）&lt;/li&gt;
&lt;li&gt;内存管理：栈 堆 方法区等&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;jvm分代模型&quot;&gt;&lt;a href=&quot;#jvm分代模型&quot; class=&quot;headerlink&quot; title=&quot;jvm分代模型&quot;&gt;&lt;/a&gt;jvm分代模型&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;新生代（Young Generation）&lt;/li&gt;
&lt;li&gt;老年代（(Old Generation）&lt;/li&gt;
&lt;li&gt;&lt;del&gt;持久代（Permanent Generation）&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JDK 8 中已经把持久代（PermGen Space）移除了，取而代之的元空间（Metaspace）。Metaspace占用的是本地内存，不再占用虚拟机内存。&lt;/p&gt;
&lt;h5 id=&quot;jvm与class文件格式&quot;&gt;&lt;a href=&quot;#jvm与class文件格式&quot; class=&quot;headerlink&quot; title=&quot;jvm与class文件格式&quot;&gt;&lt;/a&gt;jvm与class文件格式&lt;/h5&gt;&lt;p&gt;jvm与java无关，任何语言都可以通过编译成字节码文件在jvm上运行。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;graph TB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A[任何语言]--&amp;gt;B(class字节码)--&amp;gt;C[JVM虚拟机]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;常见的JVM实现&quot;&gt;&lt;a href=&quot;#常见的JVM实现&quot; class=&quot;headerlink&quot; title=&quot;常见的JVM实现&quot;&gt;&lt;/a&gt;常见的JVM实现&lt;/h5&gt;&lt;h6 id=&quot;Hotspot&quot;&gt;&lt;a href=&quot;#Hotspot&quot; class=&quot;headerlink&quot; title=&quot;Hotspot&quot;&gt;&lt;/a&gt;Hotspot&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;Oracle官方，做实验用的JVM&lt;/li&gt;
&lt;li&gt;java -version&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;Jrockit&quot;&gt;&lt;a href=&quot;#Jrockit&quot; class=&quot;headerlink&quot; title=&quot;Jrockit&quot;&gt;&lt;/a&gt;Jrockit&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;BEA公司开发，曾经号称世界上最快的JVM&lt;/li&gt;
&lt;li&gt;被Oracle收购&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;J9-IBM&quot;&gt;&lt;a href=&quot;#J9-IBM&quot; class=&quot;headerlink&quot; title=&quot;J9-IBM&quot;&gt;&lt;/a&gt;J9-IBM&lt;/h6&gt;&lt;p&gt;IBM公司开发，类似于HotSpot，主要用于IBM自己的产品。&lt;/p&gt;
&lt;h6 id=&quot;Microsoft-VM&quot;&gt;&lt;a href=&quot;#Microsoft-VM&quot; class=&quot;headerlink&quot; title=&quot;Microsoft VM&quot;&gt;&lt;/a&gt;Microsoft VM&lt;/h6&gt;&lt;p&gt;微软虚拟机&lt;/p&gt;
&lt;h6 id=&quot;TaobaoVM&quot;&gt;&lt;a href=&quot;#TaobaoVM&quot; class=&quot;headerlink&quot; title=&quot;TaobaoVM&quot;&gt;&lt;/a&gt;TaobaoVM&lt;/h6&gt;&lt;p&gt;Hotpost深度定制版&lt;/p&gt;
&lt;h6 id=&quot;LiquidVM&quot;&gt;&lt;a href=&quot;#LiquidVM&quot; class=&quot;headerlink&quot; title=&quot;LiquidVM&quot;&gt;&lt;/a&gt;LiquidVM&lt;/h6&gt;&lt;p&gt;直接针对硬件&lt;/p&gt;
&lt;h6 id=&quot;azul-zing&quot;&gt;&lt;a href=&quot;#azul-zing&quot; class=&quot;headerlink&quot; title=&quot;azul zing&quot;&gt;&lt;/a&gt;azul zing&lt;/h6&gt;&lt;p&gt;最新垃圾回收的行业标杆&lt;/p&gt;
&lt;h5 id=&quot;JDK-JRE-JVM&quot;&gt;&lt;a href=&quot;#JDK-JRE-JVM&quot; class=&quot;headerlink&quot; title=&quot;JDK-JRE-JVM&quot;&gt;&lt;/a&gt;JDK-JRE-JVM&lt;/h5&gt;&lt;p&gt;JDK：开发集成工具+jre，java开发工具包，部署java开发环境&lt;/p&gt;
&lt;p&gt;JRE：核心库+jvm，运行java环境&lt;/p&gt;
&lt;p&gt;JVM：运行最终的字节码文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/zyy92/Pictures/raw/master/JVM/JDK-JRE-JVM.png&quot; alt=&quot;JDK-JRE-JVM&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes,java" scheme="https://lao-biao.github.io/categories/notes-java/"/>
    
    
      <category term="jvm" scheme="https://lao-biao.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Ajax笔记</title>
    <link href="https://lao-biao.github.io/articles/48d9bd16.html"/>
    <id>https://lao-biao.github.io/articles/48d9bd16.html</id>
    <published>2020-07-12T02:47:12.000Z</published>
    <updated>2020-07-12T05:43:38.501Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a>Ajax概述</h5><p>全称”Asynchronous JavaScript and XML” 异步JavaScript和XML，是一种创建交互网页应用的网页开发技术。</p><ul><li>基于web标准(Standards-based Presentation)    XHTML+CSS</li><li>使用DOM(Document Object Model)进行动态显示与交互</li><li>使用XML和XSLT进行数据交换及相关操作</li><li>使用XMLHttpRequest进行异步数据查询、检索</li><li>使用JavaScript将所有的东西绑定在一起</li></ul><p>本质是一个浏览器端的技术</p><p>异步刷新技术，用来在当前页面响应不同的请求内容。</p><a id="more"></a><h5 id="Ajax功能"><a href="#Ajax功能" class="headerlink" title="Ajax功能"></a>Ajax功能</h5><p>需求：需要将本次的响应结果和前面的响应结果内容在同一个页面中展现给用户</p><p>解决:</p><ul><li>在后台服务器端将多次相应内容重新拼接成一个jsp页面，响应对象，jsp内部使用，带有缓冲区的响应对象，效率高于response对象<br>问题:造成相应你内容被重复的响应，资源浪费</li><li>使用Ajax技术</li></ul><h5 id="Ajax基本使用流程"><a href="#Ajax基本使用流程" class="headerlink" title="Ajax基本使用流程"></a>Ajax基本使用流程</h5><ol><li>创建ajax引擎对象</li><li>覆写onreadystatement函数</li><li>判断ajax状态码</li><li>判断响应状态码</li><li>获取相应内容</li><li>处理相应内容</li><li>发送请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ajax引擎对象</span></span><br><span class="line"><span class="keyword">var</span> ajax;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  <span class="comment">// firefox</span></span><br><span class="line">    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// ie</span></span><br><span class="line">    ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 覆写onreadystatement函数</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 会执行4次,判断ajax状态码，只在数据成功接收时执行以下代码</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">4</span> === ajax.readyState) &#123;</span><br><span class="line">        <span class="comment">// 获取元素对象</span></span><br><span class="line">        <span class="keyword">let</span> showdiv = <span class="built_in">document</span>.getElementById(<span class="string">"showDiv"</span>);</span><br><span class="line">        <span class="comment">// 判断响应状态码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">200</span> === ajax.status) &#123;</span><br><span class="line">            <span class="comment">// 获取响应内容，修改元素内容</span></span><br><span class="line">            showdiv.innerHTML = ajax.responseText;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">404</span>===ajax.status)&#123;</span><br><span class="line">            showdiv.innerHTML=<span class="string">"请求资源不存在"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">500</span>===ajax.status)&#123;</span><br><span class="line">            showdiv.innerHTML=<span class="string">"服务器繁忙"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送请求 get/post</span></span><br><span class="line"><span class="comment">// get请求实体拼接在url后面，?隔开，键值对        </span></span><br><span class="line">ajax.open(<span class="string">"get"</span>, <span class="string">"ajax?name=value"</span>);</span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求有单独的请求实体，    </span></span><br><span class="line">ajax.open(<span class="string">"post"</span>,<span class="string">"ajax"</span>);</span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(<span class="string">"name=value"</span>);</span><br></pre></td></tr></table></figure><h5 id="Ajax状态码"><a href="#Ajax状态码" class="headerlink" title="Ajax状态码"></a>Ajax状态码</h5><p>readyState</p><table><thead><tr><th align="center">readyState值</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">表示XMLHttpRequest已建立，但还未初始化，这是尚未调用open方法</td></tr><tr><td align="center">1</td><td align="center">表示open方法已经调用，但未调用send方法（已创建，未发送）</td></tr><tr><td align="center">2</td><td align="center">表示send方法已经调用，其他数据未知</td></tr><tr><td align="center">3</td><td align="center">表示请求已经成功发送，正在接收数据</td></tr><tr><td align="center">4</td><td align="center">表示数据已经成功接收</td></tr></tbody></table><h6 id="常用Http状态码"><a href="#常用Http状态码" class="headerlink" title="常用Http状态码"></a>常用Http状态码</h6><table><thead><tr><th align="center">http状态码</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">200 OK</td><td align="center">客户端请求成功</td></tr><tr><td align="center">400 Bad Request</td><td align="center">客户端请求有语法错误，不能被服务器所理解</td></tr><tr><td align="center">401 Unauthorized</td><td align="center">请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</td></tr><tr><td align="center">403 Forbidden</td><td align="center">服务器收到请求，但是拒绝提供服务</td></tr><tr><td align="center">404 Not Found</td><td align="center">请求资源不存在（可能输入了错误的URL）</td></tr><tr><td align="center">500 Internal Server Error</td><td align="center">服务器发生不可预期的错误</td></tr><tr><td align="center">503 Server Unavailable</td><td align="center">服务器当前不能处理客户端的请求，一段时间后可能恢复正常</td></tr></tbody></table><h5 id="Ajax异步和同步"><a href="#Ajax异步和同步" class="headerlink" title="Ajax异步和同步"></a>Ajax异步和同步</h5><p>ajax.open(method, url,async); </p><p>method：get方法，post方法</p><p>url：请求的地址</p><p>async：设置代码执行方式，false同步，true异步,默认为异步</p><h5 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h5><p>get：携带的数据包含在url中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ajax.open(<span class="string">"get"</span>, url + (data === <span class="literal">null</span> ? <span class="string">""</span> : <span class="string">"?"</span> + data), <span class="keyword">async</span>); <span class="comment">// false同步，true异步</span></span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>post</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ajax.open(<span class="string">"post"</span>, url, <span class="keyword">async</span>);<span class="comment">// false同步，true异步</span></span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(data);</span><br></pre></td></tr></table></figure><h5 id="Ajax响应数据类型"><a href="#Ajax响应数据类型" class="headerlink" title="Ajax响应数据类型"></a>Ajax响应数据类型</h5><h6 id="普通字符串"><a href="#普通字符串" class="headerlink" title="普通字符串"></a>普通字符串</h6><p>responseText</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取响应数据</span></span><br><span class="line"><span class="keyword">var</span> result = ajax.responseText;</span><br></pre></td></tr></table></figure><h6 id="json"><a href="#json" class="headerlink" title="json"></a>json</h6><p>将数据按照json的格式拼接好的字符串，方便使用eval方法将接受的字符串直接转换成js的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json格式</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:value,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需求分类</p><ol><li>在当前页面显示查询结果</li><li>创建ajax函数</li><li>调用ajax函数发送请求到UserServlet</li><li>调用业务层获取对应的数据</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;AjaxData&lt;/title&gt;</span><br><span class="line">        &lt;!--引入外部js文件，见ajax封装--&gt;</span><br><span class="line">        &lt;script type="text/javascript" src="js/ajaxutil.js"&gt;&lt;/script&gt; </span><br><span class="line">        &lt;!--声明js代码域--&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="function">function <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取用户请求信息</span></span><br><span class="line">                <span class="keyword">var</span> name = document.getElementById(<span class="string">"uname"</span>).value;</span><br><span class="line">                <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span> (window.XMLHttpRequest) &#123;<span class="comment">// firefox</span></span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.ActiveXObject) &#123;<span class="comment">// ie</span></span><br><span class="line">                    ajax = <span class="keyword">new</span> window.ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 覆写onreadystatementchange函数</span></span><br><span class="line">                ajax.onreadystatechange = function () &#123;</span><br><span class="line">                    <span class="comment">// 判断ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// 获取响应数据</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseText;</span><br><span class="line">                            eval(<span class="string">"u="</span> + result);</span><br><span class="line">                            <span class="comment">// 处理响应数据</span></span><br><span class="line">                            <span class="comment">// 获取table元素对象</span></span><br><span class="line">                            <span class="keyword">var</span> ta = document.getElementById(<span class="string">"table"</span>);</span><br><span class="line">                            ta.innerHTML = <span class="string">""</span>;</span><br><span class="line">                            <span class="comment">// 插入新的行</span></span><br><span class="line">                            <span class="keyword">var</span> tr = ta.insertRow(<span class="number">0</span>);</span><br><span class="line">                            <span class="keyword">var</span> uid = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                            uid.innerHTML = <span class="string">"编号"</span>;</span><br><span class="line">                            <span class="keyword">var</span> uname = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                            uname.innerHTML = <span class="string">"英雄"</span>;</span><br><span class="line">                            <span class="keyword">var</span> price = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                            price.innerHTML = <span class="string">"价格"</span>;</span><br><span class="line">                            <span class="keyword">var</span> location = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                            location.innerHTML = <span class="string">"位置"</span>;</span><br><span class="line">                            <span class="keyword">var</span> description = tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                            description.innerHTML = <span class="string">"描述"</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> tr = ta.insertRow(<span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">var</span> uid = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                            uid.innerHTML = u.uid;</span><br><span class="line">                            <span class="keyword">var</span> uname = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                            uname.innerHTML = u.uname;</span><br><span class="line">                            <span class="keyword">var</span> price = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                            price.innerHTML = u.price;</span><br><span class="line">                            <span class="keyword">var</span> location = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                            location.innerHTML = u.location;</span><br><span class="line">                            <span class="keyword">var</span> description = tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                            description.innerHTML = u.description;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                ajax.open(<span class="string">"get"</span>, <span class="string">"user?name="</span> + name);</span><br><span class="line">                ajax.send(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;AjaxData&lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        名称: &lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span> value=<span class="string">""</span> id=<span class="string">"uname"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"搜索"</span> onclick=<span class="string">"getData()"</span>&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;table border="1px" id="table"&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="XML数据"><a href="#XML数据" class="headerlink" title="XML数据"></a>XML数据</h6><p>responseXML，返回document对象<br>通过document对象将数据从xml中获取出来</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;XML数据格式学习&lt;/title&gt;</span><br><span class="line">        &lt;!--声明js代码域--&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function">function <span class="title">getXML</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.ActiveXObject) &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> window.ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 覆写onreadystatementchange函数</span></span><br><span class="line">                ajax.onreadystatechange = function () &#123;</span><br><span class="line">                    <span class="comment">// 判断ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// 获取响应数据</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseXML;</span><br><span class="line">                            alert(result.getElementsByTagName(<span class="string">"uname"</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                ajax.open(<span class="string">"get"</span>, <span class="string">"xml"</span>,<span class="keyword">true</span>);</span><br><span class="line">                ajax.send(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;XML数据格式学习&lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"测试"</span> onclick=<span class="string">"getXML()"</span>&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="Ajax封装"><a href="#Ajax封装" class="headerlink" title="Ajax封装"></a>Ajax封装</h5><p>封装ajax方便调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ajax封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>method 请求方式，get或post</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>data 请求数据，格式"name=value&amp;..."，没有值需要传入null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal200 接收一个带有一个形参的js函数对象，形参接收的实参是ajax引擎对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal404 接收一个js函数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal500 接收一个js函数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>async 异步或同步，boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">method, url, data, deal200, deal404, deal500, async=true</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">    <span class="keyword">var</span> ajax = getAjax();</span><br><span class="line">    <span class="comment">// 覆写onreadystatement函数</span></span><br><span class="line">    ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取元素对象</span></span><br><span class="line">        <span class="keyword">let</span> showdiv = <span class="built_in">document</span>.getElementById(<span class="string">"showDiv"</span>);</span><br><span class="line">        <span class="comment">// 会执行4次,判断ajax状态码，只在数据成功接收时执行以下代码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">4</span> === ajax.readyState) &#123;</span><br><span class="line">            <span class="comment">// 判断响应状态码</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">200</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal200)</span><br><span class="line">                    deal200(ajax);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">404</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal404)</span><br><span class="line">                    deal404();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">500</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal500)</span><br><span class="line">                    deal500();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"get"</span> === method) &#123;</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        ajax.open(<span class="string">"get"</span>, url + (data === <span class="literal">null</span> ? <span class="string">""</span> : <span class="string">"?"</span> + data), <span class="keyword">async</span>); <span class="comment">// false同步，true异步</span></span><br><span class="line">        ajax.send(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"post"</span> === method) &#123;</span><br><span class="line">        ajax.open(<span class="string">"post"</span>, url, <span class="keyword">async</span>);</span><br><span class="line">        ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        ajax.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*ajax的封装*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ajax;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  <span class="comment">// firefox</span></span><br><span class="line">        ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// ie</span></span><br><span class="line">        ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Ajax概述&quot;&gt;&lt;a href=&quot;#Ajax概述&quot; class=&quot;headerlink&quot; title=&quot;Ajax概述&quot;&gt;&lt;/a&gt;Ajax概述&lt;/h5&gt;&lt;p&gt;全称”Asynchronous JavaScript and XML” 异步JavaScript和XML，是一种创建交互网页应用的网页开发技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于web标准(Standards-based Presentation)    XHTML+CSS&lt;/li&gt;
&lt;li&gt;使用DOM(Document Object Model)进行动态显示与交互&lt;/li&gt;
&lt;li&gt;使用XML和XSLT进行数据交换及相关操作&lt;/li&gt;
&lt;li&gt;使用XMLHttpRequest进行异步数据查询、检索&lt;/li&gt;
&lt;li&gt;使用JavaScript将所有的东西绑定在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质是一个浏览器端的技术&lt;/p&gt;
&lt;p&gt;异步刷新技术，用来在当前页面响应不同的请求内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="ajax" scheme="https://lao-biao.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Jsp-EL表达式-JSTL笔记</title>
    <link href="https://lao-biao.github.io/articles/324a571.html"/>
    <id>https://lao-biao.github.io/articles/324a571.html</id>
    <published>2020-07-12T02:45:37.000Z</published>
    <updated>2020-07-12T12:35:04.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Java Server Pages，Java服务器页面</p><p>简化的Servlet设计</p><p>动态网页技术标准（数据的动态改变）</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>本质上是Servlet</li><li>跨平台</li><li>组件跨平台</li><li>健壮性和安全性（业务逻辑，数据）</li></ul><h5 id="访问原理"><a href="#访问原理" class="headerlink" title="访问原理"></a>访问原理</h5><p>Tomcat只能识别Servlet，用户访问jsp文件，服务器用JspServlet将jsp文件转义成对应的Java文件，返回给用户</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p><font color='blue'>JSP负责页面展现，Sevlet负责业务逻辑处理</font></p><a id="more"></a><h4 id="Jsp的语法和指令"><a href="#Jsp的语法和指令" class="headerlink" title="Jsp的语法和指令"></a>Jsp的语法和指令</h4><p>Jsp三大指令</p><ul><li>page指令：配置jsp文件的转译相关的参数</li><li>include指令：静态引入jsp文件</li><li>taglib指令：引入jstl标签库</li></ul><h5 id="jsp的三种注释"><a href="#jsp的三种注释" class="headerlink" title="jsp的三种注释"></a>jsp的三种注释</h5><p>前端语言注释(html,css,js)：会被转译，也会被发送，但是不会被浏览器执行</p><p>java语言注释(行注释，块注释，文档注释)：会被转译，但是不会被servlet执行</p><p>jsp注释：不会被转译</p><h5 id="jsp的page指令"><a href="#jsp的page指令" class="headerlink" title="jsp的page指令"></a>jsp的page指令</h5><p> <code>&lt;@ page attribute1=&quot;value&quot; attribute2=&quot;value&quot; ...%&gt;</code></p><p>作用：配置jsp文件的转译相关的参数</p><ul><li>language:声明jsp要被转译的语言</li><li>import:声明转译java的java文件要导入的包，不同的包使用逗号隔开</li><li>pageEncoding:设置jsp文件的数据编码格式</li><li>contentType:设置jsp数据响应给浏览器时，浏览器的解析和编码格式</li><li>session:设置转译的Servlet是否开启session支持，默认开启，true开启，false关闭</li><li>errorPage:设置jsp运行错误跳转的页面</li><li>extends:设置jsp转译的java文件要继承的父类（包名+类名）</li></ul><h5 id="jsp的局部代码块"><a href="#jsp的局部代码块" class="headerlink" title="jsp的局部代码块"></a>jsp的局部代码块</h5><p>特点</p><ul><li>布局代码块中声明的java代码会被原样转译到jsp对应的Servlet文件的_JspService方法中</li><li>代码块中声明的变量都是局部变量</li></ul><p>使用：<code>&lt;%java代码块%&gt;</code></p><p>缺点：使用局部代码块在jsp中进行逻辑判断，书写麻烦，阅读困难</p><p>开发：使用Sevlet进行请求逻辑处理，使用jsp进行页面展现</p><h5 id="jsp的全局代码块"><a href="#jsp的全局代码块" class="headerlink" title="jsp的全局代码块"></a>jsp的全局代码块</h5><p>特点：声明的java代码作为全局代码转译到对应的Servlet类中</p><p>使用：<code>&lt;%!java全局代码块%&gt;</code></p><p><font color='red'>注意：全局代码块声明的代码，需要使用局部代码块调用</font></p><h5 id="jsp的脚本段语句"><a href="#jsp的脚本段语句" class="headerlink" title="jsp的脚本段语句"></a>jsp的脚本段语句</h5><p>特点：帮助开发人员快速地获取变量或者方法的返回值作为数据响应给浏览器    </p><p>使用：<code>&lt;%=变量名或者方法%&gt;</code>    &lt;===&gt;   out.write(变量名或方法);</p><p><font color='red'>注意：不要在变量名或者方法后使用分号</font></p><p>位置：除jsp语法要求以外的任意位置</p><h5 id="jsp的静态引入和动态引入"><a href="#jsp的静态引入和动态引入" class="headerlink" title="jsp的静态引入和动态引入"></a>jsp的静态引入和动态引入</h5><h6 id="静态引入"><a href="#静态引入" class="headerlink" title="静态引入"></a>静态引入</h6><p> <code>&lt;%@include file=&quot;jsp文件相对地址&quot; %&gt;</code></p><p>特点：</p><ul><li>会将引入的jsp文件和当前jsp文件转译成一个java（Servlet）文件使用</li><li>在网页中也就显示了合并后的显示效果</li></ul><p>注意：</p><ul><li>静态引入的jsp文件<font color='red'>不会</font>单独转译成java（Servlet）文件</li><li>同名变量    编译报错 Duplicate local variable</li><li>当前文件和静态引入的jsp文件中<font color='red'>不能</font>使用java代码块声明同名变量</li></ul><h6 id="动态引入"><a href="#动态引入" class="headerlink" title="动态引入"></a>动态引入</h6><p><code>&lt;jsp:include page=&quot;jsp文件相对地址&quot;/&gt;</code></p><p>特点：</p><ul><li>会将引入的jsp文件单独转译，在当前文件转译好的java文件中调用引入的jsp文件的转译文件</li><li>在网页中显示合并后的显示效果</li></ul><p>注意：动态引入<font color='red'>允许</font>文件中声明同名变量</p><p>优点：降低jsp代码的冗余，便于维护升级</p><h5 id="jsp的转发标签"><a href="#jsp的转发标签" class="headerlink" title="jsp的转发标签"></a>jsp的转发标签</h5><p>使用：<code>&lt;jsp:forward page=&quot;jsp文件相对地址&quot;&gt;&lt;/jsp:forward&gt;</code>    jsp文件<font color='red'>相对地址</font></p><p>特点</p><ul><li>一次请求</li><li>地址栏信息不变</li></ul><p>注意：<font color='red'>在转发标签的两个标签中间除了写</font><code>&lt;jsp:param name=&quot;&quot; value=&quot;&quot;/&gt;</code><font color='red'>子标签不会报错，其他任意字符都会报错</font><br><code>&lt;%=request.getParameter(&quot;键名&quot;)%&gt;</code><br>name属性为附带的数据的键名<br>value属性为附带的数据的内容<br>会将数据以?的形式在转发路径的后面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">"要转发的jsp文件的相对路径"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"str"</span> value=<span class="string">"a"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><h4 id="jsp内置对象"><a href="#jsp内置对象" class="headerlink" title="jsp内置对象"></a>jsp内置对象</h4><h5 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h5><p>jsp文件在转译其对应的Servlet文件的时候自动生成的并声明的对象，可以在jsp页面中直接使用。</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>内置对象在jsp页面中使用，使用局部代码块或者脚本段语句来使用，不能够在全局代码块中使用。</p><h5 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h5><h6 id="PageContext对象"><a href="#PageContext对象" class="headerlink" title="PageContext对象"></a>PageContext对象</h6><p>页面上下文对象，封存了其他内置对象。封存了当前jsp的运行信息</p><p>注意：每个jsp文件单独拥有一个PageContext对象</p><p>作用域：当前页面</p><h6 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h6><p>封存当前请求数据的对象，由Tomcat服务器创建，作用域为一次请求。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 获取请求数据</span></span><br><span class="line">String s = request.getParameter(<span class="string">"str"</span>);</span><br><span class="line">request.getAttribute(<span class="string">"str"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h6 id="Session对象"><a href="#Session对象" class="headerlink" title="Session对象"></a>Session对象</h6><p>存储用户的不同请求的共享数据，作用域为一次会话</p><h6 id="Application对象"><a href="#Application对象" class="headerlink" title="Application对象"></a>Application对象</h6><p>ServletContext对象，一个项目只有一个，存储用户共享数据的对象，以及完成其他操作，项目内</p><h6 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h6><p>响应对象，用来响应请求处理结果给浏览器的对象，设置响应头，重定向。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    response.sendRedirect(<span class="string">"forward.jsp"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h6 id="Out对象"><a href="#Out对象" class="headerlink" title="Out对象"></a>Out对象</h6><p>响应对象，jsp内部使用，带有缓冲区的响应对象，效率高于response对象</p><h6 id="Page对象"><a href="#Page对象" class="headerlink" title="Page对象"></a>Page对象</h6><p>代表当前jsp对象，相当于java的this</p><h6 id="Exception对象"><a href="#Exception对象" class="headerlink" title="Exception对象"></a>Exception对象</h6><p>异常对象，存储了当前运行的异常信息</p><p>注意：使用此对象需要在page指定使用属性isErrorPage=”true”开启</p><h6 id="Congfig对象"><a href="#Congfig对象" class="headerlink" title="Congfig对象"></a>Congfig对象</h6><p>ServletConfig对象，主要用来获取web.xml中的配置数据，完成一些初始化数据据的读取</p><h6 id="四个作用域对象"><a href="#四个作用域对象" class="headerlink" title="四个作用域对象"></a>四个作用域对象</h6><p>pageContext：当前对象，解决了在当前页面的数据共享问题。获取其他内置对象</p><p>request:一次请求，一次请求的servlet的数据共享。通过请求转发将数据流转给下一个Servlet</p><p>session:一次会话，一个用户的不同请求的数据共享。将数据从一次请求流转给其他请求</p><p>application:项目内，不同用户的数据共享问题。将数据从一个用户流转给其他用户</p><p>作用：数据流转</p><h4 id="jsp资源路径"><a href="#jsp资源路径" class="headerlink" title="jsp资源路径"></a>jsp资源路径</h4><p>在jsp中资源路径可以使用相对路径完成跳转，存在的问题</p><p>问题一：资源的位置不可随意更改</p><p>问题二：需要使用<code>../</code>进行文件夹的跳出，使用比较麻烦</p><h5 id="使用绝对路径"><a href="#使用绝对路径" class="headerlink" title="使用绝对路径"></a>使用绝对路径</h5><p> <code>/</code>表示服务器根目录即localhost:8080/</p><p>/虚拟项目名/项目资源路径</p><p>举例：项目虚拟名为jsp    </p><p>资源文件路径webapp/jsp/a/a.jsp    <code>&lt;a href=&quot;/jsp/a/a.jsp&quot;&gt;a.jsp&lt;/a&gt;</code></p><p>webapp/jsp/jsppro.jsp    <code>&lt;a href=&quot;/jsp/jsppro.jsp&quot;&gt;jsppro.jsp&lt;/a&gt;</code></p><h5 id="使用jsp中自带的全局路径声明"><a href="#使用jsp中自带的全局路径声明" class="headerlink" title="使用jsp中自带的全局路径声明"></a>使用jsp中自带的全局路径声明</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">    &lt;/head&gt;   </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>作用：给资源前面添加项目路径<a href="http://127.0.0.1:8080/虚拟项目名/" target="_blank" rel="noopener">http://127.0.0.1:8080/虚拟项目名/</a></p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p>问题引入</p><ul><li>Servlet进行请求处理后，使用作用域对象作为数据流转的载体，将数据流转给对应的jsp文件</li><li>在jsp中获取作用域中的数据</li></ul><p>传统方式：在jsp页面中使用java脚本段语句</p><p>传统方式获取作用域数据</p><ul><li>缺点一：要通过<code>&lt;%@ page import=&quot;&quot;%&gt;</code>导入包</li><li>缺点二：需要强制转换对象</li><li>缺点三：获取数据的代码过于麻烦</li></ul><p>ElServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"ElServlet"</span>, urlPatterns = &#123;<span class="string">"/es"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置请求编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 设置响应编码</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">// 获取请求信息</span></span><br><span class="line">        String uname = req.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">        <span class="comment">// 处理请求信息</span></span><br><span class="line">        System.out.println(uname + <span class="string">"==="</span> + pwd);</span><br><span class="line">        <span class="comment">// 响应处理结果</span></span><br><span class="line">        <span class="comment">// 使用request作用域进行数据流转</span></span><br><span class="line">        <span class="comment">// 普通字符串</span></span><br><span class="line">        req.setAttribute(<span class="string">"str"</span>, <span class="string">"今天天气很好!"</span>);</span><br><span class="line">        <span class="comment">// 对象类型</span></span><br><span class="line">        User u = <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">"张三"</span>, <span class="string">"跑步"</span>, <span class="keyword">new</span> Address(<span class="string">"湖北"</span>, <span class="string">"黄冈"</span>, <span class="string">"红安县"</span>));</span><br><span class="line">        req.setAttribute(<span class="string">"user"</span>, u);</span><br><span class="line">        <span class="comment">// 集合类型</span></span><br><span class="line">        <span class="comment">// List集合</span></span><br><span class="line">        <span class="comment">// 存储普通字符串</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"周润发"</span>);</span><br><span class="line">        list.add(<span class="string">"刘德华"</span>);</span><br><span class="line">        list.add(<span class="string">"周星驰"</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="comment">// 存储对象</span></span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"李四"</span>, <span class="string">"游泳"</span>, <span class="keyword">new</span> Address(<span class="string">"湖北"</span>, <span class="string">"武汉"</span>, <span class="string">"武昌区"</span>));</span><br><span class="line">        List&lt;User&gt; lu = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lu.add(u);</span><br><span class="line">        lu.add(u2);</span><br><span class="line">        req.setAttribute(<span class="string">"lu"</span>, lu);</span><br><span class="line">        <span class="comment">// Map集合</span></span><br><span class="line">        <span class="comment">// 存储普通字符串</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"a"</span>, <span class="string">"北京"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>, <span class="string">"上海"</span>);</span><br><span class="line">        map.put(<span class="string">"c"</span>, <span class="string">"广州"</span>);</span><br><span class="line">        map.put(<span class="string">"d"</span>, <span class="string">"深圳"</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">        <span class="comment">// 存储对象</span></span><br><span class="line">        Map&lt;String, User&gt; mu = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        mu.put(<span class="string">"a"</span>, <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"张家辉"</span>, <span class="string">"演戏"</span>, <span class="keyword">new</span> Address(<span class="string">"广东省"</span>, <span class="string">"广州市"</span>, <span class="string">"中山区"</span>)));</span><br><span class="line">        req.setAttribute(<span class="string">"mu"</span>, mu);</span><br><span class="line">        <span class="comment">// 空值判断</span></span><br><span class="line">        req.setAttribute(<span class="string">"s0"</span>,<span class="string">""</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"s1"</span>,<span class="keyword">new</span> User());</span><br><span class="line">        req.setAttribute(<span class="string">"s2"</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        req.setAttribute(<span class="string">"s3"</span>,<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">        </span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/el.jsp"</span>).forward(req, resp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关bean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String pre;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line">getter/setter...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String fav;</span><br><span class="line">    <span class="keyword">private</span> Address addr;</span><br><span class="line">    getter/setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsp文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;&lt;%=request.getParameter("uname")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=request.getAttribute("str")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User) request.getAttribute("user")).getAddr().getTown()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((ArrayList) request.getAttribute("list")).get(1)%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User) ((ArrayList) request.getAttribute("lu")).get(0)).getAddr().getPre()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((ArrayList&lt;User&gt;) request.getAttribute("lu")).get(1).getAddr().getPre()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((HashMap) request.getAttribute("map")).get("b")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((HashMap&lt;String, User&gt;) request.getAttribute("mu")).get("a").getAddr().getTown()%&gt;&lt;/b&gt;</span><br></pre></td></tr></table></figure><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>全称：Expression Language，一种写法非常简洁的表达式，语法简单易懂，便于使用，表达式语言的灵感来自于ESMAScript和XPath表达式语言。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>让jsp书写起来更加的方便，简化在jsp中获取作用域或者请求数据的写法，也会搭配JSTL来进行使用</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>语法结构：$(expression)提供<code>.</code>和<code>[]</code>两种运算符来存取数据    </p><h5 id="使用EL表达式获取请求数据"><a href="#使用EL表达式获取请求数据" class="headerlink" title="使用EL表达式获取请求数据"></a>使用EL表达式获取请求数据</h5><p>获取用户请求数据 ${requset.attribute}</p><p>获取请求头数据</p><ul><li>${header}   返回所有的请求头数据</li><li>${header[“键名”]}   返回指定键名的请求头数据</li><li>${headerValues[“键名”]} 返回指定得键名(同键不同值)</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;header&#125;</span><br><span class="line">$&#123;header[<span class="string">"User-Agent"</span>]&#125;</span><br><span class="line">$&#123;headerValues[<span class="string">"Accept-Language"</span>][<span class="number">0</span>]&#125;</span><br></pre></td></tr></table></figure><p>获取Cookie数据</p><ul><li>${cookie}   返回存储了所有的cookie对象的map集合</li><li>${cookie.键名}    返回指定的cookie对象</li><li>${cookie.键名.name}   返回指定的cookie对象存储的数据的键名</li><li>${cookie.键名.value}   返回指定的cookie对象存储的数据的值</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;cookie&#125;</span><br><span class="line">$&#123;cookie.JSESSIONID.value&#125;</span><br></pre></td></tr></table></figure><h5 id="使用EL表达式获取作用域数据"><a href="#使用EL表达式获取作用域数据" class="headerlink" title="使用EL表达式获取作用域数据"></a>使用EL表达式获取作用域数据</h5><h6 id="获取作用域数据"><a href="#获取作用域数据" class="headerlink" title="获取作用域数据"></a>获取作用域数据</h6><ul><li>request对象存储了请求数据    param.键名         返回的是值</li><li>request对象存储了请求数据    paramValues.键名   返回的是数组</li></ul><p>通过setAttribute方法存储到作用域对象中的数据</p><ul><li>${键名}   返回键名所对应的值</li></ul><p>注意</p><ul><li>如果存储的是普通字符串则直接返回</li><li>如果存储的是对象，则返回的是对象</li></ul><p>获取对象中的数据</p><ul><li>普通对象:${键名.属性名.属性名…}</li><li>集合对象:<ul><li>list集合${键名[角标]}</li><li>map集合${键名.map集合存储的键名}</li></ul></li></ul><h6 id="作用域查找顺序"><a href="#作用域查找顺序" class="headerlink" title="作用域查找顺序"></a>作用域查找顺序</h6><p>默认查找顺序：pageContext–&gt;reqeust–&gt;session–&gt;application</p><p><font color='red'>注意：每次查找都从小到大进行查找，找到了则获取，不再继续找了</font></p><h6 id="获取指定作用域的数据"><a href="#获取指定作用域的数据" class="headerlink" title="获取指定作用域的数据"></a>获取指定作用域的数据</h6><ul><li>${requestScope.键名}</li><li>${pageScope.键名}</li><li>${sessionScope.键名}</li><li>${applicationScope.键名}</li></ul><h5 id="使用EL表达式进行运算"><a href="#使用EL表达式进行运算" class="headerlink" title="使用EL表达式进行运算"></a>使用EL表达式进行运算</h5><p>算术运算${算术表达式}</p><p>关系运算${关系表达式}</p><p>逻辑运算${逻辑表达式}</p><p>三目运算${三目表达式}</p><p><font color='red'>注意：</font><code>+</code><font color='red'>表示加法运算，不表示字符连接，使用EL表达式进行字符连接会报错</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">3</span>=&gt;$&#123;<span class="number">1</span>+<span class="number">3</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=&gt;$&#123;<span class="number">1</span>*<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>=&gt;$&#123;<span class="number">1</span>/<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>-<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>-<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>%<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>%<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>==<span class="number">3</span>=&gt;$&#123;<span class="number">4</span>==<span class="number">3</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>&gt;<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>&gt;<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>==<span class="number">1</span>?<span class="string">'男'</span>:<span class="string">'女'</span>=&gt;$&#123;<span class="number">1</span>==<span class="number">1</span>?<span class="string">'男'</span>:<span class="string">'女'</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>+<span class="string">"2"</span>=&gt;$&#123;<span class="number">1</span>+<span class="string">"2"</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="使用EL表达式控制判断empty"><a href="#使用EL表达式控制判断empty" class="headerlink" title="使用EL表达式控制判断empty"></a>使用EL表达式控制判断empty</h5><p>${empty 键名}</p><p>作用：判断键名对象的值是否存有数据</p><h3 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>JSTL是apache对EL表达式的扩展（JSTL依赖于EL），JSTL是标签语言。JSTL标签使用起来非常方便，它与JSP动作标签一样，只不过是它不是JSP内置的标签，需要导包，以及指定标签库。</p><p>使用MyEclipse开发JavaWeb，在项目发布到Tomcat时，MyEclipse会在lib目录下存放jstl的jar包。如果没有使用MyEclipse开发需要手动导入jar包。Maven项目需要导入JSTL的相关依赖。</p><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>用来提升在JSP页面的逻辑代码的编码效率，使用标签来替换逻辑代码的直接书写，高效、美观、整洁、易读。</p><h4 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h4><ul><li>核心标签库</li><li>格式化标签库</li><li>JSTL的SQL标签库</li><li>JSTL的函数标签库</li><li>JSTL的XML标签库</li></ul><p>菜鸟教程-JSTL：<a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p><h5 id="JSTL的核心标签库"><a href="#JSTL的核心标签库" class="headerlink" title="JSTL的核心标签库"></a>JSTL的核心标签库</h5><ol><li><p>导入jar包</p></li><li><p>声明jstl标签库的引入(核心标签库)</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jstl/core_rt"</span> %&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h6><p><code>&lt;c:out value=&quot;数据&quot; default=&quot;默认值&quot;/&gt;</code></p><p>数据可以作为常量值也可以是EL表达式</p><p>作用：将数据输出给客户端</p><p><code>&lt;c:set var=&quot;hello&quot; value=&quot;hello pageContext&quot; scope=&quot;page&quot;/&gt;</code></p><p>作用：存储数据到作用域对象中</p><ul><li>var:表示存储的键名</li><li>value:表示存储的数据</li><li>scope:表示要存储的作用域对象 page request session application</li></ul><p><code>&lt;c:remove var=&quot;hello&quot; scope=&quot;request&quot;/&gt;</code></p><p>作用：删除作用域中指定键的数据</p><ul><li>var:表示要删除的键的名字</li><li>scrope:表示要删除的作用域(可选)</li><li><font color='red'>注意：如果在不指定作用域的情况使用该标签删除数据，会将四个作用域对象中的符合要求的数据全部删除</font></li></ul><h6 id="逻辑标签"><a href="#逻辑标签" class="headerlink" title="逻辑标签"></a>逻辑标签</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"\$&#123;表达式&#125;"</span>&gt;</span><br><span class="line">    前端代码</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><p>作用：进行逻辑判断，相当于java代码的单分支判断。</p><p>注意：逻辑判断标签需要依赖于EL的逻辑运算，也就是表达式中涉及到的数据必须从作用域中拿。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=""&gt;执行内容&lt;/c:when&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;c:otherwise&gt;执行内容&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>作用:用来进行多条件逻辑判断，类似java中的多分支语句。</p><p>注意：条件成立只会执行一次，都不成立则执行otherwise。</p><h6 id="循环标签"><a href="#循环标签" class="headerlink" title="循环标签"></a>循环标签</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"4"</span> step=<span class="string">"1"</span>&gt;</span><br><span class="line">    循环体</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>作用：循环内容进行处理</p><ul><li><p>begin：声明循环开始位置</p></li><li><p>end：声明循环结束位置</p></li><li><p>step：设置循环步长</p></li><li><p>varStatus：声明变量记录每次循环的数据(角标、次数，是否是第一次循环，是否是最后一次循环)</p><p>注意:数据存储在作用域中，需要使用EL表达式获取</p><p>例如：${vs.index}–${vs.count}–​${vs.first}–​${vs.last}</p></li><li><p>items：声明要遍历的对象，结合EL表达式获取对象</p></li><li><p>var：声明变量记录每次循环的结果，存储在作用域中，通过EL表达式获取对象</p></li></ul><p>数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"hello"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">map.put(<span class="string">"world"</span>, <span class="string">"world"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--常量循环--%&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"4"</span> step=<span class="string">"1"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">    $&#123;vs.index&#125;--$&#123;vs.count&#125;--$&#123;vs.first&#125;--$&#123;vs.last&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;%--动态循环--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"varlist"</span>&gt;</span><br><span class="line">    $&#123;varlist&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--JSTL方式创建表格--%&gt;</span><br><span class="line">&lt;table border=<span class="string">"1px"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;字段名&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"s"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;%--遍历map集合--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;map&#125;"</span> <span class="keyword">var</span>=<span class="string">"m"</span>&gt;</span><br><span class="line">    $&#123;m.key&#125;:$&#123;m.value&#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jsp&quot;&gt;&lt;a href=&quot;#Jsp&quot; class=&quot;headerlink&quot; title=&quot;Jsp&quot;&gt;&lt;/a&gt;Jsp&lt;/h3&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;Java Server Pages，Java服务器页面&lt;/p&gt;
&lt;p&gt;简化的Servlet设计&lt;/p&gt;
&lt;p&gt;动态网页技术标准（数据的动态改变）&lt;/p&gt;
&lt;h5 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;本质上是Servlet&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;li&gt;组件跨平台&lt;/li&gt;
&lt;li&gt;健壮性和安全性（业务逻辑，数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;访问原理&quot;&gt;&lt;a href=&quot;#访问原理&quot; class=&quot;headerlink&quot; title=&quot;访问原理&quot;&gt;&lt;/a&gt;访问原理&lt;/h5&gt;&lt;p&gt;Tomcat只能识别Servlet，用户访问jsp文件，服务器用JspServlet将jsp文件转义成对应的Java文件，返回给用户&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;jsp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.jasper.servlet.JspServlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;fork&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;xpoweredBy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;load-on-startup&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;load-on-startup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;jsp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;*.jsp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;*.jspx&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h5&gt;&lt;p&gt;&lt;font color=&#39;blue&#39;&gt;JSP负责页面展现，Sevlet负责业务逻辑处理&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="jsp" scheme="https://lao-biao.github.io/tags/jsp/"/>
    
      <category term="el" scheme="https://lao-biao.github.io/tags/el/"/>
    
      <category term="jstl" scheme="https://lao-biao.github.io/tags/jstl/"/>
    
  </entry>
  
  <entry>
    <title>Servlet笔记</title>
    <link href="https://lao-biao.github.io/articles/bc07bc32.html"/>
    <id>https://lao-biao.github.io/articles/bc07bc32.html</id>
    <published>2020-07-11T14:25:05.000Z</published>
    <updated>2020-07-12T05:43:38.599Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ul><li><p>狭义的Servlet是指Java语言实现的一个接口</p></li><li><p>广义的Servlet是指任何实现了这个Servlet接口的类</p></li></ul><p>Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，绝大数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ul><li><p>运行在Java的应用服务器上</p></li><li><p>Servlet的实现遵循了服务器能够识别的规则，服务器会自动地根据请求调用对应地Servlet进行请求处理</p></li><li><p>简单方便，可移植性强</p></li></ul><h6 id="URL与URI"><a href="#URL与URI" class="headerlink" title="URL与URI"></a>URL与URI</h6><p>url：<a href="http://localhost:8080/servlet/my" target="_blank" rel="noopener">http://localhost:8080/servlet/my</a></p><ul><li><p>服务器地址:端口号/webapps下的文件夹的名称[虚拟项目名]/类名全路径[别名]</p></li><li><p>服务器地址:端口号/虚拟项目名/servlet的别名</p></li></ul><p>URI：虚拟项目名/servlet的别名</p><h6 id="访问流程"><a href="#访问流程" class="headerlink" title="访问流程"></a>访问流程</h6><ol><li>浏览器发送请求到服务器</li><li>服务器根据请求URL地址中的URI信息在webapps目录下找到对应的项目文件夹</li><li>然后在web.xml中检索响应的Servlet</li><li>找到后调用并执行Servlet</li></ol><a id="more"></a><h5 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h5><ul><li>从第一次调用到服务器关闭</li><li>如果Servlet在web.xml中配置了load-on-startup，生命周期为从服务器启动到服务器关闭</li></ul><p>init()方法是对Servlet进行初始化的方法，会在Servlet第一次加载进行存储时执行</p><p>destroy()方法是在Servlet被销毁时执行，即服务器关闭时</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li><p>service() 可以处理get/post方式的请求，如果Servlet中有service方法会优先调用service方法对请求进行处理</p></li><li><p>doGet()  处理get方式请求</p></li><li><p>doPost() 处理post方式请求</p><p>注意:如果在覆写的service方法中又调用了父类的service方法，则service方法处理完成后，会再次根据请求方式响应的doGet和doPost方法执行。所以，一般情况下不在覆写的service方法中调用父类的service方法，避免出现405错误。</p></li></ul><h5 id="Servlet的常见错误"><a href="#Servlet的常见错误" class="headerlink" title="Servlet的常见错误"></a>Servlet的常见错误</h5><ul><li>404错误：资源未找到<br>原因1：在请求地址中的servlet的别名书写错误<br>原因2：虚拟项目名称拼写错误</li><li>500错误：内容服务器错误 java.lang.ClassNotFoundException<br>解决：在web.xml中校验Servlet类的全限定路径是否拼写错误<br>逻辑错误：因为service方法的代码执行错误导致，根据错误提示对service方法体中的代码进行错误更改</li><li>405错误：请求方式不支持<br>原因:请求方式和Servlet中的方法不匹配所造成<br>解决:尽量使用service方法进行请求处理，并且不要再service方法中调用父类的service</li></ul><h5 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h5><p>request对象中封存了当前的所有请求信息</p><h6 id="获取请求头数据"><a href="#获取请求头数据" class="headerlink" title="获取请求头数据"></a>获取请求头数据</h6><ul><li><p>req.getMethod()              获取请求方式</p></li><li><p>req.getRequestURL()          获取请求URL信息</p><ul><li>req.getRequestURI()          获取请求URI信息</li><li>req.getScheme()              获取协议</li></ul></li></ul><h6 id="获取请求行数据"><a href="#获取请求行数据" class="headerlink" title="获取请求行数据"></a>获取请求行数据</h6><ul><li>req.getHeader(“键名”)          返回指定的请求头信息</li><li>req.getHeaderNames()          返回请求头的键名的枚举集合</li></ul><h6 id="获取用户数据"><a href="#获取用户数据" class="headerlink" title="获取用户数据"></a>获取用户数据</h6><ul><li><p>req.getParameter(“键名”)        返回指定的用户数据</p></li><li><p>req.getParameterValues(“键名”)    返回同键不同值的请求数据</p></li><li><p>req.getParameterNames()          返回所有用户请求数据的枚举集合</p><p>如果要获取的请求数据不存在，不会报错，返回null</p><p>注意:request对象由tomcat服务器创建，并作为实参传递给处理请求的Servlet的service方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求头数据</span></span><br><span class="line">    String method = req.getMethod();    <span class="comment">// 获取请求方式</span></span><br><span class="line">    StringBuffer requestURL = req.getRequestURL();<span class="comment">// 获取请求URL</span></span><br><span class="line">    String requestURI = req.getRequestURI();</span><br><span class="line">    String scheme = req.getScheme();    <span class="comment">// 获取请求协议</span></span><br><span class="line">    System.out.println(<span class="string">"method==&gt;"</span> + method + <span class="string">"  URL==&gt;"</span> + requestURL + <span class="string">"  URI==&gt;"</span> + requestURI + <span class="string">"  scheme==&gt;"</span> + scheme);</span><br><span class="line">    <span class="comment">// 获取行数据</span></span><br><span class="line">    String header = req.getHeader(<span class="string">"User-Agent"</span>);    <span class="comment">// 获取指定的请求行信息</span></span><br><span class="line">    System.out.println(header);</span><br><span class="line">    Enumeration&lt;String&gt; headerNames = req.getHeaderNames(); <span class="comment">// 获取所有请求行的枚举</span></span><br><span class="line">    <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">        String name = headerNames.nextElement();</span><br><span class="line">        String value = req.getHeader(name);</span><br><span class="line">        System.out.println(name + <span class="string">"==&gt;"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取用户数据</span></span><br><span class="line">    String uname = req.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">    String pwd = req.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">    System.out.println(<span class="string">"uname==&gt;"</span> + uname + <span class="string">"  pwd==&gt;"</span> + pwd);</span><br><span class="line">    String[] favs = req.getParameterValues(<span class="string">"fav"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String fav : favs) &#123;</span><br><span class="line">        System.out.println(fav);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">"request"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span> value=<span class="string">""</span>/&gt;&lt;br/&gt;</span><br><span class="line">            密码:&lt;input type=<span class="string">"text"</span> name=<span class="string">"pwd"</span> value=<span class="string">""</span>/&gt; &lt;br/&gt;</span><br><span class="line">            爱好:&lt;br/&gt;</span><br><span class="line">            <span class="number">1</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"1"</span>&gt;&lt;br/&gt;</span><br><span class="line">            <span class="number">2</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"2"</span>&gt;&lt;br/&gt;</span><br><span class="line">            <span class="number">3</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"3"</span>&gt;&lt;br/&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h5><p> 作用：用来响应数据到浏览器的一个对象</p><p>使用：</p><ul><li>设置响应头<ul><li>setHeader(String name,String value) 在响应头中添加响应信息，但同键会覆盖</li><li>addHeader(String name,String value) 在响应头中添加响应信息，不会覆盖</li></ul></li><li>设置响应状态<br>sendError(int num,String msg)   自定义响应状态码</li><li>设置响应实体<br>resp.getWriter().write(String str)  响应具体的数据给浏览器</li><li>设置响应编码格式<br>resp.setContentType(“text/html;charset=utf-8”)</li></ul><h6 id="service请求处理代码流程"><a href="#service请求处理代码流程" class="headerlink" title="service请求处理代码流程"></a>service请求处理代码流程</h6><ol><li>设置响应编码格式         </li><li>获取请求数据</li><li>处理请求数据</li><li>数据库操作（MVC思想）</li><li>响应请求处理</li></ol><h5 id="请求中文乱码解决"><a href="#请求中文乱码解决" class="headerlink" title="请求中文乱码解决"></a>请求中文乱码解决</h5><ol><li>使用String进行数据重新编码<br><code>uname=new String(uname.getBytes(&quot;iso8859-1&quot;), &quot;utf-8&quot;);</code></li><li>使用公共配置<ul><li>get方式<br><code>req.setCharacterEncoding(&quot;utf-8&quot;);</code><br>在tomcat的目录下的conf目录中修改<code>server.xml</code>文件,在<code>Connector</code>标签中增加属性<code>useBodyEncodingForURI=&quot;true&quot;</code></li><li>post方式<br><code>req.setCharacterEncoding(&quot;utf-8&quot;);</code></li></ul></li></ol><h5 id="Servlet流程总结"><a href="#Servlet流程总结" class="headerlink" title="Servlet流程总结"></a>Servlet流程总结</h5><ol><li>浏览器发起请求到服务器</li><li>服务器接收浏览器的请求,进行解析，创建request对象存储请求数据</li><li>服务器调用对应的Servlet进行请求处理，并将request对象作为实参传递给Servlet的方法</li><li>Servlet的方法执行进行请求处理<ol><li>设置请求编码格式</li><li>设置响应编码格式</li><li>获取请求信息</li><li>处理请求信息<br>创建业务层对象<br>调用业务层对象的方法</li><li>响应结果处理</li></ol></li></ol><h5 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h5><p>作用：实现多个Servlet联动操作处理请求，避免代码冗余,让Servlet的职责更加明确</p><p>使用：<code>req.getRequestDispatcher(&quot;要转发的地址&quot;).forward(req,resp);</code><br>地址：相对路径,直接书写Servlet的别名即可</p><p>特点：一次请求，浏览器地址信息不变</p><p>注意：请求转发后直接return结束即可</p><h5 id="request对象的作用域"><a href="#request对象的作用域" class="headerlink" title="request对象的作用域"></a>request对象的作用域</h5><p>使用：</p><ul><li><code>request.setAttribute(Object name,Object value);</code>    </li><li><code>request.getAttribute(Object obj);</code></li></ul><p>作用：解决了一次请求内的不同Servlet的数据(请求数据+其他数据)共享问题</p><p>作用域：基于请求转发,一次请求中的所有Servlet共享</p><p>注意：使用Request对象进行数据流转,数据只在一次请求内有效</p><p>特点：</p><ul><li>服务器创建</li><li>每次请求都会创建</li><li>生命周期为一次请求</li></ul><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p>解决表单重复提交的问题，以及当前Servlet为无法处理的请求的问题</p><p>使用：</p><ul><li><code>response.sendRedirect(&quot;路径&quot;);</code></li><li>本地路径为：URI</li><li>网络路径为：定向资源的URL信息</li></ul><p>特点：</p><ul><li>两次请求，两个request对象</li><li>浏览器地址信息改变</li></ul><p>时机：</p><ul><li>如果请求中有表单数据，而数据又比较重要，不能重复提交，建议使用重定向</li><li>如果请求被Servlet接收后，无法进行处理，建议使用重定向定位到可以处理的资源</li></ul><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>作用：解决发送的不同请求的数据共享问题</p><h6 id="Cookie的创建和存储"><a href="#Cookie的创建和存储" class="headerlink" title="Cookie的创建和存储"></a>Cookie的创建和存储</h6><ul><li>创建Cookie对象<br><code>Cookie cookie=new Cookie(String name,String value);</code></li><li>设置Cookie(可选)<br>设置有效期  <code>cookie.setMaxAge(int seconds);</code><br>设置有效路径  <code>cookie.setPath(String uri);</code><br>响应Cookie信息给客户端 <code>resp.addCookie(cookie);</code></li></ul><h5 id="Cookie的获取"><a href="#Cookie的获取" class="headerlink" title="Cookie的获取"></a>Cookie的获取</h5><ul><li><p>获取Cookie信息数组<br><code>Cookie[] cookies=req.getCookies();</code></p></li><li><p>遍历数组获取Cookie信息<br>使用for循环遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cookies!=<span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">        String name = c.getName();</span><br><span class="line">        String value = c.getValue();</span><br><span class="line">        System.out.println(name + <span class="string">":"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意：一个Cookie对象存储一条数据，多条数据，可以创建多个Cookie对象进行存储。</p><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><ul><li>Cookie是浏览器端的数据存储技术</li><li>存储的数据声明在服务器端</li><li>临时存储:存储在浏览器的运行内存中，浏览器关闭即失效</li><li>定时存储:设置了Cookie的有效期，存储在客户端的硬盘中，在有效期内符合路径要求的请求都会附带信息</li><li>默认Cookie信息存储好之后，每次请求都会附带，除非设置有效路径</li></ul><h5 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h5><p>问题：一个用户的不同请求处理的数据共享</p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>用户第一次访问服务器，服务器会创建一个session对象给此用户，并将该session对象的JSESSIONID使用Cookie技术存储到浏览器中，保证用户的其他请求能够获取到同一个session对象，也保证了不同请求能够获取到共享的数据。</p><h6 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h6><ol><li>存储在服务器端</li><li>服务器进行创建</li><li>依赖Cookie技术</li><li>一次会话</li><li>默认存储时间是30分钟</li></ol><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><p>解决了一个用户不同请求处理的数据共享问题</p><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>创建session对象/获取session对象<code>HttpSession hs = req.getSession();</code></p><ul><li>如果请求中拥有session的标识符JSESSIONID，则返回其对应的session对象。</li><li>如果请求中没有session的标识符JSESSIONID，则创建新的session对象，并将其JSESSIONID作为cookie数据存储到浏览器端。</li><li>如果session对象失效了，也会重新创建一个session对象，并将其JSESSIONID存储在浏览器内存中。</li></ul><p>设置session存储时间<code>hs.setMaxInactiveInterval(int seconds);</code></p><p>注意：在指定的时间内session对象没有被使用则销毁，如果使用了则重新计时。</p><p>设置session强制失效<code>hs.invalidate();</code></p><p>存储和获取数据</p><ul><li><p>存储：<code>hs.setAttribute(String name,Object object);</code></p></li><li><p>获取：<code>hs.getAttribute(String name);</code> 返回的数据类型为Object</p><p>注意:存储的动作和取出的动作发生在不同的请求中，但是存储要先与取出执行。</p></li></ul><p>使用时机：一般用户在登录web项目时会将用户的个人信息存储到session中，供该用户的其他请求使用。</p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>session解决了一个个用户的不同请求的数据共享问题，只要在JSESSIONID不失效的情况下，用户的任意请求在处理时都能获取到同一个session对象</p><h6 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h6><ul><li>一次会话</li><li>在JSESSIONID和session对象不失效的情况下为整个项目内</li></ul><h6 id="session失效处理"><a href="#session失效处理" class="headerlink" title="session失效处理"></a>session失效处理</h6><p>将用户请求中的JSESSIONID和后台获取到的session对象进行比对时</p><ul><li>如果一致，则session没有失效，</li><li>如果不一致则说明session失效了，重定向到登录页面，让用户重新登录</li></ul><p>注意： JSESSIONID存储在了Cookie的临时存储空间中，浏览器关闭即失效</p><h5 id="模拟登录案例问题"><a href="#模拟登录案例问题" class="headerlink" title="模拟登录案例问题"></a>模拟登录案例问题</h5><p>解决主页面用户名显示为null问题</p><p>原因：因为在用户登录成功后使用重定向显示主界面，两次请求，而用户的信息在第一次请求中，第二次请求中没有用户数据，所以显示为null</p><p>解决：使用session技术</p><p>使用ServletContext对象完成网页计数器：在用户登录校验中创建计数器并自增，然后存储到ServletContext对象中，在主页面里取出计数器数据显示给用户。</p><h5 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h5><p>解决不同用户使用相同的数据</p><p>特点</p><ul><li>服务器创建</li><li>用户共享</li></ul><p>生命周期：服务器启动到服务器关闭</p><p>在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>context<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletContextServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>context<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/context<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><ul><li><p>获取ServletContext对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletContext sc1 = <span class="keyword">this</span>.getServletContext();<span class="comment">// this对象直接获取</span></span><br><span class="line">ServletContext sc2 = <span class="keyword">this</span>.getServletConfig().getServletContext(); <span class="comment">// 通过ServletConfig获取</span></span><br><span class="line">ServletContext sc3 = req.getSession().getServletContext(); <span class="comment">// 通过Session获取</span></span><br></pre></td></tr></table></figure></li><li><p>使用ServletContext对象完成数据共享</p><ul><li><p>数据存储<code>sc.setAttribute(String name,Object value);</code></p></li><li><p>数据获取<code>sc.getAttribute(String name);</code> 返回的是<strong>Object</strong>类型</p><p>注意：不同的用户可以给ServletContext对象进行数据存取，获取的数据不存在返回<strong>null</strong></p></li></ul></li><li><p>获取项目中web.xml文件的全局配置数据<br><code>sc.getInitParameter(&quot;name&quot;);</code>    返回<strong>String</strong>类型，如果数据不存在返回<strong>null</strong><br><code>sc.getParameterNames();</code> 返回键名的<strong>枚举</strong><br>配置方式一组<code>&lt;context-param&gt;</code>标签只能存储一组键值对数据，多组可以声明多个<code>&lt;context-param&gt;</code>进行存储。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span><span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：将静态数据和代码进行解耦</p></li><li><p>获取项目web下的资源的绝对路径<br><code>String path = sc.getRealPath(String path);</code><br>获取的路径为项目根目录，参数为项目根目录中的路径</p></li><li><p>获取web下的资源的流对象<br><code>InputStream is = sc.getResourceAsStream(&quot;doc/1.txt&quot;);</code><br>注意：此种方式只能获取<font color='red'>项目根目录</font>下的资源流对象，class文件的流对象需要使用类加载器获取</p></li></ul><h5 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h5><p>解决在web.xml中给每个Servlet单独配置的数据</p><p>在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletConfigServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用：</p><ul><li>获取ServletConfig对象     <code>ServletConfig sc = this.getServletConfig();</code></li><li>获取web.xml中的配置数据        <code>String config = sc.getInitParameter(&quot;config&quot;);</code></li></ul><h5 id="web-xml文件"><a href="#web-xml文件" class="headerlink" title="web.xml文件"></a>web.xml文件</h5><p>作用：存储项目相关配置信息，保护Servlet；解耦一些数据对程序的依赖。</p><p>使用位置</p><ul><li>每个web项目中</li><li>Tomcat服务器中（在服务器目录conf目录中）</li></ul><p>区别</p><ul><li>Web项目下的web.xml文件为局部配置，针对本项目的位置</li><li>Tomcat下的web.xml文件为全局配置，配置公共信息</li></ul><p>内容（核心组件）</p><ul><li>全局上下文配置（全局配置参数）[ServletContext、context-param]</li><li>Servlet配置</li><li>过滤器配置[filter]</li><li>监听器配置[listener]</li></ul><p><strong><em>加载顺序</em></strong>：Web容器会按<font color='red'>ServletContext-&gt;context-param-&gt;listener-&gt;filter-&gt;servlet</font>顺序加载组件，这些元素可配置在<code>web.xml</code>文件中的任意位置。</p><p>加载时机：服务器启动时</p><h5 id="Server-xml文件核心组件"><a href="#Server-xml文件核心组件" class="headerlink" title="Server.xml文件核心组件"></a>Server.xml文件核心组件</h5><p>Tomcat的<code>server.xml</code>结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Context</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>热部署：<code>&lt;Context path=&quot;/项目虚拟名&quot; reloadable=&quot;true&quot; docBase=&quot;项目路径&quot;/&gt;</code></p><p>开发时使用冷部署，需要重启服务器。</p><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>问题引入：Servlet的作用是针对浏览器发起的请求，进行请求的处理。通过Servlet技术可以灵活的进行请求的处理，但是我们不但要对请求进行处理，还需要对服务器的资源进行统一的管理，比如请求编码格式的统一设置，资源的统一分配等等，如何解决？</p><p>解决：使用过滤器</p><p>作用：对服务器资源进行管理、保护Servlet。</p><p>过滤器生命周期：<font color='red'>从服务器启动到服务器关闭</font></p><h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><ul><li><p>创建一个实现了Filter接口的普通java类</p></li><li><p>覆写接口的方法</p><ul><li><p>init()方法:服务器启动即执行，资源初始化</p></li><li><p>doFilter()方法:拦截请求，在此方法中可以对资源实现管理</p><p>注意:需要手动对请求进行放行</p></li><li><p>destroy()方法:服务器关闭时执行</p></li></ul></li><li><p>Filter过滤器的配置：在web.xml中配置过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>mf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.web.filter.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>mf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解的形式：<code>@WebFilter(filterName = &quot;MyFilter&quot;, urlPatterns = {&quot;/*&quot;})</code></p></li><li><p>注意</p><ul><li>url-pattern:/*  表示拦截所有的请求</li><li>url-pattern:*.do    表示所有以.do结尾的请求，一般是用来进行模块拦截处理</li><li>url-pattern:/ServletUrlPattern    表示拦截指定url的请求，针对某个Servlet的请求拦截，保护Servlet</li></ul></li></ul><h6 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h6><p>浏览器发起请求到服务器，服务器接收到请求后根据URI信息在<code>web.xml</code>中找到对应的过滤器执行<code>doFilter()</code>方法，该方法对此次请求进行处理后如果符合要求则放行，放行后如果还有符合要求的规律其则继续进行过滤，找到对应的Servlet进行处理。Servlet对请求处理完毕后，也就是<code>service()</code>方法结束了。还需要继续返回相应的<code>doFilter()</code>方法继续执行。</p><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><ul><li>统一管理字符编码</li><li>统一编码格式设置</li><li>session管理</li><li>权限管理</li><li>资源管理(统一水印，和谐词汇等)</li></ul><h5 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h5><h6 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h6><p>在Servlet技术中学习了request、session、application作用域对象，其主要作用是实现数据在不同的场景中的灵活流转。但是数据的具体流转过程是无法看到的，比如作用域对象是什么时候创建和销毁的，数据是什么时候存取，改变和删除的。因为具体的流转过程是不可见的，所以无法在指定的实际对数据和对象进行操作，比如session销毁的时候，在线人数-1。</p><p>解决：使用监听器Listener</p><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p>Servlet监听器时Servlet规范中定义的一种特殊类，用于监听ServletContext、HttpSession和ServletReqeust等域对象的创建与销毁事件，以及监听这些域对象中属性发生修改的事件。</p><p>监听对象</p><ul><li>Request</li><li>Session</li><li>Application</li></ul><p>监听内容：创建、销毁、属性改变事件</p><p>监听作用：在事件发生之前，之后进行一些处理，比如统计在线人数</p><h6 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h6><p>1、创建一个实现了指定接口的java类</p><p>监听request</p><ul><li><p>监听request–&gt;ServletRequestListener  监听request对象的创建和销毁</p><ul><li>requestInitialized(ServletRequestEvent sre) 创建</li><li>requestDestroyed(ServletRequestEvent sre)   销毁</li></ul><p>注意：形参获取监听的request对象  sre.getServletRequest()</p></li><li><p>监听request–&gt;ServletRequestAttributeListener 监听request作用域数据的增加、修改、删除</p><ul><li>attributeAdded(ServletRequestAttributeEvent srae)</li><li>attributeReplaced(ServletRequestAttributeEvent srae)</li><li>attributeRemoved(ServletRequestAttributeEvent srae)</li></ul><p>注意：形参可以获取被监听的数据</p><ul><li>srae.getName()  获取监听数据的键名</li><li>srae.getValue()  获取监听数据的值</li></ul></li></ul><p>监听session</p><ul><li><p>监听session–&gt;HttpSessionListener 监听session的创建和销毁</p><ul><li>sessionCreated(HttpSessionEvent se)</li><li>sessionDestroyed(HttpSessionEvent se)</li></ul><p>注意:形参可以获取被监听的session对象 se.getSession();</p></li><li><p>监听session–&gt;HttpSessionAttributeListener 监听session数据的创建和销毁</p><ul><li>attributeAdded(HttpSessionBindingEvent se)</li><li>attributeReplaced(HttpSessionBindingEvent se)</li><li>attributeRemoved(HttpSessionBindingEvent se)</li></ul><p>注意:形参可以获取被监听的数据</p><ul><li>se.getName()    获取数据的键名</li><li>se.getValue()   获取数据的值</li></ul></li></ul><p>监听application</p><ul><li><p>监听application–&gt;ServletContextListener  监听application对象的初始化和销毁</p><ul><li>contextInitialized(ServletContextEvent sce) 初始化 服务器启动</li><li>contextDestroyed(ServletContextEvent sce)   销毁  服务器关闭</li></ul><p>注意:形参可以获取当前application对象<br>sce.getApplication()</p></li><li><p>监听application–&gt;ServletContextAttributeListener</p><ul><li>attributeAdded(ServletContextAttributeEvent scae)</li><li>attributeReplaced(ServletContextAttributeEvent scae)</li><li>attributeRemoved(ServletContextAttributeEvent scae)</li></ul><p>注意:形参可以获取被监听的数据</p><ul><li>scae.getName()  获取数据的键名</li><li>scae.getValue() 获取数据的值</li></ul></li></ul><p>2、在web.xml中配置监听类(可配置多个监听器)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.web.listener.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解形式：<code>@WebListener(value = &quot;/ml&quot;)</code></p><h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h6><p>统计网站在线人数</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h4&gt;&lt;h5 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;狭义的Servlet是指Java语言实现的一个接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;广义的Servlet是指任何实现了这个Servlet接口的类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，绝大数情况下Servlet只用来扩展基于HTTP协议的Web服务器。&lt;/p&gt;
&lt;h6 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;运行在Java的应用服务器上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Servlet的实现遵循了服务器能够识别的规则，服务器会自动地根据请求调用对应地Servlet进行请求处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单方便，可移植性强&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;URL与URI&quot;&gt;&lt;a href=&quot;#URL与URI&quot; class=&quot;headerlink&quot; title=&quot;URL与URI&quot;&gt;&lt;/a&gt;URL与URI&lt;/h6&gt;&lt;p&gt;url：&lt;a href=&quot;http://localhost:8080/servlet/my&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8080/servlet/my&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务器地址:端口号/webapps下的文件夹的名称[虚拟项目名]/类名全路径[别名]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器地址:端口号/虚拟项目名/servlet的别名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;URI：虚拟项目名/servlet的别名&lt;/p&gt;
&lt;h6 id=&quot;访问流程&quot;&gt;&lt;a href=&quot;#访问流程&quot; class=&quot;headerlink&quot; title=&quot;访问流程&quot;&gt;&lt;/a&gt;访问流程&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;浏览器发送请求到服务器&lt;/li&gt;
&lt;li&gt;服务器根据请求URL地址中的URI信息在webapps目录下找到对应的项目文件夹&lt;/li&gt;
&lt;li&gt;然后在web.xml中检索响应的Servlet&lt;/li&gt;
&lt;li&gt;找到后调用并执行Servlet&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="servlet" scheme="https://lao-biao.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>AQS笔记</title>
    <link href="https://lao-biao.github.io/articles/74f18f35.html"/>
    <id>https://lao-biao.github.io/articles/74f18f35.html</id>
    <published>2020-07-11T12:29:29.000Z</published>
    <updated>2020-07-12T05:43:38.546Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h4><p>Abstract Queued Synchronizer 抽象队列同步器<br>所在包：<code>java.util.concurrent.locks.AbstractQueuedSynchronizer;</code></p><p>AQS是基于先进先出队列（FIFO），CLH（一种基于<strong>单向链表</strong>的高性能、<strong>公平</strong>的<strong>自旋锁</strong>）</p><p>基于AQS实现的锁</p><ul><li>ReentrantLock 可重入锁[悲观锁]</li><li>Semaphore 信号量</li><li>CountDownLatch 倒数</li><li>ReentrantReadWriteLock 可重入读写锁</li></ul><h5 id="偏向锁、轻量级锁、重量级锁"><a href="#偏向锁、轻量级锁、重量级锁" class="headerlink" title="偏向锁、轻量级锁、重量级锁"></a>偏向锁、轻量级锁、重量级锁</h5><p><strong>偏向锁</strong>：偏向第一个线程(JDK 1.6) JVM内部</p><p><strong>轻量级锁</strong>：由偏向锁升级而来，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁。</p><p><strong>自旋锁</strong>：一个执行单元要想访问被自旋锁保护的共享资源，必须先得到锁，在访问完共享资源后，必须释放锁。</p><p>自旋锁–(自旋10次)–&gt;重量级锁（悲观锁）</p><h5 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h5><ul><li><strong>悲观锁</strong>：总是假设最坏的情况，每次拿数据都认为别的线程会修改数据，所以要加锁，别的线程只能等待，直到当前线程释放锁才能拿到锁</li><li><strong>乐观锁</strong>：总是假设最好的情况，每次拿数据都认为别的线程不会修改数据，所以不会加锁，但是更新的时候，会判断在此期间有没有线程修改过</li></ul><h5 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h5><p>Compare and Swap比较和交换</p><ul><li><p>CAS 必须是原子操作 </p></li><li><p>现代CPU都支持CAS </p></li><li><p>CAS属于乐观锁</p></li></ul><h5 id="AbstractQueuedSynchronizer官方实现Lock模板"><a href="#AbstractQueuedSynchronizer官方实现Lock模板" class="headerlink" title="AbstractQueuedSynchronizer官方实现Lock模板"></a>AbstractQueuedSynchronizer官方实现Lock模板</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Our internal helper class</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Acquires the lock if state is zero</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> acquires == <span class="number">1</span>; <span class="comment">// Otherwise unused</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Releases the lock by setting state to zero</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> releases == <span class="number">1</span>; <span class="comment">// Otherwise unused</span></span><br><span class="line">            <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reports whether in locked state</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// a data race, but safe due to out-of-thin-air guarantees</span></span><br><span class="line">            <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Provides a Condition</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deserializes properly</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            s.defaultReadObject();</span><br><span class="line">            setState(<span class="number">0</span>); <span class="comment">// reset to unlocked state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The sync object does all the hard work. We just forward to it.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeldByCurrentThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="多线程高并发常见问题引入"><a href="#多线程高并发常见问题引入" class="headerlink" title="多线程高并发常见问题引入"></a>多线程高并发常见问题引入</h5><p>使用100个线程完成1000个1相加的运算，每个线程都是100次自增的for循环，最后结果却小于1000。</p><p>这是因为线程操作的是<font color='red'>当前中内存中的值</font>，当m+2，实际上却只执行m+1了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line"><span class="comment">// 以匿名内部类的方式声明100个线程</span></span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                    m++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 线程开始</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.join();   <span class="comment">// 加入当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解决方案——Synchronized加锁"><a href="#解决方案——Synchronized加锁" class="headerlink" title="解决方案——Synchronized加锁"></a>解决方案——Synchronized加锁</h5><p>在线程访问时进行加锁，其他线程阻塞，线程完成累加后解锁，其他线程再进行访问，循环此操作，直到100个线程完成累加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Main<span class="class">.<span class="keyword">class</span>) </span>&#123;     <span class="comment">//线程访问时加锁，结束时打开，其他线程再访问时，加锁状态时线程阻塞</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解决方案——ReentrantLock"><a href="#解决方案——ReentrantLock" class="headerlink" title="解决方案——ReentrantLock"></a>解决方案——ReentrantLock</h5><p>使用ReentrantLock可重入锁，JDK 1.5之后添加的，互斥锁，底层实现是AQS</p><ul><li>lock() 加锁</li><li>unlock() 解锁</li></ul><p>ReentrantLock部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span>&#123;&#125;<span class="comment">// 底层实现是AQS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Synchronized</code> 在<font color='red'>JDK 1.5</font>之前被视为<strong>重量级锁</strong>，在<font color='red'>JDK 1.6</font>以后视为<strong>轻量级锁</strong></p><ul><li>JVM–OS(操作系统)</li><li>用户–kernel（实时操作系统）费时</li></ul><p>在JDK1.5之后在JVM添加各种锁（Lock接口），不需要再与OS交互</p><h6 id="Synchronized与CAS高并发性能比较"><a href="#Synchronized与CAS高并发性能比较" class="headerlink" title="Synchronized与CAS高并发性能比较"></a>Synchronized与CAS高并发性能比较</h6><p>Synchronized</p><ul><li><p>适合高并发（超高并发，锁代码执行时间长）</p></li><li><p>调用wait()，阻塞线程，不消耗 cpu</p></li></ul><p>CAS</p><ul><li>适合锁的竞争不激烈</li><li>for循环或while(true)， 消耗cpu</li></ul><h6 id="Lock源码"><a href="#Lock源码" class="headerlink" title="Lock源码"></a>Lock源码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>; <span class="comment">// 加锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>; <span class="comment">// </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;<span class="comment">// 解锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ReentrantLock解决100个线程累加求和问题"><a href="#ReentrantLock解决100个线程累加求和问题" class="headerlink" title="ReentrantLock解决100个线程累加求和问题"></a>ReentrantLock解决100个线程累加求和问题</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();  <span class="comment">// JDK1.5之后添加的，互斥锁，底层实现是AQS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程操作</span></span><br><span class="line">threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        lock.lock();    <span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();  <span class="comment">//解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="解决方案——Lock-volatile"><a href="#解决方案——Lock-volatile" class="headerlink" title="解决方案——Lock+volatile"></a>解决方案——Lock+volatile</h5><p><code>volatile</code>关键字 </p><ul><li><p>线程（内存）在写入变量后立即提交给主线程（内存），其他线程可见其改变</p></li><li><p>禁止指令重排序，可参考单例模式中懒汉式的相关代码</p><p>synchronized 防止指令重排<br>instance=new Instance() 只执行第2步和第4步 半初始化，使用volatile修饰instance禁止指令重排序</p></li></ul><p>自定义Lock，使用volatile关键字定义当前线程状态，在当前线程被占用时，循环等待，直到线程被释放。等待的过程也可以用CAS自旋来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 0被释放，1锁定</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;    <span class="comment">// 已经有线程占用</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();    <span class="comment">// 等待，也可使用CAS（Compare and switch）自旋</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();   <span class="comment">// 唤醒其他等待该锁的线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> MLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.lock();    <span class="comment">// 加锁</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();  <span class="comment">// 解锁</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 开始线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.join();   <span class="comment">// 加入当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解决方案——Sync-Lock"><a href="#解决方案——Sync-Lock" class="headerlink" title="解决方案——Sync+Lock"></a>解决方案——Sync+Lock</h5><p>修改MLock.java，主类Main.java不变，使用Sync来替代volatile</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);<span class="comment">// 释放</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用内部类--推荐写法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;  <span class="comment">// 竞争锁</span></span><br><span class="line">                <span class="comment">// 互斥锁 共享锁</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());    <span class="comment">// 设定当前线程持有该锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;    <span class="comment">// 释放</span></span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解决方案——使用CountDownLatch"><a href="#解决方案——使用CountDownLatch" class="headerlink" title="解决方案——使用CountDownLatch"></a>解决方案——使用CountDownLatch</h5><p>CountDownLatch倒计数100，每个线程执行完后调用countDown()自减1，主线程中await()等待直到为0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> MLock();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">100</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; </span><br><span class="line">                    lock.lock();    <span class="comment">// 加锁</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();  <span class="comment">// 解锁</span></span><br><span class="line">                &#125;</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 开始线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        latch.await();  <span class="comment">// 线程等待</span></span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;AQS&quot;&gt;&lt;a href=&quot;#AQS&quot; class=&quot;headerlink&quot; title=&quot;AQS&quot;&gt;&lt;/a&gt;AQS&lt;/h4&gt;&lt;p&gt;Abstract Queued Synchronizer 抽象队列同步器&lt;br&gt;所在包：&lt;code&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;AQS是基于先进先出队列（FIFO），CLH（一种基于&lt;strong&gt;单向链表&lt;/strong&gt;的高性能、&lt;strong&gt;公平&lt;/strong&gt;的&lt;strong&gt;自旋锁&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;基于AQS实现的锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ReentrantLock 可重入锁[悲观锁]&lt;/li&gt;
&lt;li&gt;Semaphore 信号量&lt;/li&gt;
&lt;li&gt;CountDownLatch 倒数&lt;/li&gt;
&lt;li&gt;ReentrantReadWriteLock 可重入读写锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;偏向锁、轻量级锁、重量级锁&quot;&gt;&lt;a href=&quot;#偏向锁、轻量级锁、重量级锁&quot; class=&quot;headerlink&quot; title=&quot;偏向锁、轻量级锁、重量级锁&quot;&gt;&lt;/a&gt;偏向锁、轻量级锁、重量级锁&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;偏向锁&lt;/strong&gt;：偏向第一个线程(JDK 1.6) JVM内部&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;轻量级锁&lt;/strong&gt;：由偏向锁升级而来，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自旋锁&lt;/strong&gt;：一个执行单元要想访问被自旋锁保护的共享资源，必须先得到锁，在访问完共享资源后，必须释放锁。&lt;/p&gt;
&lt;p&gt;自旋锁–(自旋10次)–&amp;gt;重量级锁（悲观锁）&lt;/p&gt;
&lt;h5 id=&quot;乐观锁与悲观锁&quot;&gt;&lt;a href=&quot;#乐观锁与悲观锁&quot; class=&quot;headerlink&quot; title=&quot;乐观锁与悲观锁&quot;&gt;&lt;/a&gt;乐观锁与悲观锁&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;悲观锁&lt;/strong&gt;：总是假设最坏的情况，每次拿数据都认为别的线程会修改数据，所以要加锁，别的线程只能等待，直到当前线程释放锁才能拿到锁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;乐观锁&lt;/strong&gt;：总是假设最好的情况，每次拿数据都认为别的线程不会修改数据，所以不会加锁，但是更新的时候，会判断在此期间有没有线程修改过&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;CAS&quot;&gt;&lt;a href=&quot;#CAS&quot; class=&quot;headerlink&quot; title=&quot;CAS&quot;&gt;&lt;/a&gt;CAS&lt;/h5&gt;&lt;p&gt;Compare and Swap比较和交换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CAS 必须是原子操作 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现代CPU都支持CAS &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CAS属于乐观锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;AbstractQueuedSynchronizer官方实现Lock模板&quot;&gt;&lt;a href=&quot;#AbstractQueuedSynchronizer官方实现Lock模板&quot; class=&quot;headerlink&quot; title=&quot;AbstractQueuedSynchronizer官方实现Lock模板&quot;&gt;&lt;/a&gt;AbstractQueuedSynchronizer官方实现Lock模板&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mutex&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Lock&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;java&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Our internal helper class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sync&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractQueuedSynchronizer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Acquires the lock if state is zero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tryAcquire&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; acquires)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; acquires == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Otherwise unused&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (compareAndSetState(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                setExclusiveOwnerThread(Thread.currentThread());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Releases the lock by setting state to zero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tryRelease&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; releases)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; releases == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Otherwise unused&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!isHeldExclusively())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalMonitorStateException();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setExclusiveOwnerThread(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setState(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Reports whether in locked state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isLocked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getState() != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isHeldExclusively&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// a data race, but safe due to out-of-thin-air guarantees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getExclusiveOwnerThread() == Thread.currentThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Provides a Condition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Condition &lt;span class=&quot;title&quot;&gt;newCondition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConditionObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Deserializes properly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ObjectInputStream s)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, ClassNotFoundException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            s.defaultReadObject();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setState(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// reset to unlocked state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// The sync object does all the hard work. We just forward to it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Sync sync = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sync();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sync.acquire(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tryLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sync.tryAcquire(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sync.release(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Condition &lt;span class=&quot;title&quot;&gt;newCondition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sync.newCondition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isLocked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sync.isLocked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isHeldByCurrentThread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sync.isHeldExclusively();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hasQueuedThreads&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sync.hasQueuedThreads();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lockInterruptibly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sync.acquireInterruptibly(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tryLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timeout, TimeUnit unit)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sync.tryAcquireNanos(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, unit.toNanos(timeout));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="AQS" scheme="https://lao-biao.github.io/tags/AQS/"/>
    
      <category term="并发编程" scheme="https://lao-biao.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Web技术复习笔记</title>
    <link href="https://lao-biao.github.io/articles/71c32ee5.html"/>
    <id>https://lao-biao.github.io/articles/71c32ee5.html</id>
    <published>2020-07-08T00:54:33.000Z</published>
    <updated>2020-07-08T02:34:56.308Z</updated>
    
    <content type="html"><![CDATA[<h5 id="C-S架构与B-S架构"><a href="#C-S架构与B-S架构" class="headerlink" title="C/S架构与B/S架构"></a>C/S架构与B/S架构</h5><p>C/S架构：client/server</p><ul><li>socket、serversocket、awt/swing做一个客户端软件</li><li>建好socket连接后，通过io流来交换，数据格式开发者自定义绑定</li></ul><p>B/S架构：browser/server</p><ul><li>浏览器也是一种客户端软件</li><li>HTTP协议定义了浏览器和服务器通讯的基本规则之一</li></ul><p>浏览器和服务器之间的交互</p><ul><li>交互模式：请求-响应</li><li>客户端先发出请求，服务器根据请求内容发送响应的内容，客户端根据响应内容进行显示</li></ul><a id="more"></a><h6 id="客户端发出请求的格式"><a href="#客户端发出请求的格式" class="headerlink" title="客户端发出请求的格式"></a>客户端发出请求的格式</h6><ol><li><p>请求行：服务器的地址、端口、资源地址</p></li><li><p>请求头</p></li><li><p>请求实体</p><p><font color="red">注：客户端向服务器传参，如果将参数放到请求行，即为<em>get</em>方式，如果将参数放在实体中，即为<em>post</em>请求</font></p></li></ol><h6 id="服务器收到请求内容后发送响应内容"><a href="#服务器收到请求内容后发送响应内容" class="headerlink" title="服务器收到请求内容后发送响应内容"></a>服务器收到请求内容后发送响应内容</h6><ul><li>响应内容定义<ul><li>状态行 200、404、500</li><li>响应行</li><li>响应实体</li></ul></li></ul><h6 id="客户端收到响应内容后，显示内容"><a href="#客户端收到响应内容后，显示内容" class="headerlink" title="客户端收到响应内容后，显示内容"></a>客户端收到响应内容后，显示内容</h6><ul><li>HTML超文本标记语言</li><li>HTML元素动态 javascript（livescript）</li><li>控制页面元素 css Cascading Style Sheets层叠样式表</li></ul><h6 id="服务器根据请求内容发送响应的内容"><a href="#服务器根据请求内容发送响应的内容" class="headerlink" title="服务器根据请求内容发送响应的内容"></a>服务器根据请求内容发送响应的内容</h6><ol><li>收请求内容<ol><li>建立监听，ServletSocket s.accept()</li><li>启动一个线程（轻量级进程），为请求的客户提供服务</li><li>为了封装客户端提供的请求信息，定义一个对象：HttpServletRequest</li><li>为了封装回送给服务端的相应内容，定义一个对象：HTTPServletResponse</li></ol></li><li>根据请求内容调用相应的程序（Servlet）<ol><li>通过web.xml中定义的url和Servlet的关系，找到对应的Serlvet程序</li><li>定义了HttpServlet抽象类，service(HttpServletRequset req,HttpServletResponse resp)方法</li><li>将response对象中的信息，转译成基于http协议的响应内容，再将这些响应内容通过socket传送给客户端<br>为了统一处理上述流程，使用Tomcat服务器，也成为web容器，Servlet容器</li></ol></li></ol><h6 id="规范、增强Servlet程序"><a href="#规范、增强Servlet程序" class="headerlink" title="规范、增强Servlet程序"></a>规范、增强Servlet程序</h6><ul><li>浏览器发送给服务器的请求内容    HttpServletRequest对象</li><li>服务器回送给浏览器的相应内容    HttpServletResponse对象</li><li>Serlvet类读取web.xml中自己的配置信息    ServletConfig</li><li>需要读取web.xml中的公共信息    &lt;context-param&gt;    ServletContext</li><li>将所有Servlet放入一个容器中统一管理        ServletContext</li><li>保存以前操作的状态    客户端保存Cookie     服务器保存Session<br>Servlet擅于业务逻辑处理，不擅于页面展示的代码处理    改进Servlet—&gt;JSP<br>统一的转译程序，将jsp文件内容转译成java类代码，产生了jsp引擎（一般服务器自带了这个功能）</li></ul><h6 id="ajax异步模式局部刷新效果"><a href="#ajax异步模式局部刷新效果" class="headerlink" title="ajax异步模式局部刷新效果"></a>ajax异步模式局部刷新效果</h6><p>XmlHttpRequest</p><p>通过增加XMLHttpRequet对象，使用XHR对象发送请求，获得数据后，也是先传给XHR对象，再通过js代码操作dom模型，实现局部刷新效果。</p><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><h6 id="非表单标签"><a href="#非表单标签" class="headerlink" title="非表单标签"></a>非表单标签</h6><ul><li>b粗体    u下划线    i斜体    del删除效果</li><li>a 超链接 href 、target </li><li>img 图片</li><li>frameset 框架 （frame）框架集</li><li>table表格 th、tr、td（单元格table data cell）colspan、rowspan单元格合并</li><li>ul li ol 列表标签</li><li>embed 用来播放MP3、视频等</li><li>div 虚拟矩形区域    span 行内元素（不会换行）    </li></ul><h6 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h6><ul><li>form表单标签 action提交表单的地址 method表单提交的方式（） name（命名方式：regFrm）</li><li>表单域（表单域一定要有name属性，否则该表单域的值不会被提交）<ul><li>文本域 text单行文本域、password密码框、textarea多行文本域</li><li>radio单选按钮（组，name属性一致即为一组，每组只能提交一个值）</li><li>chcekbox复选框（组，name属性一致即为一组，每组恶意体骄傲多个值）</li><li>select option下拉框（可以实现多选一，多选多）</li><li>file 文件域，用来实现文件上传（method=past,enctype=”multipart/form-data”）</li><li>hidden 隐藏域（不需要用用户输入，但是服务器又需要的值）</li><li>reset 重置</li><li>submit 提交按钮</li><li>button 普通按钮（通常用来激活一个js函数）        </li></ul></li></ul><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><ul><li>引用css信息<ul><li>通过html元素的style属性，class属性</li><li>通过&lt;style&gt;块</li><li>通过引入外部的css文件&lt;link&gt;</li></ul></li><li>css选择器<ul><li>id选择器    #id名字</li><li>class选择器 .类名</li><li>元素选择器</li></ul></li><li>css属性<ul><li>文本属性</li><li>定位属性    静态定位、相对定位、绝对定位、固定定位、z-index</li><li>列表属性</li><li>布局属性</li><li>边框属性</li></ul></li></ul><h5 id="JavScript"><a href="#JavScript" class="headerlink" title="JavScript"></a>JavScript</h5><h6 id="js的基本语法"><a href="#js的基本语法" class="headerlink" title="js的基本语法"></a>js的基本语法</h6><ul><li>基本数据类型    undefined、null、number、字符串、Boolean、Object</li><li>变量定义 var</li><li>控制语句</li><li>内置语句 eval()、escape()、unescape()</li><li>常用的对象    Date、Math、String、RegExp</li><li>数组 var a=[];    var b=new Array();</li><li>对象的定义</li><li>JSON:    声明：var user=(name:””,pwd:””,sleep:function(){});    使用：user.sleep;</li><li>函数也是对象</li><li>继承是通过prototype属性来模拟    String prototype.trim=function(){return this.replace(“(^\s+)||(\s+$)”,””)}     “ 123 “.trim()</li><li>对话框    alert警告框    prompt询问框 confirm确认框</li><li>浏览器对象<ul><li>window<ul><li>open 打开子窗口    close关闭窗口</li><li>定时操作    setTimeout,clearTimeout    setInterval,clearInterval</li></ul></li><li>navigator：浏览器信息</li><li>history：访问历史    history.go(1)            </li><li>location：地址栏信息</li></ul></li></ul><h6 id="dom操作"><a href="#dom操作" class="headerlink" title="dom操作"></a>dom操作</h6><ul><li><p>获取节点</p><ul><li>直接获得<ul><li>id</li><li>name</li><li>class</li><li>tagName</li></ul></li><li>间接获得<ul><li>通过父节点获得子节点<ul><li>childNode</li><li>firstChild、lastChild</li></ul></li><li>通过子节点获得父节点：parentNode</li><li>兄弟节点：nextSibling、preSibling                    </li></ul></li></ul></li><li><p>操作节点</p><ul><li>判断节点类型 nodeType    1元素节点    3文本节点</li><li>节点的属性    通过点操作符</li><li>节点的文本内容    innerHTML</li></ul></li><li><p>改变DOM结构</p><ul><li>增加节点 appendChild，insertBefore</li><li>删除节点 removeChild</li><li>替换节点 replaceChild</li></ul></li><li><p>表单的操作</p><ul><li><p>通用属性 value，disabled，表单对象.elements</p></li><li><p>单选按钮和复选框操作的时候，一般采用遍历</p></li><li><p>表单验证 </p><p>&lt;submit value onclick=”return check(this.from)”</p><p>&lt;form onsubmit=”return check(this)”</p></li></ul></li></ul><h5 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h5><p>Tomcat服务器</p><ul><li>server.xml</li><li>web.xml</li><li>目录结构的作用<ul><li>lib</li><li>work（存放jsp编译后的Java文件）</li><li>webapps（项目部署）</li><li>conf</li></ul></li></ul><h5 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h5><p>浏览器发送给服务器的请求内容    HttpServletRequest对象</p><ul><li>getParameter()，getParameterValues()处理复选框</li><li>作用域方法：setAttribute()，getAttibute()，removeAttribue()</li><li>getReqeustURL()，getReqeuestURI()，getQueryString()，getContextPath()</li><li>获取客户端ip和端口：getRemoteAddr(),getRemotePort()</li><li>request.setCharacterEncoding()    设置请求实体的编码，对post请求有效，对get请求无效（可通过Tomcat调整<code>server.xml</code>）</li><li><strong>请求转发</strong>：rqeuset.getReqeustDispatcher().forward(requset,response)</li></ul><p>服务器回送给浏览器的相应内容    HttpServletResponse对象</p><ul><li>setCharacterEndoding()设置响应编码格式</li><li>setContentType()设置响应内容</li><li>getWriter()输出文本    getOutSteam()    输出非文本</li><li><strong>重定向</strong>：resposne.sendRedire()</li></ul><p>Serlvet类读取<code>web.xml</code>中自己的配置信息    ServletConfig</p><ul><li>getInitParameter</li></ul><p>需要读取<code>web.xml</code>中的公共信息    &lt;context-param&gt;    ServletContext</p><ul><li>获取：this.getServletContext()</li><li>作用域：可以被所有的Servlt共享</li><li>其他方法：getRealPath()，getResourcePaths()</li></ul><p>将所有Servlet放入一个容器中统一管理        ServletContext</p><p>保存以前操作的状态    客户端保存<strong>Cookie</strong>     服务器保存<strong>Session</strong></p><ul><li>客户端保存cookie流程<ol><li>服务器端写代码：Cookie c=new Cookie(); response.setCookie(c);</li><li>响应头中就会有一个SetCookie</li><li>浏览器收到以后，先放到内存中，如果cookie设置了有效期，则会写到硬盘的cookie文件中</li><li>浏览器以后访问服务器时，就会自动携带（请求头）有效的cookie信息    </li></ol></li><li>服务器端保存信息session的跟踪机制<ol><li>服务器会new一个session对象，同时指定一个id给session对象</li><li>通过响应头设置</li><li>浏览器收到sessionId这个信息，下次访问一定会携带sessionId</li><li>服务器收到session后，根据session找到对应的session对象，然后就可以查看对象里面的内容，从而，确定之前我们进行了什么操作，也就是实现了状态的保存</li></ol></li></ul><h6 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h6><ol><li>加载<ul><li>第一个请求的时候（Servlet是单例，只有一个Servlet对象）</li><li>如果配置了load-on-startup，启动时加载</li></ul></li><li>初始化：执行init()</li><li>调用：service()、doGet()、doPost()</li><li>销毁：destroy()</li></ol><h6 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h6><ul><li>实现Filter相关接口</li><li>doFilter</li><li>配置位于&lt;servlet&gt;之前</li></ul><h6 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h6><ul><li>实现Listener相关接口</li><li>配置位于&lt;filter&gt;之后，&lt;servlet&gt;之前</li></ul><h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><p>&lt;%%&gt;java脚本段</p><p>&lt;%=%&gt;表达式</p><p>&lt;%! %&gt; 声明</p><p>&lt;%—-%&gt; 注释</p><p>&lt;%@ include file=”” %&gt;静态导入，两个jsp文件编译时合并到一起</p><p>&lt;jsp:include&gt;相当于一个类调用另一个类</p><p>jsp九个内置对象：</p><ul><li>page：<code>java.lang.object</code></li><li><strong>request</strong>：<code>javax.servlet.http.HttpServletrequest</code> 获取用户的请求信息</li><li><strong>resposne</strong>：<code>javax.servlet.http.HttpServletResponse</code> 服务器向客户端的回应信息</li><li>out ：<code>javax.servlet.jsp.jspWriter</code> 页面输出</li><li>session：<code>javax.servlet.http.HttpSession</code> 用来保存每一个用户的信息</li><li><strong>pageContext</strong>：<code>javax.servlet.jsp.PageContext</code> JSP的页面容器</li><li>exception：<code>java.lang.Throwable</code></li><li>config：<code>javax.servlet.ServletConfig</code> 服务器配置信息，可以取得初始化参数</li><li><strong>application</strong>：<code>javax.servlet.ServletContext</code>表示所有用户的共享信息</li></ul><h5 id="EL和JSTL"><a href="#EL和JSTL" class="headerlink" title="EL和JSTL"></a>EL和JSTL</h5><p>EL表达式：操作的是作用域中的属性</p><p>使用：<code>${}</code></p><p>JSTL标签库:</p><ul><li>foreach</li><li>if</li><li>choose when otherwise</li><li>set</li><li>remove</li><li>import</li></ul><p>菜鸟教程JSTL：<a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p><h5 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h5><p>核心技术：通过XHR对象发送请求，通过XHR对象接收响应，再通过js操作dom对象，将收到的新的信息，赋给某个元素，实现局部刷新效果    </p><p>基本流程</p><ol><li>创建XHR对象</li><li>创建一个请求</li><li>设置监听，处理服务器发送的响应内容</li><li>发送请求</li></ol><h5 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h5><p>XML基本语法</p><p>XML的解析（DOM方式、SAX方式、JDOM、DOM4J）</p><p>dtd/schema    定义xml数据的语法规则</p><p>xslt    定义xml数据的显示方式</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;C-S架构与B-S架构&quot;&gt;&lt;a href=&quot;#C-S架构与B-S架构&quot; class=&quot;headerlink&quot; title=&quot;C/S架构与B/S架构&quot;&gt;&lt;/a&gt;C/S架构与B/S架构&lt;/h5&gt;&lt;p&gt;C/S架构：client/server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socket、serversocket、awt/swing做一个客户端软件&lt;/li&gt;
&lt;li&gt;建好socket连接后，通过io流来交换，数据格式开发者自定义绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B/S架构：browser/server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器也是一种客户端软件&lt;/li&gt;
&lt;li&gt;HTTP协议定义了浏览器和服务器通讯的基本规则之一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浏览器和服务器之间的交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交互模式：请求-响应&lt;/li&gt;
&lt;li&gt;客户端先发出请求，服务器根据请求内容发送响应的内容，客户端根据响应内容进行显示&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis笔记</title>
    <link href="https://lao-biao.github.io/articles/bf90371e.html"/>
    <id>https://lao-biao.github.io/articles/bf90371e.html</id>
    <published>2020-07-08T00:48:27.000Z</published>
    <updated>2020-07-08T02:34:56.277Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h4><h5 id="Redis解释"><a href="#Redis解释" class="headerlink" title="Redis解释"></a>Redis解释</h5><p>Redis是一个基于key-value形式进行存储的内存型数据库</p><ul><li>数据存储方式为key-value键值对</li><li>数据存储在内存中<ul><li>优点：效率高<br>理论：每秒10k数据读取</li></ul></li><li>定位：数据库软件<ul><li>作用：存储数据</li></ul></li></ul><h5 id="NoSql数据库"><a href="#NoSql数据库" class="headerlink" title="NoSql数据库"></a>NoSql数据库</h5><p>Redis是一个NoSql数据库。</p><ul><li>不使用sql命令操作数据库软件</li><li>NoSql：Not Only Sql，表示在应用程序开发时，不是必须使用关系型数据库，可以使用NoSql替代关系型数据库的部分功能。</li><li>目前NoSql不能完全替代关系型数据库，使用关系型数据库结合NoSql数据库进行项目完成。<ul><li>当数据比较复杂时不适用于NoSql数据库</li><li>关系数据库依然作为数据存储的主要软件</li><li>NoSql数据库当作缓存工具来使用<ul><li>把关系数据库中某些<strong>使用频率较高</strong>的的内容，不仅仅存储到关系型数据库，还存到NoSql数据库中。</li><li>要考虑NoSql和关系型数据库之间的<strong>同步</strong>问题</li></ul></li></ul></li></ul><h5 id="Redis持久化策略"><a href="#Redis持久化策略" class="headerlink" title="Redis持久化策略"></a>Redis持久化策略</h5><h6 id="rdb"><a href="#rdb" class="headerlink" title="rdb"></a>rdb</h6><ul><li>默认的持久化策略</li><li>每隔一定时间后把内存中数据持久化到dump.rdb文件中</li></ul><p>缺点</p><ul><li>数据过于集中</li><li>可能导致最后的数据没有持久化到dump.rdb中<ul><li>解决办法：使用命令SAVE或BGSAVE手动持久化</li></ul></li></ul><h6 id="aof"><a href="#aof" class="headerlink" title="aof"></a>aof</h6><p>监听Redis的日志文件，监听如果发现执行了修改、删除、新增命令，立即根据这条命令把数据持久化</p><p>缺点</p><ul><li>效率降低</li></ul><a id="more"></a><h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><p>Windows版本下载地址<a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases</a></p><ul><li><p>下载对应版本，解压到Redis文件夹下</p></li><li><p>将Redis文件路径添加到环境变量path中</p></li><li><p>用命令行窗口执行<code>redis-server.exe</code>命令或<code>redis-server.exe redis.windows.conf</code>（没有配置环境变量时）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe redis.windows.conf</span></span><br><span class="line">[4572] 30 Jun 15:39:59.717 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">[4572] 30 Jun 15:39:59.717 # Redis version=5.0.9, bits=64, commit=9414ab9b, modified=0, pid=4572, just started</span><br><span class="line">[4572] 30 Jun 15:39:59.717 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server.exe /path/to/redis.conf</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ ''-._</span><br><span class="line">      _.-``    `.  `_.  ''-._           Redis 5.0.9 (9414ab9b/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ ''-._</span><br><span class="line"> (    '      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-'    |     PID: 4572</span><br><span class="line">  `-._    `-._  `-./  _.-'    _.-'</span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|</span><br><span class="line"> |    `-._`-._        _.-'_.-'    |           http://redis.io</span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'</span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|</span><br><span class="line"> |    `-._`-._        _.-'_.-'    |</span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'</span><br><span class="line">      `-._    `-.__.-'    _.-'</span><br><span class="line">          `-._        _.-'</span><br><span class="line">              `-.__.-'</span><br><span class="line"></span><br><span class="line">[4572] 30 Jun 15:39:59.723 # Server initialized</span><br><span class="line">[4572] 30 Jun 15:39:59.724 * DB loaded from disk: 0.000 seconds</span><br><span class="line">[4572] 30 Jun 15:39:59.724 * Ready to accept connections</span><br></pre></td></tr></table></figure></li><li><p>打开新的cmd窗口输入<code>redis-cli.exe -h 127.0.0.1 -p 6379</code>，即可进行相关命令操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">redis-cli.exe -h 127.0.0.1 -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; set name "Hello World"</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"Hello World"</span><br></pre></td></tr></table></figure><p>注意：在加载设置文件条件下启动时需要在Redis目录下执行命令<code>redis-server.exe redis.windows.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="built_in">cd</span> Redis</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe redis.windows.conf</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h4><p>命令手册网址    <a href="http://doc.redisfans.com/" target="_blank" rel="noopener">Redis命令参考</a></p><p>Redis<strong>常用数据类型</strong></p><ul><li><strong>String</strong>字符串</li><li>Hash哈希表</li><li>List列表</li><li>Set集合</li><li>SortedSet有序集合</li></ul><h5 id="Redis常用概念"><a href="#Redis常用概念" class="headerlink" title="Redis常用概念"></a>Redis常用概念</h5><ul><li><p>Redis默认有16384 solts（槽），每个槽可存储多个hash值。</p></li><li><p>Redis默认不需要密码</p><p>在<code>redis.windows.conf</code>文件中去除requirepass foobared的注释，即可设置密码</p></li><li><p>设置密码后需要通过</p><ul><li>-h 主机ip</li><li>-p 端口</li><li>-a 密码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a f foobared</span><br></pre></td></tr></table></figure></li></ul><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>Jedis是Redis客户端工具jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用非集群版实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="comment">// 测试插入</span></span><br><span class="line">String res = jedis.set(<span class="string">"address"</span>, <span class="string">"Hubei"</span>);</span><br><span class="line">System.out.println(<span class="string">"insert--&gt;"</span> + res);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get);</span><br><span class="line"><span class="comment">// 测试修改</span></span><br><span class="line">String set = jedis.set(<span class="string">"address"</span>, <span class="string">"China"</span>);</span><br><span class="line">System.out.println(<span class="string">"update--&gt;"</span> + set);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get2 = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get2);</span><br><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line">Long del = jedis.del(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"delete--&gt;"</span> + del);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get3 = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get3);</span><br></pre></td></tr></table></figure><h4 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h4><h5 id="集群的概念"><a href="#集群的概念" class="headerlink" title="集群的概念"></a>集群的概念</h5><p>多个业务单元协同工作完成的整体称为<strong>集群</strong>。</p><ul><li>每个业务单元都是相同的</li><li>当集群中业务单元中超过或等于二分之一个down掉时整个集群不可用（建议使用奇数个，整体down掉几率小）</li></ul><h5 id="一主一备模式"><a href="#一主一备模式" class="headerlink" title="一主一备模式"></a>一主一备模式</h5><p>给每个<strong>业务单元</strong>创建一个<strong>备份业务单元</strong>，原来的业务单元（master）后产生的叫做（slave）。</p><h5 id="集群和伪集群"><a href="#集群和伪集群" class="headerlink" title="集群和伪集群"></a>集群和伪集群</h5><p><strong>集群</strong>：每个业务单元都安装到单独的服务器上</p><p><strong>伪集群</strong>：每个业务单元都安装到同一个服务器上，通过端口区分不同的业务单元。</p><h5 id="使用jedis访问集群"><a href="#使用jedis访问集群" class="headerlink" title="使用jedis访问集群"></a>使用jedis访问集群</h5><ul><li><p>JedisCluster(Set&lt;HostAndPort&gt; nodes)</p><p>集群的ip和端口</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;HostAndPort&gt; hostAndPortSet=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7001</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7002</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7003</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7004</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7005</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7006</span>));</span><br><span class="line">JedisCluster jedisCluster=<span class="keyword">new</span> JedisCluster(hostAndPortSet);</span><br><span class="line">jedisCluster.get(<span class="string">"address"</span>);</span><br></pre></td></tr></table></figure><p>通过xml形式配置集群</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jedisCluster --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClients"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisCluster"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"nodes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7001"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7002"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7003"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7004"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7005"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7006"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置jedis连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置jedis连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每次释放连接的最大数目 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numTestsPerEvictionRun"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"30000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接最小空闲时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"1800000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"softMinEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"1500"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"blockWhenExhausted"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Redis简介&quot;&gt;&lt;a href=&quot;#Redis简介&quot; class=&quot;headerlink&quot; title=&quot;Redis简介&quot;&gt;&lt;/a&gt;Redis简介&lt;/h4&gt;&lt;h5 id=&quot;Redis解释&quot;&gt;&lt;a href=&quot;#Redis解释&quot; class=&quot;headerlink&quot; title=&quot;Redis解释&quot;&gt;&lt;/a&gt;Redis解释&lt;/h5&gt;&lt;p&gt;Redis是一个基于key-value形式进行存储的内存型数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据存储方式为key-value键值对&lt;/li&gt;
&lt;li&gt;数据存储在内存中&lt;ul&gt;
&lt;li&gt;优点：效率高&lt;br&gt;理论：每秒10k数据读取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定位：数据库软件&lt;ul&gt;
&lt;li&gt;作用：存储数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;NoSql数据库&quot;&gt;&lt;a href=&quot;#NoSql数据库&quot; class=&quot;headerlink&quot; title=&quot;NoSql数据库&quot;&gt;&lt;/a&gt;NoSql数据库&lt;/h5&gt;&lt;p&gt;Redis是一个NoSql数据库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不使用sql命令操作数据库软件&lt;/li&gt;
&lt;li&gt;NoSql：Not Only Sql，表示在应用程序开发时，不是必须使用关系型数据库，可以使用NoSql替代关系型数据库的部分功能。&lt;/li&gt;
&lt;li&gt;目前NoSql不能完全替代关系型数据库，使用关系型数据库结合NoSql数据库进行项目完成。&lt;ul&gt;
&lt;li&gt;当数据比较复杂时不适用于NoSql数据库&lt;/li&gt;
&lt;li&gt;关系数据库依然作为数据存储的主要软件&lt;/li&gt;
&lt;li&gt;NoSql数据库当作缓存工具来使用&lt;ul&gt;
&lt;li&gt;把关系数据库中某些&lt;strong&gt;使用频率较高&lt;/strong&gt;的的内容，不仅仅存储到关系型数据库，还存到NoSql数据库中。&lt;/li&gt;
&lt;li&gt;要考虑NoSql和关系型数据库之间的&lt;strong&gt;同步&lt;/strong&gt;问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Redis持久化策略&quot;&gt;&lt;a href=&quot;#Redis持久化策略&quot; class=&quot;headerlink&quot; title=&quot;Redis持久化策略&quot;&gt;&lt;/a&gt;Redis持久化策略&lt;/h5&gt;&lt;h6 id=&quot;rdb&quot;&gt;&lt;a href=&quot;#rdb&quot; class=&quot;headerlink&quot; title=&quot;rdb&quot;&gt;&lt;/a&gt;rdb&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;默认的持久化策略&lt;/li&gt;
&lt;li&gt;每隔一定时间后把内存中数据持久化到dump.rdb文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据过于集中&lt;/li&gt;
&lt;li&gt;可能导致最后的数据没有持久化到dump.rdb中&lt;ul&gt;
&lt;li&gt;解决办法：使用命令SAVE或BGSAVE手动持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;aof&quot;&gt;&lt;a href=&quot;#aof&quot; class=&quot;headerlink&quot; title=&quot;aof&quot;&gt;&lt;/a&gt;aof&lt;/h6&gt;&lt;p&gt;监听Redis的日志文件，监听如果发现执行了修改、删除、新增命令，立即根据这条命令把数据持久化&lt;/p&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;效率降低&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="redis" scheme="https://lao-biao.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>GitHub删除文件夹</title>
    <link href="https://lao-biao.github.io/articles/bab8a3bc.html"/>
    <id>https://lao-biao.github.io/articles/bab8a3bc.html</id>
    <published>2020-07-07T12:07:52.000Z</published>
    <updated>2020-07-07T12:30:34.910Z</updated>
    
    <content type="html"><![CDATA[<p>删除步骤</p><ol><li>进入项目文件下，使用<strong>Git Bash Here</strong>（或cmd窗口）打开命令行窗口。</li><li><code>git pull</code>或(<code>git pull origin master</code>)从远程仓库里面的项目拉下来，<code>dir</code>（Windows系统）查看文件目录结构。</li><li>例如需要删除target文件夹，<code>git rm -f --cached target</code></li><li><code>git commit -m &quot;Delete target.&quot;</code>提交，添加操作说明。</li><li><code>git push</code>或(<code>git push -u origin master</code>)将本次更改推送到远程仓库。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line">From https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;BlogSystem</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br><span class="line"></span><br><span class="line">$ git rm -r --cached target</span><br><span class="line">rm &#39;target&#x2F;classes&#x2F;application.yml&#39;</span><br><span class="line">rm &#39;target&#x2F;classes&#x2F;com&#x2F;study&#x2F;BlogApplication.class&#39;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;Delete target.&quot;</span><br><span class="line">[master f5ef2bf] Delete target.</span><br><span class="line"> 44 files changed, 67 deletions(-)</span><br><span class="line"> delete mode 100644 target&#x2F;classes&#x2F;application.yml</span><br><span class="line"> delete mode 100644 target&#x2F;classes&#x2F;com&#x2F;study&#x2F;BlogApplication.class</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">$ git push</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3&#x2F;3), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">Writing objects: 100% (2&#x2F;2), 219 bytes | 219.00 KiB&#x2F;s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1&#x2F;1), completed with 1 local object.</span><br><span class="line">To https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;BlogSystem.git</span><br><span class="line">   661f345..f5ef2bf  master -&gt; master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;删除步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入项目文件下，使用&lt;strong&gt;Git Bash Here&lt;/strong&gt;（或cmd窗口）打开命令行窗口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;或(&lt;code&gt;git pull origin master&lt;/
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://lao-biao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis笔记</title>
    <link href="https://lao-biao.github.io/articles/93fcac00.html"/>
    <id>https://lao-biao.github.io/articles/93fcac00.html</id>
    <published>2020-06-30T06:52:53.000Z</published>
    <updated>2020-07-06T03:22:33.785Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h4><h5 id="原始jdbc操作"><a href="#原始jdbc操作" class="headerlink" title="原始jdbc操作"></a>原始jdbc操作</h5><p>原始jdbc开发存在的问题：</p><ul><li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能</li><li>sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化可能较大，sql变动需要改变java代码</li><li>查询操作时，需要手动将结果集中的数据封装到实体中；插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</li></ul><p>解决方案：</p><ul><li>使用数据库连接池初始化连接资源</li><li>将sql语句抽取到xml配置文件中</li><li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</li></ul><h5 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h5><ul><li>MyBatis是一个优秀的基于Java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</li><li>MyBatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</li><li>MyBatis框架执行sql将结果映射为java对象并返回。采用<strong>ORM</strong>（Object Relational Mapping 对象关系映射）思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节。</li></ul><a id="more"></a><h4 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h4><h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><ol><li>在<code>pom.xml</code>中添加MyBatis坐标（依赖）</li><li>创建user数据表</li><li>编写User实体类</li><li>编写映射文件UserMapper.xml</li><li>编写核心文件SqlMapConfig.xml</li><li>编写测试类</li></ol><h5 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h5><h6 id="添加MyBatis坐标"><a href="#添加MyBatis坐标" class="headerlink" title="添加MyBatis坐标"></a>添加MyBatis坐标</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log输出管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="创建user数据表"><a href="#创建user数据表" class="headerlink" title="创建user数据表"></a>创建user数据表</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建表</span><br><span class="line">CREATE TABLE user  (</span><br><span class="line">  uid int(10) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  uname varchar(50) NOT NULL,</span><br><span class="line">  password varchar(50) NOT NULL,</span><br><span class="line">  PRIMARY KEY (uid)</span><br><span class="line">);</span><br><span class="line"># 插入测试数据</span><br><span class="line">INSERT INTO user VALUES(1,&quot;zhangsan&quot;,&quot;123&quot;);</span><br><span class="line">INSERT INTO user VALUES(2,&quot;lisi&quot;,&quot;456&quot;);</span><br><span class="line">INSERT INTO user VALUES(3,&quot;wangwu&quot;,&quot;789&quot;);</span><br></pre></td></tr></table></figure><h6 id="编写User实体类"><a href="#编写User实体类" class="headerlink" title="编写User实体类"></a>编写User实体类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    getter/setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="编写映射文件UserMapper-xml"><a href="#编写映射文件UserMapper-xml" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="编写核心文件SqlMapConfig-xml"><a href="#编写核心文件SqlMapConfig-xml" class="headerlink" title="编写核心文件SqlMapConfig.xml"></a>编写核心文件SqlMapConfig.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/study"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/study/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取核心配置文件</span></span><br><span class="line">        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        <span class="comment">// 获取sqlSession会话对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 执行操作</span></span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"userMapper.query"</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MyBatis映射文件概述"><a href="#MyBatis映射文件概述" class="headerlink" title="MyBatis映射文件概述"></a>MyBatis映射文件概述</h4><p><code>&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</code>映射文件DTD约束头</p><p><code>&lt;mapper&gt;&lt;/mapper&gt;</code>根标签</p><p><code>namespace=&quot;userMapper&quot;</code>命名空间，与下面语句的id组成查询的标识</p><p><code>&lt;select&gt;&lt;/select&gt;</code>查询操作，可选的还有<code>insert</code>、<code>update</code>、<code>delete</code></p><p><code>id=&quot;query&quot;</code>语句的id标识，与上面的命令空间组成查询的标识</p><p><code>resultType=&quot;com.study.domain.User&quot;</code>查询结果对应的实体类型</p><p><code>select * from user</code>要执行的sql语句</p><h4 id="MyBatis增删改查操作"><a href="#MyBatis增删改查操作" class="headerlink" title="MyBatis增删改查操作"></a>MyBatis增删改查操作</h4><h5 id="MyBatis的插入数据操作"><a href="#MyBatis的插入数据操作" class="headerlink" title="MyBatis的插入数据操作"></a>MyBatis的插入数据操作</h5><ol><li>编写映射文件UserMapper.xml</li><li>修改编写实体User的代码</li></ol><h6 id="编写映射文件UserMapper-xml-1"><a href="#编写映射文件UserMapper-xml-1" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span><br><span class="line">    insert into user values(#&#123;uid&#125;,#&#123;uname&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="修改编写实体User的代码"><a href="#修改编写实体User的代码" class="headerlink" title="修改编写实体User的代码"></a>修改编写实体User的代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟User对象</span></span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setUname(<span class="string">"zhaoliu"</span>);</span><br><span class="line">    u.setPassword(<span class="string">"000"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">// 获取sqlSession会话对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="keyword">int</span> res = sqlSession.insert(<span class="string">"userMapper.add"</span>, u);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    <span class="comment">// 事务提交</span></span><br><span class="line">    sqlSession.commit(res &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="插入操作注意的问题"><a href="#插入操作注意的问题" class="headerlink" title="插入操作注意的问题"></a>插入操作注意的问题</h6><ul><li>插入语句使用<code>insert</code>标签</li><li>在映射问文件中使用<code>parameterType</code>属性指定要插入的数据类型</li><li>sql语句中使用<code>#{实体属性名}</code>方式引用实体中的属性值</li><li>插入操作使用的API是<code>sqlSession.insert(&quot;命名空间.id&quot;,具体实体对象)</code></li><li>插入操作设计数据库数据变化，所以要用sqlSession对象显式的提交即<code>sqlSession,commit()</code></li></ul><h5 id="MyBatis的修改数据操作"><a href="#MyBatis的修改数据操作" class="headerlink" title="MyBatis的修改数据操作"></a>MyBatis的修改数据操作</h5><h6 id="编写映射文件UserMapper-xml-2"><a href="#编写映射文件UserMapper-xml-2" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.study.domain.User"</span>&gt;</span></span><br><span class="line">    update user set uname=#&#123;uname&#125;,password=#&#123;password&#125; where uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="修改编写实体User的代码-1"><a href="#修改编写实体User的代码-1" class="headerlink" title="修改编写实体User的代码"></a>修改编写实体User的代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟User对象</span></span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setUid(<span class="number">3</span>);</span><br><span class="line">    u.setUname(<span class="string">"wangwu333"</span>);</span><br><span class="line">    u.setPassword(<span class="string">"333"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">// 获取sqlSession会话对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="keyword">int</span> res = sqlSession.update(<span class="string">"userMapper.update"</span>, u);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    <span class="comment">// 事务提交</span></span><br><span class="line">    sqlSession.commit(res &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="修改操作注意的问题"><a href="#修改操作注意的问题" class="headerlink" title="修改操作注意的问题"></a>修改操作注意的问题</h6><ul><li>修改语句使用update标签</li><li>修改操作使用的API是sqlSession.updae(“命名空间.id”,具体实体对象)</li></ul><h5 id="MyBatis的删除数据操作"><a href="#MyBatis的删除数据操作" class="headerlink" title="MyBatis的删除数据操作"></a>MyBatis的删除数据操作</h5><h6 id="编写映射文件UserMapper-xml-3"><a href="#编写映射文件UserMapper-xml-3" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from user where uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="修改编写实体User的代码-2"><a href="#修改编写实体User的代码-2" class="headerlink" title="修改编写实体User的代码"></a>修改编写实体User的代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">// 获取sqlSession会话对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="keyword">int</span> res = sqlSession.delete(<span class="string">"userMapper.delete"</span>, <span class="number">6</span>);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    <span class="comment">// 事务提交</span></span><br><span class="line">    sqlSession.commit(res &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删除操作注意的问题"><a href="#删除操作注意的问题" class="headerlink" title="删除操作注意的问题"></a>删除操作注意的问题</h6><ul><li>删除语句使用delete标签</li><li>sql语句中使用#{任意字符串}方式引用传递的单个参数</li><li>删除操作使用的API是sqlSession.delete(“命名空间.id”,Object);</li></ul><h4 id="MyBatis核心配置文件概述"><a href="#MyBatis核心配置文件概述" class="headerlink" title="MyBatis核心配置文件概述"></a>MyBatis核心配置文件概述</h4><h5 id="MyBatis核心配置文件层级关系"><a href="#MyBatis核心配置文件层级关系" class="headerlink" title="MyBatis核心配置文件层级关系"></a>MyBatis核心配置文件层级关系</h5><p>configuration配置</p><ul><li>properties 属性</li><li>settings 设置</li><li>typeAliases 类型别名</li><li>objectFactory 对象工厂</li><li>plugins 插件</li><li>environments 环境<ul><li>environment 环境变量<ul><li>transactionManager 事务管理器</li><li>dataSource 数据源</li></ul></li></ul></li><li>databaseIdProvider 数据库厂商标识</li><li>mappers 映射器</li></ul><h5 id="MyBatis常用配置解析"><a href="#MyBatis常用配置解析" class="headerlink" title="MyBatis常用配置解析"></a>MyBatis常用配置解析</h5><h6 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h6><p>数据库环境的配置，支持多环境配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定默认的环境名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定当前的环境名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定事务管理器类型是JDBC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--指定当前数据源类型是连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!--数据源驱动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!--url--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/study"</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，事务管理器（transactionManager）类型有两种</p><ul><li>JDBC：使用JDBC的提交和回滚事务设置，它依赖于从数据源得到的连接来管理事务作用域。</li><li>MANAGED：它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如JEE应用服务器的上下文）。默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将closeConnection设置为false来组织它默认的关闭行为。</li></ul><p>数据源（datasource）类型有三种</p><ul><li>UNPOOLED：这种数据源实现只是每次被请求时打开和关闭连接</li><li>POOLED：这种数据源的实现利用“池”的概念将JDBC连接对象组织起来</li><li>JNDI：这种数据源的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后在放置一个JNDI上下文的引用。</li></ul><h6 id="mappers标签"><a href="#mappers标签" class="headerlink" title="mappers标签"></a>mappers标签</h6><p>mappers标签的作用是加载映射，加载方式</p><ul><li>使用相对类路径的资源引用，例如：<code>&lt;mapper resource=&quot;org/mybtatis/builder/AuthorMapper.xml&quot;/&gt;</code></li><li>使用完全限定资源定位符（URL），例如：<code>&lt;mapper =&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</code></li><li>使用映射器接口实现类的完全限定类名，例如：<code>&lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</code></li><li>将包内的映射器接口实现全部注册为映射器，例如：<code>package name=&quot;org.mybatis.builder&quot;</code></li></ul><h6 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h6><p>jdbc.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/study</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>SqlMapConfig.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部properties配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置数据源环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span>          </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h6><p>类型别名是为java类型设置别名，配置typeAliases为com.sutdy.domain.User定义为别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.study.domain.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyBatis框架已定义常用的类型别名</p><table><thead><tr><th align="center">别名</th><th align="center">数据类型</th></tr></thead><tbody><tr><td align="center">string</td><td align="center">String</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><h4 id="MyBatis相应API"><a href="#MyBatis相应API" class="headerlink" title="MyBatis相应API"></a>MyBatis相应API</h4><h5 id="SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="SqlSession工厂构建器SqlSessionFactoryBuilder"></a>SqlSession工厂构建器SqlSessionFactoryBuilder</h5><p>常用API：SqlSessionFactoryBuilder().build(InputStream inputStream);<br>通过加载MyBatis的核心文件的输入流的形式构建一个SqlSessionFactory对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取核心配置文件</span></span><br><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="comment">// 获取sqlSession工厂对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br></pre></td></tr></table></figure><p>其中，Resources工具类在org.apache.ibatis,io包中，Resources类从类路径下、文件系统或一个web URL中加载资源文件。</p><h5 id="SqlSession工厂对象SQLSessionFactory"><a href="#SqlSession工厂对象SQLSessionFactory" class="headerlink" title="SqlSession工厂对象SQLSessionFactory"></a>SqlSession工厂对象SQLSessionFactory</h5><p>SqlSessionFactory有多个方法创建SqlSession实例，常用方法：</p><table><thead><tr><th align="center">方法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">openSession()</td><td align="center">会默认开启一个事务，但事务不会自动提交，需要手动提交该事务，更新操作（增删改）才会持久化到数据库中</td></tr><tr><td align="center">openSession(boolean autoCommit)</td><td align="center">参数为是否自动提交事务，如果设置为true，则不需要手动提交事务</td></tr></tbody></table><h6 id="SqlSessionj会话对象"><a href="#SqlSessionj会话对象" class="headerlink" title="SqlSessionj会话对象"></a>SqlSessionj会话对象</h6><p>SqlSession实例，包含执行语句、提交、回滚事务和获取映射器实例的方法。</p><p>执行语句的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line">&lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span>;</span><br></pre></td></tr></table></figure><p>操作事务的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> paramter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="MyBatis的Dao层实现"><a href="#MyBatis的Dao层实现" class="headerlink" title="MyBatis的Dao层实现"></a>MyBatis的Dao层实现</h4><h5 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h5><ul><li>编写UserDao接口和UserDaoImpl实现类</li><li>编写UserService接口和UserServiceImpl实现类</li><li>编写客户端测试类</li></ul><h5 id="代理开发方式"><a href="#代理开发方式" class="headerlink" title="代理开发方式"></a>代理开发方式</h5><p>采用MyBatis的代理开发方式实现Dao层的开发。</p><p>Mapper接口方法只需要编写Mapper接口（相当于Dao接口），由MyBatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体与传统的Dao接口实现类方法相同。</p><p>Mapper接口开发需要遵循的规范：</p><ol><li>mapper.xml文件中的namespace与Mapper接口的全限定名相同</li><li>Mapper几口方法名和Mapper.xml中定义的每个statement的id相同</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li></ol><h4 id="MyBatis映射文件"><a href="#MyBatis映射文件" class="headerlink" title="MyBatis映射文件"></a>MyBatis映射文件</h4><p>MyBatis映射文件Mapper.xml标签</p><ul><li><code>&lt;select&gt;</code>：查询</li><li><code>&lt;insert&gt;</code>：插入</li><li><code>&lt;update&gt;</code>：修改</li><li><code>&lt;delete&gt;</code>：删除</li><li><code>&lt;where&gt;</code>：where条件</li><li><code>&lt;if&gt;</code>：if判断</li><li><code>&lt;foreach&gt;</code>：循环</li><li><code>&lt;sql&gt;</code>：sql片段抽取</li></ul><h5 id="动态sql语句"><a href="#动态sql语句" class="headerlink" title="动态sql语句"></a>动态sql语句</h5><p>MyBatis的映射文件中，业务逻辑复杂时，sql语句是动态变化的。</p><ul><li>if</li><li>choose(when,otherwise)</li><li>trim(where,set)</li><li>foreach</li></ul><h6 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h6><p>and多条件类型</p><p><code>select * from where uid=? and uname=? and password=?</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"uid!=0"</span>&gt;</span></span><br><span class="line">            and uid = #&#123;uid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"uname!=null"</span>&gt;</span></span><br><span class="line">            and uname = #&#123;uname&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h6><p>or多条件类型</p><p><code>select * from where uid in(?,?,...)</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"uid in("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"uid"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            #&#123;uid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="sql片段抽取"><a href="#sql片段抽取" class="headerlink" title="sql片段抽取"></a>sql片段抽取</h5><p>将sql语句中重复的部分抽取出来，使用时用include引用即可，达到sql重用的目的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sql抽取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectUser"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectUser"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="MyBatis核心配置文件"><a href="#MyBatis核心配置文件" class="headerlink" title="MyBatis核心配置文件"></a>MyBatis核心配置文件</h4><h5 id="typeHandlers标签"><a href="#typeHandlers标签" class="headerlink" title="typeHandlers标签"></a>typeHandlers标签</h5><p>无论是MyBatis在预处理语句（PrepareStatement）中设置一个参数时，还是从结果中取出一个值，都会用类型处理器将获取的值以合适的方式转换称Java类型。</p><div align="center">默认的类型处理器</div><table><thead><tr><th align="center">类处理器</th><th align="center">Java类型</th><th align="center">JDBC类型</th></tr></thead><tbody><tr><td align="center">BooleantTypeHandler</td><td align="center">java.lang.Boolean,boolean</td><td align="center">数据库兼容的BOOLEAN</td></tr><tr><td align="center">ByteTypeHandler</td><td align="center">java.lang.Byte,byte</td><td align="center">数据库兼容的NUMERIC或BYTE</td></tr><tr><td align="center">ShortTypeHandler</td><td align="center">java.lang.Short,short</td><td align="center">数据库兼容的NUMERIC或SHORT INTEGER</td></tr><tr><td align="center">IntegerTypeHandler</td><td align="center">java.lang.Integer,int</td><td align="center">数据库兼容的NUMERIC或INTEGER</td></tr><tr><td align="center">LongTypeHandler</td><td align="center">java.lang.Long,long</td><td align="center">数据库兼容的NUMERIC或LONG INTEGER</td></tr></tbody></table><p>可以重写类型处理器或创建自定义的类型处理器来处理不支持或非标准的类型。</p><p>具体做法</p><ul><li>方法一：实现org.apach.ibatis.type.TypeHandler接口</li><li>方法二：继承org.apach.ibatis.type.BaseTypeHandler类，然后选择性地将它映射到一个JDBC类型。</li></ul><h6 id="自定义类型处理器开发步骤"><a href="#自定义类型处理器开发步骤" class="headerlink" title="自定义类型处理器开发步骤"></a>自定义类型处理器开发步骤</h6><ol><li><p>定义转换类继承<code>BaseTypeHandler&lt;T&gt;</code></p></li><li><p>覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，getNullableResult为查询时mysql的字符串类型转换成java的Type类型的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// java--&gt;数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        preparedStatement.setLong(i, date.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库--&gt;java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = resultSet.getLong(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 数据库--&gt;java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = resultSet.getLong(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库--&gt;java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = callableStatement.getLong(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在MyBatis核心配置文件中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义类型处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"com.study.handler.DateTypeHandler"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试转换是否正确</p></li></ol><h5 id="plugins标签"><a href="#plugins标签" class="headerlink" title="plugins标签"></a>plugins标签</h5><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHandler是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据。</p><p>开发步骤</p><ol><li><p>导入PagerHelper坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在MyBatis核心配置文件中配置PageHelper插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--PageHelper4.0以后不用配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="dialect" value="mysql"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试分页数据获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前页码，每一页内容数量</span></span><br><span class="line">PageHelper.startPage(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize);</span><br></pre></td></tr></table></figure></li></ol><p>其他分页信息获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Logger logger = Logger.getLogger(UserMapperTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取与分页相关参数</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(res);</span><br><span class="line">logger.debug(<span class="string">"当前页："</span> + pageInfo.getPageNum());</span><br><span class="line">logger.debug(<span class="string">"总页数："</span> + pageInfo.getPages());</span><br><span class="line">logger.debug(<span class="string">"总条数："</span> + pageInfo.getTotal());</span><br><span class="line">logger.debug(<span class="string">"每页显示的数量："</span> + pageInfo.getPageSize());</span><br><span class="line">logger.debug(<span class="string">"上一页："</span> + pageInfo.getPrePage());</span><br><span class="line">logger.debug(<span class="string">"下一页："</span> + pageInfo.getNextPage());</span><br><span class="line">logger.debug(<span class="string">"是否是首页："</span> + pageInfo.isIsFirstPage());</span><br><span class="line">logger.debug(<span class="string">"是否是尾页："</span> + pageInfo.isIsLastPage());</span><br></pre></td></tr></table></figure><h4 id="MyBatis多表操作"><a href="#MyBatis多表操作" class="headerlink" title="MyBatis多表操作"></a>MyBatis多表操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user_mb;</span><br><span class="line">+-----+-----------+----------+---------------+</span><br><span class="line">| uid | uname     | password | birthday      |</span><br><span class="line">+-----+-----------+----------+---------------+</span><br><span class="line">|   1 | zhangsan  | 123      | 1593414232744 |</span><br><span class="line">|   2 | lisi      | 456      | 1593414233749 |</span><br><span class="line">|   3 | wangwu333 | 333      | 1593414234745 |</span><br><span class="line">|   7 | tom       | 222      | 1593414234749 |</span><br><span class="line">+-----+-----------+----------+---------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from order_mb;</span><br><span class="line">+-----+---------------------+---------+-----+</span><br><span class="line">| oid | orderTime           | total   | uid |</span><br><span class="line">+-----+---------------------+---------+-----+</span><br><span class="line">|   1 | 2020-06-29 16:16:03 | 1000.00 |   1 |</span><br><span class="line">|   2 | 2020-06-29 16:16:25 | 1500.00 |   1 |</span><br><span class="line">|   3 | 2020-06-29 16:16:42 | 2000.00 |   2 |</span><br><span class="line">|   4 | 2020-06-29 16:17:14 | 3000.00 |   3 |</span><br><span class="line">+-----+---------------------+---------+-----+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from role_mb;</span><br><span class="line">+-----+-----------------+</span><br><span class="line">| rid | rolename        |</span><br><span class="line">+-----+-----------------+</span><br><span class="line">|   1 | 程序员           |</span><br><span class="line">|   2 | 前端设计师        |</span><br><span class="line">|   3 | 项目经理         |</span><br><span class="line">|   4 | 测试人员         |</span><br><span class="line">|   5 | 架构师           |</span><br><span class="line">+-----+-----------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user_role_mb;</span><br><span class="line">+-----+-----+</span><br><span class="line">| uid | rid |</span><br><span class="line">+-----+-----+</span><br><span class="line">|   1 |   1 |</span><br><span class="line">|   1 |   2 |</span><br><span class="line">|   2 |   3 |</span><br><span class="line">|   3 |   4 |</span><br><span class="line">+-----+-----+</span><br></pre></td></tr></table></figure><h5 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h5><p>模型：用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户。</p><p>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户。</p><p>配置：<code>&lt;resultMap&gt;</code></p><p>映射方式一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.study.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    指定字段与实体属性的映射关系</span></span><br><span class="line"><span class="comment">    column:数据表的字段名称</span></span><br><span class="line"><span class="comment">    property:实体的属性名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"oid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orderTime"</span> <span class="attr">property</span>=<span class="string">"orderTime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"user.uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"user.uname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"user.password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"user.birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from order_mb o,</span><br><span class="line">        user_mb u</span><br><span class="line">        where o.uid = u.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>映射方式二</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"oid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orderTime"</span> <span class="attr">property</span>=<span class="string">"orderTime"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        property:当前实体(order)中的属性名称(private User user);</span></span><br><span class="line"><span class="comment">        javaType:当前实体(order)中的属性的类型(com.study.domain.User)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"uname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h5><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户。</p><p>一对一查询的需求：查询用户，与此同时查询出该用户的所有订单。</p><p>配置：<code>&lt;resultMap&gt;+&lt;collection&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.study.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"uname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            配置集合</span></span><br><span class="line"><span class="comment">            property:集合名称</span></span><br><span class="line"><span class="comment">            ofType:当前集合中的数据类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"order"</span> <span class="attr">ofType</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"oid"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orderTime"</span> <span class="attr">property</span>=<span class="string">"orderTime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user_mb u,</span><br><span class="line">             order_mb o</span><br><span class="line">        where u.uid = o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h5><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p><p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p><p>配置：<code>&lt;resultMap&gt;+&lt;collection&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRoleMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"uname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"role"</span> <span class="attr">ofType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"rid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rolename"</span> <span class="attr">property</span>=<span class="string">"rolename"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserRole"</span> <span class="attr">resultMap</span>=<span class="string">"userRoleMap"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user_mb u,</span><br><span class="line">         role_mb r,</span><br><span class="line">         user_role_mb ur</span><br><span class="line">    where u.uid = ur.uid</span><br><span class="line">      and r.rid = ur.rid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="MyBatis注解开发"><a href="#MyBatis注解开发" class="headerlink" title="MyBatis注解开发"></a>MyBatis注解开发</h4><p>常用注解</p><ul><li>@Insert：实现新增</li><li>@Update：实现删除</li><li>@Select：实现查询</li><li>@Result：实现结果集封装</li><li>@Results：可以与Result一起使用，封装多个结果集</li><li>@One：实现一对一结果集封装</li><li>@Many：实现一对多结果集封装</li></ul><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user_mb values(#&#123;uid&#125;,#&#123;uname&#125;,#&#123;password&#125;,#&#123;birthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user_mb set uname=#&#123;uname&#125;,password=#&#123;password&#125;,birthday=#&#123;birthday&#125; where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user_mb where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定Mapper接口所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.study.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AnnotationTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">        mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUname(<span class="string">"tianqi"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"222"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        mapper.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUid(<span class="number">8</span>);</span><br><span class="line">        user.setUname(<span class="string">"tianqi555"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"555"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        mapper.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mapper.delete(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = mapper.findById(<span class="number">2</span>);</span><br><span class="line">        logger.debug(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; result = mapper.findAll();</span><br><span class="line">        logger.debug(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="复杂映射开发"><a href="#复杂映射开发" class="headerlink" title="复杂映射开发"></a>复杂映射开发</h5><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Results</td><td align="center">代替的是标签&lt;resultMap&gt;,该注解中可以使用单个@Result注解，也可以使用@Result结合。使用格式：@Results({@Result(),@Result()})或@Results(@Result())</td></tr><tr><td align="center">@Result</td><td align="center">代替了&lt;id&gt;标签和&lt;result&gt;标签<br />@Result中属性介绍<br />column：数据库的列名<br />property：需要装配的属性名<br />one：需要使用的@One注解，@Result(one=@One()<br />many：需要使用的@Many注解，@Result(many=@Many())</td></tr><tr><td align="center">@One一对多</td><td align="center">代替了&lt;assocation&gt;标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。@One注解属性介绍<br />select：指定用来多表查询的sqlmapper<br />使用格式：@Result(column=””.propety=””,one=@One(select=””))</td></tr><tr><td align="center">@Many多对一</td><td align="center">代替了&lt;collection&gt;标签，是多表查询的关键，在注解中用来指定子查询返回对象集合，使用格式：@Result(column=””.propety=””,many=@Many(select=””))</td></tr></tbody></table><h6 id="一对多查询-1"><a href="#一对多查询-1" class="headerlink" title="一对多查询"></a>一对多查询</h6><p>User实体中的属性</p><ul><li>private int uid;</li><li>private String uname;</li><li>private String password;</li><li>private Date birthday;</li></ul><p>Order实体中的属性</p><ul><li>private int oid;</li><li>private Date orderTime;</li><li>private double total;</li><li>private User user;</li></ul><p>UserMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from order_mb"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(</span><br><span class="line">        &#123;<span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"oid"</span>, property = <span class="string">"oid"</span>),</span><br><span class="line">         <span class="meta">@Result</span>(column = <span class="string">"total"</span>, property = <span class="string">"total"</span>),</span><br><span class="line">         <span class="meta">@Result</span>(column = <span class="string">"orderTime"</span>, property = <span class="string">"orderTime"</span>),</span><br><span class="line">         <span class="meta">@Result</span>(</span><br><span class="line">             column = <span class="string">"uid"</span>, <span class="comment">// 根据该字段去查询user表的数据</span></span><br><span class="line">             property = <span class="string">"user"</span>, <span class="comment">// 要封装的属性名称</span></span><br><span class="line">             javaType = User<span class="class">.<span class="keyword">class</span>, // 要封装的实体类型</span></span><br><span class="line"><span class="class">             <span class="title">one</span> </span>= <span class="meta">@One</span>(select = <span class="string">"com.study.mapper.UserMapper.findById"</span>)</span><br><span class="line">         )</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AnnotationOMTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> OrderMapper mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    mapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Order&gt; result = mapper.findAll();</span><br><span class="line">    logger.debug(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="多对一查询"><a href="#多对一查询" class="headerlink" title="多对一查询"></a>多对一查询</h6><p>User实体中的属性</p><ul><li>private int uid;</li><li>private String uname;</li><li>private String password;</li><li>private Date birthday;</li><li>private List&lt;Order&gt; orders;</li></ul><p>Order实体中的属性</p><ul><li>private int oid;</li><li>private Date orderTime;</li><li>private double total;</li><li>private User user;</li></ul><p>OrderMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from order_mb where uid=#&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findById</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"uname"</span>, property = <span class="string">"uname"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"password"</span>, property = <span class="string">"password"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(</span><br><span class="line">            column = <span class="string">"uid"</span>,</span><br><span class="line">            property = <span class="string">"orders"</span>,</span><br><span class="line">            javaType = List<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">many</span> </span>= <span class="meta">@Many</span>(select = <span class="string">"com.study.mapper.OrderMapper.findById"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserAndOrderAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AnnotationMOTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserAndOrderAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; result = mapper.findUserAndOrderAll();</span><br><span class="line">    logger.debug(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="多对多查询-1"><a href="#多对多查询-1" class="headerlink" title="多对多查询"></a>多对多查询</h6><p>User实体中的属性</p><ul><li>private int uid;</li><li>private String uname;</li><li>private String password;</li><li>private Date birthday;</li><li>private List&lt;Role&gt; roles;</li></ul><p>Role实体中的属性</p><ul><li>private int rid;</li><li>private String rolename;</li></ul><p>RoleMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_role_mb ur,role_mb r where ur.uid=#&#123;uid&#125; and ur.rid=r.rid"</span>)</span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user_mb"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"uname"</span>, property = <span class="string">"uname"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"password"</span>, property = <span class="string">"password"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(</span><br><span class="line">            column = <span class="string">"uid"</span>,</span><br><span class="line">            property = <span class="string">"roles"</span>,</span><br><span class="line">            javaType = List<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">many</span> </span>= <span class="meta">@Many</span>(select = <span class="string">"com.study.mapper.RoleMapper.findByUid"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserAndRoleAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(AnnotationMMTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserAndOrderAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; result = mapper.findUserAndRoleAll();</span><br><span class="line">    logger.debug(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;MyBatis简介&quot;&gt;&lt;a href=&quot;#MyBatis简介&quot; class=&quot;headerlink&quot; title=&quot;MyBatis简介&quot;&gt;&lt;/a&gt;MyBatis简介&lt;/h4&gt;&lt;h5 id=&quot;原始jdbc操作&quot;&gt;&lt;a href=&quot;#原始jdbc操作&quot; class=&quot;headerlink&quot; title=&quot;原始jdbc操作&quot;&gt;&lt;/a&gt;原始jdbc操作&lt;/h5&gt;&lt;p&gt;原始jdbc开发存在的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能&lt;/li&gt;
&lt;li&gt;sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化可能较大，sql变动需要改变java代码&lt;/li&gt;
&lt;li&gt;查询操作时，需要手动将结果集中的数据封装到实体中；插入操作时，需要手动将实体的数据设置到sql语句的占位符位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用数据库连接池初始化连接资源&lt;/li&gt;
&lt;li&gt;将sql语句抽取到xml配置文件中&lt;/li&gt;
&lt;li&gt;使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;MyBatis是一个优秀的基于Java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。&lt;/li&gt;
&lt;li&gt;MyBatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。&lt;/li&gt;
&lt;li&gt;MyBatis框架执行sql将结果映射为java对象并返回。采用&lt;strong&gt;ORM&lt;/strong&gt;（Object Relational Mapping 对象关系映射）思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mybatis" scheme="https://lao-biao.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot笔记</title>
    <link href="https://lao-biao.github.io/articles/e94425f6.html"/>
    <id>https://lao-biao.github.io/articles/e94425f6.html</id>
    <published>2020-06-29T01:35:50.000Z</published>
    <updated>2020-07-06T03:24:26.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot笔记"><a href="#SpringBoot笔记" class="headerlink" title="SpringBoot笔记"></a>SpringBoot笔记</h1><blockquote><p>官方文档：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">springboot</a></p></blockquote><h2 id="SpringBoot基础"><a href="#SpringBoot基础" class="headerlink" title="SpringBoot基础"></a>SpringBoot基础</h2><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>创建独立的Spring应用程序</li><li>直接嵌入Tomcat，Jetty或Undertow（无需部署WAR文件）</li><li>提供“入门”依赖项，以简化构建配置</li><li>尽可能自动配置Spring和3rd Party库</li><li>提供可用于生产的功能，例如指标，运行状况检查和外部化配置</li><li>完全没有代码生成，也不需要XML配置</li></ul><h4 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h4><p><strong>SNAPSHOT</strong>：开发版</p><p><strong>CURRENT</strong>：最新版，不一定是稳定版</p><p><strong>GA</strong>：General Availability 正式发布的版本</p><a id="more"></a><h4 id="创建基于SpringBoot的项目"><a href="#创建基于SpringBoot的项目" class="headerlink" title="创建基于SpringBoot的项目"></a>创建基于SpringBoot的项目</h4><ul><li>官网</li><li>IDEA的脚手架工具</li><li>IDEA的Maven项目</li></ul><h6 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h6><blockquote><p><a href="https://start.spring.io/" target="_blank" rel="noopener">spring initializr</a></p></blockquote><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/Spring/%E5%AE%98%E7%BD%91%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="官网创建项目"></p><p>填写完信息后点击<code>Generate</code>即可生成文件，下载解压后就是一个项目</p><h6 id="IDEA的脚手架工具"><a href="#IDEA的脚手架工具" class="headerlink" title="IDEA的脚手架工具"></a>IDEA的脚手架工具</h6><p>使用 IDEA 的 Spring Initalizr 工具创建 SpringBoot 项目</p><ul><li><p>打开创建项目,选择 Spring Initializr ，选择对应的JDK路径和URL</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/Spring/IDEA-Spring-Initializr.png" alt="IDEA 的 Spring Initalizr创建项目"></p></li><li><p>填写项目设置</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/Spring/IDEA-Spring-Initializr-Project-Settings.png" alt="IDEA 的 Spring Initalizr创建项目"></p></li><li><p>添加依赖和SpringBoot版本</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/Spring/IDEA-Spring-Initializr-Dependencies.png" alt="IDEA 的 Spring Initalizr创建项目"></p></li><li><p>选择项目名和路径，以及其他设置</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/Spring/IDEA-Spring-Initializr-Name-Location.png" alt="IDEA 的 Spring Initalizr创建项目"></p></li></ul><h6 id="IDEA的Maven项目"><a href="#IDEA的Maven项目" class="headerlink" title="IDEA的Maven项目"></a>IDEA的Maven项目</h6><p>使用IDEA创建<code>Maven</code>项目后，修改<code>pom.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- SpringBoot版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span><span class="comment">&lt;!-- JDK版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- SpringBoot Web启动器，项目不使用可以不需要添加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- SpringBoot测试启动器，可以不添加 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- SpringBoot打包插件，必须有 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SpringBoot项目结构"><a href="#SpringBoot项目结构" class="headerlink" title="SpringBoot项目结构"></a>SpringBoot项目结构</h4><h5 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h5><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot的父级依赖，只有继承它才是SpringBoot项目<br><code>spring-boot-starter-parent</code> 是一个特殊的starter，它用来提供相关的Maven默认依赖。使用它之后，常用的包依赖可以省去version标签</p><h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动器依赖<br>举例：web启动器</p><p>可使用第三方启动器</p><h6 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>spring-boot-maven-plugin</code> 插件是将<code>springboot</code>的应用程序打包成<code>jar</code>包的插件。将所有应用启动运行所需要的<code>jar</code>包都包含进来，从逻辑上将具备了独立运行软件的条件。当运行<code>mvn package</code>进行打包后，使用<code>java-jar</code>命令就可以直接运行</p><h5 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h5><p>Spring Boot 的启动类的作用是启动Spring Boot 项目，是基于<code>Main</code>方法来运行的<br>启动类在启动时会做注解扫描(<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>…)</p><h6 id="启动类与启动器区别"><a href="#启动类与启动器区别" class="headerlink" title="启动类与启动器区别"></a>启动类与启动器区别</h6><p>启动类：项目的启动入口</p><p>启动器：<code>jar</code>包的坐标</p><h6 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootDemoApplication</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        SpringApplication.run(SpringBootDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;<span class="comment">//启动类</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>INFO 13284 — [           main] c.s.s.SpringBootDemoApplication          : Starting SpringBootDemoApplication on Dell with PID 13284<br>INFO 13284 — [           main] c.s.s.SpringBootDemoApplication          : No active profile set, falling back to default profiles: default<br>INFO 13284 — [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)<br>INFO 13284 — [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]<br>INFO 13284 — [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]<br>INFO 13284 — [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext<br>INFO 13284 — [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2335 ms<br>INFO 13284 — [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService ‘applicationTaskExecutor’<br>INFO 13284 — [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ‘’<br>INFO 13284 — [           main] c.s.s.SpringBootDemoApplication          : Started SpringBootDemoApplication in 4.181 seconds (JVM running for 9.543)</p></blockquote><h5 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h5><p>Spring Boot 将所有的功能场景都抽取出来，做成一个个的 starter ，只要在项目里引入这些 starter 相关场景的所有依赖都会导入进来，要用什么功能就导入什么场景，在<code>jar</code>包上管理非常方便，最终实现一站式开发</p><p>Spring Boot 提供多达 44 个启动器</p><blockquote><p>spring-boot-starter 核心启动器，包含了自动配置、日志和YAML</p><p>spring-boot-starter-actuator 帮助监控和管理应用</p><p>spring-boot-starter-web 支持全栈式Web开发，包括Tomcat 和 spring-webmvc</p><p>spring-boot-starter-amqp 通过spring-rabbit 来支持AMQP协议(Advanced Message Queuing Protocol)</p><p>spring-boot-starter-jdbc 支持JDBC数据库</p><p>…</p><p>官网：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">springboot文档</a></p></blockquote><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>Spring Boot 提供一个名称为application的全局配置文件，支持两种格式：Properties格式和YAML格式</p><h6 id="Properties格式"><a href="#Properties格式" class="headerlink" title="Properties格式"></a>Properties格式</h6><p>配置Tomcat监听端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><h6 id="YAML格式"><a href="#YAML格式" class="headerlink" title="YAML格式"></a>YAML格式</h6><p>YAML格式的扩展名可以是<code>.yaml</code>或<code>.yml</code></p><p>基本格式：</p><ul><li>区分大小写</li><li>使用缩进代表层级关系</li><li>相同的部分只出现一次</li></ul><p>配置Tomcat监听端口</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><h5 id="配置文件存放位置"><a href="#配置文件存放位置" class="headerlink" title="配置文件存放位置"></a>配置文件存放位置</h5><ul><li>项目根目录中</li><li>项目根目录下的一个congfig子目录中</li><li>项目的resources即classpath根路径中</li><li>项目的resources即classpath根路径下的config目录中</li></ul><h5 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h5><h6 id="不同格式的加载顺序"><a href="#不同格式的加载顺序" class="headerlink" title="不同格式的加载顺序"></a>不同格式的加载顺序</h6><p>如果在同一个目录下有application.yml 也有 application.properties，默认先读取application.properties</p><p>如果同一个配置属性，在多个配置文件都配置了，默认使用第一个读取到的，后面读取的不覆盖前面读取的</p><h6 id="不同位置的加载顺序"><a href="#不同位置的加载顺序" class="headerlink" title="不同位置的加载顺序"></a>不同位置的加载顺序</h6><p>项目根目录下的config子目录(最高)<br>config/application.properties<br>config/applicaiton.yml</p><p>项目根目录(其次)<br>application.properties<br>applicaiton.yml</p><p>项目的resources即classpath根路径下的config目录(一般)<br>resources/config/application.properties<br>resources/config/application.yml</p><p>项目的resources即classpath根路径(最后)<br>resources/application.properties<br>resources/application.yml</p><h5 id="配置文件中的占位符"><a href="#配置文件中的占位符" class="headerlink" title="配置文件中的占位符"></a>配置文件中的占位符</h5><h6 id="占位符语法"><a href="#占位符语法" class="headerlink" title="占位符语法"></a>占位符语法</h6><p>语法：<code>${}</code></p><h6 id="占位符作用"><a href="#占位符作用" class="headerlink" title="占位符作用"></a>占位符作用</h6><p><code>${}</code>中可以获取框架提供的方法中的值，如：<code>random.int</code> …</p><p>占位符可以获取配置文件中的键的值赋给另一个键作为值</p><h6 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h6><p><code>${random.value}</code>  类似于uuid的随机数，没有 - 连接</p><p><code>${random.int}</code> 随机取整型范围内的一个值</p><p><code>${random.long}</code> 随机取长整型范围内的一个值</p><p><code>${random.uuid}</code> 生成一个uuid，有 - 连接</p><p><code>${random.int(value)}</code> 随机生成value以内的整型的值</p><p><code>${random.int(value,max)}</code> 随机生成value-max之间的整型的值</p><h5 id="bootstrap配置文件"><a href="#bootstrap配置文件" class="headerlink" title="bootstrap配置文件"></a>bootstrap配置文件</h5><p>Spring Boot中有两种上下文对象：bootstrap ， application<br>bootstrap是应用程序的<strong>父上下文</strong>，其加载优先于application，bootstrap主要从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性<br>这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源<br>bootstrap里面的属性会优先加载，它们默认也不能被本地相同配置覆盖</p><h6 id="bootstrap配置文件特征"><a href="#bootstrap配置文件特征" class="headerlink" title="bootstrap配置文件特征"></a>bootstrap配置文件特征</h6><p>bootstrap 由父ApplicationContext加载，比application优先加载</p><p>bootstrap里面的属性不能被覆盖</p><h6 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h6><p>application 配置文件主要用于Spring Boot项目的自动化配置</p><p>bootstrap 配置文件应用场景：</p><ul><li>使用Spring Cloud Config 配置中心时，需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息</li><li>一些固定的不能被覆盖的属性</li><li>一些加密/解密的场景</li></ul><h5 id="SpringBoot核心注解"><a href="#SpringBoot核心注解" class="headerlink" title="SpringBoot核心注解"></a>SpringBoot核心注解</h5><h6 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h6><p>配置Spring Boot的启动类</p><p>等同于 <code>@Configuration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code> 的组合</p><h6 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h6><p><code>@SpringBootConfiguration</code> 是 @<code>Configuration</code> 注解的派生注解，跟 <code>@Configuration</code>注解的功能一致，标注这个类是一个配置类，只不过<code>@SpringBootConfiguration</code> 是 springboot的注解，而<code>@Configuration</code> 是 spring的注解</p><h6 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h6><p>通过对bean对象的操作替代 spring 中 的xml 配置文件</p><h6 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h6><p>Spring Boot 自动配置：根据添加的jar依赖自动配置Spring应用<br>是 @AutoConfiguration 和 @Import({AutoConfigurationImportSelector.class})注解的组合</p><h6 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h6><p>自动注入主类下所在包下所有的加了注解的类(<code>@Controller</code>，<code>@Service</code>)</p><h6 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})"></a>@Import({AutoConfigurationImportSelector.class})</h6><p>直接导入普通的类<br>导入实现了 ImportSelector 接口的类</p><p>导入实现了ImportBeanDefinitionRegister 接口的类</p><h6 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h6><p>组件扫描，可自动发现和装载一些 Bean</p><h6 id="ConfigurationPropertiesScan"><a href="#ConfigurationPropertiesScan" class="headerlink" title="ConfigurationPropertiesScan"></a>ConfigurationPropertiesScan</h6><p>扫描配置属性</p><p>作用：使用 <code>@ConfigurationProperties</code> 注解的类生效</p><h5 id="编写HelloWord"><a href="#编写HelloWord" class="headerlink" title="编写HelloWord"></a>编写HelloWord</h5><ul><li>项目创建</li><li>修改POM文件</li><li>修改Tomcat端口</li><li>创建启动类</li><li>创建Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理请求 Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">// @Controller + @ResponseBody 直接返回字符串（json）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/helloWorld"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动应用后</p><p>访问 <a href="http://localhost:8080/helloWorld" target="_blank" rel="noopener">http://localhost:8080/helloWorld</a></p></blockquote><h5 id="SpringBoot在Controller中常用注解"><a href="#SpringBoot在Controller中常用注解" class="headerlink" title="SpringBoot在Controller中常用注解"></a>SpringBoot在Controller中常用注解</h5><h6 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h6><p>相当于 @Controller + @ResponseBody 注解组合</p><p>如果使用 @RestController 注解，Controller中的方法无法返回页面，相当于在方法上面自动加了 @ResponseBody 注解，所以没办法跳转并传输数据到另一个页面，所以 InternalResourceResolver 也不起作用，返回的内容就是 return 里面的内容</p><h6 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h6><p>RequestMapping(method = RequestMethod.Get) 的缩写</p><h6 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h6><p>RequestMapping(method = RequestMethod.Post) 的缩写</p><h6 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h6><p>RequestMapping(method = RequestMethod.Put) 的缩写</p><h6 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h6><p>RequestMapping(method = RequestMethod.Delete) 的缩写</p><h4 id="SpringBoot整合Web层技术"><a href="#SpringBoot整合Web层技术" class="headerlink" title="SpringBoot整合Web层技术"></a>SpringBoot整合Web层技术</h4><h5 id="整合Servlet"><a href="#整合Servlet" class="headerlink" title="整合Servlet"></a>整合Servlet</h5><h6 id="整合Servlet方式一"><a href="#整合Servlet方式一" class="headerlink" title="整合Servlet方式一"></a>整合Servlet方式一</h6><p>通过注解扫描完成Servlet组件的注册</p><ul><li>创建Servlet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Servlet方式一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"FirstServlet"</span>, urlPatterns = <span class="string">"/first"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is from first servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>修改启动类，添加<code>@ServletComponentScan</code>注解</p><p>在SpringBoot启动时会扫描<code>@WebServlet</code>注解，并将该类实例化</p></li></ul><h6 id="整合Servlet方式二"><a href="#整合Servlet方式二" class="headerlink" title="整合Servlet方式二"></a>整合Servlet方式二</h6><p>通过方法完成Servlet组件的注册</p><ul><li>创建Servlet     <code>servlet/SecondServlet.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Servlet方式二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is from second servlet."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Servlet配置类     <code>config/ServletConfig.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet组件注册类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成Servlet组件的注册</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServletConfigurationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> SecondServlet());</span><br><span class="line">        bean.addUrlMappings(<span class="string">"/second"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="整合Filter"><a href="#整合Filter" class="headerlink" title="整合Filter"></a>整合Filter</h5><h6 id="整合Filter方式一"><a href="#整合Filter方式一" class="headerlink" title="整合Filter方式一"></a>整合Filter方式一</h6><p>通过注解扫描完成Filter组件的注册</p><ul><li>创建Filter    <code>filter/FisrtFilter.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Filter方式一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// urlPatterns = &#123;"*.do", "*.jsp"&#125;匹配多个url</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"FirstFilter"</span>, urlPatterns = <span class="string">"/first"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------in first filter--------"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"--------out first filter--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改启动类，添加 <code>@ServletComponentScan</code> 注解</li></ul><h6 id="整合Filter方式二"><a href="#整合Filter方式二" class="headerlink" title="整合Filter方式二"></a>整合Filter方式二</h6><p>通过方法完成Filter组件的注册</p><ul><li>创建Filter    <code>filter/SecondFilter.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Filter方式二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------in Second filter--------"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"--------out Second filter--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Filter配置类 <code>config/SecondFilter.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">getFilterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> SecondFilter());</span><br><span class="line">        <span class="comment">//bean.addUrlPatterns("*.do", "*.jsp"); //不定项参数，可以不使用 new String[]&#123;&#125;</span></span><br><span class="line">        bean.addUrlPatterns(<span class="string">"/second"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="整合Listener"><a href="#整合Listener" class="headerlink" title="整合Listener"></a>整合Listener</h5><h6 id="整合Listener方式一"><a href="#整合Listener方式一" class="headerlink" title="整合Listener方式一"></a>整合Listener方式一</h6><p>通过注解扫描完成Listener组件注册</p><ul><li>编写Listener     <code>listener/FirstListener.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Listener方式一</span></span><br><span class="line"><span class="comment"> * ServletContextListener 监听上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Listener--initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改启动类 添加 <code>@ServletComponentScan</code> 注解</li></ul><h6 id="整合Listener方式二"><a href="#整合Listener方式二" class="headerlink" title="整合Listener方式二"></a>整合Listener方式二</h6><p>通过方法完成Listener组件的注册</p><ul><li>创建Listener     <code>listener/SecondListener.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合Listener方式二</span></span><br><span class="line"><span class="comment"> * ServletContextListener 监听上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Second Listener--initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Listener配置类     <code>config/ListenerConfig.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Listener配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">getServletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean bean = <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> SecondListener());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringBoot访问静态资源"><a href="#SpringBoot访问静态资源" class="headerlink" title="SpringBoot访问静态资源"></a>SpringBoot访问静态资源</h4><p>在SpringBoot项目中没有常规web开发的WebContent(WebApp)，它只有src目录。在src/main/resources下面有两个文件夹，static和templates。SpringBoot默认在static目录存放静态页面，而templates中放动态页面。</p><h5 id="static目录"><a href="#static目录" class="headerlink" title="static目录"></a>static目录</h5><p>SpringBoot 通过classpath/static 目录访问静态资源</p><p>存放静态资源的目录名称必须是static</p><blockquote><p>文件：static/index.html</p><p>直接访问：<a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a></p></blockquote><p>通过controller跳转访问    controller/IndexPageController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexPageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showIndexPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文件：static/index.html</p><p>访问地址：<a href="http://localhost:8080/index" target="_blank" rel="noopener">http://localhost:8080/index</a></p></blockquote><h5 id="templtates目录"><a href="#templtates目录" class="headerlink" title="templtates目录"></a>templtates目录</h5><p>SpringBoot 中不推荐使用jsp作为视图层技术，而是默认使用Thymeleaf来做动态页面</p><p>Teammates目录用来存放Thymeleaf的页面</p><h5 id="静态资源存放其他位置"><a href="#静态资源存放其他位置" class="headerlink" title="静态资源存放其他位置"></a>静态资源存放其他位置</h5><h6 id="SpringBoot访问静态资源的位置"><a href="#SpringBoot访问静态资源的位置" class="headerlink" title="SpringBoot访问静态资源的位置"></a>SpringBoot访问静态资源的位置</h6><blockquote><p>classpath:    与java文件夹同级的resources目录</p></blockquote><p>classpath:/META-INF/resources/</p><p>classpath:/resources/</p><p>classpath:/static/</p><p>classpath:/public/</p><h6 id="自定义静态资源位置"><a href="#自定义静态资源位置" class="headerlink" title="自定义静态资源位置"></a>自定义静态资源位置</h6><p>在application.properties文件中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/自定义资源位置1/,classpath:/自定义资源位置2/</span></span><br></pre></td></tr></table></figure><h4 id="SpringBoot文件上传"><a href="#SpringBoot文件上传" class="headerlink" title="SpringBoot文件上传"></a>SpringBoot文件上传</h4><ul><li>创建项目</li><li>配置POM文件</li><li>编写启动类</li><li>编写上传页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/fileUploadController"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"OK"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 参数名必须与fileupload.xml中的input标签的value值一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/fileUploadController"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(file.getOriginalFilename());</span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(<span class="string">"D:/upload/"</span> + file.getOriginalFilename()));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改上传文件大小</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置单文件上传的容量限制</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">2MB</span></span><br><span class="line"><span class="comment"># 配置在一次请求中上传文件总容量的限制</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">20MB</span></span><br></pre></td></tr></table></figure><h4 id="SpringBoot整合视图层技术"><a href="#SpringBoot整合视图层技术" class="headerlink" title="SpringBoot整合视图层技术"></a>SpringBoot整合视图层技术</h4><h5 id="SpringBoot整合JSP技术"><a href="#SpringBoot整合JSP技术" class="headerlink" title="SpringBoot整合JSP技术"></a>SpringBoot整合JSP技术</h5><p>创建项目</p><p>修改POM文件，添加JSP引擎与JSTL标签库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加jsp引擎依赖，SpringBoot内置Tomcat没有此依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jsper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加JSTL标签库依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建webapp目录</p><p>main目录下与java、resource同级</p><p>标记为web目录</p><p>创建JSP</p><p>修改配置文件，配置视图解析器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/WEB-INF/jsp/</span></span><br><span class="line"><span class="comment"># 后缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure><p>创建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 页面跳转</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;page&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showPage</span><span class="params">(@PathVariable String page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在IDEA中项目为聚合工程，在运行jsp时是需要指定路径。</p><h5 id="SpringBoot整合Freemarker"><a href="#SpringBoot整合Freemarker" class="headerlink" title="SpringBoot整合Freemarker"></a>SpringBoot整合Freemarker</h5><p>创建项目</p><p>修改POM文件，添加Freemarker启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Freemarker依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String uname, String gender, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/showUsers"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showUsers</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"李四"</span>, <span class="string">"男"</span>, <span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"王五"</span>, <span class="string">"男"</span>, <span class="number">18</span>));</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"userlist"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建视图 <code>templates/userlist.ftl</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot整合Freemarker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#list</span> <span class="attr">list</span> <span class="attr">as</span> <span class="attr">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.uname&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.gender&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Freemarker文件后缀（SpringBoot2.x后默认为.ftlh）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.freemarker.suffix</span>=<span class="string">.ftl</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot笔记&quot;&gt;&lt;a href=&quot;#SpringBoot笔记&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot笔记&quot;&gt;&lt;/a&gt;SpringBoot笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;springboot&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;SpringBoot基础&quot;&gt;&lt;a href=&quot;#SpringBoot基础&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot基础&quot;&gt;&lt;/a&gt;SpringBoot基础&lt;/h2&gt;&lt;h4 id=&quot;特征&quot;&gt;&lt;a href=&quot;#特征&quot; class=&quot;headerlink&quot; title=&quot;特征&quot;&gt;&lt;/a&gt;特征&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建独立的Spring应用程序&lt;/li&gt;
&lt;li&gt;直接嵌入Tomcat，Jetty或Undertow（无需部署WAR文件）&lt;/li&gt;
&lt;li&gt;提供“入门”依赖项，以简化构建配置&lt;/li&gt;
&lt;li&gt;尽可能自动配置Spring和3rd Party库&lt;/li&gt;
&lt;li&gt;提供可用于生产的功能，例如指标，运行状况检查和外部化配置&lt;/li&gt;
&lt;li&gt;完全没有代码生成，也不需要XML配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;版本介绍&quot;&gt;&lt;a href=&quot;#版本介绍&quot; class=&quot;headerlink&quot; title=&quot;版本介绍&quot;&gt;&lt;/a&gt;版本介绍&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;SNAPSHOT&lt;/strong&gt;：开发版&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CURRENT&lt;/strong&gt;：最新版，不一定是稳定版&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GA&lt;/strong&gt;：General Availability 正式发布的版本&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring boot" scheme="https://lao-biao.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC笔记</title>
    <link href="https://lao-biao.github.io/articles/e545fed0.html"/>
    <id>https://lao-biao.github.io/articles/e545fed0.html</id>
    <published>2020-06-28T13:29:57.000Z</published>
    <updated>2020-07-06T03:24:35.176Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><h5 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h5><p><strong>SpringMVC</strong>是基于Java实现<strong>MVC</strong>设计模型的请求驱动类型的轻量级Web框架，属于<strong>SpringFrameWork</strong>的后续产品，已经融合在<strong>SpringWebFlow</strong>中。</p><p>SpringMVC通过一套注解，让一个简单的Java类成为处理请求的控制器，而无须实现任何接口，同时支持<strong>RESTful</strong>编程风格的请求。</p><a id="more"></a><h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><ol><li>导入SpringMVC相关依赖包</li><li>配置SpringMVC核心控制器<b>DispatcherServlet</b></li><li>编写Controller类和视图页面–”@Controller与@RequestMapping”</li><li>将Controller使用注解配置到Spring容器中</li><li>配置spring-mvc.xml文件(配置组件扫描)</li><li>客户端发起请求测试</li></ol><h5 id="SpringMVC中重要组件"><a href="#SpringMVC中重要组件" class="headerlink" title="SpringMVC中重要组件"></a>SpringMVC中重要组件</h5><p>DispatcherServlet：前端控制器，接收所有请求（如果配置/不包含jsp）</p><p>HandlerMapping：解析请求格式，判断希望要执行哪个具体的方法</p><p>HandlerAdapter：负责调用具体的方法</p><p>Handler：处理器</p><p>ViewResolver：视图解析器，解析结果，准备跳转到具体的物理视图</p><p>View：视图</p><h5 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h5><ol><li>客户端向Tomcat发送请求</li><li>前端控制器DispatcherServlet–请求查询Handler</li><li>处理器映射器HandlerMapping</li><li>HandlerAdapter</li><li>Controller</li><li>ViewResolver</li><li>前端控制器返回处理器执行链HandlerExecuctionChain</li></ol><h5 id="SpringMVC注解-RequestMappping"><a href="#SpringMVC注解-RequestMappping" class="headerlink" title="SpringMVC注解@RequestMappping"></a>SpringMVC注解@RequestMappping</h5><h6 id="RequestMappping"><a href="#RequestMappping" class="headerlink" title="@RequestMappping"></a>@RequestMappping</h6><p>作用：用于建立请求URL和处理方法之间的对应关系</p><p><strong>位置</strong></p><ul><li>类：请求URL的第一级访问目录，此处不写就相当于应用的根目录</li><li>方法：请求URL的第二级访问目录，与类上使用的@RequestMapping标注的一级目录一起组成访问虚拟路径</li></ul><p><strong>属性</strong></p><ul><li>value：用于指定请求的URL，和path属性的作用是一样的</li><li>method：用于指定请求的方式</li><li>params：用于指定限制请求参数的条件，它支持简单的表达式，要求请求参数的key和value必须和配置的一模一样</li><li>params={“accountName”}：表示请求参数必须有accountName</li><li>params={“moeny!100”}：表示请求参数中money不能是100</li></ul><h6 id="视图解析器配置"><a href="#视图解析器配置" class="headerlink" title="视图解析器配置"></a>视图解析器配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h4><h5 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h5><ul><li><p>直接返回字符串：将返回的字符串与视图解析的前后缀拼接后跳转</p><p>举例    返回”index”    </p><p>前缀为<code>/jsp/</code>    后缀为<code>.jsp</code></p><p><strong>转发资源</strong> <code>/jsp/index.jsp</code></p><p><strong>转发</strong> <code>forward:/jsp/index.jsp</code></p><p><strong>重定向</strong> <code>redirect:/index.jsp</code></p></li><li><p>通过ModelAndView对象返回</p></li></ul><h5 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h5><ul><li><p>直接返回字符串（json）：使用@ResponseBody注解</p><p>通过SpringMVC框架注入的response对象，使用response.getWriter.write()回写数据，此时不需要视图跳转，业务方法返回值为void</p><p>json格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置编码格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置jackson转换器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>返回对象或集合<br>mvc注解驱动替代上述配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在SpringMVC各个组件中，处理器映射器、处理器适配器、视图解析器成为SpringMVC的三大组件，使用<code>&lt;mvc:annotation-driven/&gt;</code>自动加载RequestMappingHandlerMapping（）处理映射器和RequestMappingHanlderAdapter（处理适配器），可用在spring-xml.xml配置文件中使用<code>&lt;mvc:annotation-driven/&gt;</code>替代注解注解处理器和适配器的配置。</p><p>使用<code>&lt;mvc:annotation-driven/&gt;</code>默认底层就会继承jackson进行对象或集合的json格式字符串的转换</p></li></ul><h4 id="SpringMVC获取请求数据"><a href="#SpringMVC获取请求数据" class="headerlink" title="SpringMVC获取请求数据"></a>SpringMVC获取请求数据</h4><p>客户端请求参数的格式是：name=value&amp;name=value…</p><p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收的参数类型为</p><ul><li>基本类型参数</li><li>POJO类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ul><h5 id="获取基本类型参数"><a href="#获取基本类型参数" class="headerlink" title="获取基本类型参数"></a>获取基本类型参数</h5><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">param</span><span class="params">(String uname, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    System.out.println(uname + <span class="string">":"</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取POJO类型参数"><a href="#获取POJO类型参数" class="headerlink" title="获取POJO类型参数"></a>获取POJO类型参数</h5><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*POJO实体*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    getter/setter...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Controller*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/parampojo"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramPojo</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user.getUname() + <span class="string">":"</span> + user.getGender() + <span class="string">":"</span> + user.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取数组类型参数"><a href="#获取数组类型参数" class="headerlink" title="获取数组类型参数"></a>获取数组类型参数</h5><p>Controller中的业务方法的数组名称与请求参数的name一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/paramarray"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramArray</span><span class="params">(String[] arr)</span> </span>&#123;</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获得集合类型参数"><a href="#获得集合类型参数" class="headerlink" title="获得集合类型参数"></a>获得集合类型参数</h5><p>获取集合参数时，要将集合包装到一个POJO中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*POJO包装集合参数*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; lu;</span><br><span class="line">    getter/setter</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Controller*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/paramset"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramSet</span><span class="params">(ViewObject vo)</span> </span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--form.jsp--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;测试获取集合类型参数&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">"paramset"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            unmae:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[0].uname"</span>&gt;&lt;br&gt;</span><br><span class="line">            gender:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[0].gender"</span>&gt;&lt;br&gt;</span><br><span class="line">            age:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[0].age"</span>&gt;&lt;br&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            unmae:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[1].uname"</span>&gt;&lt;br&gt;</span><br><span class="line">            gender:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[1].gender"</span>&gt;&lt;br&gt;</span><br><span class="line">            age:&lt;input type=<span class="string">"text"</span> name=<span class="string">"lu[1].age"</span>&gt;&lt;br&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>当使用ajax提交时，可以指定contentType为json形式，在方法参数位置使用@ReqeustBody可以直接接收集合数据而无需使用POJO进行包装。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--ajax.jsp--%&gt;</span><br><span class="line">&lt;!--引入jquery--&gt;</span><br><span class="line">&lt;script src="js/jquery-3.3.1.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> userList = [];</span><br><span class="line">    userList.push(&#123;uname: <span class="string">"张三"</span>, gender: <span class="string">"Male"</span>, age: <span class="number">19</span>&#125;);</span><br><span class="line">    userList.push(&#123;uanme: <span class="string">"李四"</span>, gender: <span class="string">"Female"</span>, age: <span class="number">20</span>&#125;);</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"paramajax"</span>,</span><br><span class="line">        data: JSON.stringify(userList),</span><br><span class="line">        contentType: <span class="string">"application/json;charset=utf-8"</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Controller*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/paramajax"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramAjax</span><span class="params">(@RequestBody List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在<code>spring-mvc.xml</code>中需要配置文件资源路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件资源路径映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/*"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="参数绑定注解-RequestParam"><a href="#参数绑定注解-RequestParam" class="headerlink" title="参数绑定注解@RequestParam"></a>参数绑定注解@RequestParam</h5><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显式的绑定。</p><ul><li>value：请求参数名称</li><li>required：在指定的请求参数是否必须包括，默认是true，提交时没有此参数则报错</li><li>defaultValue：当没有指定请求参数时，则使用指定的默认值赋值</li></ul><h5 id="获取Restful风格的参数"><a href="#获取Restful风格的参数" class="headerlink" title="获取Restful风格的参数"></a>获取Restful风格的参数</h5><p>Restful是一种架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互的软件，基于这个歌风格设计的软件更简洁，更有层次，更易于实现缓存机制。</p><p>Restful风格的请求是使用”url+请求方式”表示一次请求的目的，HTTP协议里面四个表示操作方式</p><ul><li>GET：用于获取资源</li><li>POST：用于新建资源</li><li>PUT：用于更新资源</li><li>DELETE：用于删除资源</li></ul><p>SpringMVC中使用占位符进行参数绑定，地址/user/1可以携程/user/{id}，占位符{id}对应的就是1的值，在业务方法中可以使用@PathVariable注解进行占位符的匹配获取。</p><h5 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h5><p>SpringMVC默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int类型进行参数设置。</p><p>自定义类型转换器开发步骤</p><ol><li>定义转换器类实现Convert接口</li><li>在配置文件中声明转换器</li><li>在<code>&lt;annotation-driven&gt;</code>标签中引用转换器</li></ol><h6 id="自定义日期类型转换器"><a href="#自定义日期类型转换器" class="headerlink" title="自定义日期类型转换器"></a>自定义日期类型转换器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Controller*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/param/&#123;date&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paramDate</span><span class="params">(@PathVariable(value = <span class="string">"date"</span>)</span> Date date) </span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.study.converter.DateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"myConverter"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h5><p>使用@RequestHeader注解可以获取请求头信息，相当于request.getHeader(String name)</p><ul><li>value：请求头的名称</li><li>required：是否必须携带此请求头</li></ul><p>使用@CookieValue注解可以获取指定Cookie信息</p><ul><li>value：指定cookie的名称</li><li>required：是否必须携带此cookie</li></ul><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p>文件上传客户端三要素</p><ul><li><p>表单项 type=”file”</p></li><li><p>表单的提交方式时post</p></li><li><p>表单的enctype属性是多部分表单形式，即enctype=”multipart/form-data”</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"upload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    文件名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"filename"</span>&gt;&lt;br&gt;</span><br><span class="line">    文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li></ul><h6 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h6><ul><li>当form表单修改为多部分表单时，request.getParameter将失效</li><li>enctype=”application/x-www-form-urlencoded”时，form表单正文内容格式是key=value&amp;key=value…</li><li>当form表单的enctype的取值是multipart/form-data时，请求正文内容为多部分形式</li></ul><h6 id="单文件上传步骤"><a href="#单文件上传步骤" class="headerlink" title="单文件上传步骤"></a>单文件上传步骤</h6><ol><li>导入fileupload和io坐标</li><li>配置文件上传解析器</li><li>编写文件上传代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件的编码格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传文件总大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传单个文件大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSizePerFile"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String uname, MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ParamController.upload"</span>);</span><br><span class="line">    <span class="comment">// 获取文件名称</span></span><br><span class="line">    String filename = file.getOriginalFilename();</span><br><span class="line">    System.out.println(uname + <span class="string">"上传了"</span> + filename);</span><br><span class="line">    <span class="comment">// 存储</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> File(<span class="string">"D:/upload/"</span> + filename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h6><p>只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型改为MultipartFile[]即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"upload-multiply"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span>&gt;&lt;br&gt;</span><br><span class="line">    文件<span class="number">1</span>:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    文件<span class="number">2</span>:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload-multiply"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadMultiplyFile</span><span class="params">(String uname, MultipartFile[] file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ParamController.upload"</span>);</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : file) &#123;</span><br><span class="line">        <span class="comment">// 获取文件名称</span></span><br><span class="line">        String filename = multipartFile.getOriginalFilename();</span><br><span class="line">        System.out.println(uname + <span class="string">"上传了"</span> + filename);</span><br><span class="line">        <span class="comment">// 存储</span></span><br><span class="line">        multipartFile.transferTo(<span class="keyword">new</span> File(<span class="string">"D:/upload/"</span> + filename));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h4><p>拦截器（interceptor）</p><p>SpringMVC的拦截器类似于Servlet开发中的过滤器Filter，用于对处理器的<strong>预处理</strong>和<strong>后处理</strong>。</p><p>将拦截器按一定的顺序联结成一条链，称为拦截器链（Interceptor Chain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。</p><p>拦截器是AOP思想的具体实现</p><h5 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h5><table><thead><tr><th>区别</th><th>过滤器</th><th>拦截器</th></tr></thead><tbody><tr><td>使用范围</td><td>过滤器是Servlet规范中的一部分，任何JavaWeb工程都可以使用</td><td>SpringMVC框架，只有使用了SpringMVC框架的工程才能使用</td></tr><tr><td>拦截范围</td><td>在url-pattern中配置了/*之后，可以对所有要访问的资源拦截</td><td>只会拦截访问的控制器方法，如果访问的是jsp，html，css，image或者js是不会进行拦截</td></tr></tbody></table><h5 id="自定义拦截器步骤"><a href="#自定义拦截器步骤" class="headerlink" title="自定义拦截器步骤"></a>自定义拦截器步骤</h5><ol><li>创建拦截器类实现HandlerInterceptor接口</li><li>配置拦截器</li><li>测试拦截器的拦截效果</li></ol><p><code>HandlerInterceptor</code>接口源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行于目标方法之前</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// true表示放行，false表示不放行</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 执行于目标方法之后，视图对象返回之前</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 执行于视图对象返回之后</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>spring-mvc.xml</code>中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"自定义的Interceptor实现类全路径"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="拦截器方法说明"><a href="#拦截器方法说明" class="headerlink" title="拦截器方法说明"></a>拦截器方法说明</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>preHandle()</td><td>该方法在请求处理之前进行调用，其返回值为boolean类型，当它返回false时，表示请求结束，后续的Interceptor和Controller都不会在执行；当它返回true时，会继续调用下一个Interceptor的preHandle方法。</td></tr><tr><td>postHandle()</td><td>该方法实在当前请求进行处理之后被调用，前提是preHandle方法的返回值为true时才能被调用，且它会在DispatcherServlet进行视图返回渲染之前被调用，所以可以在这个方法中对Controller处理之后的ModelAndView对象进行操作。</td></tr><tr><td>afterCompletion()</td><td>该方法将在整个请求结束之后，也就是在DispatcherServlet渲染了对应的视图对象之后执行，前提是preHandle方法放行才能被调用。</td></tr></tbody></table><h4 id="SpringMVC异常处理机制"><a href="#SpringMVC异常处理机制" class="headerlink" title="SpringMVC异常处理机制"></a>SpringMVC异常处理机制</h4><h5 id="异常处理的思路"><a href="#异常处理的思路" class="headerlink" title="异常处理的思路"></a>异常处理的思路</h5><p>系统中异常包括两类：<strong>预期异常</strong>和<strong>运行异常RuntimeException</strong>，前者能通过捕获异常从而获取异常信息，或者主要通过规范代码开发、测试等手段减少运行时异常的发生。</p><p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理。</p><p>客户端–请求–&gt;前端控制器–请求–&gt;Controller–请求–&gt;Service–请求–&gt;Dao<br>处理：前端控制器–&gt;HandlerExceptionResolver</p><h5 id="SpringMVC异常处理两种方式"><a href="#SpringMVC异常处理两种方式" class="headerlink" title="SpringMVC异常处理两种方式"></a>SpringMVC异常处理两种方式</h5><ul><li>使用MVC提供的简单异常处理器SimpleMappingExceptionResolver</li><li>实现Spring的异常处理接口HandlerExceptionResolver自定义异常处理器</li></ul><h6 id="简单异常处理器SimpleMappingExceptionResolver"><a href="#简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="简单异常处理器SimpleMappingExceptionResolver"></a>简单异常处理器SimpleMappingExceptionResolver</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认错误视图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--异常映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"com.study.exception.MyException"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"java.lang.ClassCastException"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="自定义异常处理步骤"><a href="#自定义异常处理步骤" class="headerlink" title="自定义异常处理步骤"></a>自定义异常处理步骤</h6><ul><li>创建异常处理类实现HandlerExceptionResolver</li><li>配置异常处理器</li><li>编写异常页面</li><li>测试异常跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req  请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e    异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 要跳转的错误视图信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MyException) &#123;</span><br><span class="line">            mav.addObject(<span class="string">"info"</span>, <span class="string">"自定义异常"</span>);</span><br><span class="line">            mav.setViewName(<span class="string">"my-error"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ClassCastException) &#123;</span><br><span class="line">            mav.addObject(<span class="string">"info"</span>, <span class="string">"类型转换异常"</span>);</span><br><span class="line">            mav.setViewName(<span class="string">"class-cast-error"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mav.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.study.resolver.MyExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h4&gt;&lt;h5 id=&quot;SpringMVC概述&quot;&gt;&lt;a href=&quot;#SpringMVC概述&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC概述&quot;&gt;&lt;/a&gt;SpringMVC概述&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;SpringMVC&lt;/strong&gt;是基于Java实现&lt;strong&gt;MVC&lt;/strong&gt;设计模型的请求驱动类型的轻量级Web框架，属于&lt;strong&gt;SpringFrameWork&lt;/strong&gt;的后续产品，已经融合在&lt;strong&gt;SpringWebFlow&lt;/strong&gt;中。&lt;/p&gt;
&lt;p&gt;SpringMVC通过一套注解，让一个简单的Java类成为处理请求的控制器，而无须实现任何接口，同时支持&lt;strong&gt;RESTful&lt;/strong&gt;编程风格的请求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring mvc" scheme="https://lao-biao.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>Spring5笔记</title>
    <link href="https://lao-biao.github.io/articles/70b6ad8d.html"/>
    <id>https://lao-biao.github.io/articles/70b6ad8d.html</id>
    <published>2020-06-27T14:55:36.000Z</published>
    <updated>2020-07-06T03:24:16.490Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h3><p>1、Spring是轻量级的开源JavaEE框架<br>2、Spring可以解决企业级应用开发的复杂性<br>3、Spring的两个核心部分：IOC和Aop</p><ul><li>IOC：控制反转，把创建对象过程交给Spring管理</li><li>Aop：面向切面编程，不修改源代码进行功能增强</li></ul><p>4、Spring特点</p><ol><li>方便解耦，简化开发</li><li>Aop编程支持</li><li>方便程序测试</li><li>方便和其他框架进行整合</li><li>方便进行事务操作</li><li>降低API开发难度</li></ol><p>5、Spring5</p><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/Spring/SpringFrame.png" alt="SpringFramework"></p><a id="more"></a><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><p><a href="https://repo.spring.io/webapp/#/home" target="_blank" rel="noopener">Spring主页</a></p><p><a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">Spring框架</a></p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><h4 id="IOC（概念和原理）"><a href="#IOC（概念和原理）" class="headerlink" title="IOC（概念和原理）"></a>IOC（概念和原理）</h4><h5 id="IOC（Inversion-of-Control）"><a href="#IOC（Inversion-of-Control）" class="headerlink" title="IOC（Inversion of Control）"></a>IOC（Inversion of Control）</h5><ul><li>控制反转，把对象创建和对象之间额调用过程交给Spring进行管理</li><li>使用IOC目的：为了耦合度降低</li><li>入门案例就是IOC实现</li></ul><h5 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h5><p>xml解析、工厂模式、反射</p><h5 id="IOC过程"><a href="#IOC过程" class="headerlink" title="IOC过程"></a>IOC过程</h5><p>xml配置文件，配置创建的对象    <code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;/bean&gt;</code></p><p>Service类和Dao类，创建工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserFactory <span class="title">getDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String classValue=<span class="class"><span class="keyword">class</span>属性值</span>;<span class="comment">//xml解析</span></span><br><span class="line">        <span class="comment">// 通过反射创建对象</span></span><br><span class="line">        Class clazz=Class.forName(classValue);</span><br><span class="line">        <span class="keyword">return</span> (UserDao)clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步降低耦合度</p><h5 id="IOC接口"><a href="#IOC接口" class="headerlink" title="IOC接口"></a>IOC接口</h5><ul><li><p>IOC思想基于IOC容器完成，IOC底层就是对象工厂</p></li><li><p>Spring提供IOC容器实现的两种方式（2个接口）<br>BeanFactory：IOC容器基本实现，是Spring内置接口，不提供开发人员进行使用</p><p>加载配置文件时不会创建对象， 在获取对象或适用对象时才会创建</p><p>ApplicationContext：BeanFactory接口的子接口，提供更强大的功能，一般由开发人员进行使用<br>加载配置文件时就会把在配置文件对象进行创建</p></li><li><p>ApplicationContext接口实现类<br>FileSystemXmlApplicationContext<br>ClassPathXmlApplicationContext</p></li></ul><h4 id="IOC操作Bean管理"><a href="#IOC操作Bean管理" class="headerlink" title="IOC操作Bean管理"></a>IOC操作Bean管理</h4><p>Bean管理</p><ul><li>Bean管理指的是两个操作</li><li>Spring创建对象</li><li>Spring注入属性</li></ul><p>Bean管理操作两种方式</p><ul><li>基于xml配置文件方式实现</li><li>基于注解方式实现</li></ul><h4 id="IOC操作Bean管理（基于xml）"><a href="#IOC操作Bean管理（基于xml）" class="headerlink" title="IOC操作Bean管理（基于xml）"></a>IOC操作Bean管理（基于xml）</h4><h5 id="基于xml方式创建对象"><a href="#基于xml方式创建对象" class="headerlink" title="基于xml方式创建对象"></a>基于xml方式创建对象</h5><ul><li>在Spring配置文件中，使用bean标签，标签里面添加对应的属性，就可以实现对象创建</li><li>在bean标签中有很多属性，常用属性<br>id属性：唯一标识<br>class属性：类全路径（包名路径）<br>name属性：旧版本常用与id类似</li><li>创建对象时，默认执行无参构造方法完成对象创建</li></ul><h5 id="基于xml方式注入属性"><a href="#基于xml方式注入属性" class="headerlink" title="基于xml方式注入属性"></a>基于xml方式注入属性</h5><p>DI：依赖注入，注入属性</p><h6 id="第一种注入方式：使用set方法进行注入"><a href="#第一种注入方式：使用set方法进行注入" class="headerlink" title="第一种注入方式：使用set方法进行注入"></a>第一种注入方式：使用set方法进行注入</h6><ol><li><p>创建类，定义属性和相应的set方法</p></li><li><p>在Spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.spring5.Book"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="第二种注入方式：使用有参构造方法进行注入"><a href="#第二种注入方式：使用有参构造方法进行注入" class="headerlink" title="第二种注入方式：使用有参构造方法进行注入"></a>第二种注入方式：使用有参构造方法进行注入</h6><ol><li><p>创建类，定义属性，创建相应的有参构造方法</p></li><li><p>在Spring配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.spring5.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Food"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"China"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>p名称空间注入<br>使用p名称空间注入，可以简化基于xml注入方式</p></li><li><p>添加p名称空间在配置文件中<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p></li><li><p>进行属性注入，在bean标签里面进行操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.spring5.Book"</span> <span class="attr">p:name</span>=<span class="string">"Spring5"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="IOC操作Bean管理（xml注入其他类型属性）"><a href="#IOC操作Bean管理（xml注入其他类型属性）" class="headerlink" title="IOC操作Bean管理（xml注入其他类型属性）"></a>IOC操作Bean管理（xml注入其他类型属性）</h4><h5 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h5><p>null值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性值包含特殊符号"><a href="#属性值包含特殊符号" class="headerlink" title="属性值包含特殊符号"></a>属性值包含特殊符号</h5><ol><li><p>&lt;&gt;尖括号进行转译    <code>lt;</code> <code>gt;</code></p></li><li><p>把特殊符号内容写到CDATA</p><p>例如：<code>&lt;&lt;value&gt;&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[&lt;&lt;value&gt;&gt;]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="注入属性-外部bean"><a href="#注入属性-外部bean" class="headerlink" title="注入属性~外部bean"></a>注入属性~外部bean</h5><p>创建两个类Service类和Dao类<br>在Service类调用Dao类里面的方法<br>在Spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"us"</span> <span class="attr">class</span>=<span class="string">"com.spring5.service.UserService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入UserDao对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ud"</span> <span class="attr">ref</span>=<span class="string">"udi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"udi"</span> <span class="attr">class</span>=<span class="string">"com.spring5.dao.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入属性-内部bean"><a href="#注入属性-内部bean" class="headerlink" title="注入属性~内部bean"></a>注入属性~内部bean</h5><p>一对多关系：部门和员工<br>在实体类之间表示一对多关系<br>在Spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Employee"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"man"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dep"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Department"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"program"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入属性-级联赋值"><a href="#注入属性-级联赋值" class="headerlink" title="注入属性~级联赋值"></a>注入属性~级联赋值</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Employee"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"man"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dep"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Department"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">ref</span>=<span class="string">"dep"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dep"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Department"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"program"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>需要生成Employee类中Department属性的set方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Employee"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"man"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dep"</span> <span class="attr">ref</span>=<span class="string">"dep"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dep.name"</span> <span class="attr">value</span>=<span class="string">"program"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dep"</span> <span class="attr">class</span>=<span class="string">"com.spring5.bean.Department"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"program"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="IOC操作Bean管理（xml注入集合属性）"><a href="#IOC操作Bean管理（xml注入集合属性）" class="headerlink" title="IOC操作Bean管理（xml注入集合属性）"></a>IOC操作Bean管理（xml注入集合属性）</h4><ul><li><p>注入数组类型属性</p></li><li><p>注入List集合类型属性</p></li><li><p>注入Map集合类型属性</p></li><li><p>注入Set集合类型属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu"</span> <span class="attr">class</span>=<span class="string">"com.spring5.Stu"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courses"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>SQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>b<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Java"</span> <span class="attr">value</span>=<span class="string">"java"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Python"</span> <span class="attr">value</span>=<span class="string">"python"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在集合里面设置对象类型值</p></li><li><p>把集合的注入部分提取出来<br>在Spring配置文件中引入名称空间util<br>使用util标签完成诸如部分的提取</p></li></ul><h4 id="IOC操作Bean管理（FactoryBean）"><a href="#IOC操作Bean管理（FactoryBean）" class="headerlink" title="IOC操作Bean管理（FactoryBean）"></a>IOC操作Bean管理（FactoryBean）</h4><p>Spring有两种类型bean，一种是普通bean，另一种是工厂bean（FactoryBean）<br>普通bean：在配置文件中定义bean类型就是返回类型<br>工厂bean：在配置文件中定义bean类型可以和返回类型不一样    </p><ul><li>创建类，让这个类作为工厂bean，实现接口FactoryBean</li><li>实现接口里面的方法，在实现的方法中定义返回的bean类型</li></ul><h4 id="IOC操作Bean管理（bean作用域）"><a href="#IOC操作Bean管理（bean作用域）" class="headerlink" title="IOC操作Bean管理（bean作用域）"></a>IOC操作Bean管理（bean作用域）</h4><p>在Spring里面，设置创建bean实例是单实例还是多实例<br>在Spring里面，默认情况下，bean是单实例对象</p><p>在Spring配置文件中bean标签里面有属性值（scope）用于设置单实例还是多实例</p><blockquote><p>scope属性<br>    singleton表示单实例[默认值]<br>    prototype：表示多实例<br>singleton与prototype区别<br>    singleton单实例，prototype多实例<br>    设置scope值是singleton时，加载Spring配置文件时候就会创建单实例对象<br>    设置scope值是prototype，不是在加载Spring配置文件时不会创建bean对象，在调用getBean()方法时创建多实例对象<br>request、session</p></blockquote><h4 id="IOC操作Bean管理（生命周期）"><a href="#IOC操作Bean管理（生命周期）" class="headerlink" title="IOC操作Bean管理（生命周期）"></a>IOC操作Bean管理（生命周期）</h4><ul><li>通过构造器创建bean实例（无参构造）</li><li>为bean的属性设置值和其他bean引用（调用set方法）</li><li>调用bean的初始化的方法（需要进行配置初始化的方法）<br>bean标签init-method属性</li><li>bean可以使用（已获取对象）</li><li>当容器关闭时，调用bean的销毁的方法（需要进行配置销毁的方法）<br>bean标签destroy-method属性</li></ul><p>bean的后置处理器，bean生命周期的七步</p><ol><li>通过构造器创建bean实例（无参构造）</li><li>为bean的属性设置值和其他bean引用（调用set方法）</li><li>把bean实例传递bean后置处理器的方法<br>postProcessBeforeInitialization(Object bean, String beanName)</li><li>调用bean的初始化的方法（需要进行配置初始化的方法）</li><li>把bean实例传递bean后置处理器的方法<br>postProcessAfterInitialization(Object bean, String beanName)</li><li>bean可以使用（已获取对象）</li><li>当容器关闭时，调用bean的销毁的方法（需要进行配置销毁的方法）</li></ol><p>后置处理器<br>接口：BeanPostProcessor</p><h4 id="IOC操作Bean管理（xml自动装配）"><a href="#IOC操作Bean管理（xml自动装配）" class="headerlink" title="IOC操作Bean管理（xml自动装配）"></a>IOC操作Bean管理（xml自动装配）</h4><h5 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h5><p>根据指定装配规则（属性名称或属性类型），Spring自动将配置的属性值进行注入</p><p>bean标签autowire属性</p><ul><li>byName根据属性名称注入，注入值bean的id值和类属性名称一样</li><li>byType根据属性类型注入        </li></ul><h5 id="自动装配过程"><a href="#自动装配过程" class="headerlink" title="自动装配过程"></a>自动装配过程</h5><p>根据属性名称自动注入</p><p>根据属性类型自动注入</p><h4 id="IOC操作Bean管理（外部属性文件）"><a href="#IOC操作Bean管理（外部属性文件）" class="headerlink" title="IOC操作Bean管理（外部属性文件）"></a>IOC操作Bean管理（外部属性文件）</h4><p>直接配置数据库信息<br>配置连接池–德鲁伊druid（Alibaba）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/study"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入外部属性文件配置数据库连接池</p><ul><li>创建外部属性文件，properties格式文件，写数据库信息</li></ul>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/study</span></span><br><span class="line"><span class="meta">prop.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">prop.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><ul><li><p>把外部properties属性文件引入到Spring配置文件<br>引入context名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line">xsi:schemaLocation=”http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span><br></pre></td></tr></table></figure><p>在Spring配置文件中使用标签  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.userName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="IOC操作Bean管理（基于注解方式）"><a href="#IOC操作Bean管理（基于注解方式）" class="headerlink" title="IOC操作Bean管理（基于注解方式）"></a>IOC操作Bean管理（基于注解方式）</h4><p>Spring针对Bean管理中创建对象提供的注解</p><ul><li>@Component    </li><li>@Service    业务逻辑层</li><li>@Controller     Web层</li><li>@Repository     Dao层        </li></ul><p>以上四个注解功能时一样的，都可以用来创建bean实例</p><h5 id="基于注解方式实现对象创建"><a href="#基于注解方式实现对象创建" class="headerlink" title="基于注解方式实现对象创建"></a>基于注解方式实现对象创建</h5><ol><li><p>引入依赖    <code>spring-aop.jar</code></p></li><li><p>开启组件扫描<br>使用context命名空间<br><code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code></p></li><li><p>创建类，在类上面添加相应的注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use-default-filters="false" 不适用默认的filter</span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">expression</span>=<span class="string">""</span>/&gt;</span> 设置扫描哪些内容</span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">expression</span>=<span class="string">""</span>/&gt;</span>设置哪些内容不进行扫描</span><br></pre></td></tr></table></figure></li></ol><h5 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h5><ul><li><p>@Autowired：根据属性类型进行自动装配<br>把service和dao对象创建，在service和dao实现类添加创建对象注解<br>在service注入dao对象，在service类添加dao类型属性，在属性上面使用注解</p></li><li><p>@Qualifier：根据属性名称进行注入</p><p>@Qualifier注解的使用和@Autowired一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(value = <span class="string">"userDaoImpl"</span>)   <span class="comment">// 根据名称进行注入</span></span><br></pre></td></tr></table></figure></li><li><p>@Resource：可以根据类型注入；可以根据名称注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>   <span class="comment">// 根据类型注入</span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"userDaoImpl"</span>) <span class="comment">// 根据名称注入</span></span><br></pre></td></tr></table></figure></li><li><p>@Value：注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(value = <span class="string">"Spring"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li></ul><h5 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h5><ol><li><p>创建配置类，替代xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.spring5"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    UserService us = ac.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    us.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="AOP（概念）"><a href="#AOP（概念）" class="headerlink" title="AOP（概念）"></a>AOP（概念）</h4><p>面向切面编程，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</p><p>不通过修改源代码方式，在主干功能里面添加新功能    </p><p>登录–权限判断模块</p><h4 id="AOP（底层原理）"><a href="#AOP（底层原理）" class="headerlink" title="AOP（底层原理）"></a>AOP（底层原理）</h4><p>AOP底层使用动态代理<br>两种情况动态代理</p><ul><li>有接口情况，使用JDK动态代理<br>创建接口实现类的代理对象，增强类的方法</li><li>没有接口情况，使用CGLIB动态代理<br>创建当前类子类的代理对象，增强类的方法    </li></ul><h5 id="AOP（JDK动态代理）"><a href="#AOP（JDK动态代理）" class="headerlink" title="AOP（JDK动态代理）"></a>AOP（JDK动态代理）</h5><p>使用Proxy类里面的方法创建代理对象</p><p>调用newProxyInstance()方法</p><ul><li>ClassLoader:类加载器</li><li>&lt;?&gt;[]interface:增强方法所在的类，这个类实现的接口，支持多接口</li><li>InvocationHandler:实现这个接口，创建代理对象，写增强的方法</li></ul><h4 id="AOP（术语）"><a href="#AOP（术语）" class="headerlink" title="AOP（术语）"></a>AOP（术语）</h4><p>连接点：类里面可以被增强的方法</p><p>切入点：实际被真正增强的方法</p><p>通知（增强）：实际增强的逻辑部分<br>通知有多种类型</p><ul><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知    </li></ul><p>切面：把通知应用到切入点过程        </p><h4 id="AOP操作（准备）"><a href="#AOP操作（准备）" class="headerlink" title="AOP操作（准备）"></a>AOP操作（准备）</h4><ol><li>Spring框架一般基于AspectJ实现AOP操作<br>AspectJ：独立的AOP框架</li><li>基于AspectJ实现AOP操作<ol><li>基于xml配置文件实现</li><li>基于注解方式实现</li></ol></li><li>在项目工程里面引入AOP相关依赖<br>cglib.jar<br>aopalliance.jar<br>weaver.jar<br>spring-aspects.jar</li><li>切入点表达式<br>切入点表达式作用：知道对哪个类里面的哪个方法进行增强<br>语法结构：<code>exexcution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))</code>            </li></ol><h4 id="AOP操作（AspectJ注解）"><a href="#AOP操作（AspectJ注解）" class="headerlink" title="AOP操作（AspectJ注解）"></a>AOP操作（AspectJ注解）</h4><ol><li>创建类，在类里面定义方法</li><li>创建增强类（编写增强逻辑）<br>在增强类里面创建方法，让不同方法待变不同通知类型</li><li>进行通知的配置<ol><li>在Spring配置文件中，开启注解扫描</li><li>使用注解创建User和UserProxy对象</li><li>在增强类上面添加注解@Aspect</li><li>在Spring配置文件中开启生成代理对象</li></ol></li><li>配置不同类型的通知<br>在增强类里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</li><li>相同切入点抽取</li><li>有多个增强类中在同一个方法增强，设置增强类的优先级<br>在增强类上面添加注解@Order(数字类型值)，数字类型值越小优先级越高</li></ol><h4 id="AOP操作（AspectJ配置文件）"><a href="#AOP操作（AspectJ配置文件）" class="headerlink" title="AOP操作（AspectJ配置文件）"></a>AOP操作（AspectJ配置文件）</h4><ol><li>创建两个类，增强类和被增强类，创建方法</li><li>在Spring配置文件中创建两个类对象</li><li>在Spring配置文件中配置切入点    </li></ol><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><h4 id="JdbcTemplate（概念和准备）"><a href="#JdbcTemplate（概念和准备）" class="headerlink" title="JdbcTemplate（概念和准备）"></a>JdbcTemplate（概念和准备）</h4><p>JdbcTemplate：Spring框架对JDBC进行封装，使用JDBCTemplate方便实行数据库操作</p><p>准备</p><ol><li>引入相关jar包<br>druid<br>mysql-connector<br>spring-jdbc<br>spring-tx<br>spring-orm</li><li>在Spring配置文件配置数据库连接池</li><li>配置JdbcTemplate对象，注入DataSource</li><li>创建service类，创建dao类，在service中注入dao对象，在dao中注入JdbcTemplate对象</li></ol><h4 id="JdbcTemplate操作数据库（添加）"><a href="#JdbcTemplate操作数据库（添加）" class="headerlink" title="JdbcTemplate操作数据库（添加）"></a>JdbcTemplate操作数据库（添加）</h4><ol><li>对应数据库创建实体类</li><li>编写service和dao<ol><li>在dao进行数据库添加操作</li><li>调用JdbcTemplate对象里面update(String sql,Object.. args)方法实现添加操作<ul><li>参数1：sql语句</li><li>参数2：可变参数，设置sql语句值</li></ul></li></ol></li><li>测试类</li></ol><h4 id="JdbcTemplate操作数据库（查询、修改、删除）"><a href="#JdbcTemplate操作数据库（查询、修改、删除）" class="headerlink" title="JdbcTemplate操作数据库（查询、修改、删除）"></a>JdbcTemplate操作数据库（查询、修改、删除）</h4><p>调用JdbcTemplate对象里面update(String sql,Object.. args)方法</p><h5 id="JdbcTemplate操作数据库（查询）"><a href="#JdbcTemplate操作数据库（查询）" class="headerlink" title="JdbcTemplate操作数据库（查询）"></a>JdbcTemplate操作数据库（查询）</h5><p>查询表里面有多少条记录，返回是某个值</p><p>使用JdbcTemplate对象里面selectForObject(String sql,Class<T> requiredType)方法实现查询操作</p><ul><li>参数1：sql语句</li><li>参数2：返回类型.class</li></ul><h5 id="JdbcTemplate操作数据库（查询返回对象）"><a href="#JdbcTemplate操作数据库（查询返回对象）" class="headerlink" title="JdbcTemplate操作数据库（查询返回对象）"></a>JdbcTemplate操作数据库（查询返回对象）</h5><p>查询表返回对象</p><p>使用JdbcTemplate对象里面selectForObject(String sql,RowMapper&lt;? extends Object&gt; rowMapper,Object ..args )方法实现查询操作</p><ul><li>参数1：sql语句</li><li>参数2：RowMapper,接口，返回不同的数据类型，使用这个接口的实现类完成数据封装</li><li>参数3：sql语句值</li></ul><h5 id="JdbcTemplate操作数据库（查询返回集合）"><a href="#JdbcTemplate操作数据库（查询返回集合）" class="headerlink" title="JdbcTemplate操作数据库（查询返回集合）"></a>JdbcTemplate操作数据库（查询返回集合）</h5><p>查询表返回集合</p><p>使用JdbcTemplate对象里面query(String sql,RowMapper&lt;? extends Object&gt; rowMapper,Object ..args )方法实现查询操作</p><ul><li>参数1：sql语句</li><li>参数2：RowMapper,接口，返回不同的数据类型，使用这个接口的实现类完成数据封装</li><li>参数3：sql语句值</li></ul><h5 id="JdbcTemplate操作数据库（批量添加）"><a href="#JdbcTemplate操作数据库（批量添加）" class="headerlink" title="JdbcTemplate操作数据库（批量添加）"></a>JdbcTemplate操作数据库（批量添加）</h5><p>批量操作：操作表里面多条记录</p><p>JdbcTemplate实现批量操作batchUpdate(String sql,List&lt;Object[]&gt; batchArgs)</p><ul><li>参数1：sql语句</li><li>参数2：List集合，添加多条记录数据</li></ul><h5 id="JdbcTemplate操作数据库（批量修删除）"><a href="#JdbcTemplate操作数据库（批量修删除）" class="headerlink" title="JdbcTemplate操作数据库（批量修删除）"></a>JdbcTemplate操作数据库（批量修删除）</h5><p>批量操作：操作表里面多条记录</p><p>JdbcTemplate实现批量操作batchUpdate(String sql,List&lt;Object[]&gt; batchArgs)</p><ul><li>参数1：sql语句</li><li>参数2：List集合，添加多条记录数据</li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果一个失败所有操作都失败</p><p>典型场景：银行转账</p><h5 id="事务四个特性（ACID）"><a href="#事务四个特性（ACID）" class="headerlink" title="事务四个特性（ACID）"></a>事务四个特性（ACID）</h5><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><h6 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h6><ol><li>创建数据库表，添加记录</li><li>创建service，搭建dao，完成对象创建和注入关系<br>service注入dao，在dao注入JdbcTemplate，在JdbcTemplate注入DataSource</li><li>在dao创建两个方法，多钱和少钱，在service创建方法（转账的方法），调用dao中的两个方法</li><li>在执行过程中出现异常时，数据会出错</li></ol><p>解决方法：使用事务</p><h6 id="事务操作过程"><a href="#事务操作过程" class="headerlink" title="事务操作过程"></a>事务操作过程</h6><ol><li>开启事务</li><li>进行业务操作</li><li>没有异常，提交事务</li><li>出现异常，事务回滚</li></ol><h5 id="事务操作（Spring事务管理介绍）"><a href="#事务操作（Spring事务管理介绍）" class="headerlink" title="事务操作（Spring事务管理介绍）"></a>事务操作（Spring事务管理介绍）</h5><ol><li>事务添加到Java EE三层结构里面Service层（业务逻辑层）</li><li>在Spring进行事务管理操作<br>编程式事务管理和声明式事务管理（使用）</li><li>声明式事务管理<ol><li>基于注解方法</li><li>基于xml配置文件方式</li></ol></li><li>在Spring进行声明式事务管理，底层使用AOP原理</li><li>SPring事务管理API<br>PlatformTransactionManager 接口–事务管理器，针对不同框架提供不同实现类</li></ol><h5 id="事务操作（注解声明式事务管理）"><a href="#事务操作（注解声明式事务管理）" class="headerlink" title="事务操作（注解声明式事务管理）"></a>事务操作（注解声明式事务管理）</h5><ol><li><p>在Spring配置文件配置事务管理器</p></li><li><p>在Spring配置文件中，开启事务注解</p><ol><li>在Spring配置文件中引入名称空间tx</li><li>开启事务注解</li></ol></li><li><p>在Service类上面（或者Service类方法上面）添加事务注解</p><p>@Transactional</p><ul><li>类：所有的方法都添加事务</li><li>方法：只为当前方法添加事务</li></ul></li></ol><h5 id="事务操作（注解声明式事务管理参数配置）"><a href="#事务操作（注解声明式事务管理参数配置）" class="headerlink" title="事务操作（注解声明式事务管理参数配置）"></a>事务操作（注解声明式事务管理参数配置）</h5><ol><li><p>在Service类上面添加注解@Transactional，注解参数配置</p></li><li><p>Propagation：事务传播行为<br>多事务方法（对数据库表数据进行变化的操作）进行调用</p><table><thead><tr><th>行为</th><th align="center">描述</th></tr></thead><tbody><tr><td>REQUIRED</td><td align="center">如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行</td></tr><tr><td>REQUIRED_NEW</td><td align="center">当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将它挂起</td></tr><tr><td>SUPPORTS</td><td align="center">如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中</td></tr><tr><td>NOT_SUPPORTS</td><td align="center">当前的方法不应该运行在事务中，如果有运行的事务，将它挂起</td></tr><tr><td>MANDATORY</td><td align="center">当前的方法必须运行在事物内部，如果没有正在运行的事务，就抛出异常</td></tr><tr><td>NEVER</td><td align="center">当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常</td></tr><tr><td>NESTED</td><td align="center">如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行</td></tr></tbody></table></li><li><p>Ioslation：事务隔离级别<br>事务有特性称为隔离性，多事务操作之间不会产生影响，不考虑隔离性产生很多问题<br>读问题：脏读、不可重复读、虚（幻）读</p><ol><li>脏读：一个未提交事务读取到另一个未提交事务的数据</li><li>不可重复读：一个未提交的事务读取到另一提交事务修改的数据</li><li>虚读：一个未提交事务读取到另一提交事务添加数据        </li></ol><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可读</th><th>虚读</th></tr></thead><tbody><tr><td>READ_UNCOMMITED（读未提交）</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ_COMMITTED（读已提交）</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE_READ（可重复读）</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE（串行化）</td><td>无</td><td>无</td><td>无</td></tr></tbody></table></li><li><p>TimeOut：超时时间</p><p>事务需要在一定时间内进行提交，如果不提交进行回滚<br>默认值是-1，设置时间以秒为单位进行计算</p></li><li><p>ReadOnly：是否只读<br>读：查询操作，写：添加修改删除操作</p><ol><li>默认值为false，表示可以查询，可以添加修改删除操作</li><li>设置为true，表示只能查询</li></ol></li><li><p>RollbcakFor：回滚<br>设置出现哪些异常进行事务回滚</p></li><li><p>NoRollbackFor：不回滚<br>设置出现哪些异常不进行事务回滚</p></li></ol><h5 id="事务操作（XML声明式事务管理）"><a href="#事务操作（XML声明式事务管理）" class="headerlink" title="事务操作（XML声明式事务管理）"></a>事务操作（XML声明式事务管理）</h5><p>在Spring配置文件中进行配置</p><ul><li>配置事务管理器</li><li>配置通知</li><li>配置切入点和切面</li></ul><h5 id="事务操作（完全注解声明式事务管理）"><a href="#事务操作（完全注解声明式事务管理）" class="headerlink" title="事务操作（完全注解声明式事务管理）"></a>事务操作（完全注解声明式事务管理）</h5><p>创建配置类，使用配置类代替</p><h3 id="Spring5框架新特性"><a href="#Spring5框架新特性" class="headerlink" title="Spring5框架新特性"></a>Spring5框架新特性</h3><ol><li><p>整个Spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除</p></li><li><p>Spring5框架自带了通用的日志封装<br>Spring5已经移除Log4jConfigListener，官方建议使用Log4j2<br>Spring5框架整合Log4j2</p><ol><li>引入jar包<br>log4j-api-2<br>log4j-core-2<br>log4j-slf4j-impl-2<br>slf4j-api</li><li>创建log4j2.xml</li></ol></li><li><p>Spring5框架核心容器支持@Nullable注解<br>@Nullable注解可以用在方法、属性、参数上，表示方法返回值可以为空，属性值可以为空，参数值可以为空</p></li><li><p>Spring5核心容器支持函数式风格GenericApplicationContext<br>注册对象</p></li><li><p>Spring5支持整合JUnit5</p><ul><li><p>整合JUnit4</p><ol><li>引入Spring相关针对测试依赖<br>spring-test</li><li>编写测试类<br>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(“classpath:.xml”)    </li></ol><p>注意：@Test导入的包为import org.junit.Test;</p></li><li><p>整合JUnit5</p><ol><li>引入JUnit的jar包</li><li>编写测试类<br>@ExtendWith(SpringExtension.class)<br>@ContextConfiguration(“classpath:.xml”)</li></ol><p>注意：@Test导入的包为import org.junit.jupiter.api.Test;</p></li><li><p>使用复合注解<br>@SpringJUnitConfig(locations=”classpath:.xml”)    </p></li></ul></li></ol><h4 id="Spring5框架新功能"><a href="#Spring5框架新功能" class="headerlink" title="Spring5框架新功能"></a>Spring5框架新功能</h4><h5 id="SpringWebFlux"><a href="#SpringWebFlux" class="headerlink" title="SpringWebFlux"></a>SpringWebFlux</h5><p>Spring5新添加的模块，用于web开发的，功能SpringMVC类似的，WebFlux使用当前比较流程响应式编程出现的框架</p><p>传统web框架，例如SpringMVC，基于Servlet容器</p><p>WebFlux是一种异步非阻塞的框架，异步非阻塞的框架只在Servlet3.1以后才支持，核心是基于Reactor的相关API实现的</p><h6 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h6><p>异步与同步–调用者，调用者发送请求，对方回应后就去做其他事情–同步，不等待回应就去做其他事情–异步</p><p>非阻塞与阻塞–被调用者，被调用者收到请求之后，收到请求任务之后才给出反馈–阻塞，收到请求后马上给出反馈再去做其他事情–非阻塞</p><h6 id="WebFlux特点"><a href="#WebFlux特点" class="headerlink" title="WebFlux特点"></a>WebFlux特点</h6><p>非阻塞式：在有限资源下，提高系统吞吐量和伸缩性，以Reactor为基础实现响应式编程</p><p>函数式编程：Spring5框架基于Java8，webFlux使用Java8函数式编程方式实现路由请求</p><p>比较SpringMVC</p><ul><li>都可以使用注解方式，运行在Tomcat等容器中</li><li>SpringMVC采用命令式编程，WebFlux采用异步响应式编程</li></ul><p><img data-src="https://gitee.com/zyy92/Pictures/raw/master/Spring/WebFlux%E5%AF%B9%E6%AF%94SpringMVC.png" alt="WebFlux对比SpringMVC"></p><h5 id="响应式编程ReactiveProgramming"><a href="#响应式编程ReactiveProgramming" class="headerlink" title="响应式编程ReactiveProgramming"></a>响应式编程ReactiveProgramming</h5><p>响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。</p><p>Java8及其之前版本<br>提供的观察者模式两个类Observer和Observable    –伪响应式编程</p><p>Flow：Publisher、Subscriber</p><h6 id="响应式编程Reactor实现"><a href="#响应式编程Reactor实现" class="headerlink" title="响应式编程Reactor实现"></a>响应式编程Reactor实现</h6><ol><li><p>响应式编程操作中，满足Reactive规范框架</p></li><li><p>Mono和Flux两个类都实现了接口Publisher，提供丰富操作符</p><ol><li>Flux对象实现发布者，返回N个元素</li><li>Mono实现发布者，返回0或1个元素</li></ol></li><li><p>Flux和Mono都是数据流的发布者，使用Flux和Mono都可以发出三种数据信号<br>元素值、错误信号、完成信号<br>错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束<br>错误信号终止数据流同时把错误信息传递给订阅者</p></li><li><p>代码演示<br>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>三种信号特点</p><ol><li>错误信号和完成信号都是终止信号，不能共存</li><li>如果没有发送任何元素值，而是直接发送错误信号或者完成信号，表示是空数据流</li><li>如果没有错误信号，没有完成信号，表示是无限数据流</li></ol></li><li><p>调用just或者其他方法只是声明数据流，数据流并没有发出，只有进行订阅之后才会触发数据流，不订阅什么都不会发生的<br>subscribe()</p></li><li><p>操作符<br>对数据流进行一道道操作，称为操作符</p><ul><li>map    元素映射为新元素</li><li>flatMap 元素映射为流<br>把每个元素转换成流，把转换后的多个流合成更大的流    </li></ul></li></ol><h5 id="WebFlux执行流程和核心API"><a href="#WebFlux执行流程和核心API" class="headerlink" title="WebFlux执行流程和核心API"></a>WebFlux执行流程和核心API</h5><p>SpringWebFlux基于Reactor，默认容器是Netty，Netty是高性能的NIO框架，异步非阻塞的框架</p><ul><li><p>Netty</p><ul><li>BIO：Blocking I/O</li><li>NIO：Non-Blocking I/O</li></ul></li><li><p>SpringWebFlux执行过程和SpringMVC相似<br>SpringWebFlux核心控制器 DispatchHandler，实现接口WebHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebHandler</span> </span>&#123;</span><br><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SpringWebFlux里面DispatchHandler，负责请求的处理</p><ul><li>HandlerMapping：请求查询到处理的方法</li><li>HandlerAdapter：真正负责请求处理</li><li>HandlerResultHandler：响应结果处理</li></ul></li><li><p>SpringWebFlux实现函数式编程，两个接口：RouterFunction（路由处理）,HandlerFunction（处理函数）</p></li></ul><h5 id="SpringWebFlux（基于注解编程模型）"><a href="#SpringWebFlux（基于注解编程模型）" class="headerlink" title="SpringWebFlux（基于注解编程模型）"></a>SpringWebFlux（基于注解编程模型）</h5><p>只需要把相关依赖配置到项目中，SpringBoot自动配置相关运行容器，默认情况下使用Netty容器</p><p>举例：SpringBoot    2.2.1.RELEASE</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置启动端口号</p><p>创建相关包和类service、controller</p><p>说明：</p><ul><li>SpringMVC方式实现，同步阻塞的方式，基于SpringMVC+Servlet+Tomcat</li><li>SpringWebFlux方式实现，异步非阻塞方式，基于SpringWebFlux+Reactor+Netty</li></ul><h5 id="SpringWebFlux（基于函数式编程模型）"><a href="#SpringWebFlux（基于函数式编程模型）" class="headerlink" title="SpringWebFlux（基于函数式编程模型）"></a>SpringWebFlux（基于函数式编程模型）</h5><ul><li><p>在使用函数式编程模型操作时，需要自己初始化服务器</p></li><li><p>基于函数式编程模型，两个核心接口：</p><ul><li>RouterFunction：实现路由功能，请求转发给对应的handler</li><li>HandlerFunction：处理请求生成响应的函数</li></ul><p>核心任务定义两个函数式接口的实现并且启动需要的服务器</p></li><li><p>SpringWebFlux请求和响应不再是ServletRequest和ServletResponse，而是ServerRequest和ServerResponose</p></li></ul><h5 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h5><ol><li>配置项目</li><li>创建相关包和类service</li><li>创建Handler</li><li>初始化服务器，编写Router</li><li>创建服务器完成适配</li><li>普通调用或使用WebClient调用</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring框架概述&quot;&gt;&lt;a href=&quot;#Spring框架概述&quot; class=&quot;headerlink&quot; title=&quot;Spring框架概述&quot;&gt;&lt;/a&gt;Spring框架概述&lt;/h3&gt;&lt;p&gt;1、Spring是轻量级的开源JavaEE框架&lt;br&gt;2、Spring可以解决企业级应用开发的复杂性&lt;br&gt;3、Spring的两个核心部分：IOC和Aop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IOC：控制反转，把创建对象过程交给Spring管理&lt;/li&gt;
&lt;li&gt;Aop：面向切面编程，不修改源代码进行功能增强&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、Spring特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便解耦，简化开发&lt;/li&gt;
&lt;li&gt;Aop编程支持&lt;/li&gt;
&lt;li&gt;方便程序测试&lt;/li&gt;
&lt;li&gt;方便和其他框架进行整合&lt;/li&gt;
&lt;li&gt;方便进行事务操作&lt;/li&gt;
&lt;li&gt;降低API开发难度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5、Spring5&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/zyy92/Pictures/raw/master/Spring/SpringFrame.png&quot; alt=&quot;SpringFramework&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring" scheme="https://lao-biao.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java--AOP编程</title>
    <link href="https://lao-biao.github.io/articles/d97d56d4.html"/>
    <id>https://lao-biao.github.io/articles/d97d56d4.html</id>
    <published>2020-06-04T07:44:45.000Z</published>
    <updated>2020-07-06T03:36:58.614Z</updated>
    
    <content type="html"><![CDATA[<h5 id="AOP编程"><a href="#AOP编程" class="headerlink" title="AOP编程"></a>AOP编程</h5><p>AOP：Aspect Oriented Programming</p><p>面向切面编程 vs 面向对象编程 (Object Oriented Programming)</p><ul><li>面向对象(OOP)：将需求功能划分为不同的、独立，封装良好的类，并让它们通过继承和多态实现相同和不同行为。</li><li>面向切面：将通用需求功能从众多类中分离出来，使得很多类共享一个 行为，一旦发生变化，不必修改很多类，而只需要修改这个行为即可</li></ul><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ul><li>分离代码的耦合(高内聚，低耦合)</li><li>业务逻辑变化不需要修改源代码/不用重启</li><li>加快编程和测试速度</li><li>AOP编程是一个概念/规范，没有限定语言</li><li>不是取代OOP编程，而是OOP的补充，和数据库的触发器有点相似</li></ul><h6 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h6><ul><li>Aspect ：配置文件，包括一些Pointcut和相应的Advice</li><li>Joint point：在程序中明确定义的点，如方法调用、对类成员访问等</li><li>Pointcut：一组joint point, 可以通过逻辑关系/通配符/正则等组合起来，定义了相应advice将要发生的地方</li><li>Advice：定义了在pointcut处要发生的动作,通过before/after/around/来关联</li><li>weaving：advice代码在具体joint point的关联方式</li></ul><h6 id="Java的AOP实现"><a href="#Java的AOP实现" class="headerlink" title="Java的AOP实现"></a>Java的AOP实现</h6><ul><li>AspectJ(Eclipse)， <a href="https://www.eclipse.org/aspectj/" target="_blank" rel="noopener">https://www.eclipse.org/aspectj/</a></li><li>Spring AOP，<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></li><li>Spring AOP 与 AspectJ 比较：<a href="https://www.baeldung.com/spring-aop-vs-aspectj" target="_blank" rel="noopener">https://www.baeldung.com/spring-aop-vs-aspectj</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;AOP编程&quot;&gt;&lt;a href=&quot;#AOP编程&quot; class=&quot;headerlink&quot; title=&quot;AOP编程&quot;&gt;&lt;/a&gt;AOP编程&lt;/h5&gt;&lt;p&gt;AOP：Aspect Oriented Programming&lt;/p&gt;
&lt;p&gt;面向切面编程 vs 面向对象编程 (O
      
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="aop" scheme="https://lao-biao.github.io/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>Java--反射</title>
    <link href="https://lao-biao.github.io/articles/87b8a7bb.html"/>
    <id>https://lao-biao.github.io/articles/87b8a7bb.html</id>
    <published>2020-05-31T14:01:42.000Z</published>
    <updated>2020-07-06T03:37:26.233Z</updated>
    
    <content type="html"><![CDATA[<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>reflection</p><ul><li>程序可以访问、检测和修改它本身状态或行为的能力，即自描述和自控制。</li><li>可以在运行时加载、探知和使用编译期间完全未知的类。</li><li>给Java插上动态语言特性的翅膀，弥补强类型语言的不足。</li><li><code>java.lang.reflect</code>包，在Java 2就有，在Java 5得到完善</li></ul><p>功能</p><ul><li>在运行中分析类的能力</li><li>在运行中查看和操作对象<ul><li>基于反射自由创建对象</li><li>反射构建出无法直接访问的类</li><li>set或者get到无法访问的成员变量</li><li>调用不可访问的方法</li></ul></li><li>实现通用的数组操作代码</li><li>类似函数指针的功能</li></ul><a id="more"></a><h5 id="五种创建对象的方式"><a href="#五种创建对象的方式" class="headerlink" title="五种创建对象的方式"></a>五种创建对象的方式</h5><h6 id="1-静态编码和编译"><a href="#1-静态编码和编译" class="headerlink" title="1.静态编码和编译"></a>1.静态编码和编译</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from A."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接new 调用构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A obj1 = <span class="keyword">new</span> A();</span><br><span class="line">obj1.hello();</span><br></pre></td></tr></table></figure><p>2.克隆(clone)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from B."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用克隆的方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B obj2 =<span class="keyword">new</span> B();</span><br><span class="line">obj2.hello();</span><br><span class="line"></span><br><span class="line">B obj3=(B) obj2.clone();</span><br><span class="line">obj3.hello();</span><br></pre></td></tr></table></figure><h6 id="3-序列化-serialization-和反序列化-deserialization"><a href="#3-序列化-serialization-和反序列化-deserialization" class="headerlink" title="3.序列化(serialization)和反序列化(deserialization)"></a>3.序列化(serialization)和反序列化(deserialization)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;  <span class="comment">// 序列化id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from C."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用 transient 关键字可以使变量不被序列化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C obj4 = <span class="keyword">new</span> C();</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"data.obj"</span>));</span><br><span class="line">out.writeObject(obj4);</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"data.obj"</span>));</span><br><span class="line">C obj5 = (C) in.readObject();</span><br><span class="line">in.close();</span><br><span class="line">obj5.hello();</span><br></pre></td></tr></table></figure><blockquote><p>注意：序列化会引发安全漏洞，未来将被移除出JDK</p></blockquote><h6 id="4-5-反射"><a href="#4-5-反射" class="headerlink" title="4.5.反射"></a>4.5.反射</h6><blockquote><p>第四种 通过Class.forName(String className).newInstance();动态获取实例</p><p>注意：className 需要加上包名，否则会报 java.lang.ClassNotFoundException 的异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object obj6 = Class.forName(<span class="string">"com.reflection.A"</span>).newInstance();</span><br><span class="line"><span class="comment">// A obj7 = (A) Class.forName("A").newInstance();</span></span><br><span class="line">Method m = Class.forName(<span class="string">"com.reflection.A"</span>).getMethod(<span class="string">"hello"</span>);</span><br><span class="line">m.invoke(obj6);</span><br></pre></td></tr></table></figure><blockquote><p>第五种    newInstance 调用构造函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;A&gt; constructor = A<span class="class">.<span class="keyword">class</span>.<span class="title">getConstructor</span>()</span>;</span><br><span class="line">A obj8 = constructor.newInstance();</span><br><span class="line">obj8.hello();</span><br></pre></td></tr></table></figure><h5 id="反射关键类"><a href="#反射关键类" class="headerlink" title="反射关键类"></a>反射关键类</h5><p>Class：类型标识</p><ul><li><p>JVM为每个对象都保留其类型标识信息(Runtime Type Identification)</p><p>三种获取方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s1=<span class="string">"abc"</span>;</span><br><span class="line">Class c1=s1.getClass();</span><br><span class="line">System.out.println(c1.getName());</span><br><span class="line"></span><br><span class="line">Class c2=Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">System.out.println(c2.getName());</span><br><span class="line"></span><br><span class="line">Class c3=String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">System.out.println(c3.getName());</span><br></pre></td></tr></table></figure></li><li><p>成员变量、方法、构造函数、修饰符、包、父类、父接口…</p><ul><li><p>成员变量 Field<br>getFields() 获取本类及父类所有的public字段</p><p>getDeclaredFields()  获取本类所有声明的字段</p></li><li><p>成员方法 Method<br>getMethods() 获取public方法，包括父类和父接口<br>getDeclaredMethod() 获取该类所有的方法</p></li><li><p>构造函数 Constructor</p><p>[Class.]getConstructors() 获取本类的所有构造函数</p><p>[Constructor.]newInstance(Object …args) 有参和无参构造函数</p></li><li><p>父类/父接口</p><p>[Class.]getSuperClass() 获取父类<br>[Class.]getInterfaces() 获取父接口</p></li></ul></li></ul><h5 id="反射的应用"><a href="#反射的应用" class="headerlink" title="反射的应用"></a>反射的应用</h5><ul><li>数据库连接</li><li>数组扩充器 </li><li>动态执行方法</li><li>Json和Java对象互转</li><li>Tomcat的Servlet对象创建</li><li>MyBatis的OR/M</li><li>Spring的Bean容器</li><li>org.reflections包介绍</li></ul><h6 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h6><p>JDBC：Connection，连接到不同数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建Java和数据库之间的桥梁介质</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">// Class.forName(className,true,currentLoader);</span></span><br><span class="line">    <span class="comment">// 通知类加载器加载此类的class文件</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建Java和数库之间的桥梁：URL，用户名，密码</span></span><br><span class="line">Connection conn = DriverManager.getConnection(url, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">// DriverManager将会挑选加载合适的驱动类，并采用getConnection()方法连接</span></span><br></pre></td></tr></table></figure><h6 id="数组扩充"><a href="#数组扩充" class="headerlink" title="数组扩充"></a>数组扩充</h6><p>给定一个数组(任意类型)，扩充指定到长度</p><ul><li>Java的数组一旦创建，其长度是不再更改的</li><li>新建一个大数组(相同类型)，然后将旧数组的内容拷贝过去</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">arrCopy</span><span class="params">(Object oldArray, <span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Array类型</span></span><br><span class="line">    Class clazz = oldArray.getClass();</span><br><span class="line">    <span class="comment">// 获取数组中的单个元素类型</span></span><br><span class="line">    Class componentType = clazz.getComponentType();</span><br><span class="line">    <span class="comment">// 旧数组长度</span></span><br><span class="line">    <span class="keyword">int</span> oldLength = Array.getLength(oldArray);</span><br><span class="line">    <span class="comment">// 创建新数组</span></span><br><span class="line">    Object newArray = Array.newInstance(componentType, newLength);</span><br><span class="line">    <span class="comment">// 拷贝旧数据</span></span><br><span class="line">    System.arraycopy(newArray, <span class="number">0</span>, oldArray, <span class="number">0</span>, oldLength);</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="动态执行方法"><a href="#动态执行方法" class="headerlink" title="动态执行方法"></a>动态执行方法</h6><p>给定类名，方法名，即可执行</p><p>加上定时器，即可做定时任务执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Method m= Class.forName(packageName+<span class="string">"Work"</span>).getMethod(<span class="string">"hello"</span>);</span><br><span class="line">            m.invoke(<span class="keyword">null</span>);<span class="comment">// 静态方法可以不用new对象</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Timer timer=<span class="keyword">new</span> Timer();</span><br><span class="line">Calendar now=Calendar.getInstance();</span><br><span class="line">now.set(Calendar.SECOND,now.get(Calendar.SECOND)+<span class="number">1</span>);</span><br><span class="line">Date runDate=now.getTime();</span><br><span class="line">MyTask task=<span class="keyword">new</span> Task();</span><br><span class="line">timer.scheduleAtFixedRate(task,runDate,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h6 id="Json和Java对象互转"><a href="#Json和Java对象互转" class="headerlink" title="Json和Java对象互转"></a>Json和Java对象互转</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line"><span class="comment">// json 字符串转bean对象</span></span><br><span class="line">String s; <span class="comment">// 待转换的json字符串</span></span><br><span class="line">[Bean] json=gson.fromJson(s,[Bean.class]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// json bean对象转字符串</span></span><br><span class="line">Bean bean;</span><br><span class="line">String t=gson.toJson(bean,[Bean.class]);</span><br></pre></td></tr></table></figure><h6 id="Tomcat的Servlet创建"><a href="#Tomcat的Servlet创建" class="headerlink" title="Tomcat的Servlet创建"></a>Tomcat的Servlet创建</h6><p>详见源码</p><h6 id="MyBatis的OR-M"><a href="#MyBatis的OR-M" class="headerlink" title="MyBatis的OR/M"></a>MyBatis的OR/M</h6><p>MyBatis: OR/M(Object-Relation Mapping)<br>数据库表和Java的POJO/DAO类对应关系</p><h6 id="Spring-Framework的Bean容器"><a href="#Spring-Framework的Bean容器" class="headerlink" title="Spring Framework的Bean容器"></a>Spring Framework的Bean容器</h6><p>Spring Framework: Java EE的主要框架<br>IoC 的Bean容器(HashMap)</p><h6 id="org-reflections"><a href="#org-reflections" class="headerlink" title="org.reflections"></a>org.reflections</h6><p>Reflection的增强工具包</p><ul><li><a href="https://github.com/ronmamo/reflections" target="_blank" rel="noopener">https://github.com/ronmamo/reflections</a> </li><li>Java runtime metadata analysis Java运行时元数据分析<ul><li>获取某类的所有子类型</li><li>获取有特殊annotation的类型或者成员变量/方法</li><li>根据正则表达式获取资源(类/成员变量/方法)</li><li>根据组合条件查询相应的方法</li></ul></li></ul><h5 id="编译器API"><a href="#编译器API" class="headerlink" title="编译器API"></a>编译器API</h5><p>反射</p><ul><li>可以查看对象的类型标识</li><li>可以动态创建对象、访问其属性，调用其方法</li><li><font color="red">前提：类(class文件)必须先存在</font></li></ul><p>编译器API</p><ul><li>对.java文件即时编译</li><li>对字符串即时编译</li><li>监听在编译过程中产生的警告和错误</li><li>在代码中运行编译器(并非：Runtime命令行调用javac命令)</li></ul><h6 id="JavaCompiler"><a href="#JavaCompiler" class="headerlink" title="JavaCompiler"></a>JavaCompiler</h6><ul><li>自Java 1.6 推出，位于<code>javax.tools</code>包中。</li><li>可用在程序文件中的Java编译器接口(代替javac.exe)。</li><li>在程序中编译java文件，产生class文件。</li><li>run方法(继承自<code>java.tools.Tools</code>)：可以编译java源文件，生成class文件，但不能指定输出路径,监控错误信息, 调用后就在源码所在目录生成class文件。</li><li>getTask方法：可以编译java源文件，包括在内存中的java文件(字符串)，生成class文件。</li></ul><h6 id="Java编译器API作用"><a href="#Java编译器API作用" class="headerlink" title="Java编译器API作用"></a>Java编译器API作用</h6><ul><li>Java EE的JSP编译</li><li>在线编程环境</li><li>在线程序评判系统(Online Judge系统)</li><li>自动化的构建和测试工具</li></ul><h6 id="基于JavaCompiler的集成工具"><a href="#基于JavaCompiler的集成工具" class="headerlink" title="基于JavaCompiler的集成工具"></a>基于JavaCompiler的集成工具</h6><ul><li><font color="red">Janino</font>，<a href="http://janino-compiler.github.io/janino" target="_blank" rel="noopener">http://janino-compiler.github.io/janino</a></li><li>InMemoryJavaCompile， <a href="https://github.com/trung/InMemoryJavaCompiler" target="_blank" rel="noopener">https://github.com/trung/InMemoryJavaCompiler</a></li><li>Java-Runtime-Compiler, <a href="https://github.com/OpenHFT/JavaRuntime-Compiler" target="_blank" rel="noopener">https://github.com/OpenHFT/JavaRuntime-Compiler</a></li><li>Apache Commons JCI(Java Compiler Interface), <a href="http://commons.apache.org/proper/commons-jci/index.html" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-jci/index.html</a>，<font color="red">适用于JDK1.5及以前的版本</font></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h4&gt;&lt;p&gt;reflection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序可以访问、检测和修改它本身状态或行为的能力，即自描述和自控制。&lt;/li&gt;
&lt;li&gt;可以在运行时加载、探知和使用编译期间完全未知的类。&lt;/li&gt;
&lt;li&gt;给Java插上动态语言特性的翅膀，弥补强类型语言的不足。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.lang.reflect&lt;/code&gt;包，在Java 2就有，在Java 5得到完善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在运行中分析类的能力&lt;/li&gt;
&lt;li&gt;在运行中查看和操作对象&lt;ul&gt;
&lt;li&gt;基于反射自由创建对象&lt;/li&gt;
&lt;li&gt;反射构建出无法直接访问的类&lt;/li&gt;
&lt;li&gt;set或者get到无法访问的成员变量&lt;/li&gt;
&lt;li&gt;调用不可访问的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现通用的数组操作代码&lt;/li&gt;
&lt;li&gt;类似函数指针的功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="反射" scheme="https://lao-biao.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java--泛型</title>
    <link href="https://lao-biao.github.io/articles/8b379c6c.html"/>
    <id>https://lao-biao.github.io/articles/8b379c6c.html</id>
    <published>2020-05-29T11:38:50.000Z</published>
    <updated>2020-07-06T03:37:32.491Z</updated>
    
    <content type="html"><![CDATA[<h6 id="泛型引入"><a href="#泛型引入" class="headerlink" title="泛型引入"></a>泛型引入</h6><p>集合：存放多个不同类型对象，容易出现转型错误 <code>ClassCastException</code></p><p>泛型：Generic Programming JDK1.5推出的特性</p><p>编写的代码可以被很多不同类型的对象所重用</p><p><code>List &lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p><p><code>List &lt;String&gt; list = new ArrayList&lt;&gt;();</code>Java 7菱形语法</p><ul><li>泛型类：<code>ArrayList</code>，<code>HashSet</code>，<code>HashMap</code>等</li><li>泛型方法：<code>Collections.binarySearch()</code>，<code>Arrays.sort()</code>等</li><li>泛型接口：<code>List</code>，<code>Iterator</code>等</li></ul><p>泛型的本质：参数化类型，避免类型转换，代码可复用</p><p>同类：</p><ul><li>C++的模板(Template)</li><li>C#的泛型</li></ul><p>ArrayList源码</p><p><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);<span class="comment">//检查是否越界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);<span class="comment">//返回对应的元素值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="自定义泛型设计"><a href="#自定义泛型设计" class="headerlink" title="自定义泛型设计"></a>自定义泛型设计</h6><p>泛型类</p><ul><li>具有泛型变量的类</li><li>在类名后用代表引入类型<ul><li>多个字母表示多个引入类型<br>如<code>&lt;T,U&gt;</code>等 </li><li>引入类型可以修饰成员变量 /局部变量/参数/返回值</li><li>没有专门的<code>template</code>关键字</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T lower;</span><br><span class="line">    <span class="keyword">private</span> T upper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Interval</span><span class="params">(T lower, T upper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lower = lower;</span><br><span class="line">        <span class="keyword">this</span>.upper = upper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lower;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型类调用</p><ul><li><p>传入具体的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Interval&lt;Integer\&gt; v1 = <span class="keyword">new</span> Interval&lt;Integer\&gt;(<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line">Interval&lt;Integer\&gt; v1 = <span class="keyword">new</span> Interval&lt;\&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul><p>泛型方法</p><ul><li>具有泛型参数的方法</li><li>该方法可在普通类/泛型类中</li><li><code>&lt;T&gt;</code>在修饰符后，返回类型前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getMiddle</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a == <span class="keyword">null</span> ? <span class="keyword">null</span> : a[a.length / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型接口</p><ul><li>和泛型类相似，在类名后加<code>&lt;T&gt;</code></li><li>T用来指定方法返回值和参数</li><li>实现接口时，指定类型</li><li>T也可以再是一个泛型类，可嵌套</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">add</span><span class="params">(T t1, T t2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结</p><ul><li>泛型类：整个类都被泛化，包括变量和方法</li><li>泛型方法：方法被泛化，包括返回值和参数</li><li>泛型接口：泛化子类方法</li></ul><h6 id="泛型类型限定"><a href="#泛型类型限定" class="headerlink" title="泛型类型限定"></a>泛型类型限定</h6><p>泛型</p><ul><li>编写的代码可以被很多不同类型的对象所重用</li><li>特定场合下，需要对类型进行限定(使用某些特定方法)</li></ul><p>泛型限定</p><ul><li><code>&lt;T extends Comparable&gt;</code>约定T必须是Comparable的子类</li><li>extends固定，后面可以多个，以&amp;拼接，如<code>&lt;T extends Comparable &amp; Serializable&gt;</code></li><li>extends限定可以有多个接口，但只能一个类，且类必须排第一位 –逗号隔参数，如<code>&lt;T extends File &amp;Cloneable, U extends Serializable&gt;</code></li></ul><p>泛型类之间的继承</p><ul><li><code>Pair&lt;S&gt;</code>和<code>Pair&lt;T&gt;</code>没有任何关系，无论S和T之间是什么关系</li><li>泛型类可以扩展或实现其他的类，如<code>ArrayList&lt;T&gt; implemetsList&lt;T&gt;</code></li></ul><hr><p>上限界定符</p><p>Pair&lt;? extends S&gt;</p><p>Pair能接收的参数类型，是S自身或子类</p><p>eg <code>Pair&lt;? extends Fruit&gt;</code>代表<code>Pair&lt;Fruit&gt;</code>, <code>Pair&lt;Apple&gt;</code>, <code>Pair&lt;ornage&gt;</code> 等</p><blockquote><p>Apple extends Fruit<br>Orange extends Fruit</p></blockquote><p><font color="red">只能get/不能set，编译器只能保证出来的类型，但不保证放入的 对象是什么类型</font></p><p><code>? extends Fruit getFirst();</code>    //肯定可以转型到Fruit</p><p><code>void setFirst(? extend Fruit)</code> //未知具体的类型[错误]</p><hr><p>下限界定符</p><p>Pair&lt;？super S&gt;</p><p>Pair能接收的类型参数，是S的自身或超类</p><p>eg <code>Pair&lt;? super Apple&gt;</code> 代表 <code>Pair&lt;Object&gt;</code>,<code>Pair&lt;Fruit&gt;</code>,<code>Pair&lt;Apple&gt;</code>等</p><p><font color="red">只能set/不能get，编译器保证放入的是S本身或超类，但不保证 出来是什么具体类型</font></p><p>void setFirst(? super Apple)    //可以放入Apple及子类对象</p><p>? super Apple getFirst()            //无法得知出来的对象类型，只能是Object</p><hr><p>泛型PECS原则</p><ul><li>Producer Extends, Consumer Super</li><li>要从泛型类读取类型T的数据，并且不能写入，可以使用 ? extends 通配符；(Producer Extends，泛型类是生产者，往外输出 东西)</li><li>如果要向泛型类写入类型T的数据，并且不需要读取，可以使用 ? super 通配符；(Consumer Super，泛型类是消费者，往内增加东西)</li><li>如果既想写入又想读出，那就不用通配符</li></ul><hr><p>无限定类型的泛型</p><ul><li><code>Pair&lt;T&gt;</code>，原始类型</li><li><code>Pair&lt;?&gt;</code> ，无限定通配符，表示任意类型<ul><li>如<code>Pair&lt;Obejct&gt;</code>, <code>Pair&lt;Apple&gt;</code>, <code>Pair&lt;Orange&gt;</code></li><li>? getFirst() //不确定出来是什么类型，只能赋值给Object</li><li>void setFirst() //无法放入任何对象，甚至是Object</li></ul></li></ul><h6 id="泛型实现的本质和约束"><a href="#泛型实现的本质和约束" class="headerlink" title="泛型实现的本质和约束"></a>泛型实现的本质和约束</h6><p>JDK的版本是向后兼容的:即低版本的class文件可以在高版本的JDK上运行<br>因此，JVM里面没有泛型对象，而是采用<font color="red">类型擦除</font>技术， 只有普通的类和方法</p><p>类型擦除</p><ul><li><p>擦除泛型变量，替换为原始类型(raw type)，无限定为Object</p></li><li><p>擦除泛型变量，替换为原始类型(raw type)，有限定则为第 一个类型</p></li><li><p>擦除泛型变量后，为了保证类型的安全性，需要自动进行类型转换</p><p>泛型表达式翻译</p><p><code>Fruit f=fruits.getFirst();</code><br><code>Object o=fruits.getFirst();</code> <code>Fruit f=(Fruit) o;</code></p></li><li><p>擦除泛型变量后，为了保证类型的安全性，需要自动进行 类型转换</p></li><li><p>重载泛型方法翻译(自动桥方法)</p></li></ul><p>泛型的约束</p><ul><li>不能用基本类型(8种)来实例化泛型</li><li>运行时类型查询只适用于原始类型</li><li>不能创建参数化类型的数组</li><li>可变参数警告</li><li>不能实例化类型变量</li><li>不能构造泛型数组</li><li>泛型类的静态上下文中类型变量无效</li><li>不能抛出或捕获泛型类的异常实例</li><li>可以消除对受查异常(checked exception)的检查</li><li>类型擦除后引发的方法冲突</li></ul><h6 id="Java类型协变和逆变"><a href="#Java类型协变和逆变" class="headerlink" title="Java类型协变和逆变"></a>Java类型协变和逆变</h6><p>面向对象语言，支持子类型(Subtyping) </p><ul><li><p>类型变化关系(type variance)</p><p>更复杂类型中的子类型关系，与子类型之间的关系相关联。</p></li></ul><p>Type Variance形式化定义: </p><ul><li>A、B是类型，f(·)表示类型转换，≤表示继承关系，如A ≤ B， 表示A继承于B</li><li>f(·)是<font color="red">协变(covariant)</font>的，如果A ≤ B，有f(A) ≤f(B)</li><li>f(·)是<font color="red">逆变(contravariant)</font>的，如果A ≤ B，有f(B) ≤f(A)</li><li>f(·)是<font color="red">不变(invariant)</font>的，当上述两种都不成立，即f(A)和f(B)没有关系 </li><li>f(·)是<font color="red">双变(bivariant)</font>的，如果A ≤ B，有f(B) ≤f(A) 和f(A) ≤f(B) 同时成立</li></ul><hr><p>Java数组是协变的</p><p>String是Object的子类，<code>String[]</code>是<code>Object[]</code>的子类</p><hr><p>Java的(原始的)泛型是不变的</p><p>String是Object的子类，<code>List&lt;String&gt;</code>和<code>List&lt;Object&gt;</code>没有关系</p><hr><p>泛型可采用通配符，支持协变和逆变(PECS原则)</p><p>假设 B是A的子类</p><p><code>ArrayList&lt;? extends A&gt; list3 = new ArrayList&lt;B&gt;();</code>  协变<br><code>ArrayList&lt;? super B&gt; list4 = new ArrayList&lt;A&gt;();</code>  逆变</p><hr><p>复合情况：数组协变，泛型不变</p><p>假设 B是A的子类，C是B的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testArrayAndList</span><span class="params">()</span></span>&#123;</span><br><span class="line">B[] r1=test(<span class="keyword">new</span> ArrayList&lt;B&gt;();<span class="comment">// 编译错误</span></span><br><span class="line">A[] r2=test(<span class="keyword">new</span> ArrayList&lt;B&gt;();<span class="comment">// 编译错误</span></span><br><span class="line">Object[] r3=test(<span class="keyword">new</span> ArrayList&lt;Object&gt;());<span class="comment">// 编译错误</span></span><br><span class="line"></span><br><span class="line">A[] r4=test(<span class="keyword">new</span> ArrayList&lt;A&gt;());</span><br><span class="line">Object[] r5=test(<span class="keyword">new</span> ArrayList&lt;A&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> A[] test(ArratList&lt;A&gt; list)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> A[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>方法情况</p><ul><li>JDK 1.4 重写的方法参数和返回值要求一样</li><li>JDK 1.5 +重写的方法，参数要求一样的，返回值是协变的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">f1</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Father.f1()"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">f1</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line"><span class="comment">//public C f1(B obj)&#123;&#125;返回值是C，也是对的</span></span><br><span class="line">System.out.println(<span class="string">"Son.f1()"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">Father foo=<span class="keyword">new</span> Son();</span><br><span class="line">foo.f1(<span class="keyword">new</span> B());</span><br></pre></td></tr></table></figure><hr><p>总结Java类型变化(type variance)</p><ul><li>数组是协变的(covariant)</li><li>原始的泛型是不变的(invariant)</li><li><code>&lt;? extends A&gt;</code>支持协变(covariant)</li><li><code>&lt;? super B&gt;</code>支持逆变(contravariant)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;泛型引入&quot;&gt;&lt;a href=&quot;#泛型引入&quot; class=&quot;headerlink&quot; title=&quot;泛型引入&quot;&gt;&lt;/a&gt;泛型引入&lt;/h6&gt;&lt;p&gt;集合：存放多个不同类型对象，容易出现转型错误 &lt;code&gt;ClassCastException&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;泛型：Generic Programming JDK1.5推出的特性&lt;/p&gt;
&lt;p&gt;编写的代码可以被很多不同类型的对象所重用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List &amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List &amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&lt;/code&gt;Java 7菱形语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;泛型类：&lt;code&gt;ArrayList&lt;/code&gt;，&lt;code&gt;HashSet&lt;/code&gt;，&lt;code&gt;HashMap&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;泛型方法：&lt;code&gt;Collections.binarySearch()&lt;/code&gt;，&lt;code&gt;Arrays.sort()&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;泛型接口：&lt;code&gt;List&lt;/code&gt;，&lt;code&gt;Iterator&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;泛型的本质：参数化类型，避免类型转换，代码可复用&lt;/p&gt;
&lt;p&gt;同类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++的模板(Template)&lt;/li&gt;
&lt;li&gt;C#的泛型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArrayList源码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public class ArrayList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt;
        implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rangeCheck(index);	&lt;span class=&quot;comment&quot;&gt;//检查是否越界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; elementData(index);	&lt;span class=&quot;comment&quot;&gt;//返回对应的元素值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="泛型" scheme="https://lao-biao.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java--混合编程</title>
    <link href="https://lao-biao.github.io/articles/6d00d2a2.html"/>
    <id>https://lao-biao.github.io/articles/6d00d2a2.html</id>
    <published>2020-05-26T02:45:45.000Z</published>
    <updated>2020-07-06T03:37:38.359Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java混合编程"><a href="#Java混合编程" class="headerlink" title="Java混合编程"></a>Java混合编程</h4><h6 id="Java调用Java程序"><a href="#Java调用Java程序" class="headerlink" title="Java调用Java程序"></a>Java调用Java程序</h6><p>RMI</p><h6 id="Java调用C程序"><a href="#Java调用C程序" class="headerlink" title="Java调用C程序"></a>Java调用C程序</h6><p>JNI Java Native Interface</p><h6 id="Java调用JavaScript程序"><a href="#Java调用JavaScript程序" class="headerlink" title="Java调用JavaScript程序"></a>Java调用JavaScript程序</h6><p>脚本引擎 Script Engine</p><p>JDK8：Nashorn</p><p>JDK6/7：Rhino</p><h6 id="Java调用Python程序"><a href="#Java调用Python程序" class="headerlink" title="Java调用Python程序"></a>Java调用Python程序</h6><p>Jython（JPython）</p><p>关键类</p><p>PythonInterpreter</p><ul><li>exec 执行语句</li><li>set 设置变量值</li><li>get 获取变量值</li><li>execfile 执行一个python文件</li></ul><p>PyObject<br>PyFunction</p><h6 id="Java调用Web-Service"><a href="#Java调用Web-Service" class="headerlink" title="Java调用Web Service"></a>Java调用Web Service</h6><p>wsimport</p><h6 id="Java调用命令行"><a href="#Java调用命令行" class="headerlink" title="Java调用命令行"></a>Java调用命令行</h6><p>Runtime类</p><p>Process类</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Java混合编程&quot;&gt;&lt;a href=&quot;#Java混合编程&quot; class=&quot;headerlink&quot; title=&quot;Java混合编程&quot;&gt;&lt;/a&gt;Java混合编程&lt;/h4&gt;&lt;h6 id=&quot;Java调用Java程序&quot;&gt;&lt;a href=&quot;#Java调用Java程序&quot; cla
      
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="混合编程" scheme="https://lao-biao.github.io/tags/%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java--并发编程</title>
    <link href="https://lao-biao.github.io/articles/f0f7baf0.html"/>
    <id>https://lao-biao.github.io/articles/f0f7baf0.html</id>
    <published>2020-05-24T04:01:52.000Z</published>
    <updated>2020-07-06T03:37:14.608Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h4><h5 id="串行-vs-并行"><a href="#串行-vs-并行" class="headerlink" title="串行 vs 并行"></a>串行 vs 并行</h5><p>业务：任务多，数据量大</p><p>串行</p><ul><li>编程简单，并行编程困难</li><li>单个计算核频率下降，计算核数增多，整体性能变高</li></ul><p>并行困难(任务分配和执行过程<strong>高度耦合</strong>)</p><ul><li>如何控制粒度，切割任务</li><li>如何分配任务给线程，监督线程执行过程</li></ul><p>并行模式</p><ul><li>主从模式 (Master-Slave)</li><li>Worker模式(Worker-Worker)</li></ul><p>Java并发编程</p><ul><li>Thread/Runnable/Thread组管理</li><li>Executor框架</li><li>Fork-Join框架</li></ul><a id="more"></a><h4 id="线程组ThreadGroup"><a href="#线程组ThreadGroup" class="headerlink" title="线程组ThreadGroup"></a>线程组ThreadGroup</h4><ul><li>线程的集合</li><li>树形结构，大线程组可以包括小线程组</li><li>可以通过<code>enumerate</code>方法遍历组内的线程，执行操作</li><li>能够有效管理多个线程，但是<font color="red">管理效率低</font></li><li>任务分配和执行过程<font color="red">高度耦合</font></li><li>重复创建线程、关闭线程操作，<font color="red">无法重用线程</font></li></ul><h5 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用线程组管理多个线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程组</span></span><br><span class="line">        ThreadGroup threadGroup = <span class="keyword">new</span> ThreadGroup(<span class="string">"Search"</span>);</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        <span class="comment">//创建线程任务</span></span><br><span class="line">        Searcher searchTask = <span class="keyword">new</span> Searcher(result);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//以searchTask为模板创建线程</span></span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(threadGroup, searchTask);</span><br><span class="line">            thread.start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------分割线----------"</span>);</span><br><span class="line">        <span class="comment">//查看线程组消息</span></span><br><span class="line">        System.out.printf(<span class="string">"active count:%d\n"</span>, threadGroup.activeCount());</span><br><span class="line">        System.out.println(<span class="string">"线程组信息明细"</span>);</span><br><span class="line">        <span class="comment">//打印线程组的所有信息</span></span><br><span class="line">        threadGroup.list();</span><br><span class="line">        System.out.println(<span class="string">"----------分割线----------"</span>);</span><br><span class="line">        <span class="comment">//遍历线程组</span></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[threadGroup.activeCount()];</span><br><span class="line">        <span class="comment">//将线程组中active线程拷贝到数组中</span></span><br><span class="line">        threadGroup.enumerate(threads);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadGroup.activeCount(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Thread %s: %s\n"</span>, threads[i].getName(), threads[i].getState());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------分割线----------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待活动线程数小于10</span></span><br><span class="line">        waitFinish(threadGroup);</span><br><span class="line">        <span class="comment">//线程组发出中断命令</span></span><br><span class="line">        threadGroup.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">waitFinish</span><span class="params">(ThreadGroup threadGroup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (threadGroup.activeCount()&gt;<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程模板"><a href="#线程模板" class="headerlink" title="线程模板"></a>线程模板</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Searcher</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Result result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Searcher</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String threadName = Thread.currentThread().getName();</span><br><span class="line">        System.out.printf(<span class="string">"Thread %s start\n"</span>, threadName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doTask();</span><br><span class="line">            result.setName(threadName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Thread %s is interrupted\n"</span>, threadName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"Thread %s finished.\n"</span>, threadName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(<span class="keyword">new</span> Date().getTime());</span><br><span class="line">        <span class="keyword">int</span> value = (<span class="keyword">int</span>) (random.nextDouble() * <span class="number">100</span>);</span><br><span class="line">        System.out.printf(<span class="string">"Thread %s : %d\n"</span>, Thread.currentThread().getName(), value);</span><br><span class="line">        TimeUnit.SECONDS.sleep(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Bean类"><a href="#Bean类" class="headerlink" title="Bean类"></a>Bean类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><blockquote><p>输出</p><p>Thread Thread-0 start<br>Thread Thread-0 : 6<br>Thread Thread-1 start<br>Thread Thread-1 : 4<br>Thread Thread-2 start<br>Thread Thread-2 : 32<br>Thread Thread-3 start<br>Thread Thread-3 : 23<br>Thread Thread-4 start<br>Thread Thread-4 : 51<br>Thread Thread-1 finished.<br>Thread Thread-5 start<br>Thread Thread-5 : 42<br>Thread Thread-6 start<br>Thread Thread-6 : 21<br>Thread Thread-0 finished.<br>Thread Thread-7 start<br>Thread Thread-7 : 12<br>Thread Thread-8 start<br>Thread Thread-8 : 39<br>Thread Thread-9 start<br>Thread Thread-9 : 30<br>———-分割线———-<br>active count:8<br>线程组信息明细<br>java.lang.ThreadGroup[name=Search,maxpri=10]<br> Thread[Thread-2,5,Search]<br> Thread[Thread-3,5,Search]<br> Thread[Thread-4,5,Search]<br> Thread[Thread-5,5,Search]<br> Thread[Thread-6,5,Search]<br> Thread[Thread-7,5,Search]<br> Thread[Thread-8,5,Search]<br> Thread[Thread-9,5,Search]<br>———-分割线———-<br>Thread Thread-2: TIMED_WAITING<br>Thread Thread-3: TIMED_WAITING<br>Thread Thread-4: TIMED_WAITING<br>Thread Thread-5: TIMED_WAITING<br>Thread Thread-6: TIMED_WAITING<br>Thread Thread-7: TIMED_WAITING<br>Thread Thread-8: TIMED_WAITING<br>Thread Thread-9: TIMED_WAITING<br>———-分割线———-<br>Thread Thread-3 is interrupted<br>Thread Thread-5 is interrupted<br>Thread Thread-8 is interrupted<br>Thread Thread-6 is interrupted<br>Thread Thread-7 is interrupted<br>Thread Thread-4 is interrupted<br>Thread Thread-9 is interrupted<br>Thread Thread-2 is interrupted</p><p>Process finished with exit code 0</p></blockquote><h4 id="Java并发框架Executor"><a href="#Java并发框架Executor" class="headerlink" title="Java并发框架Executor"></a>Java并发框架Executor</h4><p>从JDK 5开始提供Executor FrameWork (==java.util.concurrent.*==)</p><ul><li>分离任务的创建和执行者的创建</li><li>线程重复利用(new线程代价很大)</li></ul><p>理解共享线程池的概念</p><ul><li>预设好的多个Thread，可弹性增加</li><li>多次执行很多很小的任务</li><li>任务创建和执行过程解耦</li><li>程序员无需关心线程池执行任务过程</li></ul><p>主要类：Executor Service, ThreadPoolExecutor，Future</p><ul><li>Executors.newCachedThreadPool<br>Executors.newFixedThreadPool(指定线程数，一般为CPU核数的2/4倍) 创建线程池</li><li>Executor Service 线程池服务</li><li>Callable 具体的逻辑对象(线程类)，类似于Runnable接口，有返回值</li><li>Future 返回结果</li></ul><h5 id="Server实例代码"><a href="#Server实例代码" class="headerlink" title="Server实例代码"></a>Server实例代码</h5><ul><li>Main类 通过服务器调用100个任务</li><li>Server类 线程池管理</li><li>Task类 线程具体任务实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个服务器</span></span><br><span class="line">        Server server = <span class="keyword">new</span> Server();</span><br><span class="line">        <span class="comment">//创建100个任务，并发交给执行器，等待完成</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Task task = <span class="keyword">new</span> Task(<span class="string">"Task"</span> + i);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            server.submitTask(task);<span class="comment">// 提交任务</span></span><br><span class="line">        &#125;</span><br><span class="line">        server.endServer();<span class="comment">// 关闭服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor executor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建默认的线程池</span></span><br><span class="line">        executor = (ThreadPoolExecutor) Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//创建指定个数的线程池</span></span><br><span class="line">        <span class="comment">//executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(5);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitTask</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Sever: A new task is arrived.\n"</span>);</span><br><span class="line">        <span class="comment">//执行task</span></span><br><span class="line">        executor.execute(task);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"Server: Pool size is %d\n"</span>, executor.getPoolSize());</span><br><span class="line">        System.out.printf(<span class="string">"Server: Active count is %d\n"</span>, executor.getActiveCount());</span><br><span class="line">        System.out.printf(<span class="string">"Server: Completed task is %d\n"</span>, executor.getCompletedTaskCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//结束服务</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> duration = (<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">            System.out.printf(<span class="string">"Thread %s:doing a task during %d seconds\n"</span>, Thread.currentThread().getName(), duration);</span><br><span class="line">            Thread.sleep(duration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"Thread %s is finished on %s.\n"</span>, Thread.currentThread().getName(), <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Callable-Future回调结果实例"><a href="#Callable-Future回调结果实例" class="headerlink" title="Callable+Future回调结果实例"></a>Callable+Future回调结果实例</h5><ul><li>SumTest类 实现多线程运行1-1000的求和</li><li>SumTask类 每个线程的具体任务实现，并通过Callable回调结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行线程池</span></span><br><span class="line">        ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Future&lt;Integer&gt;&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计1-1000总和，分成10个任务计算，提交任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            SumTask calculator = <span class="keyword">new</span> SumTask(i * <span class="number">100</span> + <span class="number">1</span>, (i + <span class="number">1</span>) * <span class="number">100</span>);</span><br><span class="line">            Future&lt;Integer&gt; result = executor.submit(calculator);   <span class="comment">// 接收任务回调</span></span><br><span class="line">            resultList.add(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每隔50ms，轮询等待10个任务结束</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"Main:已经完成%d个任务\n"</span>, executor.getCompletedTaskCount());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; resultList.size(); i++) &#123;</span><br><span class="line">                Future&lt;Integer&gt; result = resultList.get(i);</span><br><span class="line">                System.out.printf(<span class="string">"Main:Task %d : %s\n"</span>, i, result.isDone());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);   <span class="comment">// 休眠50ms</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (executor.getCompletedTaskCount() &lt; resultList.size());</span><br><span class="line">        <span class="comment">// 在所有任务结束，综合计算结果</span></span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Integer&gt; result : resultList) &#123;</span><br><span class="line">            Integer sum = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sum = result.get();</span><br><span class="line">                total += sum;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出最终结果</span></span><br><span class="line">        System.out.println(<span class="string">"1-1000的总和："</span>+total);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义每个线程计算的区间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startNumber;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> endNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(<span class="keyword">int</span> startNumber, <span class="keyword">int</span> endNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startNumber = startNumber;</span><br><span class="line">        <span class="keyword">this</span>.endNumber = endNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startNumber; i &lt;=endNumber; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));   <span class="comment">// 休眠一段时间</span></span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"%s:%d\n"</span>, Thread.currentThread().getName(), sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java并发框架Fork-Join"><a href="#Java并发框架Fork-Join" class="headerlink" title="Java并发框架Fork-Join"></a>Java并发框架Fork-Join</h4><p> Java 7 提供的一种并行框架：分解、治理、合并(分治编程)</p><p>适合用于整体任务量不好确定的场合(最小任务可确定)</p><p>关键类</p><ul><li>ForkJoinPool 任务池</li><li>RecursiveAction</li><li>RecursiveTask</li></ul><p>使用Fork-Join框架执行1-10000000的求和</p><ul><li>SumTest类 线程池管理线程</li><li>SumTask类 线程任务分解、治理、合并</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行线程池</span></span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        <span class="comment">//ForkJoinPool pool = new ForkJoinPool(4);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建任务</span></span><br><span class="line">        SumTask task = <span class="keyword">new</span> SumTask(<span class="number">1</span>, <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        ForkJoinTask&lt;Long&gt; result = pool.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待结果,每隔50ms检查一次</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Main:Active Thread Count--&gt;"</span> + pool.getActiveThreadCount());</span><br><span class="line">            System.out.println(<span class="string">"Main:Parallelism--&gt;"</span> + pool.getParallelism());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!task.isDone());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result.get().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threadHold = <span class="number">5</span>; <span class="comment">// 求和最小个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long sum = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果任务足够小就直接执行</span></span><br><span class="line">        <span class="keyword">boolean</span> canCompute = (end - start) &lt;= threadHold;</span><br><span class="line">        <span class="keyword">if</span> (canCompute) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 任务大于阀值，分为2个任务</span></span><br><span class="line">            <span class="keyword">int</span> middle = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            SumTask sumTaskLeft = <span class="keyword">new</span> SumTask(start, middle);</span><br><span class="line">            SumTask sumTaskRight = <span class="keyword">new</span> SumTask(middle + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">            invokeAll(sumTaskLeft, sumTaskRight);</span><br><span class="line"></span><br><span class="line">            Long sumLeft = sumTaskLeft.join();</span><br><span class="line">            Long sumRight = sumTaskRight.join();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并结果</span></span><br><span class="line">            sum = sumLeft + sumRight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java并发数据结构"><a href="#Java并发数据结构" class="headerlink" title="Java并发数据结构"></a>Java并发数据结构</h4><p>常用的数据结构是线程不安全的</p><ul><li>ArrayList, HashMap, HashSet 非同步的</li><li>多个线程同时读写，可能会抛出异常或数据错误</li></ul><p>传统Vector，Hashtable等同步集合性能过差</p><p>并发数据结构：数据添加和删除</p><ul><li>阻塞式集合：当集合为空或者满时，等待</li><li>非阻塞式集合：当集合为空或者满时，不等待，返回null或异常</li></ul><h5 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h5><h6 id="List"><a href="#List" class="headerlink" title="List"></a>List</h6><ul><li>Vector 同步安全，<font color="red">写多读少</font></li><li>ArrayList 不安全</li><li>Collections.synchronizedList(List list) 基于synchronized，效率差</li><li>CopyOnWriteArrayList <font color="red">读多写少</font>，基于复制机制，非阻塞</li></ul><h6 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h6><ul><li>HashSet 不安全</li><li>Collections.synchronizedSet(Set set) 基于synchronized，效率差</li><li>CopyOnWriteArraySet (基于CopyOnWriteArrayList实现) <font color="red">读多写少</font>， 非阻塞</li></ul><h6 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h6><ul><li>Hashtable 同步安全，<font color="red">写多读少</font></li><li>HashMap 不安全</li><li>Collections.synchronizedMap(Map map) 基于synchronized，效率差</li><li>ConcurrentHashMap <font color="red">读多写少</font>，非阻塞</li></ul><h6 id="Queue-amp-Deque-JDK-1-5-提出"><a href="#Queue-amp-Deque-JDK-1-5-提出" class="headerlink" title="Queue &amp; Deque (JDK 1.5 提出)"></a>Queue &amp; Deque (JDK 1.5 提出)</h6><ul><li>ConcurrentLinkedQueue 非阻塞</li><li>ArrayBlockingQueue/LinkedBlockingQueue 阻塞</li></ul><h4 id="Java并发协作控制"><a href="#Java并发协作控制" class="headerlink" title="Java并发协作控制"></a>Java并发协作控制</h4><p>Thread/Executor/Fork-Join</p><ul><li>线程启动，运行，结束</li><li>线程之间缺少协作</li></ul><p>synchronized 同步</p><ul><li>限定只有一个线程才能进入关键区</li><li>简单粗暴，<font color="red">性能损失有点大</font></li></ul><h5 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h5><p>Lock也可以实现同步的效果</p><ul><li>实现更复杂的临界区结构</li><li>tryLock方法可以预判锁是否空闲</li><li>允许分离读写的操作，多个读，一个写</li><li>性能更好 </li></ul><p>ReentrantLock类，可重入的互斥锁</p><p>ReentrantReadWriteLock类，可重入的读写锁</p><p>lock和unlock函数</p><h5 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h5><p>信号量，由1965年Dijkstra提出的</p><p>信号量：本质上是一个计数器</p><p>计数器大于0，可以使用，等于0不能使用</p><p>可以设置多个并发量，例如限制10个访问</p><p>Semaphore</p><ul><li>acquire获取</li><li>release释放</li></ul><p>比Lock更进一步，可以控制多个同时访问关键区</p><h6 id="SemaphoreExample"><a href="#SemaphoreExample" class="headerlink" title="SemaphoreExample"></a>SemaphoreExample</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量，车位数为5</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore placeSemaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5个车位，10辆车需要停放，每次停放时，去申请信号量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tryToParkCnt = <span class="number">10</span>;</span><br><span class="line">        SemaphoreExample semaphoreExample = <span class="keyword">new</span> SemaphoreExample();</span><br><span class="line">        Thread[] parker = <span class="keyword">new</span> Thread[tryToParkCnt];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tryToParkCnt; i++) &#123;</span><br><span class="line">            parker[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">long</span> randomTime = (<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">                    Thread.sleep(randomTime);</span><br><span class="line">                    <span class="keyword">if</span> (semaphoreExample.parking()) &#123;</span><br><span class="line">                        <span class="keyword">long</span> parkingTime = (<span class="keyword">long</span>) (Math.random() * <span class="number">1200</span>);</span><br><span class="line">                        Thread.sleep(parkingTime);</span><br><span class="line">                        semaphoreExample.leaving();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            parker[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tryToParkCnt; i++) &#123;</span><br><span class="line">            parker[i].join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">parking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (placeSemaphore.tryAcquire()) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":停车成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":没有空位"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaving</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        placeSemaphore.release();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">":离开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Latch"><a href="#Latch" class="headerlink" title="Latch"></a>Latch</h5><p>等待锁，是一个<strong>同步辅助类</strong></p><p>用来同步执行任务的一个或者多个线程</p><p>不是用来保护临界区或者共享资源</p><p>CountDownLatch</p><ul><li>countDown() 计数减1</li><li>await() 等待latch变成0</li></ul><h5 id="Barrie"><a href="#Barrie" class="headerlink" title="Barrie"></a>Barrie</h5><p>集合点，也是一个<strong>同步辅助类</strong></p><p>允许多个线程在某一个点上进行同步</p><p>CyclicBarrier</p><ul><li>构造函数是需要同步的线程数量</li><li>await等待其他线程，到达数量后，就放行</li></ul><h6 id="CyclicBarrierExample"><a href="#CyclicBarrierExample" class="headerlink" title="CyclicBarrierExample"></a>CyclicBarrierExample</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三个一维向量用三个线程分别求和，最后计算总和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[][] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] results = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span>[] row1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] row2 = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] row3 = &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        numbers[<span class="number">0</span>] = row1;</span><br><span class="line">        numbers[<span class="number">1</span>] = row2;</span><br><span class="line">        numbers[<span class="number">2</span>] = row3;</span><br><span class="line"></span><br><span class="line">        CalculateFinalResult finalResultCalculator = <span class="keyword">new</span> CalculateFinalResult(results);</span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, finalResultCalculator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当有3个线程在barrier上await时，就执行finalResultCalculator</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            CalculateEachRow rowCalculator = <span class="keyword">new</span> CalculateEachRow(numbers, i, results, barrier);</span><br><span class="line">            <span class="keyword">new</span> Thread(rowCalculator).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculateEachRow</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[][] numbers;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> rowNumbers;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] res;</span><br><span class="line">    <span class="keyword">final</span> CyclicBarrier barrier;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculateEachRow</span><span class="params">(<span class="keyword">int</span>[][] numbers, <span class="keyword">int</span> rowNumbers, <span class="keyword">int</span>[] res, CyclicBarrier barrier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numbers = numbers;</span><br><span class="line">        <span class="keyword">this</span>.rowNumbers = rowNumbers;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">        <span class="keyword">this</span>.barrier = barrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] row = numbers[rowNumbers];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> datum : row) &#123;</span><br><span class="line">            sum += datum;</span><br><span class="line">            res[rowNumbers] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":计算第"</span> + (rowNumbers + <span class="number">1</span>) + <span class="string">"行结束，结果为--&gt;"</span> + sum);</span><br><span class="line">            barrier.await(); <span class="comment">// 等待，只要超过3个，就放行</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculateFinalResult</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] eachRowRes;</span><br><span class="line">    <span class="keyword">int</span> finalRes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculateFinalResult</span><span class="params">(<span class="keyword">int</span>[] eachRowRes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eachRowRes = eachRowRes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFinalRes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> finalRes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> datum : eachRowRes) &#123;</span><br><span class="line">            sum += datum;</span><br><span class="line">        &#125;</span><br><span class="line">        finalRes = sum;</span><br><span class="line">        System.out.println(<span class="string">"最终结果为--&gt;"</span> + finalRes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h5><p>允许执行并发多阶段任务，<strong>同步辅助类</strong></p><p>在每一个阶段结束的位置对线程进行同步，当所有的线程都到达这步，再进行下一步</p><p>Phaser</p><ul><li>arrive()</li><li>arriveAndAwaitAdvance()  等待</li></ul><h5 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h5><p>允许在并发线程中<font color="red">互相交换消息</font></p><p>允许在<strong>2</strong>个线程中定义同步点，当两个线程都到达同步点， 它们交换数据结构</p><p>Exchanger</p><ul><li>exchange(), 线程双方互相交互数据</li><li>交换数据是双向的，传递null时不需要接受</li></ul><h4 id="Java定时任务执行"><a href="#Java定时任务执行" class="headerlink" title="Java定时任务执行"></a>Java定时任务执行</h4><p>Thread/Executor/Fork-Join 多线程</p><ul><li>立刻执行</li><li>框架调度 </li></ul><p>定时执行</p><ul><li>固定某一个时间点运行</li><li>以某一个周期执行</li></ul><h5 id="简单定时器机制"><a href="#简单定时器机制" class="headerlink" title="简单定时器机制"></a>简单定时器机制</h5><p>设置计划任务，也就是在指定的时间开始执行某一个任务 </p><p>TimerTask 封装任务 实现Runable接口</p><p>Timer类 定时器</p><ul><li>scheduleAtFixedRate(TimerTask timerTask,Date firstTime,long period) 固定速率</li><li>cancel() 取消定时器</li></ul><h5 id="Executor-定时器机制"><a href="#Executor-定时器机制" class="headerlink" title="Executor +定时器机制"></a>Executor +定时器机制</h5><p>ScheduledExecutorService</p><ul><li><p>定时任务</p><p>schedule(Runable command,long delay,TimeUnit unit)</p></li><li><p>周期任务</p><ul><li>scheduleAtFixedRate(Runable command,long initialDelay，long period,TimeUnit unit) 固定速率 以上一个任务开始的时间计时</li><li>scheduleWithFixedDelay(Runable command,long initialDelay,long delay,TimeUnit unit)</li></ul></li><li><p>shutdown() 结束</p></li></ul><h5 id="Quartz（第三方库）"><a href="#Quartz（第三方库）" class="headerlink" title="Quartz（第三方库）"></a>Quartz（第三方库）</h5><p>Quartz是一个较为完善的任务调度框架</p><ul><li>trigger 触发器</li><li>job 任务</li></ul><p>解决程序中Timer零散管理的问题</p><p>功能更加强大</p><ul><li>Timer执行周期任务，如果中间某一次有异常，整个任务终止执行</li><li>Quartz执行周期任务，如果中间某一次有异常，不影响下次任务执行</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Java并发编程&quot;&gt;&lt;a href=&quot;#Java并发编程&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程&quot;&gt;&lt;/a&gt;Java并发编程&lt;/h4&gt;&lt;h5 id=&quot;串行-vs-并行&quot;&gt;&lt;a href=&quot;#串行-vs-并行&quot; class=&quot;headerlink&quot; title=&quot;串行 vs 并行&quot;&gt;&lt;/a&gt;串行 vs 并行&lt;/h5&gt;&lt;p&gt;业务：任务多，数据量大&lt;/p&gt;
&lt;p&gt;串行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程简单，并行编程困难&lt;/li&gt;
&lt;li&gt;单个计算核频率下降，计算核数增多，整体性能变高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并行困难(任务分配和执行过程&lt;strong&gt;高度耦合&lt;/strong&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何控制粒度，切割任务&lt;/li&gt;
&lt;li&gt;如何分配任务给线程，监督线程执行过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并行模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从模式 (Master-Slave)&lt;/li&gt;
&lt;li&gt;Worker模式(Worker-Worker)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java并发编程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread/Runnable/Thread组管理&lt;/li&gt;
&lt;li&gt;Executor框架&lt;/li&gt;
&lt;li&gt;Fork-Join框架&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="并发编程" scheme="https://lao-biao.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>国内镜像网站网址</title>
    <link href="https://lao-biao.github.io/articles/2e851ff5.html"/>
    <id>https://lao-biao.github.io/articles/2e851ff5.html</id>
    <published>2020-05-15T14:43:13.000Z</published>
    <updated>2020-07-06T03:25:00.879Z</updated>
    
    <content type="html"><![CDATA[<p>国内镜像网站：</p><p>中科大镜像站（地址：安徽）：<a href="http://mirrors.ustc.edu.cn" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn</a><br>清华大学镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn</a><br>浙江大学镜像站：<a href="http://mirrors.zju.edu.cn" target="_blank" rel="noopener">http://mirrors.zju.edu.cn</a><br>重庆大学镜像站：<a href="http://mirrors.cqu.edu.cn" target="_blank" rel="noopener">http://mirrors.cqu.edu.cn</a><br>兰州大学镜像站：<a href="http://mirror.lzu.edu.cn" target="_blank" rel="noopener">http://mirror.lzu.edu.cn</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;国内镜像网站：&lt;/p&gt;
&lt;p&gt;中科大镜像站（地址：安徽）：&lt;a href=&quot;http://mirrors.ustc.edu.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.ustc.edu.cn&lt;/a&gt;&lt;br&gt;清华大学镜像
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java--多线程</title>
    <link href="https://lao-biao.github.io/articles/83776954.html"/>
    <id>https://lao-biao.github.io/articles/83776954.html</id>
    <published>2020-05-15T14:33:51.000Z</published>
    <updated>2020-07-06T03:37:20.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="多进程与多线程"><a href="#多进程与多线程" class="headerlink" title="多进程与多线程"></a>多进程与多线程</h4><h6 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h6><p>当前的操作系统都是多任务OS ，每个独立执行的任务就是一个进程，OS将时间划分为多个时间片（时间很短）</p><p>每个时间片内将CPU分配给某一个任务，时间片结束，CPU将自动回收，再分配给另外任务。从外部看，所有任务是同时在执行。但是在CPU上，任务是按照串行依次运行（单核CPU）。如果是多核，多个进程任务可以并行。但是单个核上，多进程只能串行执行。</p><p>多进程的优点</p><ul><li>可以同时运行多个任务</li><li>程序因IO堵塞时，可以释放CPU，让CPU为其他程序服务</li><li>当系统有多个CPU时，可以为多个程序同时服务<ul><li>CPU不再提高频率，而是提高核数</li><li>多核和并行程序才是提高程序性能的唯一办法</li></ul></li></ul><p>多进程的缺点：太笨重，不好管理，不好切换</p><h6 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h6><p>一个程序可以包括多个子任务，可串/并行，每个子任务可以称为一个线程</p><p>如果一个子任务阻塞，程序可以将CPU调度另外一个子任务进行工作。这样CPU还是保留在本程序中，而不是被调度到别的程序(进程)去。这样，提高本程序所获得CPU时间和利用率。</p><h6 id="多进程-vs-多线程"><a href="#多进程-vs-多线程" class="headerlink" title="多进程 vs 多线程"></a>多进程 vs 多线程</h6><ul><li>线程共享数据</li><li>线程通讯更高效</li><li>线程更轻量级，更容易切换</li><li>多个线程更容易管理</li></ul><a id="more"></a><h4 id="Java多线程实现"><a href="#Java多线程实现" class="headerlink" title="Java多线程实现"></a>Java多线程实现</h4><h6 id="多线程创建"><a href="#多线程创建" class="headerlink" title="多线程创建"></a>多线程创建</h6><ul><li><p><code>java.lang.Thread</code> </p><p>线程继承Thread类，实现run方法</p></li><li><p><code>java.lang.Runnable</code>接口</p></li><li><p>线程实现Runnable接口，实现run方法</p></li></ul><h6 id="多线程启动"><a href="#多线程启动" class="headerlink" title="多线程启动"></a>多线程启动</h6><ul><li>start方法，会自动以新进程调用run方法</li><li>直接调用run方法，将变成串行执行</li><li>同一个线程，多次start会报错，只执行第一次start方法</li><li>多个线程启动，其启动的先后顺序是随机的</li><li>线程无需关闭，只要其run方法执行结束后，自动关闭</li><li>main函数(线程)可能早于新线程结束，整个程序并不终止</li><li>整个程序终止是等所有的线程都终止(包括main函数线程)</li></ul><h6 id="多线程实现对比"><a href="#多线程实现对比" class="headerlink" title="多线程实现对比"></a>多线程实现对比</h6><ul><li>Thread占据了父类的名额，不如Runnable方便 </li><li>Thread 类实现Runnable</li><li>Runnable启动时需要Thread类的支持</li><li>Runnable 更容易实现多线程中资源共享</li></ul><p>结论：建议实现Runnable接口来完成多线程</p><h4 id="Java多线程信息共享"><a href="#Java多线程信息共享" class="headerlink" title="Java多线程信息共享"></a>Java多线程信息共享</h4><p>线程类</p><ul><li>通过继承Thread或实现Runnable</li><li>通过start方法，调用run方法， run方法工作</li><li>线程run结束后，线程退出 </li></ul><p>粗粒度：子线程与子线程之间、和main线程之间缺乏交流</p><p>细粒度：线程之间有信息交流通讯</p><ul><li>通过共享变量达到信息共享</li><li>JDK原生库暂不支持发送消息(类似MPI并行库直接发送消息)</li></ul><h6 id="信息共享"><a href="#信息共享" class="headerlink" title="信息共享"></a>信息共享</h6><p>通过共享变量在多个线程中共享消息</p><ul><li>static变量</li><li>同一个Runnable类的成员变量</li></ul><p>多线程信息共享问题</p><ul><li>工作缓存副本</li><li>关键步骤缺乏加锁限制 </li></ul><blockquote><p> 举例：i++，并非原子性操作</p><ul><li>读取主存i (正本)到工作缓存(副本)中</li><li>每个CPU执行(副本)i+1操作</li><li>CPU将结果写入到缓存(副本)中 </li><li>数据从工作缓存(副本)刷到主存(正本)中</li></ul></blockquote><p>变量副本问题的解决方法</p><ul><li>采用<code>volatile</code> 关键字修饰变量</li><li>保证不同线程对共享变量操作时的<em>可见性</em></li></ul><p>关键步骤<em>加锁限制</em></p><ul><li><strong>互斥</strong>：某一个线程运行一个代码段(关键区)，其他线程不能同时 运行这个代码段</li><li><strong>同步</strong>：多个线程的运行，必须按照某一种规定的先后顺序来运行</li><li><strong>互斥</strong>是<strong>同步</strong>的一种特例 </li></ul><p>互斥的关键字是<code>synchronized</code></p><ul><li><code>synchronized</code>代码块/函数，只能一个线程进入 </li><li><code>synchronized</code>加大性能负担，但是使用简便</li></ul><h4 id="Java多线程管理"><a href="#Java多线程管理" class="headerlink" title="Java多线程管理"></a>Java多线程管理</h4><p>线程类</p><ul><li>通过继承Thread或实现Runnable</li><li>通过start方法，调用run方法，run方法工作</li><li>线程run结束后，线程退出</li></ul><p>粗粒度：子线程与子线程之间、和main线程之间缺乏同步 </p><p> 细粒度：线程之间有同步协作</p><ul><li>等待</li><li>通知/唤醒</li><li>终止</li></ul><h6 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h6><ul><li>NEW 刚创建(new)</li><li>RUNNABLE 就绪态(start)</li><li>RUNNING 运行中(run)</li><li>BLOCK 阻塞(sleep)</li><li>TERMINATED 结束</li></ul><h6 id="Thread-API"><a href="#Thread-API" class="headerlink" title="Thread API"></a>Thread API</h6><p>Thread的部分API已经废弃（不建议再使用）</p><ul><li>暂停和恢复 <del>suspend/resume</del></li><li>消亡 <del>stop/destroy</del></li></ul><p>线程阻塞/和唤醒</p><ul><li>sleep，时间一到，自己会醒来</li><li>wait/notify/notifyAll，等待，需要别人来唤醒</li><li>join，等待另外一个线程结束</li><li>interrupt，向另外一个线程发送中断信号，该线程收到信号，会触发InterruptedException(可解除阻塞)，并进行下一步处理</li></ul><h6 id="线程暂停和中止–主动与被动"><a href="#线程暂停和中止–主动与被动" class="headerlink" title="线程暂停和中止–主动与被动"></a>线程暂停和中止–主动与被动</h6><p>线程被动地暂停和终止</p><ul><li>依靠别的线程来拯救自己<ul><li>wait</li><li>notify</li><li>notifyAll</li></ul></li><li>没有及时释放资源</li></ul><p>线程主动暂停和终止</p><ul><li>定期监测共享变量</li><li>如果需要暂停或者终止，先释放资源，再主动动作</li><li>暂停：<code>Thread.sleep()</code>，休眠</li><li>终止：run方法结束，线程终止</li></ul><h6 id="多线程死锁"><a href="#多线程死锁" class="headerlink" title="多线程死锁"></a>多线程死锁</h6><ul><li>每个线程互相持有别的线程需要的锁</li><li>预防死锁，对资源进行等级排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer one = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer two = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread12 thread12 = <span class="keyword">new</span> Thread12();</span><br><span class="line">        Thread21 thread21 = <span class="keyword">new</span> Thread21();</span><br><span class="line">        thread12.start();</span><br><span class="line">        thread21.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread12</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先拿1再拿2</span></span><br><span class="line">        <span class="keyword">synchronized</span> (DeadLockThread.one) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (DeadLockThread.two) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread 12 is running"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread21</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先拿2再拿1</span></span><br><span class="line">        <span class="keyword">synchronized</span> (DeadLockThread.two) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (DeadLockThread.one) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread 21 is running"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>线程报错信息：</p><p>“Monitor Ctrl-Break” #6 daemon prio=5 os_prio=0 tid=0x0000000018bce000 nid=0x1280 runnable [0x000000001908e000]<br>java.lang.Thread.State: RUNNABLE<br>    at java.net.SocketInputStream.socketRead0(Native Method)<br>    at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)<br>    at java.net.SocketInputStream.read(SocketInputStream.java:170)<br>    at java.net.SocketInputStream.read(SocketInputStream.java:141)<br>    at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)<br>    at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)<br>    at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</p><p>locked &lt;0x00000000d5fb3550&gt; (a java.io.InputStreamReader)<br>at java.io.InputStreamReader.read(InputStreamReader.java:184)<br>at java.io.BufferedReader.fill(BufferedReader.java:161)<br>at java.io.BufferedReader.readLine(BufferedReader.java:324)</p><p>locked &lt;0x00000000d5fb3550&gt; (a java.io.InputStreamReader)</p></blockquote><h6 id="守护-后台-线程"><a href="#守护-后台-线程" class="headerlink" title="守护(后台)线程"></a>守护(后台)线程</h6><p><code>Thread.setDaemon()</code>设置线程为守护线程</p><ul><li>普通线程的结束，是run方法运行结束</li><li>守护线程的结束，是run方法运行结束，或main函数结束</li><li>守护线程永远不要访问资源，如文件或数据库等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Main thread is running."</span>);</span><br><span class="line">        ThreadOne threadOne = <span class="keyword">new</span> ThreadOne();</span><br><span class="line">        <span class="comment">//守护线程</span></span><br><span class="line">        threadOne.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        threadOne.start();</span><br><span class="line">        <span class="comment">//主线程休眠2秒</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">"Main thread is finished."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadOne</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread one is running."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//休眠1秒</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出：</p><p>Main thread is running.<br>Thread one is running.<br>Thread one is running.<br>Thread one is running.<br>Main thread is finished.</p><p>Process finished with exit code 0</p></blockquote><h6 id="线程查看工具-Jvisualvm"><a href="#线程查看工具-Jvisualvm" class="headerlink" title="线程查看工具 Jvisualvm"></a>线程查看工具 Jvisualvm</h6><blockquote><p>参考：<a href="https://www.cnblogs.com/mzq123/p/11166640.html" target="_blank" rel="noopener">Jvisualvm简单使用教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;多进程与多线程&quot;&gt;&lt;a href=&quot;#多进程与多线程&quot; class=&quot;headerlink&quot; title=&quot;多进程与多线程&quot;&gt;&lt;/a&gt;多进程与多线程&lt;/h4&gt;&lt;h6 id=&quot;多进程&quot;&gt;&lt;a href=&quot;#多进程&quot; class=&quot;headerlink&quot; title=&quot;多进程&quot;&gt;&lt;/a&gt;多进程&lt;/h6&gt;&lt;p&gt;当前的操作系统都是多任务OS ，每个独立执行的任务就是一个进程，OS将时间划分为多个时间片（时间很短）&lt;/p&gt;
&lt;p&gt;每个时间片内将CPU分配给某一个任务，时间片结束，CPU将自动回收，再分配给另外任务。从外部看，所有任务是同时在执行。但是在CPU上，任务是按照串行依次运行（单核CPU）。如果是多核，多个进程任务可以并行。但是单个核上，多进程只能串行执行。&lt;/p&gt;
&lt;p&gt;多进程的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以同时运行多个任务&lt;/li&gt;
&lt;li&gt;程序因IO堵塞时，可以释放CPU，让CPU为其他程序服务&lt;/li&gt;
&lt;li&gt;当系统有多个CPU时，可以为多个程序同时服务&lt;ul&gt;
&lt;li&gt;CPU不再提高频率，而是提高核数&lt;/li&gt;
&lt;li&gt;多核和并行程序才是提高程序性能的唯一办法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多进程的缺点：太笨重，不好管理，不好切换&lt;/p&gt;
&lt;h6 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h6&gt;&lt;p&gt;一个程序可以包括多个子任务，可串/并行，每个子任务可以称为一个线程&lt;/p&gt;
&lt;p&gt;如果一个子任务阻塞，程序可以将CPU调度另外一个子任务进行工作。这样CPU还是保留在本程序中，而不是被调度到别的程序(进程)去。这样，提高本程序所获得CPU时间和利用率。&lt;/p&gt;
&lt;h6 id=&quot;多进程-vs-多线程&quot;&gt;&lt;a href=&quot;#多进程-vs-多线程&quot; class=&quot;headerlink&quot; title=&quot;多进程 vs 多线程&quot;&gt;&lt;/a&gt;多进程 vs 多线程&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;线程共享数据&lt;/li&gt;
&lt;li&gt;线程通讯更高效&lt;/li&gt;
&lt;li&gt;线程更轻量级，更容易切换&lt;/li&gt;
&lt;li&gt;多个线程更容易管理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="多线程" scheme="https://lao-biao.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--#202快乐数</title>
    <link href="https://lao-biao.github.io/articles/6cd30686.html"/>
    <id>https://lao-biao.github.io/articles/6cd30686.html</id>
    <published>2020-04-30T02:24:48.000Z</published>
    <updated>2020-07-06T03:21:39.884Z</updated>
    
    <content type="html"><![CDATA[<h6 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h6><blockquote><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是<strong>无限循环</strong> 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。</p><p>如果 n 是快乐数就返回 <code>True</code> ；不是，则返回 <code>False</code> 。<br>编写一个算法来判断一个数 n 是不是快乐数。</p></blockquote><blockquote><p>示例：</p><p>输入：19<br>输出：true<br>解释：<br>$1^2$ + $9^2$ = 82<br>$8^2$ + $2^2$ = 68<br>$6^2$ + $8^2$ = 100<br>$1^2$ + $0^2$ + $0^2$ = 1</p></blockquote><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/happy-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/happy-number</a></p></blockquote><a id="more"></a><h6 id="集合法"><a href="#集合法" class="headerlink" title="集合法"></a>集合法</h6><p>通过用Set集合来保存数n去判断是否出现循环，当出现循环时，返回<code>false</code></p><p>时间复杂度：$O(\log_2{n})$</p><p>空间复杂度：$O(\log_2{n})$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 集合法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHappyBySet</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//用Set比List快</span></span><br><span class="line">    Set&lt;Integer&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span> &amp;&amp; !list.contains(n)) &#123;</span><br><span class="line">        list.add(n);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//求n的每一位的平方和</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> bit = n % <span class="number">10</span>;</span><br><span class="line">            num += bit * bit;</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a>快慢指针法</h6><blockquote><p>使用”快慢指针”思想找出循环：”快指针”每次走两步，”慢指针”每次走一步，二者相等时，即为一个循环周期。<br>此时，判断是不是因为1引起的循环，是的话就是快乐数，否则不是快乐数。</p></blockquote><blockquote><p>参考题解：</p><p>作者：linux-man</p><p>链接：<a href="https://leetcode-cn.com/problems/happy-number/solution/shi-yong-kuai-man-zhi-zhen-si-xiang-zhao-chu-xun-h/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/happy-number/solution/shi-yong-kuai-man-zhi-zhen-si-xiang-zhao-chu-xun-h/</a></p><p>来源：力扣（LeetCode）</p></blockquote><p>时间复杂度：$O(\log_2{n})$</p><p>空间复杂度：$O(1)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 快慢指针法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> slow = n, fast = n;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        slow = bitSquareSum(slow);</span><br><span class="line">        fast = bitSquareSum(fast);</span><br><span class="line">        fast = bitSquareSum(fast);</span><br><span class="line">    &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> slow == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 求数n每一位的平方和</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitSquareSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> bit = n % <span class="number">10</span>;</span><br><span class="line">        num += bit * bit;</span><br><span class="line">        n = n / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;快乐数&quot;&gt;&lt;a href=&quot;#快乐数&quot; class=&quot;headerlink&quot; title=&quot;快乐数&quot;&gt;&lt;/a&gt;快乐数&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;编写一个算法来判断一个数 n 是不是快乐数。&lt;/p&gt;
&lt;p&gt;「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是&lt;strong&gt;无限循环&lt;/strong&gt; 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。&lt;/p&gt;
&lt;p&gt;如果 n 是快乐数就返回 &lt;code&gt;True&lt;/code&gt; ；不是，则返回 &lt;code&gt;False&lt;/code&gt; 。&lt;br&gt;编写一个算法来判断一个数 n 是不是快乐数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;输入：19&lt;br&gt;输出：true&lt;br&gt;解释：&lt;br&gt;$1^2$ + $9^2$ = 82&lt;br&gt;$8^2$ + $2^2$ = 68&lt;br&gt;$6^2$ + $8^2$ = 100&lt;br&gt;$1^2$ + $0^2$ + $0^2$ = 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/happy-number&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/happy-number&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://lao-biao.github.io/categories/leetcode/"/>
    
    
  </entry>
  
</feed>
