<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周超的博客</title>
  
  <subtitle>记录编程学习的历程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lao-biao.github.io/"/>
  <updated>2020-10-20T07:35:34.633Z</updated>
  <id>https://lao-biao.github.io/</id>
  
  <author>
    <name>周超</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缓存与分布式锁</title>
    <link href="https://lao-biao.github.io/articles/150bedf.html"/>
    <id>https://lao-biao.github.io/articles/150bedf.html</id>
    <published>2020-10-17T03:11:38.000Z</published>
    <updated>2020-10-20T07:35:34.633Z</updated>
    
    <content type="html"><![CDATA[<h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><h6 id="1、缓存使用"><a href="#1、缓存使用" class="headerlink" title="1、缓存使用"></a>1、缓存使用</h6><p>为了系统性能的提升，一般都会将部分数据放入缓存钟，加速访问，而数据库承担<strong>数据落盘</strong>工作。</p><p><strong><em>哪些数据适合放入缓存？</em></strong></p><ul><li><em>即时性、数据一致性要求不高的</em></li><li><em>访问量大且更新频率不高的数据（读多，写少）</em></li></ul><p>举例：电商类应用，商品分类，商品列表等蛇和缓存并加一个失效时间（根据数据更新频率来定），后台如果发布一个商品，买家需要5分钟才能看到新的商品一般是可以接受的。</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E8%AF%BB%E6%A8%A1%E5%BC%8F%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B.png" alt="读模式缓存使用流程"></p><p>注意：在开发过程中，凡是放入缓存的数据都应该指定过期时间，使其可以在系统即使没有主动更新数据也能自动触发数据加载进缓存的流程。避免业务崩溃导致的数据永久不一致问题。</p><p><em>本地缓存</em>：通过map将数据备份作为缓存，读取时先访问map，在单体应用中，缓存与服务的其他业务在同一jvm中，共用内存，访问速度快。在分布式下，本地模式存储的缓存放在不同的机器上，在存储、读取、修改、删除操作会出现缓存数据不一致问题。</p><h6 id="2、整合-redis-作为缓存"><a href="#2、整合-redis-作为缓存" class="headerlink" title="2、整合 redis 作为缓存"></a>2、整合 redis 作为缓存</h6><ol><li><p>引入redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>简单配置redis的host等信息。</p></li><li><p>使用 Spring Boot 自动配置好的 <code>StringRedisTemplate</code>来操作redis。</p></li></ol><h5 id="缓存失效问题"><a href="#缓存失效问题" class="headerlink" title="缓存失效问题"></a>缓存失效问题</h5><h6 id="高并发下缓存失效问题-缓存穿透"><a href="#高并发下缓存失效问题-缓存穿透" class="headerlink" title="高并发下缓存失效问题-缓存穿透"></a>高并发下缓存失效问题-<em>缓存穿透</em></h6><p><em>缓存穿透</em>：指查询一个一定不存在的数据，由于缓存是不命中，将去查询数据库，但是数据库也无此纪录，且没有将这次查询的<em>null</em>写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>风险：利用不存在的数据进行攻击，数据库瞬时压力增大，最终导致崩溃。<br>解决：null结果缓存，并加入短暂过期时间。</p><h6 id="高并发下缓存失效问题-缓存雪崩"><a href="#高并发下缓存失效问题-缓存雪崩" class="headerlink" title="高并发下缓存失效问题-缓存雪崩"></a>高并发下缓存失效问题-<em>缓存雪崩</em></h6><p><em>缓存雪崩</em>：指在设置缓存时key采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到db，db瞬时压力过重雪崩。</p><p>解决：原有的失效时间基础上增加一个随机值，比如1~5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h6 id="高并发下缓存失效问题-缓存击穿"><a href="#高并发下缓存失效问题-缓存击穿" class="headerlink" title="高并发下缓存失效问题-缓存击穿"></a>高并发下缓存失效问题-<em>缓存击穿</em></h6><ul><li>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据；</li><li>如果这个key在大量请求同时进来前正好失效，那么所有对这个key的数据查询都落到db。</li></ul><p>解决：加锁，大量并发只让一个去查，其他的等待，查到以后释放锁，其他的获取到锁，先查缓存，就会有数据，不用去查db。</p><h5 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h5><p>缓存数据和数据库保持一致。</p><ul><li>双写模式</li><li>失效模式</li></ul><h6 id="双写模式"><a href="#双写模式" class="headerlink" title="双写模式"></a>双写模式</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7-%E5%8F%8C%E5%86%99%E6%A8%A1%E5%BC%8F.png" alt="缓存数据一致性-双写模式"></p><h6 id="失效模式"><a href="#失效模式" class="headerlink" title="失效模式"></a>失效模式</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7-%E5%A4%B1%E6%95%88%E6%A8%A1%E5%BC%8F.png" alt="缓存数据一致性-失效模式"></p><h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h6><p>无论是双写模式还是失效模式，都会导致缓存的不一致问题，即多个实例同时更新会出问题。</p><ol><li>如果是用户维度数据（订单数据、用户数据），这种并发几率非常小，不用考虑这个问题，缓存数据加上过期时间，每隔一段时间触发读的主动更新即可。</li><li>如果是菜单，商品介绍等基础数据，也可以去使用 <em>canal</em> 订阅 <em>binlog</em> 的方式。</li><li>缓存数据+过期时间 也够解决大部分业务对于缓存的要求。</li><li>通过加锁保证并发读写，写写的时候按顺序排好队，读读无所谓，所以适合使用读写锁。（业务不关心脏数据，允许临时脏数据可忽略。）</li></ol><p>总结：</p><ul><li>能放入缓存的数据本就不应该是实时性、一致性要求超高的，所以缓存数据的时候加上过期时间，保证每天拿到当前最新数据即可；</li><li>不应该过度设计，增加系统的复杂性；</li><li>遇到实时性、一致性要求高的数据，就应该查数据库，即使会导致业务效率慢一点。</li></ul><h6 id="Canal"><a href="#Canal" class="headerlink" title="Canal"></a>Canal</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7-%E8%A7%A3%E5%86%B3-canal.png" alt="缓存数据一致性-解决-canal"></p><h5 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h5><p>本地锁只能锁住当前进程，分布式下需要分布式锁。</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E7%BC%93%E5%AD%98-%E9%94%81-%E6%97%B6%E5%BA%8F%E9%97%AE%E9%A2%98.png" alt="缓存-锁-时序问题"></p><h6 id="本地锁"><a href="#本地锁" class="headerlink" title="本地锁"></a>本地锁</h6><ul><li>synchronized</li><li>Lock（JUC）</li><li>ReentrantLock</li><li>ReentrantReadWriteLock</li><li>CyclicBarrier</li><li>CountDownLatch</li><li>Semaphore</li><li>…</li></ul><p>本地锁在分布式情况下，每一个进程都会查询数据库，并将结果保存到缓存中，失去了缓存的意义。</p><h6 id="分布式锁-1"><a href="#分布式锁-1" class="headerlink" title="分布式锁"></a>分布式锁</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%BC%94%E8%BF%9B.png" alt="分布式锁演进"></p><h6 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h6><blockquote><p><a href="https://github.com/redisson/redisson" target="_blank" rel="noopener">https://github.com/redisson/redisson</a></p></blockquote><h5 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h5><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><ul><li>Spring从3.1开始定义了 <code>org.springframework.cache.Cache</code> 和 <code>org.springframework.cache.CacheManager</code> <em>接口</em>来统一不同的缓存计数；并支持使用JCache（JSR-107）注解简化开发。</li><li>Cache 接口为缓存的组件规范定义，包含缓存的各种操作集合；Cache接口下Spring提供了各种xxxCache的实现；如RedisCache，EhCacheCache，ConcurrentMapCache等；</li><li>每次调用需要缓存功能的方法时，Spring会检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有调用方法并缓存结果后返回给用户，下次调用直接从缓存中获取。</li><li>使用 Spring 缓存抽象时，需要关注以下两点：<ul><li>确定方法需要被缓存以及它们的缓存策略；</li><li>从缓存中读取之前缓存存储的数据。</li></ul></li></ul><h6 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/SpringCache%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="SpringCache缓存模型"></p><h6 id="整合Spring-Cache简化缓存开发"><a href="#整合Spring-Cache简化缓存开发" class="headerlink" title="整合Spring Cache简化缓存开发"></a>整合Spring Cache简化缓存开发</h6><ol><li><p>引入依赖 spring-boot-starter-cache、spring-boot-starter-data-redis</p></li><li><p>配置</p><ul><li><p>自动配置：CacheAutoConfiguration会导入RedisCacheConfiguration<br>配置了缓存管理器RedisCacheManager</p></li><li><p>配置使用redis作为缓存</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cache.type</span>=<span class="string">redis</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用</p><ol><li>开启缓存功能，<code>@EnableCaching</code></li><li>使用注解完成缓存操作。</li></ol></li><li><p>原理：CacheAutoConfiguration-&gt;RedisCacheConfiguration-&gt;自动配置RedisCacheManager-&gt;初始化所有的缓存-&gt;每个缓存决定使用什么配置-&gt;如果redisCacheConfiguration有就用已有的，没有的就是用默认配置-&gt;想改缓存的配置，只需要给容器放一个RedisCacheConfiguration即可-&gt;就会应用到当前RedisCacheManager管理的所有缓存分区中。</p></li></ol><h6 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h6><ul><li><code>@Cacheable</code>: Triggers cache population.<br>触发将数据保存到缓存的操作</li><li><code>@CacheEvict</code>: Triggers cache eviction.<br>触发将数据从缓存中删除的操作</li><li><code>@CachePut</code>: Updates the cache without interfering with the method execution.<br>不影响方法执行更新缓存</li><li><code>@Caching</code>: Regroups multiple cache operations to be applied on a method.<br>组合以上多个缓存操作</li><li><code>@CacheConfig</code>: Shares some common cache-related settings at class-level.<br>在类级别共享缓存的相同配置</li></ul><h6 id="表达式语法"><a href="#表达式语法" class="headerlink" title="表达式语法"></a>表达式语法</h6><div class="table-container"><table><thead><tr><th style="text-align:left">Name</th><th style="text-align:left">Location</th><th style="text-align:left">Description</th><th style="text-align:left">Example</th></tr></thead><tbody><tr><td style="text-align:left"><code>methodName</code></td><td style="text-align:left">Root object</td><td style="text-align:left">The name of the method being invoked</td><td style="text-align:left"><code>#root.methodName</code></td></tr><tr><td style="text-align:left"><code>method</code></td><td style="text-align:left">Root object</td><td style="text-align:left">The method being invoked</td><td style="text-align:left"><code>#root.method.name</code></td></tr><tr><td style="text-align:left"><code>target</code></td><td style="text-align:left">Root object</td><td style="text-align:left">The target object being invoked</td><td style="text-align:left"><code>#root.target</code></td></tr><tr><td style="text-align:left"><code>targetClass</code></td><td style="text-align:left">Root object</td><td style="text-align:left">The class of the target being invoked</td><td style="text-align:left"><code>#root.targetClass</code></td></tr><tr><td style="text-align:left"><code>args</code></td><td style="text-align:left">Root object</td><td style="text-align:left">The arguments (as array) used for invoking the target</td><td style="text-align:left"><code>#root.args[0]</code></td></tr><tr><td style="text-align:left"><code>caches</code></td><td style="text-align:left">Root object</td><td style="text-align:left">Collection of caches against which the current method is run</td><td style="text-align:left"><code>#root.caches[0].name</code></td></tr><tr><td style="text-align:left">Argument name</td><td style="text-align:left">Evaluation context</td><td style="text-align:left">Name of any of the method arguments. If the names are not available (perhaps due to having no debug information), the argument names are also available under the <code>#a&lt;#arg&gt;</code> where <code>#arg</code> stands for the argument index (starting from <code>0</code>).</td><td style="text-align:left"><code>#iban</code> or <code>#a0</code> (you can also use <code>#p0</code> or <code>#p&lt;#arg&gt;</code> notation as an alias).</td></tr><tr><td style="text-align:left"><code>result</code></td><td style="text-align:left">Evaluation context</td><td style="text-align:left">The result of the method call (the value to be cached). Only available in <code>unless</code> expressions, <code>cache put</code> expressions (to compute the <code>key</code>), or <code>cache evict</code> expressions (when <code>beforeInvocation</code> is <code>false</code>). For supported wrappers (such as <code>Optional</code>), <code>#result</code> refers to the actual object, not the wrapper.</td><td style="text-align:left"><code>#result</code></td></tr></tbody></table></div><h6 id="缓存穿透问题解决"><a href="#缓存穿透问题解决" class="headerlink" title="缓存穿透问题解决"></a>缓存穿透问题解决</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h5&gt;&lt;h6 id=&quot;1、缓存使用&quot;&gt;&lt;a href=&quot;#1、缓存使用&quot; class=&quot;headerlink&quot; title=&quot;1、缓存使用&quot;&gt;&lt;/a&gt;1
      
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="redis" scheme="https://lao-biao.github.io/tags/redis/"/>
    
      <category term="spring cache" scheme="https://lao-biao.github.io/tags/spring-cache/"/>
    
  </entry>
  
  <entry>
    <title>异步与线程池</title>
    <link href="https://lao-biao.github.io/articles/b08dc25b.html"/>
    <id>https://lao-biao.github.io/articles/b08dc25b.html</id>
    <published>2020-10-17T03:10:26.000Z</published>
    <updated>2020-10-20T07:43:03.006Z</updated>
    
    <content type="html"><![CDATA[<h5 id="异步与线程池"><a href="#异步与线程池" class="headerlink" title="异步与线程池"></a>异步与线程池</h5><ul><li>线程</li><li>CompletableFuture 异步编排</li></ul><a id="more"></a><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><h6 id="1、初始化线程的4种方式"><a href="#1、初始化线程的4种方式" class="headerlink" title="1、初始化线程的4种方式"></a>1、初始化线程的4种方式</h6><ol><li><p>继承 <code>Thread</code><br>主线程无法获取线程的运算结果</p></li><li><p>实现 <code>Runnable</code> 接口<br>主线程无法获取线程的运算结果</p></li><li><p>实现 <code>Callable</code> 接口 + <code>FutureTask</code>（可以拿到<em>返回结果</em>，可以<em>处理异常</em>）<br>主线程可以获取线程的运算结果，但是<em>不利于控制服务器中的线程资源</em>。可以导致服务器资源耗尽。</p></li><li><p>线程池【<code>ExecutorService</code>】（可以控制资源，性能稳定）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化线程池 */</span></span><br><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="keyword">int</span> nThreads); <span class="comment">// 线程数</span></span><br><span class="line">executorService.execute(Runnable command); <span class="comment">// 无返回值</span></span><br><span class="line">executorService.submit(Callable&lt;T&gt; task);<span class="comment">// 返回 &lt;T&gt; Future&lt;T&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                       <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                       <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                       TimeUnit unit,</span><br><span class="line">                       BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                       ThreadFactory threadFactory,</span><br><span class="line">                       RejectedExecutionHandler handler);</span><br></pre></td></tr></table></figure><p>通过线程池性能稳定，也可以获取执行结果，并捕获异常。但是，<font color=dodgerblue>在业务复杂情况下，一个异步调用可能会依赖与另一个异步调用的执行结果。</font></p></li></ol><h6 id="2、线程池的七大参数"><a href="#2、线程池的七大参数" class="headerlink" title="2、线程池的七大参数"></a>2、线程池的七大参数</h6><blockquote><p><code>ThreadPoolExecutor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">* parameters.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">*        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">*        pool</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">*        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">*        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">*        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">*        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment">*        creates a new thread</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment">*        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">*         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">*         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">*         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">*         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">*         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure></blockquote><ul><li><code>corePoolSize</code>：核心线程数【只要线程池存在就一直存在，除非配置 allowCoreThreadTimeOut 】，线程池创建好以后就准备就绪的线程数量，就等待来接受异步任务去执行。</li><li><code>maximumPoolSize</code>：最大线程数量，<strong>控制资源</strong>。</li><li><code>keepAliveTime</code>：存活时间，如果当前正在的线程数量大于核心数量。<br>释放空闲的线程（<code>maximumPoolSize</code>-<code>corePoolSize</code>），只要线程空闲时间大于指定的存活时间。</li><li><code>TimeUnit unit</code>：时间单位。</li><li><code>BlockingQueue&lt;Runnable&gt; workQueue</code>：阻塞队列，如果任务有很多，就会将目前多的任务放在队列里面。<br>只要有线程空闲，就会去队列里面取出新的任务继续执行。</li><li><code>ThreadFactory threadFactory</code>：线程的创建工厂</li><li><code>RejectedExecutionHandler handler</code>：如果队列满了，按照指定的策略拒绝执行任务。<ul><li><code>DiscardOldestPolicy</code>：丢弃策略，<em>丢弃旧的任务</em>；</li><li><code>AbortPolicy</code>：丢弃策略，丢弃新任务并抛出 <code>RejectedExecutionException</code> 异常</li><li><code>CallerRunsPolicy</code>：<em>保留策略</em>，直接执行<code>run()</code>方法，相当于同步执行；</li><li><code>DiscardPolicy</code>：丢弃策略，<em>丢弃新的任务</em>；</li></ul></li></ul><p><strong>运行流程</strong></p><ol><li>线程池创建，准备好<code>core</code>数量的核心线程，准备接受任务；</li><li>新的任务进来，用<code>core</code>准备好的空闲线程执行；<ol><li><code>core</code>满了，就将再进来的任务放入阻塞队列中，空闲的<code>core</code>就会自己去阻塞队列获取任务执行；</li><li>阻塞队列满了，就直接开新线程执行，最大只能开到<code>max</code>指定的数量；</li><li><code>max</code>都执行好了，<code>max-core</code>数量空闲的线程会在<code>keepAliveTime</code>指定的时间后自动销毁，最终保持到<code>core</code>大小；</li><li>如果线程数开到了<code>max</code>的数量，还有新任务进来，就会使用<code>reject</code>指定的拒绝策略进行处理。</li></ol></li><li>所有线程创建都是由指定的<code>factory</code>创建的。</li></ol><font color="red" style="font-weight:600;">面试题</font><blockquote><p><strong>Q：</strong>一个线程池 core：7；max：20；queue：50，100 并发进来怎么分配的？</p><p><strong>A：</strong>先有7个能直接得到执行，接下来50个进入队列排队，在多开13个继续执行，现在70个被安排上了，剩下30个默认拒绝策略。</p></blockquote><h6 id="3、常见的4种线程池"><a href="#3、常见的4种线程池" class="headerlink" title="3、常见的4种线程池"></a>3、常见的4种线程池</h6><ul><li><p><code>newCachedThreadPool</code>：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程；<br>core是0，所有都可回收；</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                               <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                               <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>newFixedThreadPool</code>：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待；<br>固定大小，core=max，都不可回收；</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                               <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                               <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>newScheduledThreadPool</code>：创建一个定长线程池，支持定时及周期性任务执行；<br>定时任务的线程池；</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Executors.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ScheduledThreadPoolExecutor.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">implements</span> <span class="title">ScheduledExecutorService</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">           <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>newSingleThreadExecutor</code>：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务都能执行。<br>单线程的线程池，后台从队列里面获取任务，按个执行。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">     (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                             <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                             <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h6 id="4、开发中为什么使用线程池"><a href="#4、开发中为什么使用线程池" class="headerlink" title="4、开发中为什么使用线程池"></a>4、开发中为什么使用线程池</h6><ul><li>降低资源的消耗：通过重复利用已经创建好的线程减低线程的创建和销毁带来的损耗。</li><li>提高响应速度：因为线程池中的线程数没有超过线程池的最大上限时，有的线程处于等待分配任务的状态，当任务来时无需创建新的线程就能执行。</li><li>提高线程的可管理性：线程池会根据当前系统特点对池内的线程进行优化处理，减少创建和销毁线程带来的系统开销。无限的创建和销毁线程不仅消耗系统资源，还降低系统的稳定性，使用线程池进行统一分配。</li></ul><h5 id="CompletableFuture-异步编排"><a href="#CompletableFuture-异步编排" class="headerlink" title="CompletableFuture 异步编排"></a>CompletableFuture 异步编排</h5><p>业务场景：查询商品详情页的逻辑比较复杂，有些数据还需要远程调用，必然需要花费更多的时间。</p><ol><li>获取sku的基本信息 - 0.5s</li><li>获取sku的图片信息 - 0.5s</li><li>获取sku的促销信息 - 1s</li><li>获取spu的所有销售属性 - 1s</li><li>获取规格参数组及组下的规格参数 - 1.5s</li><li>spu详情 - 1s</li></ol><p>假设商品详情页的每个查询，需要其标注的时间才能完成，那么用户需要5.5s后才能看到商品详情页的内容，是不能被接受的，如果有多个线程同时完成这6步操作，可嫩只需要1.5s即可完成响应。</p><p>Future 是Java 5添加的类，用来描述一个异步计算的结果，可以使用<code>isDone()</code>方法检查计算的完成状态。</p><h6 id="1、创建异步对象"><a href="#1、创建异步对象" class="headerlink" title="1、创建异步对象"></a>1、创建异步对象</h6><p>CompletableFuture 提供了四个静态方法来创建一个异步操作。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> asyncSupplyStage(asyncPool, supplier);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> asyncSupplyStage(screenExecutor(executor), supplier);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">runAsync</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> asyncRunStage(asyncPool, runnable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">runAsync</span><span class="params">(Runnable runnable,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> asyncRunStage(screenExecutor(executor), runnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ol><li>runXxx 都是没有返回结果的，supplyXxx都是可以获取返回结果的；</li><li>可以传入自定义的线程池，否则就用默认的线程池。</li></ol><h6 id="2、计算完成时回调方法"><a href="#2、计算完成时回调方法" class="headerlink" title="2、计算完成时回调方法"></a>2、计算完成时回调方法</h6><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenComplete</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniWhenCompleteStage(<span class="keyword">null</span>, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenCompleteAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniWhenCompleteStage(asyncPool, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenCompleteAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; action, Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniWhenCompleteStage(screenExecutor(executor), action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">exceptionally</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> Function&lt;Throwable, ? extends T&gt; fn)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniExceptionallyStage(fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><code>whenComplete()</code>可以处理正常和异常的计算结果，<code>exceptionally()</code>处理异常情况。</p><p><code>whenComplete()</code>和<code>whenCompleteAsync()</code>的区别</p><ul><li><code>whenComplete()</code>：是执行当前任务的线程执行继续执行whenComplete的任务；</li><li><code>whenCompleteAsync()</code>：是执行把whenCompleteAsync这个任务继续提交给线程池来进行执行。</li></ul><p><code>whenComplete()</code>和<code>exceptionally()</code>的区别</p><ul><li><code>whenComplete()</code>：虽然能感知异常，但是没法修改返回数据；</li><li><code>exceptionally()</code>：可以感知异常，同时返回默认值。</li></ul><p>方法不以Async结尾，意味着action使用相同的线程执行，而Async可能会使用其他线程执行（如果是使用相同的线程池，也可能会被同一个线程选中执行）。</p><h6 id="3、handle方法"><a href="#3、handle方法" class="headerlink" title="3、handle方法"></a>3、handle方法</h6><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; fn)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniHandleStage(<span class="keyword">null</span>, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handleAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; fn)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniHandleStage(asyncPool, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handleAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniHandleStage(screenExecutor(executor), fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>与<code>whenComplete()</code>方法一样，可对结果做最后的处理（可处理异常），可改变返回值。</p><h6 id="4、线程串行方法"><a href="#4、线程串行方法" class="headerlink" title="4、线程串行方法"></a>4、线程串行方法</h6><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApply</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniApplyStage(<span class="keyword">null</span>, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApplyAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniApplyStage(asyncPool, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApplyAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn, Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniApplyStage(screenExecutor(executor), fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenAccept</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniAcceptStage(<span class="keyword">null</span>, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniAcceptStage(asyncPool, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniAcceptStage(screenExecutor(executor), action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenRun</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniRunStage(<span class="keyword">null</span>, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenRunAsync</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniRunStage(asyncPool, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenRunAsync</span><span class="params">(Runnable action,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> uniRunStage(screenExecutor(executor), action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>thenApply</code>：当一个线程依赖另一个线城时，获取上一个任务返回的结果，并返回当前任务的返回值。</li><li><code>thenAccept</code>：消费处理结果，接收任务的处理结果，并消费处理，但无返回结果。</li><li><code>thenRun</code>：只要上面的任务执行完成，就开始执行thenRun，只是处理完成任务后，执行thenRun的后续操作，无返回结果。</li></ul><p>带有Async默认是异步执行的；以上都要前置任务成功完成。</p><p>Function&lt;? super T,? extends U&gt; fn)</p><ul><li>T：上一任务返回结果的类型</li><li>U：当前任务的返回值类型</li></ul><h6 id="5、两任务组合-都要完成"><a href="#5、两任务组合-都要完成" class="headerlink" title="5、两任务组合 - 都要完成"></a>5、两任务组合 - 都要完成</h6><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombine</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> CompletionStage&lt;? extends U&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params"> BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biApplyStage(<span class="keyword">null</span>, other, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombineAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> CompletionStage&lt;? extends U&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params"> BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biApplyStage(asyncPool, other, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombineAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> CompletionStage&lt;? extends U&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params"> BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn, Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biApplyStage(screenExecutor(executor), other, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;Void&gt; <span class="title">thenAcceptBoth</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> CompletionStage&lt;? extends U&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params"> BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biAcceptStage(<span class="keyword">null</span>, other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;Void&gt; <span class="title">thenAcceptBothAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> CompletionStage&lt;? extends U&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params"> BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biAcceptStage(asyncPool, other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;Void&gt; <span class="title">thenAcceptBothAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> CompletionStage&lt;? extends U&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params"> BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; action, Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biAcceptStage(screenExecutor(executor), other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterBoth</span><span class="params">(CompletionStage&lt;?&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         Runnable action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biRunStage(<span class="keyword">null</span>, other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterBothAsync</span><span class="params">(CompletionStage&lt;?&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Runnable action)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biRunStage(asyncPool, other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterBothAsync</span><span class="params">(CompletionStage&lt;?&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Runnable action,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Executor executor)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> biRunStage(screenExecutor(executor), other, action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>两个任务必须都完成，触发该任务。</p><ul><li><code>thenCombine()</code>：组合两个future，获取两个future的返回结果，并<font color=red>返回当前任务的返回值</font>。</li><li><code>thenAcceptBoth()</code>：组合两个future，获取两个future任务的返回结果，然后处理任务，<font color=red>没有返回值</font>。</li><li><code>thenAfterBoth()</code>：组合两个future，<font color=red>不需要获取future的结果</font>，只需两个future处理完成任务后，处理该任务。</li></ul><h6 id="6、两任务组合-一个完成"><a href="#6、两任务组合-一个完成" class="headerlink" title="6、两任务组合 - 一个完成"></a>6、两任务组合 - 一个完成</h6><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">applyToEither</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T, U&gt; fn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orApplyStage(<span class="keyword">null</span>, other, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">applyToEitherAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T, U&gt; fn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orApplyStage(asyncPool, other, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">applyToEitherAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T, U&gt; fn,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor executor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orApplyStage(screenExecutor(executor), other, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">acceptEither</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orAcceptStage(<span class="keyword">null</span>, other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">acceptEitherAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orAcceptStage(asyncPool, other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">acceptEitherAsync</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor executor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orAcceptStage(screenExecutor(executor), other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterEither</span><span class="params">(CompletionStage&lt;?&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Runnable action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orRunStage(<span class="keyword">null</span>, other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   Runnable action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orRunStage(asyncPool, other, action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   Runnable action,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   Executor executor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orRunStage(screenExecutor(executor), other, action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>当两个任务中，任意一个future任务完成的时候，执行任务。</p><ul><li><code>applyToEither</code>：两个任务有一个执行完成，<font color=red>获取它的返回值</font>，处理任务并<font color=red>有新的返回值</font>；</li><li><code>acceptEither</code>：两个任务有一个执行完成，<font color=red>获取它的返回值</font>，处理任务，<font color=red>没有返回值</font>；</li><li><code>runAfterEither</code>：两个任务有一个执行完成，<font color=red>不需要获取future的返回值</font>，处理任务，<font color=red>无返回值</font>。</li></ul><h6 id="7、多任务组合"><a href="#7、多任务组合" class="headerlink" title="7、多任务组合"></a>7、多任务组合</h6><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">allOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> andTree(cfs, <span class="number">0</span>, cfs.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Object&gt; <span class="title">anyOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orTree(cfs, <span class="number">0</span>, cfs.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>allOf</code>：等待所有任务完成；</li><li><code>anyOf</code>：只要有一个任务完成。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;异步与线程池&quot;&gt;&lt;a href=&quot;#异步与线程池&quot; class=&quot;headerlink&quot; title=&quot;异步与线程池&quot;&gt;&lt;/a&gt;异步与线程池&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;li&gt;CompletableFuture 异步编排&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="多线程" scheme="https://lao-biao.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>性能监控与压力测试</title>
    <link href="https://lao-biao.github.io/articles/8b856bf3.html"/>
    <id>https://lao-biao.github.io/articles/8b856bf3.html</id>
    <published>2020-10-17T03:10:13.000Z</published>
    <updated>2020-10-20T07:42:11.971Z</updated>
    
    <content type="html"><![CDATA[<h5 id="性能监控与压力测试"><a href="#性能监控与压力测试" class="headerlink" title="性能监控与压力测试"></a>性能监控与压力测试</h5><ul><li>性能监控</li><li>压力测试</li></ul><a id="more"></a><h5 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h5><h6 id="1、jvm内存模型"><a href="#1、jvm内存模型" class="headerlink" title="1、jvm内存模型"></a>1、jvm内存模型</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="jvm内存模型"></p><ul><li>程序计数器（Program Counter Register）：记录的是正在执行的虚拟机字节码指令的地址，此内存区域是唯一一个在Java虚拟规范中没有规定任何OutOfMemoryError的区域。</li><li>虚拟机栈（VMstack）：<ul><li>描述的是Java方法执行的内存模型，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表，操作数栈，动态链接，方法接口等信息。</li><li>局部变量表存储了编译期可知的各种数据类型、对象引用；</li><li>线程请求的栈深度不够会报StackOverflowError异常；</li><li>栈动态扩展的容量不够会报OutOfMemoryError异常；</li><li>虚拟机栈式线程隔离的，即每个线程都有自己独立的虚拟机栈。</li></ul></li><li>本地方法栈（Native Stack）：本地方法栈类似于虚拟机栈，只不过本地方法栈使用的是本地方法。</li><li>堆（Heap）：几乎所有的对象实例都在堆上分配内存。<br><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E5%A0%86%E6%A8%A1%E5%9E%8B.png" alt="堆模型"></li></ul><h6 id="2、堆"><a href="#2、堆" class="headerlink" title="2、堆"></a>2、堆</h6><p>所有的对象实例以及数组都要在堆上分配。堆是垃圾收集器管理的主要区域，也被称为“GC堆”，也是优化考虑最多的地方。</p><p>堆可以细分为</p><ul><li>新生代：Eden空间、From Survivor空间、To Survivor空间</li><li>老年代</li><li>永久代/元空间：Java8以前，永久代受jvm管理；在Java8以后，元空间直接使用物理内存。默认情况下，元空间的大小仅受本地内存限制。</li></ul><p>垃圾回收</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.png" alt="垃圾回收"></p><p>从Java8开始，Hotspot已经完全将永久代（Permanent Generation）移除，取而代之的是一个新的区域：元空间（Metaspace）。</p><h6 id="3、jconsole与jvisualvm"><a href="#3、jconsole与jvisualvm" class="headerlink" title="3、jconsole与jvisualvm"></a>3、jconsole与jvisualvm</h6><p>jdk的两个小工具jconsole、jvisualvm（升级版的jconsole，jdk1.6），通过命令行启动， 可监控本地和远程应用。远程应用需要配置。</p><p><strong><em>jvisualvm功能</em></strong>：监控内存泄漏，跟踪垃圾回收，执行时内存、cpu分析，线程分析…</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/jvisualvm%E5%8A%9F%E8%83%BD.png" alt="jvisualvm功能"></p><ul><li>运行：正在运行的</li><li>休眠：sleep</li><li>等待：wait</li><li>驻留：线程池里面的空闲线程</li><li>监视：阻塞的显示</li></ul><p><strong><em>安装插件方便查看gc</em></strong>：jvisualvm 工具-&gt;插件</p><h6 id="4、监控指标"><a href="#4、监控指标" class="headerlink" title="4、监控指标"></a>4、监控指标</h6><p><strong>中间件指标</strong></p><p><strong>数据库指标</strong></p><ul><li>SQL耗时越小越好，一般情况下微秒级别；</li><li>命中率越高越好，一般情况下不能低于95%；</li><li>锁等待次数越低越好，等待时间越短越好。</li></ul><blockquote><p><code>-Xmx100m</code></p></blockquote><div class="table-container"><table><thead><tr><th>压测内容</th><th>压测线程数</th><th>吞吐量/s</th><th>90%响应时间</th><th>99%响应时间</th></tr></thead><tbody><tr><td>nginx（cpu）</td><td>50</td><td>1613</td><td>47</td><td>86</td></tr><tr><td>gateway(cpu)</td><td>50</td><td>4215</td><td>16</td><td>34</td></tr><tr><td>简单服务(无中间件)</td><td>50</td><td>6482</td><td>18</td><td>64</td></tr><tr><td>首页一级菜单渲染</td><td>50</td><td>216(db,thymeleaf)</td><td>345</td><td>696</td></tr><tr><td>首页渲染(缓存)</td><td>50</td><td>有提升</td><td></td><td></td></tr><tr><td>首页渲染(缓存，优化db(加索引)，关日志)</td><td>50</td><td>有较大提升</td><td></td><td></td></tr><tr><td>三级分类数据获取</td><td>50</td><td>2(db)</td><td>-</td><td>-</td></tr><tr><td>三级分类数据获取(优化业务)</td><td>50</td><td>93</td><td></td><td></td></tr><tr><td>三级分类数据获取(使用redis作为缓存)</td><td>50</td><td>840</td><td>84</td><td>115</td></tr><tr><td>首页全量数据获取</td><td>50</td><td>7(静态资源)</td><td>-</td><td>-</td></tr><tr><td>nginx+gateway</td><td>50</td><td></td><td></td><td></td></tr><tr><td>gateway+简单服务</td><td>50</td><td>1304</td><td>79</td><td>149</td></tr><tr><td>全链路</td><td>50</td><td>113</td><td>1016</td><td>7031</td></tr></tbody></table></div><ul><li><font color=red>中间件越多，性能损失越大，大多都损失在网络交互；</font></li><li>业务<ul><li>db（MySQL优化：服务器、索引）</li><li>模板渲染速度（缓存）</li><li>静态资源：nginx动静分离</li></ul></li></ul><h6 id="5、jvm分析与调优"><a href="#5、jvm分析与调优" class="headerlink" title="5、jvm分析与调优"></a>5、jvm分析与调优</h6><p><strong>几个常用工具</strong></p><p><strong>命令示例</strong></p><p><strong>调优项</strong></p><h5 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h5><p>压力测试考察当前软硬件环境下系统所能承受的最大负荷，并帮助找出系统瓶颈所在。压测都是为了系统在线上的处理能力和稳定性维持在一个标准范围内。</p><p>使用压力测试，有希望找到很多种其他测试方法更难发现的错误。有两种错误类型是<strong>内存泄漏</strong>，<strong>并发与同步</strong>。</p><p>有效的压力测试将应用以下这些关键条件：<strong>重复</strong>，<strong>并发</strong>，<strong>量级</strong>，<strong>随机变化</strong>。</p><h6 id="1、性能指标"><a href="#1、性能指标" class="headerlink" title="1、性能指标"></a>1、性能指标</h6><ul><li><em>RT</em>（Response Time）响应时间： 指用户从客户端发起一个请求开始，到客户端接收到服务器返回的响应结束，整个过程所耗费的时间。</li><li><em>HPS</em>（Hits Per Second）：每秒点击数。</li><li><em>TPS</em>（Transaction per Second）：系统每秒处理交易数。（完整的业务流程，并不是单指数据库的事务）</li><li><em>QPS</em>（Query per Second）：系统每秒查询次数。<br>对于互联网业务中，如果某些业务有且仅有一个请求连接，HPS=TPS=QPS，一般情况下用TPS来衡量整个业务流程，用QPS来衡量接口查询次数，用HPS表示对服务器单继请求。</li><li>无论TPS、QPS、HPS，此指标是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况下：<ul><li>金融行业：1,000TPS~50,000TPS，不包括互联网化的活动</li><li>保险行业：100TPS~100,000TPS，不包括互联网化的活动</li><li>制造业：10TPS~5,000TPS</li><li>互联网电子商务：10,000TPS~1,000,000TPS</li><li>互联网中型网站：1,000TPS~50,000TPS</li><li>互联网小型网站：500TPS~100,000TPS</li></ul></li><li>最大响应时间（Max Response Time）：指用户发出请求或者指令到系统做出反应（响应）的最大时间。</li><li>最少响应时间（Minimum Response Time）：指用户发出请求或者指令到系统做反应（响应）的最少时间。</li><li>90%响应时间（90% Response Time）：指所有用户的响应时间进行排序，第90%的响应时间。</li><li>从外部看，性能测试主要关注以下三个指标：<ul><li><em>吞吐量</em>：每秒系统能够处理的请求数、任务数。</li><li><em>响应时间</em>：服务处理一个请求或一个任务的耗时。</li><li><em>错误率</em>：一批请求中结果出错的请求所占比例。</li></ul></li></ul><h6 id="2、JMeter"><a href="#2、JMeter" class="headerlink" title="2、JMeter"></a>2、JMeter</h6><blockquote><p><a href="https://jmeter.apache.org/" target="_blank" rel="noopener">https://jmeter.apache.org/</a></p></blockquote><p>流程：</p><ol><li>添加线程组</li><li>添加HTTP请求</li><li>添加监听器</li><li>启动压测，查看</li></ol><p>影响性能考虑点：数据库、应用程序、中间件（tomcat、nginx）、网络和操作系统等。<br>应用类型：<em>CPU密集型</em>（计算、过滤、排序等）、<em>IO密集型</em>（网络、磁盘、数据库、redis等）。</p><p><font color=red>Address Already in use 错误</font><br>Windows本身提供的端口访问机制的问题。<br>Windows提供给 TCP/IP 链接的端口为1024-5000，并且要四分钟来循环回收它们，就导致在短时间内跑大量的请求时端口占满了。</p><ol><li><p>打开注册表（regedit）</p></li><li><p>在 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Paramters</code>下<br>（1）右击parameters，添加一个新的DWORD，名字为MaxUserPort。<br>（2）然后双击MaxUserPort，输入数值数据为65534，基数选择十进制。</p><p>TCPTimedWaitDelay：30 </p></li><li><p>修改配置完毕之后需要重启机器才会生效。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;性能监控与压力测试&quot;&gt;&lt;a href=&quot;#性能监控与压力测试&quot; class=&quot;headerlink&quot; title=&quot;性能监控与压力测试&quot;&gt;&lt;/a&gt;性能监控与压力测试&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;性能监控&lt;/li&gt;
&lt;li&gt;压力测试&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="jvm" scheme="https://lao-biao.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch笔记</title>
    <link href="https://lao-biao.github.io/articles/e97d3f23.html"/>
    <id>https://lao-biao.github.io/articles/e97d3f23.html</id>
    <published>2020-09-23T11:35:31.000Z</published>
    <updated>2020-09-24T11:20:30.309Z</updated>
    
    <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。Elasticsearch 在 Apache Lucene 的基础上开发而成，由 Elasticsearch N.V.（即现在的 Elastic）于2010首次发布。Elasticsearch 以其简单的REST风格API、分布式特性、速度和可扩展性而闻名，是 Elastic Stack 的核心组件；Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指Elastic Search、Logstash 和 Kibana），目前 Elastic Stack 包括一系列丰富的轻量级数据采集代理，这些代理统称为Beats，可用来向 Elasticsearch 发送数据。</p><a id="more"></a><h6 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h6><ul><li>应用程序搜索</li><li>网站搜索</li><li>企业搜索</li><li>日志处理和分析</li><li>基础设施指标和容器监测</li><li>应用程序性能监测</li><li>地理空间数据分析和可视化</li><li>安全分析</li><li>业务分析</li></ul><h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><p>原始数据会从从多个来源（包括日志、系统指标和网络应用程序）输入到 Elasticsearch 中，数据采集指在 ElastIcsearch 中进行索引之前解析、标准化并充实这些原始数据的过程，这些数据在 ElasticSearch 中索引完成之后，用户便可针对数据运行复杂的查询，并使用聚合来检索自身数据的复杂汇总，在 Kibana 中，用户可以基于自己的数据创建强大的可视化，分享仪表板，并对 Elastic Stack 进行管理。</p><h6 id="Logstash-的用途"><a href="#Logstash-的用途" class="headerlink" title="Logstash 的用途"></a>Logstash 的用途</h6><p>Logstash 是 Elastic Stack 的核心产品之一，可用来对数据进行聚合和处理，并将数据发送到 Elasticsearch。Logstash 是一个开源的服务器端数据处理管道，允许您在将数据索引到 Elasticsearch 之前同时从多个来源采集数据，并对数据进行充实和转换。</p><h6 id="Kibana-的用途"><a href="#Kibana-的用途" class="headerlink" title="Kibana 的用途"></a>Kibana 的用途</h6><p>Kibana 是一款适用于 Elasticsearch 的数据可视化和管理工具，可以提供实时的直方图、线形图、饼状图和地图。Kibana 同时还包括诸如 Canvas 和 Elastic Maps 等高级应用程序；Canvas 允许用户基于自身数据创建定制的动态信息图表，而 Elastic Maps 则可用来对地理空间数据进行可视化。</p><h6 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h6><blockquote><p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p></blockquote><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p>Elasticsearch <em>索引</em>指相互关联的文档集合。Elasticsearch 会以 JSON 文档的形式存储数据。每个文档都会在一组<em>键</em>（字段或属性的名称）和它们对应的值（字符串、数字、布尔值、日期、<em>数值</em>组、地理位置或其他类型的数据）之间建立联系。</p><p>Elasticsearch 使用的是一种名为<em>倒排索引</em>的数据结构，这一结构的设计可以允许十分快速地进行全文本搜索。倒排索引会列出在所有文档中出现的每个特有词汇，并且可以找到包含每个词汇的全部文档。</p><p>在索引过程中，Elasticsearch 会存储文档并构建倒排索引，这样用户便可以近实时地对文档数据进行搜索。索引过程是在索引 API 中启动的，通过此 API 您既可向特定索引中添加 JSON 文档，也可更改特定索引中的 JSON 文档。</p><h6 id="1、Index（索引）"><a href="#1、Index（索引）" class="headerlink" title="1、Index（索引）"></a>1、Index（索引）</h6><p>动词，相当于 MySQL 中的 insert；</p><p>名词，相当于 MySQL 中的 Database。</p><h6 id="2、Type（类型）"><a href="#2、Type（类型）" class="headerlink" title="2、Type（类型）"></a>2、Type（类型）</h6><p>在 Index（索引）中，可以定一个或多个类型。<br>类似MySQL中的 Table；每一种类型的数据放在一起。</p><h6 id="3、Document（文档）"><a href="#3、Document（文档）" class="headerlink" title="3、Document（文档）"></a>3、Document（文档）</h6><p>保存在某个索引（Index）下，某种类型（Type）的一个数据（Document），文档是 JSON 格式的，Document就像是 MySQL中的某个 Table 里的内容。</p><h6 id="4、倒排索引机制"><a href="#4、倒排索引机制" class="headerlink" title="4、倒排索引机制"></a>4、倒排索引机制</h6><p>分词-记录<br>检索-根据相关性得分，倒排。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><h6 id="1、下载镜像文件"><a href="#1、下载镜像文件" class="headerlink" title="1、下载镜像文件"></a>1、下载镜像文件</h6><p><code>docker pull elasticsearch:7.4.2</code>  存储和检索数据</p><p><code>docker pull kibana:7.4.2</code>  可视化检索数据</p><h6 id="2、创建实例"><a href="#2、创建实例" class="headerlink" title="2、创建实例"></a>2、创建实例</h6><ol><li><p>Elasticsearch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/config</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br><span class="line">echo "http.host: 0.0.0.0" &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e "discovery.type=single-node" \</span><br><span class="line">-e ES_JAVA_OPTS="-Xms64m -Xmx512m" \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.4.2</span><br></pre></td></tr></table></figure><p>权限不足</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]# docker logs elasticsearch</span><br><span class="line">OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br><span class="line">&#123;"type": "server", "timestamp": "2020-09-17T05:35:06,988Z", "level": "WARN", "component": "o.e.b.ElasticsearchUncaughtExceptionHandler", "cluster.name": "elasticsearch", "node.name": "3523576d272f", "message": "uncaught exception in thread [main]", </span><br><span class="line">"stacktrace": ["org.elasticsearch.bootstrap.StartupException: ElasticsearchException[failed to bind service]; nested: AccessDeniedException[/usr/share/elasticsearch/data/nodes];",</span><br><span class="line">"at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125) ~[elasticsearch-cli-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:115) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"Caused by: org.elasticsearch.ElasticsearchException: failed to bind service",</span><br><span class="line">"at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:614) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:255) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:221) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:221) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:349) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"... 6 more",</span><br><span class="line">"Caused by: java.nio.file.AccessDeniedException: /usr/share/elasticsearch/data/nodes",</span><br><span class="line">"at sun.nio.fs.UnixException.translateToIOException(UnixException.java:90) ~[?:?]",</span><br><span class="line">"at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111) ~[?:?]",</span><br><span class="line">"at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116) ~[?:?]",</span><br><span class="line">"at sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:389) ~[?:?]",</span><br><span class="line">"at java.nio.file.Files.createDirectory(Files.java:693) ~[?:?]",</span><br><span class="line">"at java.nio.file.Files.createAndCheckIsDirectory(Files.java:800) ~[?:?]",</span><br><span class="line">"at java.nio.file.Files.createDirectories(Files.java:786) ~[?:?]",</span><br><span class="line">"at org.elasticsearch.env.NodeEnvironment.lambda$new$0(NodeEnvironment.java:272) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.env.NodeEnvironment$NodeLock.&lt;init&gt;(NodeEnvironment.java:209) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.env.NodeEnvironment.&lt;init&gt;(NodeEnvironment.java:269) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:275) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:255) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:221) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:221) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:349) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-7.4.2.jar:7.4.2]",</span><br><span class="line">"... 6 more"] &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /mydata/elasticsearch/</span><br></pre></td></tr></table></figure></li><li><p>Kibana</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://192.168.134.128:9200 \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-d kibana:7.4.2</span><br></pre></td></tr></table></figure></li></ol><h5 id="初步检索"><a href="#初步检索" class="headerlink" title="初步检索"></a>初步检索</h5><h6 id="1、-cat"><a href="#1、-cat" class="headerlink" title="1、_cat"></a>1、_cat</h6><div class="table-container"><table><thead><tr><th style="text-align:center">请求方式</th><th style="text-align:center">请求路径</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>GET</code></td><td style="text-align:center"><code>/_cat/nodes</code></td><td style="text-align:center">查看所有节点</td></tr><tr><td style="text-align:center"><code>GET</code></td><td style="text-align:center"><code>/_cat/health</code></td><td style="text-align:center">查看es健康状况</td></tr><tr><td style="text-align:center"><code>GET</code></td><td style="text-align:center"><code>/_cat/master</code></td><td style="text-align:center">查看主节点</td></tr><tr><td style="text-align:center"><code>GET</code></td><td style="text-align:center"><code>/_cat/indices</code></td><td style="text-align:center">查看所有索引（<code>show databases;</code>）</td></tr></tbody></table></div><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/elasticsearch/%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF.png" alt="查看节点信息"></p><h6 id="2、索引一个文档（保存）"><a href="#2、索引一个文档（保存）" class="headerlink" title="2、索引一个文档（保存）"></a>2、索引一个文档（保存）</h6><p>保存一个数据，保存在哪个索引的哪个类型下，指定用哪个唯一标识</p><p><code>PUT</code> customer/external/1; 在 cutomer 索引下的external 类型下保存1号数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"Ming"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PUT</code> 和 <code>POST</code>都可以<br><code>POST</code>新增/修改，如果不指定id，会自动生成id，指定id就会修改这个数据，并新增版本号。</p><p><code>PUT</code>可以新增/修改，<code>PUT</code>必须指定id，由于<code>PUT</code>需要指定id，一般用来做修改操作，不指定id会报错。<br><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/elasticsearch/%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95.png" alt="添加索引"></p><h6 id="3、查询文档"><a href="#3、查询文档" class="headerlink" title="3、查询文档"></a>3、查询文档</h6><blockquote><p><code>GET</code> customer/external/1</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"_seq_no"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"John"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>&quot;_seq_no&quot;: 1</code> 并发控制字段，每次更新就会+1，用来做乐观锁。<br><code>&quot;_primary_term&quot;: 1</code> 并发控制字段，主分片重新分配，如重启，就会变化。</p></blockquote><p>乐观锁修改：请求携带 <code>?if_seq_no=1&amp;if_primary_term=1</code>修改指定的版本的数据<br>如果版本不符合则会返回<code>409</code>，保证数据的唯一性。</p><h6 id="4、更新文档"><a href="#4、更新文档" class="headerlink" title="4、更新文档"></a>4、更新文档</h6><blockquote><p><code>POST</code> /customer/external/1/_update</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">"doc"</span>:&#123;</span><br><span class="line">           <span class="attr">"name"</span>:<span class="string">"Ming"</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>多次提交同一份数据，会对比元数据，数据一致时，版本号不会叠加，操作结果为 <strong>noop</strong>，序列号也不会改变。</p><blockquote><p><code>POST</code> /customer/external/1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"Ming"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>不会检查元数据，版本叠加、序列号叠加。</p><blockquote><p><code>PUT</code> /customer/external/1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"Ming"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>不会检查元数据，版本叠加、序列号叠加。</p><p><strong>不同</strong>：POST操作会对比文档数据，如果相同不会有什么操作，文档 version 不增加，PUT操作总会将数据重新保存并增加 version 版本。带_update对比元数据如果一样就不进行任何操作。</p><p><strong>注意</strong>：</p><ul><li>对于大并发更新，不带update；</li><li>对于大并发查询偶尔更新，带update；对比更新，重新计算分配规则。</li></ul><p>需求：更新同时增加属性</p><ol><li><p><code>PUT</code>/<code>POST</code> /customer/external/1</p></li><li><p><code>POST</code> /customer/external/1/_update</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"doc"</span>:&#123;</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"Ming"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="5、删除文档-amp-索引"><a href="#5、删除文档-amp-索引" class="headerlink" title="5、删除文档&amp;索引"></a>5、删除文档&amp;索引</h6><div class="table-container"><table><thead><tr><th style="text-align:center">请求方式</th><th style="text-align:center">请求路径</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>DELETE</code></td><td style="text-align:center"><code>/customer/external/1</code></td><td style="text-align:center">删除文档</td></tr><tr><td style="text-align:center"><code>DELETE</code></td><td style="text-align:center"><code>/customer</code></td><td style="text-align:center">删除索引</td></tr></tbody></table></div><h6 id="6、bulk批量-API"><a href="#6、bulk批量-API" class="headerlink" title="6、bulk批量 API"></a>6、bulk批量 API</h6><blockquote><p><code>POST</code> /customer/external/_bulk</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"Ming"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_id"</span>:<span class="string">"2"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"Jhon"</span>&#125;</span><br></pre></td></tr></table></figure><p>语法格式<br>{action:{metadata}}\n<br>{request body}\n<br>{action:{metadata}}\n<br>{request body}\n</p></blockquote><p>其他实例</p><blockquote><p>POST /_bluk</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"delete"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"website"</span>,<span class="attr">"_type"</span>:<span class="string">"blog"</span>,<span class="attr">"_id"</span>:<span class="string">"123"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"create"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"website"</span>,<span class="attr">"_type"</span>:<span class="string">"blog"</span>,<span class="attr">"_id"</span>:<span class="string">"123"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"My first blog post"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"website"</span>,<span class="attr">"_type"</span>:<span class="string">"blog"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"My second blog post"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"update"</span>:&#123;<span class="attr">"_index"</span>:<span class="string">"website"</span>,<span class="attr">"_type"</span>:<span class="string">"blog"</span>,<span class="attr">"_id"</span>:<span class="string">"123"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"doc"</span>:&#123;<span class="attr">"title"</span>:<span class="string">"My updated blog post"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>bulk API，以此按顺序执行所有的 action（动作），如果一个单个的动作因任何原因而失败，它将继续处理它后面剩余的动作。当 bulk API 返回时，它将提供每个动作的状态（与发送的顺序相同），所以可以检查是否一个指定的动作是不是失败了。</p><h6 id="7、样本测试数据"><a href="#7、样本测试数据" class="headerlink" title="7、样本测试数据"></a>7、样本测试数据</h6><blockquote><p>官方样本数据 <a href="https://github.com/elastic/elasticsearch/edit/master/docs/src/test/resources/accounts.json" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch/edit/master/docs/src/test/resources/accounts.json</a></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"account_number"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"balance"</span>:<span class="number">16623</span>,</span><br><span class="line">    <span class="attr">"firstname"</span>:<span class="string">"Bradshaw"</span>,</span><br><span class="line">    <span class="attr">"lastname"</span>:<span class="string">"Mickenzie"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">"gender"</span>:<span class="string">"F"</span>,</span><br><span class="line">    <span class="attr">"address"</span>:<span class="string">"244 Columbus Place"</span>,</span><br><span class="line">    <span class="attr">"employer"</span>:<span class="string">"Eurron"</span>,</span><br><span class="line">    <span class="attr">"email"</span>:<span class="string">"bradshawmickezie@euron.com"</span>,</span><br><span class="line">    <span class="attr">"city"</span>:<span class="string">"Hobucken"</span>,</span><br><span class="line">    <span class="attr">"state"</span>:<span class="string">"CO"</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><code>POST</code> /bank/account/_bulk</p></blockquote><h5 id="进阶检索"><a href="#进阶检索" class="headerlink" title="进阶检索"></a>进阶检索</h5><h6 id="1、SearchAPI"><a href="#1、SearchAPI" class="headerlink" title="1、SearchAPI"></a>1、SearchAPI</h6><p>ES 支持两种基本方式检索：</p><ul><li>一个是通过使用 REST request URI 发送搜索参数（uri+检索参数）</li><li>另一个是通过使用 REST request body 来发送（uri+请求体）</li></ul><p>检索信息</p><table>    <tr>        <td><code>GET</code> /bank/_search</td>        <td>检索bank下所有信息，包括type和docs</td>    </tr>        <tr>        <td><code>GET</code> /bank/_search?q=*&sort=account_number:asc</td>        <td>请求参数方式检索</td>    </tr>    <tr>        <td colspan="2">            响应结果解释：<br>            took-Elasticsearch执行搜索的时间（毫秒）<br>            time-out 搜索是否超时<br>            _shards 搜索了多少个分片，以及统计了成功/失败的搜索分片<br>            hits 搜索结果<br>            hits.total 搜索结果<br>            hits.hits 实际的搜索结果数组（默认为前10的文档）<br>            sort 结果的排序key（键），没有则按score排序<br>            score和max_score 相关性得分和最高得分（全文检索用）<br>        </td>    </tr></table><blockquote><p><code>GET</code> /bank/_search</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"account_number"</span>: <span class="string">"asc"</span>,</span><br><span class="line">      <span class="attr">"balance"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTP客户端工具（postman），get 请求不能携带请求体，变为post也是一样的。POST 一个 JSON 风格的查询请求体到 _search API。</p><p>一旦搜索的结果被返回，Elasticsearch 就完成了这次请求，并且不会维护任何服务端的资源或者结果的 cusor。</p><h6 id="2、Query-DSL"><a href="#2、Query-DSL" class="headerlink" title="2、Query DSL"></a>2、Query DSL</h6><p><strong>基本语法</strong></p><p>Elasticsearch 提供了一个可以执行查询的 JSON 风格的 DSL（domain-specific-language，领域特定语言）。这个被称为 Query DSL，该查询语言非常全面。</p><ul><li><p>一个查询语句的典型结构</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QUERY_NAME:&#123;</span><br><span class="line">        ARGUMENT:VALUE,</span><br><span class="line">        ARGUMENT:VALUE...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果针对某个字段，结构为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">QUERY_NAME:&#123;</span><br><span class="line">FIELD_NAME:&#123;</span><br><span class="line">            ARGUMENT:VALUE,</span><br><span class="line">            ARGUMENT:VALUE...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>query定义如何查询查询：</p><ul><li>match_all 查询类型（代表查询所有的所有），es中可以在query中组合非常多的查询类型完成复杂查询。</li><li>除了query参数之外，可以传递其它的参数以改变查询结果。如 sort，size，from+size 限定，完成分页功能。</li><li>sort 排序，多字段排序，会在前序字段相等时按后续字段内部排序，否则以前序为准。</li></ul><p><strong>返回部分字段</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"_source"</span>: [<span class="string">"firstname"</span>,<span class="string">"balance"</span>]&#125;</span><br></pre></td></tr></table></figure><p>单个字段使用 <code>{filed}</code>，多个字段用 `[filed,filed…]</p><p><strong>match 匹配查询</strong></p><p>match 当搜索字符串类型的时候，会进行全文检索，并且每条记录都有相关性得分。</p><blockquote><p><code>GET</code> /bank/_search</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询出 address 中包含 mill、lane 或者 mill lane 的所有记录，并给出相关性得分。</span><br><span class="line">&#123;<span class="attr">"query"</span>: &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"address"</span>: <span class="string">"mill lane"</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>全文检索按照评分进行排序，会对检索条件进行分词匹配。</p><p><strong>match_phrase 短语匹配</strong></p><p>把需要匹配的值当成一整个单词（不分词）进行检索。使用 match + FILED.keyword 可以实现同种效果。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"query"</span>:&#123;<span class="attr">"match_phrase"</span>:&#123;<span class="attr">"address"</span>:<span class="string">"mill lane"</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>multi_match 多字段匹配</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># city,address 中包含mill</span><br><span class="line">&#123;<span class="attr">"query"</span>:&#123;<span class="attr">"multi_match"</span>:&#123;<span class="attr">"query"</span>:<span class="string">"mill"</span>,<span class="attr">"fields"</span>:[<span class="string">"city"</span>,<span class="string">"address"</span>]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>bool 复合查询</strong></p><p>复合语句可以合并任何其它查询语句，包括复合语句，复合语句之间可以互相嵌套。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"age"</span>: <span class="string">"40"</span> &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"must_not"</span>: [</span><br><span class="line">        &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"state"</span>: <span class="string">"ID"</span> &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;<span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"lastname"</span>: <span class="string">"walton"</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>must 必须满足</li><li>must_not 必须不满足</li><li>should 满足或不满足都可以，满足的匹配得分更高。</li></ul><p><strong>filter</strong></p><p>并不是搜索的查询都需要产生分数，特别是那些仅用于”<em>filtering</em>“ 过滤的文档，为了不计算分数 Elasticsearch 会自动检查场景并且优化查询的执行。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: &#123; <span class="attr">"match_all"</span>: &#123;&#125; &#125;,</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">          <span class="attr">"balance"</span>: &#123;</span><br><span class="line">            <span class="attr">"gte"</span>: <span class="number">20000</span>,</span><br><span class="line">            <span class="attr">"lte"</span>: <span class="number">30000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>term</strong></p><p>和 match 一样，匹配某个属性的值。全文检索字段用 match，其他非 <code>text</code> 字段匹配用 <code>term</code>。</p><p>避免<code>term</code>对<code>text</code>字段使用查询。</p><p>默认情况下，Elasticsearch更改<code>text</code>字段的值作为analysis的一部分。这会使查找text字段值的精确匹配变得困难。</p><p>要搜索<code>text</code>字段值，改用<code>match</code>查询。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"query"</span>:&#123;<span class="attr">"term"</span>:&#123;<span class="attr">"age"</span>:<span class="number">28</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>aggregations（执行聚合）</strong></p><p>聚合提供了从数据中分组和提取数据的能力，最简单的聚合方法大致等于 SQL GROUP BY 和 SQL 聚合函数。在 Elasticsearch 中，有执行搜索返回 hits（命中结果），并且同时返回聚合结果，把一个响应中的所有 hits（命中结果）分隔开的能力。这是非常强大有效的，可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个的）返回结果，使用一次简洁和简化的 API 来避免网络往返。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"aggregations" : &#123;</span><br><span class="line">    "&lt;aggregation_name&gt;" : &#123;</span><br><span class="line">        "&lt;aggregation_type&gt;" : &#123;</span><br><span class="line">            &lt;aggregation_body&gt;</span><br><span class="line">        &#125;</span><br><span class="line">        [,"meta" : &#123;  [&lt;meta_data_body&gt;] &#125; ]?</span><br><span class="line">        [,"aggregations" : &#123; [&lt;sub_aggregation&gt;]+ &#125; ]?</span><br><span class="line">    &#125;</span><br><span class="line">    [,"&lt;aggregation_name_2&gt;" : &#123; ... &#125; ]*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 搜索 address 中包含 mill 的所有人的年龄分布以及平均年龄，但不显示这些人的详情。</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"mill"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"group_by_age"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"age_avg"</span>: &#123;</span><br><span class="line">      <span class="attr">"avg"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"age"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子聚合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 按照年龄聚合，并且请求这些年龄段的人的平均薪资</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"group_by_age"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"balance_avg"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"balance"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套聚合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 查出所有年龄分布，并且这些年龄段中的M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"age_agg"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"age"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">100</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"gender_agg"</span>: &#123;</span><br><span class="line">          <span class="attr">"terms"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"gender.keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">            <span class="attr">"gender_balance_agg"</span>: &#123;</span><br><span class="line">              <span class="attr">"avg"</span>: &#123;</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"balance"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"balance_agg"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"balance"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h6><p>映射是定义文档及其包含的字段的存储和索引方式的过程。</p><ul><li>哪些字符串字段应视为全文字段。</li><li>哪些字段包含数字，日期或地理位置坐标。</li><li>日期值的格式。</li><li>自定义规则，用于控制动态添加字段的映射。</li></ul><p>映射定义具有：</p><ul><li><p>元数据字段</p><p>元数据字段用于自定义如何处理文档的关联元数据。元数据字段的例子包括文档 <code>_index</code>，<code>_id</code>和 <code>_source</code>领域。</p></li><li><p>领域</p><p>映射包含properties与文档相关的字段列表。每个字段都有其自己的数据类型。</p></li></ul><p><table><br>    <th>    <td>类型</td>    <td>解释</td>    </th></p><p><tr>    <td rowspan="5">核心类型</td>    <td>字符串（String）</td>    <td>text,keyword</td></tr></p><p><tr>    <td>数字类型（Numeric）</td>    <td>long,integer,short,byte,double,float,half_float,scaled_float</td></tr></p><p><tr>    <td>日期类型（Date）</td>    <td>date</td></tr></p><p><tr>    <td>布尔类型（Boolean）</td>    <td>boolean</td></tr></p><p><tr>    <td>二进制类型（Binary）</td>    <td>binary</td></tr></p><p><tr>    <td rowspan="3">聚合类型</td>    <td>数组类型（String）</td>    <td>Array支持不针对特定的类型</td></tr></p><p><tr>    <td>对象类型（Object）</td>    <td>object用于单JSON对象</td></tr></p><p><tr>    <td>兼容类型（Nested）</td>    <td>Nested用于JSON对象数组</td></tr></p><p><tr>    <td rowspan="2">地理类型（Geo）</td>    <td>地理坐标（Geo-Points）</td>    <td>geo_point用于描述经纬度坐标</td></tr></p><p><tr>    <td>地理坐标（Geo-Shape）</td>    <td>geo_shape用于描述复杂形状，如多边形</td></tr></p><p><tr>    <td rowspan="5">特定类型</td>    <td>IP类型</td>    <td>ip用于描述ipv4和ipv6</td></tr></p><p><tr>    <td>补全类型（Completion）</td>    <td>completion提供自动完成提示</td></tr></p><p><tr>    <td>令牌计数类型（Token Count）</td>    <td>token_count用于统计字符串中的词条数量</td></tr></p><p><tr>    <td>附件类型（Attachment）</td>    <td>mapper-attachment插件，支持附件如Microsoft Office格式，Open Document格式，ePub，HTML索引为attachment数据类型</td></tr></p><p><tr>    <td>抽取类型（Percolator）</td>    <td>接受特定领域查询语言（query-dsl）的查询</td></tr><br>&lt;/table&gt;<br><strong>（1）Elasticsearch7去掉type概念</strong></p><p>关系型数据库中两个数据表示是独立的，即使它们里面有相同名称的列也不影响使用，但ES中不是这样的。Elasticsearch是基于Lucene开发的搜索引擎，而ES中不同type下名称相同的filed最终在Lucene中的处理方式是一样的。</p><ul><li>两个不同type下的两个user_name，在ES同一个索引下其实被认同为是同一个filed，必须在两个不同的type中定义相同的filed映射。否则，不同type中的相同字段名称就会在处理中出现冲突的情况，导致Lucene处理效率下降。</li><li>去掉type就是为了提高ES处理数据的效率。</li></ul><p>Elasticsearch 7.x URL中的type参数为可选，比如，索引一个文档不再要求提供文档类型。</p><p>Elasticsearcn 8.x 不在支持URL中的type参数。</p><p>解决：将索引从多类型迁移到单类型，每种类型文档一个独立索引。</p><p><strong>（2）mapping相关操作</strong></p><ul><li><p>查看mapping信息：<code>GET /bank/mapping</code></p></li><li><p>修改mapping信息：（自动猜测的映射类型）</p><p>| JSON类型             | 域类型  |<br>| —————————— | ———- |<br>| 布尔型 true | false | boolean |<br>| 整数                 | long    |<br>| 浮点数               | double  |<br>| 字符串，有效日期     | date    |<br>| 字符串               | string  |</p><blockquote><p><code>PUT</code> /my_index</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 自定义索引并指定数据类型</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>:&#123;<span class="attr">"type"</span>: <span class="string">"integer"</span>&#125;,</span><br><span class="line">      <span class="attr">"email"</span>:&#123;<span class="attr">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">      <span class="attr">"name"</span>:&#123;<span class="attr">"type"</span>: <span class="string">"text"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加新的字段映射</p><blockquote><p>PUT /my_index/mapping</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 新增新的字段</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"employee_id"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"long"</span>,</span><br><span class="line">      <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新映射：对于已经存在的映射字段，不能更新，更新必须创建新的索引进行<em>数据迁移</em>。</p></li><li><p>数据迁移：先创建出 new_index 的正确映射，通过如下格式进行数据迁移</p><blockquote><p><code>POST</code>   reindex【固定写法】</p></blockquote><p>1、创建映射 <code>PUT</code> /new_bank</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"account_number"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"address"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"age"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"balance"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"city"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"email"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"employer"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"firstname"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"gender"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"lastname"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">              <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"state"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2、数据迁移 <code>POST</code> _reindex</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"source"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"bank"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"account"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dest"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"new_bank"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bank中数据有类型，在迁移时要指定其类型，在6.x之后废弃了 <em>type</em>，迁移后的数据类型为<em>_doc</em>。</p></li></ul><h6 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h6><p>一个 tokenizer（分词器）接收一个字符流，将之分割为独立的 tokens（词元，通常是独立的单词），然后输出tikens流。例如，whitespace tokenizer遇到空白符时分割文本，它会将文本“Quick brown fox！”分割为[Quick，brown，fox！]。该 tokenizer（分词器）还负责记录每个 term（词条）的顺序或 position 位置（用于phrase短语和 word proximity 词邻近查询），以及 term （词条）所代表的原始 word（单词）的 start（起始）和 end（结束）的 character offsets（字符偏移量）（用于高亮显示搜索的内容）。Elasticsearch 提供了很多内置的分词器，可以用来构建 customer analyzers（自定义分词器）。</p><ol><li><p>安装 ik 分词器</p><blockquote><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.4.2" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.4.2</a></p></blockquote><p>将文件解压上传到 <code>/mydata/elasticsearch/plugins</code> 文件夹下，开启权限，重启 Elasticsearch 即可。</p></li><li><p>创建自定义分词字典</p><p>创建nginx容器，备份配置<code>/etc/nginx</code>到<code>/mydata</code>目录下，重命名配置为conf，并移动到mydata下，删除该容器，通过下列命令创建新的nginx容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><p>在/mydata/nginx/html/es/目录下创建分词字典。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /mydata/nginx/html/es/fenci.txt</span><br></pre></td></tr></table></figure></li><li><p>自定义词库<br>修改 <code>/usr/share/elasticsearch/plugins/ik/config/</code> 中的 <code>IKAnalyzer.cfg.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"remote_ext_dict"</span>&gt;</span>http://192.168.134.128/es/fenci.txt<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="Elasticsearch-Rest-Client"><a href="#Elasticsearch-Rest-Client" class="headerlink" title="Elasticsearch-Rest-Client"></a>Elasticsearch-Rest-Client</h5><p><strong>（1）9300 TCP</strong>   spring-data-elasticsearch:transport-api.jar</p><ul><li>spring boot 版本不同，transport-api.jar 不同，不能适配es版本。</li><li>7.x 已经不建议使用，8以后就要废弃。</li></ul><p><strong>（2）9200 HTTP</strong></p><ul><li>JestClient 非官方，更新慢。</li><li>RestTemplate、HttpCLient 模拟发HTTP请求，ES很多操作需要自己封装，麻烦。</li><li>Elasticsearch-Rest-Client 官方RestClient，封装了ES操作，API层次分明，上手简单。</li></ul><h6 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h6><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定spring boot中elasticsearch的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置，给容器中注入一个RestHighLevelClient。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">esRestClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可配置多个</span></span><br><span class="line">        <span class="comment">// 套接字：ip+端口号，协议</span></span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"192.168.134.128"</span>, <span class="number">9200</span>, <span class="string">"http"</span>)));</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用：参考官方文档 </p><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high.html</a></p></blockquote><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/elasticsearch/Elasticsearch%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt="Elasticsearch的使用"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。Elasticsearch 在 Apache Lucene 的基础上开发而成，由 Elasticsearch N.V.（即现在的 Elastic）于2010首次发布。Elasticsearch 以其简单的REST风格API、分布式特性、速度和可扩展性而闻名，是 Elastic Stack 的核心组件；Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指Elastic Search、Logstash 和 Kibana），目前 Elastic Stack 包括一系列丰富的轻量级数据采集代理，这些代理统称为Beats，可用来向 Elasticsearch 发送数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="elasticsearch" scheme="https://lao-biao.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>商城项目知识点</title>
    <link href="https://lao-biao.github.io/articles/12db23db.html"/>
    <id>https://lao-biao.github.io/articles/12db23db.html</id>
    <published>2020-09-12T09:19:41.000Z</published>
    <updated>2020-10-20T01:31:46.556Z</updated>
    
    <content type="html"><![CDATA[<p>gulimall 商城项目是一个基于 Spring Boot，Spring Cloud，Spring Cloud Alibaba  等相关框架的分布式项目。前端部分采用 vue 开发。采用人人开源框架进行项目逆向开发，生成基本的 mapper 和前端 vue 页面。</p><a id="more"></a><h4 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h4><h5 id="获取并封装三级分类"><a href="#获取并封装三级分类" class="headerlink" title="获取并封装三级分类"></a>获取并封装三级分类</h5><p>从数据库中拿到三级分类数据，进行组装成树形结构。</p><blockquote><p>CategoryEntity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分类的子分类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@TableField</span>(exist = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> List&lt;CategoryEntity&gt; children;</span><br></pre></td></tr></table></figure><p>CategoryServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title">listWithTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 1、查出所有分类</span></span><br><span class="line"> List&lt;CategoryEntity&gt; entities = baseMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line"> <span class="comment">// 2、组装成父子的树形结构</span></span><br><span class="line"> <span class="comment">// 找到所有的一级分类</span></span><br><span class="line"> List&lt;CategoryEntity&gt; levelOneMenus = entities.stream().filter(categoryEntity -&gt;</span><br><span class="line">                                                               categoryEntity.getParentCid() == <span class="number">0</span>).map(menu -&gt; &#123;</span><br><span class="line">     menu.setChildren(getChildren(menu, entities));</span><br><span class="line">     <span class="keyword">return</span> menu;</span><br><span class="line"> &#125;).sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> (menu1.getSort() == <span class="keyword">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="keyword">null</span> ? <span class="number">0</span> : menu2.getSort());</span><br><span class="line"> &#125;).collect(Collectors.toList());</span><br><span class="line"> <span class="keyword">return</span> levelOneMenus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归查找所有菜单的子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;CategoryEntity&gt; <span class="title">getChildren</span><span class="params">(CategoryEntity root, List&lt;CategoryEntity&gt; all)</span> </span>&#123;</span><br><span class="line"> List&lt;CategoryEntity&gt; children = all.stream().filter(categoryEntity -&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> categoryEntity.getParentCid().equals(root.getCatId());</span><br><span class="line"> &#125;).map(categoryEntity -&gt; &#123;</span><br><span class="line">     <span class="comment">// 1、找到子菜单</span></span><br><span class="line">     categoryEntity.setChildren(getChildren(categoryEntity, all));</span><br><span class="line">     <span class="keyword">return</span> categoryEntity;</span><br><span class="line"> &#125;).sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">     <span class="comment">// 2、菜单的排序</span></span><br><span class="line">     <span class="keyword">return</span> (menu1.getSort() == <span class="keyword">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="keyword">null</span> ? <span class="number">0</span> : menu2.getSort());</span><br><span class="line"> &#125;).collect(Collectors.toList());</span><br><span class="line"> <span class="keyword">return</span> children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h5 id="MyBatisPlus逻辑删除分类"><a href="#MyBatisPlus逻辑删除分类" class="headerlink" title="MyBatisPlus逻辑删除分类"></a>MyBatisPlus逻辑删除分类</h5><ol><li><p><del>配置全局逻辑删除规则</del></p></li><li><p><del>配置逻辑删除的组件Bean</del></p></li><li><p>实体类字段上加上<code>@TableLogic</code>逻辑删除注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 是否显示[0-不显示，1显示]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@TableLogic</span>(value = <span class="string">"1"</span>, delval = <span class="string">"0"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure></li></ol><h5 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8.png" alt="文件存储"></p><h5 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h5><ol><li><p>给Bean添加校验注解，并定义自己的message提示</p><blockquote><p>参考<code>javax.validation.constraints;</code></p><p><code>@NotBlank</code>内容不能不为空，且不能为一个空格得字符串</p><p><code>@NotNull</code>非空</p><p><code>@NotEmpty</code>非空字符串、集合、Map、数组 …</p><p><code>Pattern</code>正则匹配</p><p><code>@Range</code>范围</p><p><code>@Min</code>最小值</p><p><code>@Max</code>最大值</p><p><code>@URL</code>字段必须为有效的url地址</p></blockquote></li><li><p>开启校验功能<br><code>@Valid</code><br>效果：校验错误以后会有默认的响应</p></li><li><p>给校验的Bean后紧跟一个BindingResult，就可以获取到校验的结果</p></li></ol><p>注意：<code>@Pattern</code>注解不能用在<code>Long</code>和<code>Integer</code>上，只用用在<code>String</code>类型上。</p><h5 id="统一的异常处理"><a href="#统一的异常处理" class="headerlink" title="统一的异常处理"></a>统一的异常处理</h5><p><code>@ControllerAdvice</code>将校验处理集中在异常处理控制器中。</p><ol><li>编写异常处理类，使用<code>@RestControllerAdvice</code>注解，将信息以json的格式返回。</li><li>使用<code>@ExceptionHandler</code>标注方法可以处理的异常。</li></ol><h5 id="系统错误码"><a href="#系统错误码" class="headerlink" title="系统错误码"></a>系统错误码</h5><p>错误码和错误信息定义</p><ol><li><p>错误码定义规则为5位数字；</p></li><li><p>前两位表示业务场景，后三位表示错误码；</p></li><li><p>维护错误码后需要维护错误描述，将它们定义位枚举形式</p></li><li><p>分组校验（多场景的复杂校验）</p><ol><li>给校验注解标注什么情况需要进行校验</li><li><code>@Validated</code>指定校验分组</li><li>默认没有指定分组的校验注解，在分组校验情况下不生效，只会在<code>@Validated</code>生效。</li></ol></li><li><p>自定义校验</p><ol><li><p>编写一个自定义的校验注解</p></li><li><p>编写一个自定义的校验器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListValueConstraintValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">ListValue</span>, <span class="title">Integer</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>关联自定义的校验器和自定义的校验注解</p><p><code>validatedBy</code>可以指定多个不同的校验器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(</span><br><span class="line">        validatedBy = &#123;ListValueConstraintValidator<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ListValue</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>项目错误码错误信息定义规则</p><table>    <caption>错误码错误信息定义</caption>    <thead>        <td>标识码</td>        <td>业务场景</td>        <td>错误码</td>        <td>错误信息</td>    </thead>    <tbody>        <tr>            <td>10</td>            <td>通用</td>            <td>001</td>            <td>参数格式校验</td>        </tr>        <tr>            <td>11</td>            <td>商品</td>            <td></td>            <td></td>        </tr>        <tr>            <td>12</td>            <td>订单</td>            <td></td>            <td></td>        </tr>        <tr>            <td>13</td>            <td>购物车</td>            <td></td>            <td></td>        </tr>        <tr>            <td>14</td>            <td>物流</td>            <td></td>            <td></td>        </tr>    </tbody></table><h5 id="SPU与SKU"><a href="#SPU与SKU" class="headerlink" title="SPU与SKU"></a>SPU与SKU</h5><p><strong>SPU</strong>：Standard Product Unit（标准化产品单元）<br>是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。</p><p><strong>SKU</strong>：Stock Keeping Unit（库存量单位）<br>即库存进出计量的基本单元，可以是以件，盒，托盘等为单位。SKU是对于大型连锁超市DC（配送中心）物流管理的一个必要的方法。现在已经被引申位产品统一编号的简称，每种产品均对应有唯一的SKU号。</p><blockquote><p>iPhoneX 是 SPU、Mi10 是SPU</p><p>iPhoneX 64G 黑曜石 是 SKU</p><p>Mi10 +64G + 黑色 是SKU</p></blockquote><h5 id="基本属性【规格参数】与销售特性"><a href="#基本属性【规格参数】与销售特性" class="headerlink" title="基本属性【规格参数】与销售特性"></a>基本属性【规格参数】与销售特性</h5><p>每个分类下的商品共享规格参数，与销售属性。只是有些商品不一定要用这个分类下全部的属性：</p><ul><li>属性是以三级分类组织起来的</li><li>规格参数中有些是可以提供检索的</li><li>规格参数也是基本属性，他们具有自己的分组</li><li>属性的分组也是以三级分类组织起来的</li><li>属性名确定的，但是值是每一个商品不同来决定的</li></ul><h5 id="Object划分"><a href="#Object划分" class="headerlink" title="Object划分"></a>Object划分</h5><ol><li><p><strong>PO（President Object）持久对象</strong><br>PO是对应数据库中某个表中的一条记录，多个记录可以用PO的集合。PO中应该不包含任何对数据库的操作。</p></li><li><p><strong>DO（Domain Object）领域对象</strong><br>从现实世界中抽象出来的有形或无形的业务实体。</p></li><li><p><strong>TO（Transfer Object）数据传输对象</strong><br>不同的应用程序之间传输的对象。</p></li><li><p><strong>DTO（Data Transfer Object）数据传输对象</strong><br>这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，泛指用于展示层与服务层之间的数据传输对象。</p></li><li><p><strong>VO （Value Object）值对象</strong><br>通常用于业务层之间的数据传递，和PO一样也是仅仅包含数据而已。但应是抽象出的业务对象，可以和表对应，也可以不，这根据业务的需要。用<code>new</code>关键字创建，由GC回收的。<br>也称为<code>View Object</code> 视图对象：</p><ol><li>接收页面传递来的数据，封装对象；</li><li>将业务处理完成的对象，封装成页面要用的数据。</li></ol></li><li><p><strong>BO（Business Object）业务对象</strong><br>从业务模型的角度来看，见UML元件领域中的领域对象。封装业务逻辑的Java对象，通过调用DAO方法，结合PO和VO进行业务操作。Business Object：业务对象，主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其他的对象。比如一个简历，有教育经历、工作经历、社会关系等，可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。建立一个对应建立的BO对象处理简历，每个BO包含这些PO，这样处理业务逻辑时，可以针对BO去处理。</p></li><li><p><strong>POJO（Plain Ordinary Java Object）简单无规则Java对象</strong><br>传统意义的Java对象。在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 Persistent Object 完全是一个符合 Java Bean 规范的纯 Java对象，没有增加别的属性和方法。最基本的 Java Bean，只有属性字段及 Setter 和 Getter 方法。</p><p>POJO 是 DO/DTO/BO/VO 的统称。</p></li><li><p><strong>DAO（Data Access Object）数据</strong><br>是一个 sun 公司的标准 J2EE 设计模式，这个模式中有个接口就是 DAO，它负责持久层的操作。为业务层提供接口。此对象用于访问数据库，通常和 PO 结合使用，DAO 中包含了各种数据库的操作方法。通过它的方法，结合 PO 对数据库进行相关的操作。夹在逻辑与数据库资源中间，配合 VO，提供数据库的CRUD操作。</p></li></ol><h5 id="数据库相关细节"><a href="#数据库相关细节" class="headerlink" title="数据库相关细节"></a>数据库相关细节</h5><p>在后端中，数据库操作<font color=red>不推荐</font><strong>多表关联查询</strong>，由于多表关联查询容易产生较大的笛卡尔积，增加了数据库的负担。例如，表a，表b为数据表（均含1000条记录），表c为中间表（1000条记录），通过三表关联查询，所产生的笛卡尔积为10亿条记录。</p><p>解决方案</p><ol><li>关联表增加冗余字段；</li><li>查询或修改时同时对冗余字段更新。</li></ol><h5 id="thymeleaf-模板引擎"><a href="#thymeleaf-模板引擎" class="headerlink" title="thymeleaf 模板引擎"></a>thymeleaf 模板引擎</h5><ol><li><p>thymeleaf ：关闭缓存</p></li><li><p>静态资源都放在static文件夹下就可以按照路径直接访问</p></li><li><p>页面放在templates下，直接访问<br>Spring Boot 访问项目时，默认会找 index（<code>WebMvcAutoConfiguration.java</code>，<code>ResourceProperties.java</code>）</p></li><li><p>页面修改不重启服务器实时更新【热启动】</p><ul><li><p>引入dev-tools</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改完页面，重新编译页面/项目，如果是修改代码配置，推荐重启。</p></li></ul></li></ol><h5 id="nginx-Windows搭建域名访问环境"><a href="#nginx-Windows搭建域名访问环境" class="headerlink" title="nginx+Windows搭建域名访问环境"></a>nginx+Windows搭建域名访问环境</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/nginx+windows%E6%90%AD%E5%BB%BA%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E7%8E%AF%E5%A2%83.png" alt="nginx+windows搭建域名访问环境"></p><p>让nginx帮助进行反向代理，所有来自gulimall.com的请求，都转到商品服务。</p><h6 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" alt="正向代理与反向代理"></p><p>配置 <code>C:\Windows\System32\drivers\etc\hosts</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gulimall</span></span><br><span class="line"><span class="meta">192.168.134.128</span> <span class="string">gulimall.com</span></span><br></pre></td></tr></table></figure><h6 id="nginx配置文件nginx-conf"><a href="#nginx配置文件nginx-conf" class="headerlink" title="nginx配置文件nginx.conf"></a>nginx配置文件<em>nginx.conf</em></h6><ul><li><em>全局块</em> 配置影响nginx全局的指令，如：用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li><em>events块</em> 配置影响nginx服务器或与用户的网络连接，如：每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网络连接，开启多个网络连接序列化等。</li><li><em>http块</em> 可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置，如文件引入，mime-type定义，日志定义，是否使用sendfile传输文件，连接超时时间，单连接请求次数等。<ul><li><em>http全局块</em> 如：upstream，错误页面，连接超时等。</li><li><em>server块</em> 配置虚拟主机的相关参数，一个http中可以有多个server。<ul><li><em>location</em> 配置请求的路由，以及各种页面的处理情况。</li></ul></li></ul></li></ul><h6 id="配置nginx的配置"><a href="#配置nginx的配置" class="headerlink" title="配置nginx的配置"></a>配置nginx的配置</h6><p>将请求负载均衡到网关，由网关来决定调用服务。</p><p><code>nginx.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">upstream</span> gulimall&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">10.194.33.27:88</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gulimall.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>  [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  gulimall.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://gulimall;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b style="color:red">问题：nginx代理给网关，会丢失请求原始Host地址</b></p><p>nginx配置转发保留请求头中的Host。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gateway网关配置：将gulimall.com及其子域名转发到商品服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span>       </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gulimall_host_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Host=**.gulimall.com,gulimall.com</span></span><br></pre></td></tr></table></figure><h6 id="域名映射效果"><a href="#域名映射效果" class="headerlink" title="域名映射效果"></a>域名映射效果</h6><p>请求接口、请求页面：gulimall.com</p><p>nginx直接代理网关，由网关来判断</p><ul><li><code>/api/**</code>，转交给对应的服务器</li><li>满足域名，转交给对应的服务</li></ul><h4 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h4><h5 id="三级分类"><a href="#三级分类" class="headerlink" title="三级分类"></a>三级分类</h5><p>需求</p><ul><li>查看三级分类以树状展示<br>后端处理数据以层级形式返回json对象，前端使用el-tree组件展示。</li><li>以拖拽的方式更改层级或排序<br>拖拽条件：被拖动的当前节点以及所在的父节点总层数不能大于3；<br>拖拽完成同时更新其他节点的顺序以及子节点的顺序和层级。</li></ul><blockquote><p>category.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tree</span><br><span class="line">         :data&#x3D;&quot;menus&quot;</span><br><span class="line">         show-checkbox</span><br><span class="line">         node-key&#x3D;&quot;catId&quot;</span><br><span class="line">         ref&#x3D;&quot;menuTree&quot;</span><br><span class="line">         :expand-on-click-node&#x3D;&quot;false&quot;</span><br><span class="line">         :props&#x3D;&quot;defaultProps&quot;</span><br><span class="line">         :default-expanded-keys&#x3D;&quot;expandedKey&quot;</span><br><span class="line">         :draggable&#x3D;&quot;draggable&quot;</span><br><span class="line">         :allow-drop&#x3D;&quot;allowDrop&quot;</span><br><span class="line">         @node-drag-end&#x3D;&quot;handleDragEnd&quot;</span><br><span class="line">         &gt;</span><br><span class="line">&lt;&#x2F;el-tree&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                menus: [],</span><br><span class="line">                defaultProps: &#123;</span><br><span class="line">                    children: &quot;children&quot;,</span><br><span class="line">                    label: &quot;name&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                expandedKey: [],</span><br><span class="line">                dialogVisible: false, &#x2F;&#x2F; 对话框显示标记</span><br><span class="line">                &#x2F;&#x2F; 三级分类</span><br><span class="line">                category: &#123;</span><br><span class="line">                    catId: null,</span><br><span class="line">                    name: &quot;&quot;,</span><br><span class="line">                    parentCid: 0,</span><br><span class="line">                    catLevel: 0,</span><br><span class="line">                    showStatus: 1,</span><br><span class="line">                    sort: 0,</span><br><span class="line">                    productCount: 0,</span><br><span class="line">                    icon: null,</span><br><span class="line">                    productUnit: null,</span><br><span class="line">                &#125;,</span><br><span class="line">                maxLevel: 0,</span><br><span class="line">                updateNodes: [],</span><br><span class="line">                draggable: false, &#x2F;&#x2F; 拖拽</span><br><span class="line">                pCid: [],</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            &#x2F;**</span><br><span class="line">             * 节点能否被放置</span><br><span class="line">             * type: inner,prev,next</span><br><span class="line">             *&#x2F;</span><br><span class="line">            allowDrop(draggingNode, dropNode, type) &#123;</span><br><span class="line">                &#x2F;&#x2F; 1.被拖动的当前节点以及所在的父节点总层数不能大于3</span><br><span class="line">                &#x2F;&#x2F; 被拖动的当前节点的总层数</span><br><span class="line">                &#x2F;&#x2F; console.log(&quot;当前移动的菜单: &quot;, draggingNode, dropNode, type);</span><br><span class="line">                this.countNodeLevel(draggingNode);</span><br><span class="line">                &#x2F;&#x2F; 当前拖动的节点+父节点所在的深度不大于3即可</span><br><span class="line">                let deep &#x3D; Math.abs(this.maxLevel - draggingNode.level) + 1;</span><br><span class="line">                &#x2F;&#x2F; console.log(deep, this.maxLevel, type);</span><br><span class="line">                if (type &#x3D;&#x3D;&#x3D; &quot;inner&quot;) return deep + dropNode.level &lt;&#x3D; 3;</span><br><span class="line">                else return deep + dropNode.parent.level &lt;&#x3D; 3;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; 统计当前节点的总层数</span><br><span class="line">            countNodeLevel(node) &#123;</span><br><span class="line">                &#x2F;&#x2F; 找到所有子节点，求出最大深度</span><br><span class="line">                if (node.childNodes !&#x3D;&#x3D; null &amp;&amp; node.childNodes.length &gt; 0) &#123;</span><br><span class="line">                    for (let i &#x3D; 0; i &lt; node.children.length; i++) &#123;</span><br><span class="line">                        if (node.childNodes[i].level &gt; this.maxLevel) &#123;</span><br><span class="line">                            this.maxLevel &#x3D; node.childNodes[i].level;</span><br><span class="line">                        &#125;</span><br><span class="line">                        this.countNodeLevel(node.childNodes[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;**</span><br><span class="line">             * 处理拖拽事件</span><br><span class="line">             * dropType: before、after、inner</span><br><span class="line">             *&#x2F;</span><br><span class="line">            handleDragEnd(draggingNode, dropNode, dropType, ev) &#123;</span><br><span class="line">                &#x2F;&#x2F; console.log(&quot;tree drag end: &quot;, draggingNode, dropNode, dropType);</span><br><span class="line">                let pCid &#x3D; 0;</span><br><span class="line">                let siblings &#x3D; null;</span><br><span class="line">                &#x2F;&#x2F; 1.当前节点最新父节点ID</span><br><span class="line">                if (dropType &#x3D;&#x3D;&#x3D; &quot;inner&quot;) &#123;</span><br><span class="line">                    pCid &#x3D; dropNode.data.catId;</span><br><span class="line">                    siblings &#x3D; dropNode.childNodes;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    pCid &#x3D; dropNode.parent.data.catId ? dropNode.parent.data.catId : 0;</span><br><span class="line">                    siblings &#x3D; dropNode.parent.childNodes;</span><br><span class="line">                &#125;</span><br><span class="line">                this.pCid.push(pCid);</span><br><span class="line">                &#x2F;&#x2F; 2.当前拖拽节点的最新顺序</span><br><span class="line">                for (let i &#x3D; 0; i &lt; siblings.length; i++) &#123;</span><br><span class="line">                    if (siblings[i].data.catId &#x3D;&#x3D;&#x3D; draggingNode.data.catId) &#123;</span><br><span class="line">                        let catLevel &#x3D; draggingNode.data.level;</span><br><span class="line">                        &#x2F;&#x2F; 如果遍历的是当前拖拽的节点，修改其父ID</span><br><span class="line">                        if (siblings[i].level !&#x3D;&#x3D; catLevel) &#123;</span><br><span class="line">                            &#x2F;&#x2F; 当前节点层级发生变化</span><br><span class="line">                            catLevel &#x3D; siblings[i].level;</span><br><span class="line">                            &#x2F;&#x2F; 修改子节点的层级</span><br><span class="line">                            this.updateChildNodes(siblings[i]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        this.updateNodes.push(&#123;</span><br><span class="line">                            catId: siblings[i].data.catId,</span><br><span class="line">                            sort: i,</span><br><span class="line">                            parentCid: pCid,</span><br><span class="line">                            catLevel,</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        this.updateNodes.push(&#123;</span><br><span class="line">                            catId: siblings[i].data.catId,</span><br><span class="line">                            sort: i,</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 3.当前拖拽节点的层级</span><br><span class="line">                &#x2F;&#x2F; console.log(&quot;update nodes:&quot;, this.updateNodes);</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; 更新子节点排序</span><br><span class="line">            updateChildNodes(node) &#123;</span><br><span class="line">                if (node.childNodes.length &lt; 0) return;</span><br><span class="line">                &#x2F;&#x2F; 遍历子节点</span><br><span class="line">                for (let i &#x3D; 0; i &lt; node.childNodes.length &gt; 0; i++) &#123;</span><br><span class="line">                    let currentNode &#x3D; node.childNodes[i].data;</span><br><span class="line">                    this.updateNodes.push(&#123;</span><br><span class="line">                        catId: currentNode.catId,</span><br><span class="line">                        catLevel: node.childNodes[i].level,</span><br><span class="line">                    &#125;);</span><br><span class="line">                    this.updateChildNodes(node.childNodes[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            getMenus() &#123;</span><br><span class="line">                &#x2F;&#x2F; 获取菜单</span><br><span class="line">                this.$http(&#123;</span><br><span class="line">                    url: this.$http.adornUrl(&quot;&#x2F;product&#x2F;category&#x2F;list&#x2F;tree&quot;),</span><br><span class="line">                    method: &quot;get&quot;,</span><br><span class="line">                &#125;).then((&#123; data &#125;) &#x3D;&gt; &#123;</span><br><span class="line">                    &#x2F;&#x2F; console.log(data.data);</span><br><span class="line">                    this.menus &#x3D; data.data;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.getMenus();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></blockquote><h5 id="父子组件、兄弟组件传递数据"><a href="#父子组件、兄弟组件传递数据" class="headerlink" title="父子组件、兄弟组件传递数据"></a>父子组件、兄弟组件传递数据</h5><ol><li><p>子组件=&gt;父组件，事件机制：子组件给父组件发送一个事件，携带上数据。（其他方式：<code>$parent</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"事件名"</span>, data, node, component);<span class="comment">// 传递的数据是可变数组，以el-tree为例</span></span><br></pre></td></tr></table></figure><p>data：节点数据<br>node：节点信息<br>component：组件信息</p><p>父组件监听事件：在引用子组件的位置绑定事件要执行的方法，即可获取到子组件传递的数据。</p></li><li><p>父组件=&gt;子组件<br>直接关系：</p><ol><li>属性传值(props)</li><li><code>$children</code>（数组）</li><li><code>$refs</code> 引用</li></ol><p>跨多层关系： provide / inject</p></li><li><p>兄弟组件：通过创建空的vue实例进行通信（推荐使用<strong><em>vuex</em></strong>，状态树）</p></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h5><ol><li><p>分布式基础概念</p><p>微服务、注册中心、配置中心、远程调用、Feign、网关；</p></li><li><p>基础开发</p><p>Spring Boot2.0、Spring Cloud、MyBatis-Plus、Vue组件化、阿里云对象存储；</p></li><li><p>环境</p><p>Vagrant、Linux、Docker、MySQL、Redis、逆向工程&amp;人人开源；</p></li><li><p>开发规范</p><ul><li>数据校验JSR303、全局异常处理、全局统一返回、全局跨域处理；</li><li>枚举状态、业务状态码、VO与TO与PO划分、逻辑删除；</li><li>Lombok：@Data、@Slf4j；</li></ul></li></ol><h6 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gulimall 商城项目是一个基于 Spring Boot，Spring Cloud，Spring Cloud Alibaba  等相关框架的分布式项目。前端部分采用 vue 开发。采用人人开源框架进行项目逆向开发，生成基本的 mapper 和前端 vue 页面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>GOF23种设计模式</title>
    <link href="https://lao-biao.github.io/articles/42ae4d28.html"/>
    <id>https://lao-biao.github.io/articles/42ae4d28.html</id>
    <published>2020-09-09T04:09:26.000Z</published>
    <updated>2020-09-09T04:21:40.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GOF-Group-of-Four-23种设计模式"><a href="#GOF-Group-of-Four-23种设计模式" class="headerlink" title="GOF(Group of Four)23种设计模式"></a>GOF(Group of Four)23种设计模式</h3><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/DesignPattern/GOF23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png" alt="GOF23种设计模式"></p><a id="more"></a><h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h4><ul><li>单例模式</li><li>工厂模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li></ul><h5 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h5><p>核心作用：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p><h6 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h6><ul><li>Windows任务管理器</li><li>Windows回收站</li><li>网站的计数器</li><li>应用程序的日志应用</li><li>数据库连接池的设计</li><li>操作系统的文件系统</li><li>Application(Servlet编程)</li><li>Spring的Bean</li><li>Servlet</li><li>Spring MVC框架/Struts框架中控制器对象</li></ul><h6 id="常见的五种单例模式"><a href="#常见的五种单例模式" class="headerlink" title="常见的五种单例模式"></a>常见的五种单例模式</h6><ul><li>主要：<ul><li>饿汉式：线程安全，调用效率高，不能延时加载。</li><li>懒汉式：线程安全，调用效率不高，可以延时加载。</li></ul></li><li>其他：<ul><li>双重检测锁式：由于JVM底层内部模型原因，偶尔会出问题，不建议使用。</li><li>静态内部类式：线程安全，调用效率高，可以延时加载。</li><li>枚举单例：线程安全，调用效率高，不能延时加载，并且可以天然的防止反射和反序列化漏洞。</li></ul></li></ul><p>单例对象性能比较：</p><ul><li>占用资源少，不需要延时加载  <strong>枚举式</strong> 好于 饿汉式</li><li>占用资源大，需要延时加载    <strong>静态内部类模式</strong> 好于 懒汉式</li></ul><font color=red>注意：使用反射、反序列化破解单例模式。</font><h5 id="工厂模式-Factory"><a href="#工厂模式-Factory" class="headerlink" title="工厂模式 Factory"></a>工厂模式 Factory</h5><p>实现了<strong>创建者</strong>和<strong>调用者</strong>的分离。</p><p>核心本质：</p><ul><li>实例化对象，用工厂方法代替new操作。</li><li><p>将选择实现类、创建对象同意管理和控制，从而将调用者根实现类解耦。</p></li><li><p>简单工厂模式  用来生产同一等级结构的任意产品（对于增加新的产品，需要修改已有代码）。</p></li><li>(静态工厂模式)工厂类使用静态方法，通过接收的参数的不同来返回不同的对象实例，不完全满足OCP。</li><li>工厂方法模式  用来生产同一等级结构的固定产品（支持增加任意产品），不修改已有类的前提下，通过增加新的工厂类实现扩展。</li><li>抽象工厂模式  用来生产不同产品族的全部产品（对于增加新的产品，无能为力，支持增加产品族）<br>抽象工厂模式是工厂方法模式的升级版本，在有多个业务品种、业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式，不可以增加产品，可以增加产品族。</li></ul><h6 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h6><ul><li>JDK中Calendar的getInstance方法</li><li>JDBC中的Connection对象的获取</li><li>Hibernate中SessionFactory创建Session</li><li>Spring中IOC容器创建管理bean对象</li><li>XML解析时的DocumentBuilderFactory创建解析器对象</li><li>反射中Class对象的newInstance()</li></ul><h6 id="面向对象设计的基本原则"><a href="#面向对象设计的基本原则" class="headerlink" title="面向对象设计的基本原则"></a>面向对象设计的基本原则</h6><ul><li>OCP(开闭原则，Open-Closed Principle) 一个软件的实体应当对扩展开放，对修改关闭。</li><li>DIP(依赖倒转原则，Dependence Inversion Principle) 要针对接口编程，不要针对实现编程。</li><li>LoD(迪米特法则，Law of Demeter) 只与你喜欢的朋友通信，而避免和陌生人通信。<br>一个软件实体应当尽可能少的与其他实体发生相互作用</li></ul><h6 id="简单工厂模式vs工厂方法模式"><a href="#简单工厂模式vs工厂方法模式" class="headerlink" title="简单工厂模式vs工厂方法模式"></a>简单工厂模式vs工厂方法模式</h6><ul><li>结构复杂度：<strong>简单工厂模式</strong>优于工厂方法模式。</li><li>代码复杂度：简单工厂模式在结构方面相对简单，在代码方面比较简单。增加类时需要添加很多方法，而工厂方法只完成单一任务，代码较简单。</li><li>客户端编程难度：工厂方法模式在工厂类结构引入了接口从而满足<strong>OCP（开闭原则）</strong>，但在客户端编码中需要对工厂类进行实例化，而简单工厂模式的工厂类是个静态类，在客户端无需实例化。</li><li>管理上的难度：工厂方法模式<strong>&gt;</strong>简单工厂模式</li></ul><h5 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式 Builder"></a>建造者模式 Builder</h5><p>本质：分离了对象组件的单独构造（由Builder来负责）和装配（由Director负责）从而可以构造出复杂的对象<br>适合于：某个对象的构建过程复杂的情况下使用。<br>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用</p><h6 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h6><ul><li>StringBuilder类的append()方法</li><li>SQL中的PreparedStatement</li><li>JDOM中，DomBuilder、SAXBuilder</li></ul><h5 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 Prototype"></a>原型模式 Prototype</h5><p>通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</p><p>以某个对象为原型，复制出新的对象。</p><p>效率高，直接克隆，避免了重新执行构造过程步骤。</p><p>克隆类似于new但不同于new，new创建对象属性采用的是默认值，克隆出的对象的属性值完全和原型对象相同，并且克隆出的新对象不会影响原型对象。</p><h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><ul><li>Cloneable接口和clone()方法。</li><li>Prototype模式中实现起来最困难的地方就是<strong>内存复制操作</strong>，Java中提供了<code>clone()</code>方法。</li></ul><p>浅克隆<br>深克隆：修改<code>clone()</code>方法；序列化和反序列化</p><h5 id="创建者模式总结"><a href="#创建者模式总结" class="headerlink" title="创建者模式总结"></a>创建者模式总结</h5><p>单例模式：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p><p>工厂模式：</p><ul><li>简单工厂模式：用来生产同一等级结构中的任意产品（对于增加新的产品，需要修改已有代码）</li><li>工厂方法模式：用来生产同一等级结构中的固定产品（支持增加任意产品）</li><li>抽象工厂模式：用来生产不同产品族的全部产品（对于新增加的产品，无能为力，支持增加产品族）</li></ul><p>建造者模式：分离了对象子组件的单独构造（由Builder负责）和装配（由Director负责），从而可以构造出复杂的对象。</p><p>原型模式：通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</p><h4 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h4><p>核心作用：从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</p><ul><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h5 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式 Adapter"></a>适配器模式 Adapter</h5><p>将一个类的接口转换成客户希望的另一个接口。使得由于接口不兼容而不能一起工作的那些类可以在一起工作。</p><ul><li>目标接口Target：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。</li><li>需要适配的类Adapter：通过包装一个需要适配的对象，把原接口转换成目标接口。</li></ul><h6 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h6><ul><li>旧系统改造和升级</li><li>系统维护</li><li><code>java.io.InputStreamReader</code> InputStream</li><li><code>java.io.OutputStreamWriter</code> OutputStream</li></ul><h5 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式 Proxy Pattern"></a>代理模式 Proxy Pattern</h5><p>核心作用：通过代理，控制对对象的访问。</p><p>可以详细控制访问某个（某类）对象的方法，在调用这个方法前做前置处理，调用这个方法后做后置处理（AOP的微观实现）。</p><h6 id="核心角色"><a href="#核心角色" class="headerlink" title="核心角色"></a>核心角色</h6><ul><li>抽象角色：定义代理角色和真实角色的公共对外方法。</li><li>真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。关注真正的业务逻辑。</li><li>代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。将统一的流程控制放到代理角色中处理。</li></ul><h6 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h6><ul><li>安全代理：屏蔽对真实角色的直接访问。</li><li>远程代理：通过代理类处理远程方法调用RMI。</li><li>延迟加载：先加载轻量级的代理对象，真正需要在加载真实对象。</li></ul><h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><ul><li>静态代理：静态定义代理类</li><li>动态代理类：动态生成代理类<ul><li>JDK自带的动态代理<br><code>java.lang.reflect.Proxy</code> 动态生成代理类和对象<br><code>java.lang.reflect.InvocationHandler</code> 处理器接口，可以通过invoke()方法实现对真实角色的代理访问。<br>每次通过Proxy生产代理类对象时都要指定对应的处理器对象</li><li>java assist字节码操作库实现</li><li>CGLIB</li><li>ASMI底层使用指令，可维护性较差</li></ul></li></ul><p>动态代理相对于静态代理的优点：抽象角色中(接口)都被转移到调用处理器一个集中的方法中处理，更加灵活、统一地处理众多的方法。</p><h6 id="开发框架中的应用场景"><a href="#开发框架中的应用场景" class="headerlink" title="开发框架中的应用场景"></a>开发框架中的应用场景</h6><ul><li>struts2中拦截器的实现</li><li>数据库连接池关闭处理</li><li>Hibernate中延时加载的实现</li><li>MyBatis中实现拦截器插件</li><li>AspectJ的实现</li><li>Spring中AOP的实现<ul><li>日志拦截</li><li>声明式事务处理</li></ul></li><li>Web Service</li><li>RMI远程方法调用</li><li>开源AOP框架AspectJ</li></ul><h5 id="桥接模式-Bridge"><a href="#桥接模式-Bridge" class="headerlink" title="桥接模式 Bridge"></a>桥接模式 Bridge</h5><p>分层继承结构</p><p>核心要点：处理多层继承结构，处理维度变化的场景 。将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联</p><h6 id="实际开发中应用场景"><a href="#实际开发中应用场景" class="headerlink" title="实际开发中应用场景"></a>实际开发中应用场景</h6><ul><li>JDBC驱动程序</li><li>AWT中的Peer架构</li><li>银行日志管理<ul><li>格式分类：操作日志、交易日志、异常日志</li><li>距离分类：本地记录日志、异地记录日志</li></ul></li><li>人力资源系统中奖金计算模块<ul><li>奖金分类：个人奖金、团体奖金、激励奖金</li><li>部门分类：人事部门、销售部门、研发部门</li></ul></li><li>OA系统中的消息处理<ul><li>业务类型：普通消息、加急消息、特急消息</li><li>发送类型方式：系统内消息、手机短信、邮件</li></ul></li></ul><h5 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式 Composite"></a>组合模式 Composite</h5><p>把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象。</p><p>核心：</p><ul><li>抽象构件Component角色 定义了子叶和容器构建的共同点。</li><li>叶子Leaf构件角色 无子节点。 </li><li>容器Composite构件角色 有容器特征，可以包含子节点。</li></ul><p>工作流程分析</p><ol><li>将容器和叶子进行递归组合，使得用户在使用时可以一致性地对待容器和叶子。</li><li>当容器对象地指定方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行。<strong>递归</strong>。</li></ol><h6 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h6><ul><li>操作系统中的资源管理器</li><li>GUI中的容器层次图</li><li>XML的文件解析</li><li>OA系统中组织结构的处理</li><li>Junit单元测试框架<ul><li>底层设计：TestCase(叶子)，TestUnit(容器)，Test接口(抽象)</li></ul></li></ul><h5 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式 Decorator"></a>装饰模式 Decorator</h5><p>动态地为一个对象增加新的功能。</p><p>用于代替继承，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p><h6 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h6><ul><li>Component抽象构件角色 真实对象和装饰对象有相同的接口，客户端能以真实对象相同的方式同装饰对象交互。</li><li>ConcreteComponent具体构件角色 真实对象 io流中的FileInputStream FileOutputStream。</li><li>Decorator装饰角色 持有一个抽象构件的引用，装饰对象接收所有客户端的请求，并把这些请求转发给真实的对象，使得能在真实对象调用前后增加新的功能。</li><li>ConcreteDecorator具体装饰角色 负责给构件对象增加新的责任。</li></ul><h6 id="开发中使用的场景"><a href="#开发中使用的场景" class="headerlink" title="开发中使用的场景"></a>开发中使用的场景</h6><ul><li>IO中输入和输出流的设计。</li><li>Swing包中图形界面构件功能。</li><li>Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper类，增强了request对象的功能。</li><li>Strut2中，request、response、session对象的处理。</li></ul><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>别名：包装器模式Wrapper</p><p>降低系统的耦合度，可以动态的增加或删除对象的职责，并使得需要装饰的具体构建类和具体装饰类可以独立变化，以便增加新的具体构建类和具体修饰类。</p><p>优点</p><ul><li>扩展对象功能，比继承灵活，不会导致类个数急剧增加。</li><li>可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象。</li><li>具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类。</li></ul><p>缺点</p><ul><li>产生很多小对象，大量小对象占据内存，一定程度上影响性能。</li><li>装饰模式易于出错，调试排查比较麻烦。</li></ul><p>装饰模式与桥接模式区别</p><p>两个模式对是为了解决多个子类对象问题，但诱因不同。桥接模式时对象自身现有机制沿着多个维度变化，是既有部分不稳定，装饰模式是为了增加新的功能。</p><h5 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式 Facade"></a>外观模式 Facade</h5><p>核心：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用。</p><h6 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h6><p>JDBC封装后，commons提供的DBUtils类，Hibernate提供的工具类、Spring JDBC工具类等。</p><h5 id="享元模式-FlyWeight"><a href="#享元模式-FlyWeight" class="headerlink" title="享元模式 FlyWeight"></a>享元模式 FlyWeight</h5><p>场景：存在很多个相同或相似的对象，通过享元模式节省内存。</p><h6 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h6><ul><li>以共享的方式高效地支持大量细粒度对象的重用。</li><li>享元对象能做到共享的关键是区分了内部状态和外部状态。<ul><li>内部状态：可以共享，不随环境变化而改变。</li><li>外部状态：不可以共享，会随环境变化而改变。</li></ul></li></ul><h6 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h6><ul><li>FlyWeightFactory 享元工厂类：创建并管理享元对象，享元池一半设计成键值对。</li><li>FlyWeight 抽象享元类：通常是一个接口或抽象类，声明公共方法，这些方法可以向外界提供对象的内部状态，设置外部状态。</li><li>ConcreteFlyWeight 具体享元类 为内部状态提供成员变量进行存储。</li><li>UnsharedConcreteFlyWeight 非共享享元类：不能被共享的子类可以设计为非共享享元类。</li></ul><h6 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h6><ul><li>共享“池”：线程池，数据库连接池……</li><li>String类的设计也是享元模式</li></ul><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>极大减少内存中对象的数量。</li><li>相同或相似对象内存中只存一份，极大地节约资源，提高系统性能。</li><li>外部状态相对独立，不影响内部状态。</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>模式较复杂，使程序逻辑复杂化。</li><li>为了节省内存，共享了内部状态，分离出外部状态，而读取外部状态使运行时间变长，用时间换取了空间。</li></ul><h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h4><ul><li>模板方法模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>责任链模式</li><li>访问者模式</li></ul><h5 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式 Chain of Responsibility"></a>责任链模式 Chain of Responsibility</h5><p>定义：将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象</p><p>添加新的处理对象：由于责任链的创建完全在客户端，因此新增新的具体处理者对原有类库没有任何影响，只需添加新的类，然后再客户端调用时添加即可，符可开闭原则。</p><h6 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h6><ul><li>链表方式定义职责链</li><li>非链表方式实现责任链：通过集合、数组生成职责链</li></ul><h6 id="常用场景-1"><a href="#常用场景-1" class="headerlink" title="常用场景"></a>常用场景</h6><ul><li>Java中异常机制，一个try可对应多个catch，当第一个catch不匹配类型，则自动跳到第二个catch</li><li>JavaScript语言中，事件的冒泡和捕获机制；Java中事件的处理采用观察者模式</li><li>Servlet开发中，过滤器的链式处理</li><li>Strut2中拦截器的调用</li></ul><h5 id="迭代器模式-Iterator"><a href="#迭代器模式-Iterator" class="headerlink" title="迭代器模式 Iterator"></a>迭代器模式 Iterator</h5><p>提供一种可以遍历聚合对象的方式，又称为游标模式 Cursor</p><ul><li>聚合对象：存储数据</li><li>迭代器：遍历数据</li></ul><p>正向遍历/逆向遍历</p><h6 id="常用场景-2"><a href="#常用场景-2" class="headerlink" title="常用场景"></a>常用场景</h6><p>JDK内置迭代器List/Set</p><h5 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式 Mediator"></a>中介者模式 Mediator</h5><h6 id="核心-解耦"><a href="#核心-解耦" class="headerlink" title="核心 [解耦]"></a>核心 [<strong>解耦</strong>]</h6><ol><li>如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对关系，将导致关系极其复杂。这些对象称之为同事对象。</li><li>引入中介者对象，使各个同时对象只跟中介者对象打交道，将复杂的网络结构化解为如下的星形结构。</li></ol><h6 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h6><p>解耦多个同事对象之间的交互关系，每个对象都持有中介者对象的引用，只跟中介者对象打交道。</p><h6 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h6><ul><li>MVC模式中，Control控制器就是一个中介者对象，Model和View都和它打交道。</li><li>窗口游戏程序，窗口软件开发中窗口对象也是一个中介者对象</li><li><p>图形界面开发GUI，多个组件之间的交互，可以通过引入一个中介者对象来解决，可以是整体的窗口对象或者DOM对象。</p></li><li><p><code>Java.lang.reflect.Method#invoke()</code></p></li></ul><h5 id="命令模式-Command"><a href="#命令模式-Command" class="headerlink" title="命令模式 Command"></a>命令模式 Command</h5><p>将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。也称之为Action模式或Transaction模式。</p><h6 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h6><ul><li>Command抽象命令类</li><li>ConcreteCommand具体命令类</li><li>Invoker调用者/请求者：请求的发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，因此它只与抽象命令类之间存在关联。在程序运行时，将调用命令对象的execute()，间接调用接收者的相关操作。</li><li>Receiver接收者<br>接收者执行与请求相关的操作，具体实现对请求的业务处理。<br>未抽象前，实际执行操作内容的对象。</li><li>Client客户类<br>在客户类中需要创建调用者对象、具体命令类对象，在创建具体命令对象时指定对应的接收者。发送者和接收者之间没有直接关系，都通过命令间接调用。</li></ul><h6 id="常见场景-1"><a href="#常见场景-1" class="headerlink" title="常见场景"></a>常见场景</h6><ul><li>Strut2中，action的整个调用过程中</li><li>数据库事务机制的底层实现</li><li>命令的撤销和恢复</li></ul><h5 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式 Interpreter"></a>解释器模式 Interpreter</h5><p>用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p><p>尽量不要使用解释器模式，后期维护麻烦很大。项目中，可以使用Jruby，Groovy，Java的js引擎来替代解释器的作用，弥补Java语言的不足。</p><h6 id="常用场景-3"><a href="#常用场景-3" class="headerlink" title="常用场景"></a>常用场景</h6><ul><li>EL表达式的处理</li><li>正则表达式解释器</li><li>SQL语法的解释器</li><li>数学表达式解析器<br>工具包：Math Expression String Parser、Expression4J</li></ul><h5 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式 Visitor"></a>访问者模式 Visitor</h5><p>对于存储在一个集合中的对象，它们可能具有不同的类型（即使有一个公共的接口），对于该集合中的对象，可以接受一类称之为访问者的对象来访问，不同的访问者其访问方式也有所不同。</p><p>定义：表示一个作用于某对象结构中的各元素的操作，它使我们可以在不改变这个元素的类的前提下定义作用于这些元素的操作。</p><h6 id="常用场景-4"><a href="#常用场景-4" class="headerlink" title="常用场景"></a>常用场景</h6><ul><li>XML文档解析器设计</li><li>编译器的设计</li><li>复杂集合对象的处理</li></ul><h5 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式 Strategy"></a>策略模式 Strategy</h5><p>条件语句，实现容易，维护难,不符合开闭原则。</p><p>策略模式对应于解决摸一个问题的算法族，允许用户从该算法族中任选一个算法解决莫伊问题，同时可以方便地更换算法或者增加算法。并由客户端决定调用哪个算法。</p><p>本质：分离算法，选择实现。</p><h6 id="常见场景-2"><a href="#常见场景-2" class="headerlink" title="常见场景"></a>常见场景</h6><ul><li>JavaSE中GUI编程中布局管理</li><li>Spring框架中，Resource接口，资源访问策略</li><li><code>javax.servlet.http.HttpServlet#service()</code></li></ul><h5 id="模板方法模式-Template-Method"><a href="#模板方法模式-Template-Method" class="headerlink" title="模板方法模式 Template Method"></a>模板方法模式 Template Method</h5><p>定义了一个操作中的算法骨架。将某些步骤延迟到子类中实现。新的子类可以在不改变一个算法结构的前提下重新定义该算法的某些特定步骤。</p><h6 id="核心-1"><a href="#核心-1" class="headerlink" title="核心"></a>核心</h6><p>处理某个流程的代码已经都具备，但是其中某个节点的代码暂时不能确定。将结点的代码实现转移给子类完成。即处理步骤父类中定义好，具体实现延迟到子类中定义。</p><p>方法回调（钩子方法）</p><ul><li>好莱坞原则 “Don’t call me，we’ll call you back.”</li><li>子类不能调用父类，而通过父类调用子类。</li></ul><h6 id="常见场景-3"><a href="#常见场景-3" class="headerlink" title="常见场景"></a>常见场景</h6><ul><li>数据库访问的封装</li><li>Junit单元测试</li><li>Servlet中doGet()和doPost()方法调用</li><li>Hibernate中模板程序</li><li>Spring中JDBCTemplate、HibernateTemplate等</li></ul><h5 id="状态模式-State"><a href="#状态模式-State" class="headerlink" title="状态模式 State"></a>状态模式 State</h5><p>不同状态对应不同行为。</p><p>核心：用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题</p><h6 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h6><ul><li>Context环境类：维护一个State对象，定义当前的状态</li><li>State抽象环境类</li><li>ConcreteState具体环境类：每一个类封装一个状态对应的行为</li></ul><h6 id="常见场景-4"><a href="#常见场景-4" class="headerlink" title="常见场景"></a>常见场景</h6><ul><li>银行系统中帐号状态的管理</li><li>OA系统中公文状态的管理</li><li>酒店系统中房间状态的管理</li><li>线程对象各状态的切换</li></ul><h5 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式 Observer"></a>观察者模式 Observer</h5><p>多个订阅者、客户称之为观察者；需要同给多个订阅者的数据封装到对象中，称之为目标。</p><h6 id="核心-2"><a href="#核心-2" class="headerlink" title="核心"></a>核心</h6><p>主要用于1:N的通知，当一个对象（Subject/Observable）的状态变化时，需要及时告知一系列对象（Observer），令它们做出响应。</p><p>通知观察者的方式</p><ul><li>推：每次都会把通知以广播方式发送给所有观察者，所有观察者只能被动接收。</li><li>拉：观察者只要知道有情况即可，至于什么时候获取内容，获取什么内容都可以自主决定。</li></ul><p>JavaSE提供了java.util.Observable和java.util.Observer来实现观察者模式。</p><h6 id="常见场景-5"><a href="#常见场景-5" class="headerlink" title="常见场景"></a>常见场景</h6><ul><li>聊天室程序，服务器转发给所有客户端</li><li>网络游戏多人联机对战场景中，服务器将客户端的状态进行分发</li><li>邮件订阅</li><li>Servlet中监听器的实现</li><li>Android中广播机制</li><li>JDK的AWT中事件处理模型基于观察者模式的委派事件模型（Delegation Event Model）<ul><li>事件源—-目标对象</li><li>事件监听器—-观察者</li></ul></li><li>京东商城，群发某商品打折信息</li></ul><h5 id="备忘录模式-Memento"><a href="#备忘录模式-Memento" class="headerlink" title="备忘录模式 Memento"></a>备忘录模式 Memento</h5><p>核心：保存某个对象内部状态的拷贝，恢复原先状态</p><p>结构</p><ul><li>源发器类 Originator</li><li>备忘录类 Memento</li><li>负责人类 CareTaker</li></ul><p>分类</p><ol><li>可通过列表保存多个备忘录类。</li><li>通过栈保存多个备忘点，或将多个备忘录对象序列化和持久化。</li></ol><h6 id="常见场景-6"><a href="#常见场景-6" class="headerlink" title="常见场景"></a>常见场景</h6><ul><li>棋类游戏中的悔棋</li><li>普通软件中的撤销操作</li><li>数据库软件中，事务管理中的回滚操作</li><li>PhotoShop软件中的历史记录</li></ul><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:100%; height:600px;" src="https://www.processon.com/embed/5f57a53163768959e2dcb3bb"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GOF-Group-of-Four-23种设计模式&quot;&gt;&lt;a href=&quot;#GOF-Group-of-Four-23种设计模式&quot; class=&quot;headerlink&quot; title=&quot;GOF(Group of Four)23种设计模式&quot;&gt;&lt;/a&gt;GOF(Group of Four)23种设计模式&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/lao-biao/Pictures/raw/master/DesignPattern/GOF23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png&quot; alt=&quot;GOF23种设计模式&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记</title>
    <link href="https://lao-biao.github.io/articles/67c8035e.html"/>
    <id>https://lao-biao.github.io/articles/67c8035e.html</id>
    <published>2020-09-07T07:58:03.000Z</published>
    <updated>2020-09-08T03:48:19.005Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Spring-Cloud与Spring-Cloud-Alibaba"><a href="#Spring-Cloud与Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud与Spring Cloud Alibaba"></a>Spring Cloud与Spring Cloud Alibaba</h5><p>Spring Cloud为开发人员提供了工具来快速构建分布式系统中的一些常见模式(例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话、集群状态)。分布式系统的协调产生了模板模式，使用Spring Cloud开发人员可以快速建立实现这些模式的服务和应用程序。它们在任何分布式环境中都能很好地工作，包括开发者自己的笔记本电脑、裸机数据中心以及云计算等托管平台。</p><p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">Spring Cloud 官网</a><br><a href="https://github.com/alibaba/spring-cloud-alibaba" target="_blank" rel="noopener">Spring Cloud Alibaba</a></p><a id="more"></a><h6 id="Spring-Cloud的几大痛点"><a href="#Spring-Cloud的几大痛点" class="headerlink" title="Spring Cloud的几大痛点"></a>Spring Cloud的几大痛点</h6><ul><li>Spring Cloud 部分组件停止维护和更新，给开发带来不便</li><li>Spring Cloud 部分环境搭建复杂，没有完善的可视化界面，需要大量的二次开发和定制</li><li>Spring Cloud 配置复杂，难以上手，部分配置差别难以区分和合理应用</li></ul><h6 id="Spring-Cloud-Alibaba的优势"><a href="#Spring-Cloud-Alibaba的优势" class="headerlink" title="Spring Cloud Alibaba的优势"></a>Spring Cloud Alibaba的优势</h6><p>成套的产品搭配完善的可视化界面给开发运维带来极大的便利<br>搭建简单，学习曲线低。</p><h6 id="结合Spring-Cloud-Alibaba最终的技术搭配方案"><a href="#结合Spring-Cloud-Alibaba最终的技术搭配方案" class="headerlink" title="结合Spring Cloud Alibaba最终的技术搭配方案"></a>结合Spring Cloud Alibaba最终的技术搭配方案</h6><p>Spring Cloud Alibaba </p><ul><li>Nacos<ul><li>注册中心（服务发现/注册）</li><li>配置中心（动态配置管理）</li></ul></li><li>Sentinel：服务容错（限流、降级、熔断）</li><li>Seata：原Fescar，即分布式事务解决方案</li></ul><p>Spring Cloud</p><ul><li>Ribbon：负载均衡</li><li>Feign：声明式HTTP客户端（调用远程服务）</li><li>Gateway：API网关（webflux编程模式）</li><li>Sleuth：调用链监控</li></ul><h5 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h5><h6 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h6><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos服务的注册发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置nacos注册中心的地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>@EnableDiscoveryClient</code>注解开启服务注册与发现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EchoController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping</span>(value = <span class="string">"/echo/&#123;string&#125;"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(@PathVariable String string)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> string;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h6><p>远程调用别的服务</p><ol><li>引入open-feign</li><li>编写一个接口，告诉spring cloud这个接口需要调用远程服务<ol><li>声明接口的每一个方法都是调用哪个远程服务的哪个方法</li></ol></li><li>开启远程调用功能</li></ol><h5 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h5><h6 id="使用nacos作为配置中心统一管理配置"><a href="#使用nacos作为配置中心统一管理配置" class="headerlink" title="使用nacos作为配置中心统一管理配置"></a>使用nacos作为配置中心统一管理配置</h6><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务的配置中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个bootstarp.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure></li><li><p>需要给配置中心默认添加一个数据集（Data Id）gulimall-coupon.properties，默认规则：应用名.properties</p></li><li><p>给 应用名.properties 添加任何配置</p></li><li><p>动态获取配置：</p><ul><li><p>@RefreshScope                        动态获取并刷新</p></li><li><p>@Value(${“配置项的key”});      获取到配置</p><p>如果配置中心和当前应用的配置文件都配置了相同的项，优先使用配置中心的配置</p></li></ul></li></ol><h6 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h6><ul><li><p>命名空间：配置隔离<br>默认：public（保留空间），默认新增的的所有配置都在public空间</p><ol><li>开发dev、测试test、生产prod，利用命名空间进行环境隔离<font color='red'>注意：在bootstarp.properties上配置需要使用哪个命名空间的配置</font></li><li>每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</li></ol></li><li><p>配置集：所有配置的集合</p></li><li>配置集ID：类似文件名；DataId</li><li>配置分组：<br>默认所有的配置集都属于：DEFAULT_GROUP</li></ul><p>每个微服务创建自己的命名空间，使用分组区分环境，dev，test，prod</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="comment"># 配置nacos的服务地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 配置nacos命名空间</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">a177d187-5110-464e-9844-fe4b09cc0ebb</span></span><br><span class="line"><span class="comment"># 设置配置分组</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><p>同时加载多个配置集</p><ul><li>微服务任何配置信息，任何配置文件都可以放在配置中心中</li><li>只需要在<code>bootstrap.properties</code>说明加载配置中心中哪些配置文件即可</li><li>@Value，@ConfiguartionProperties<br>SpringBoot从配置文件中获取值的任何方式，都能使用<br>配置中心有的优先使用，没有的配置使用微服务的配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="comment"># 配置nacos的服务地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 配置nacos命名空间</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">a177d187-5110-464e-9844-fe4b09cc0ebb</span></span><br><span class="line"><span class="comment"># 设置配置分组</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"># database source数据源</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">datasource.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># mybatis</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].data-id</span>=<span class="string">mybatis.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].data-id</span>=<span class="string">other.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h5 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h5><p>网关作为流量的入口，常用功能包括路由转发、权限校验、限流控制等，而Spring Cloud Gateway作为Spring Cloud官方推出的第二代网关框架，替代Zuul网关。</p><p>官方文档：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#" target="_blank" rel="noopener">spring-cloud-gateway-2.2.3.RELEASE</a></p><ul><li>路由（Route）</li><li>断言（Predicate）</li><li>过滤器（Filter）</li></ul><h6 id="Gateway简单配置"><a href="#Gateway简单配置" class="headerlink" title="Gateway简单配置"></a>Gateway简单配置</h6><ol><li>开启服务注册发现（配置nacos的注册中心地址）</li><li>配置路由、断言和过滤器</li></ol><blockquote><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">88</span></span><br></pre></td></tr></table></figure><p>bootstrap.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">7c44370b-0de0-400c-8650-9ef824a54818</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">gulimall-gateway.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>application.yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 测试gateway的导入</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,baidu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,qq</span></span><br></pre></td></tr></table></figure></blockquote><p>当请求url中包含url=baidu时跳转到baidu.com，url=qq时跳转到qq.com</p><h6 id="商城项目配置"><a href="#商城项目配置" class="headerlink" title="商城项目配置"></a>商城项目配置</h6><p>通过<code>GateWay</code>网关将以<code>api</code>请求分别转发到指定的服务。</p><blockquote><p>application.yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="comment"># load balance 负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">          <span class="comment"># 断言</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">          <span class="comment"># load balance 负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">          <span class="comment"># 断言</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure></blockquote><font color=red>注意：断言的 </font>`Path`<font color=red>作用域越大的放在后面，避免出现指定的断言的</font>`Path`<font color=red>不生效。</font><h5 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h5><p>Spring Cloud Alibaba-OSS</p><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p>对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储服务，适合存放任何类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成本。</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%90%8E%E7%AB%AF/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%AD%BE%E5%90%8D%E5%90%8E%E7%9B%B4%E4%BC%A0.png" alt="阿里云对象存储-服务端签名后直传"></p><h6 id="阿里云-OSS-的文件上传功能"><a href="#阿里云-OSS-的文件上传功能" class="headerlink" title="阿里云 OSS 的文件上传功能"></a>阿里云 OSS 的文件上传功能</h6><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line">String endpoint = <span class="string">"http://oss-cn-hangzhou.aliyuncs.com"</span>;</span><br><span class="line"><span class="comment">// 云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，创建并使用RAM子账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建。</span></span><br><span class="line">String accessKeyId = <span class="string">"&lt;yourAccessKeyId&gt;"</span>;</span><br><span class="line">String accessKeySecret = <span class="string">"&lt;yourAccessKeySecret&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件流。</span></span><br><span class="line">InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"&lt;yourlocalFile&gt;"</span>);</span><br><span class="line">ossClient.putObject(<span class="string">"&lt;yourBucketName&gt;"</span>, <span class="string">"&lt;yourObjectName&gt;"</span>, inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭OSSClient。</span></span><br><span class="line">ossClient.shutdown();</span><br></pre></td></tr></table></figure></li></ol><h6 id="通过Spring-Boot对OSS进行管理"><a href="#通过Spring-Boot对OSS进行管理" class="headerlink" title="通过Spring Boot对OSS进行管理"></a>通过Spring Boot对OSS进行管理</h6><ol><li><p>引入对象存储依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alicloud-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置相关信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">application.properties</span></span><br><span class="line"><span class="meta">alibaba.cloud.access-key</span>=<span class="string">your-ak</span></span><br><span class="line"><span class="meta">alibaba.cloud.secret-key</span>=<span class="string">your-sk</span></span><br><span class="line"><span class="meta">alibaba.cloud.oss.endpoint</span>=<span class="string">***</span></span><br></pre></td></tr></table></figure></li><li><p>使用 OSSClient 进行相关操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OSSClient ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// download file to local</span></span><br><span class="line">        ossClient.getObject(<span class="keyword">new</span> GetObjectRequest(bucketName, objectName), <span class="keyword">new</span> File(<span class="string">"pathOfYourLocalFile"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Spring-Cloud与Spring-Cloud-Alibaba&quot;&gt;&lt;a href=&quot;#Spring-Cloud与Spring-Cloud-Alibaba&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud与Spring Cloud Alibaba&quot;&gt;&lt;/a&gt;Spring Cloud与Spring Cloud Alibaba&lt;/h5&gt;&lt;p&gt;Spring Cloud为开发人员提供了工具来快速构建分布式系统中的一些常见模式(例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话、集群状态)。分布式系统的协调产生了模板模式，使用Spring Cloud开发人员可以快速建立实现这些模式的服务和应用程序。它们在任何分布式环境中都能很好地工作，包括开发者自己的笔记本电脑、裸机数据中心以及云计算等托管平台。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-cloud&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud 官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/spring-cloud-alibaba&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud Alibaba&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring cloud" scheme="https://lao-biao.github.io/tags/spring-cloud/"/>
    
      <category term="spring cloud alibaba" scheme="https://lao-biao.github.io/tags/spring-cloud-alibaba/"/>
    
  </entry>
  
  <entry>
    <title>异步请求跨域问题与解决方案</title>
    <link href="https://lao-biao.github.io/articles/5f94010c.html"/>
    <id>https://lao-biao.github.io/articles/5f94010c.html</id>
    <published>2020-09-06T08:57:45.000Z</published>
    <updated>2020-09-07T07:43:00.360Z</updated>
    
    <content type="html"><![CDATA[<h5 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h5><p>跨域指的是浏览器不能执行其他网站的脚本，它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。</p><p>同源策略：是指<em>协议</em>，<em>域名</em>，<em>端口</em>都要相同，其中有一个不同都会产生跨域。</p><a id="more"></a><h6 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h6><div class="table-container"><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名下</td><td><font color=green>允许</font></td></tr><tr><td><a href="http://www.a.com/tab/a.js" target="_blank" rel="noopener">http://www.a.com/tab/a.js</a><br /><a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td>同一域名下不同文件夹</td><td><font color=green>允许</font></td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br /><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名，不同端口</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br /><a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td>同一域名，不同协议</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://x.x.x.x/b.js" target="_blank" rel="noopener">http://x.x.x.x/b.js</a></td><td>域名和域名对应 IP</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://script.com/b.js" target="_blank" rel="noopener">http://script.com/b.js</a></td><td>主域相同，子域不同</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td><td>同一域名，不同二级域名</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://www.b.com/b.js" target="_blank" rel="noopener">http://www.b.com/b.js</a></td><td>不同域名</td><td><font color=red>不允许</font></td></tr></tbody></table></div><h6 id="跨域流程"><a href="#跨域流程" class="headerlink" title="跨域流程"></a>跨域流程</h6><p><strong>简单请求</strong>，不会触发 CORS <em>预检请求</em>。</p><ul><li>请求方法<ul><li><code>GET</code></li><li><code>HEAD</code></li><li><code>POST</code></li></ul></li><li>除了被用户代理自动设置的首部字段（例如 Connection ，User-Agent）和在 Fetch 规范中定义为 禁用首部名称 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合。该集合为：<ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code> （需要注意额外的限制）</li><li><code>DPR</code></li><li><code>Downlink</code></li><li><code>Save-Data</code></li><li><code>Viewport-Width</code></li><li><code>Width</code></li></ul></li><li><code>Content-Type</code>的值仅限于下列三者之一：<ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li><li>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；<code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</li><li>请求中没有使用 <code>ReadableStream</code> 对象。</li></ul><p><strong>非简单请求</strong>（PUT、DELETE）等，需要先发送<em>预检请求</em>。</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Ajax/%E8%B7%A8%E5%9F%9F%E6%B5%81%E7%A8%8B.png" alt="Ajax跨域请求流程"></p><blockquote><p>官方文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP跨域</a></p></blockquote><h5 id="解决跨域方案"><a href="#解决跨域方案" class="headerlink" title="解决跨域方案"></a>解决跨域方案</h5><ol><li>前端通过Nginx部署将请求配置成同一域。</li><li>后端对请求进行处理，在预检请求的响应中添加允许跨域的相关配置。（后端开发时使用）</li></ol><h6 id="前端解决方案"><a href="#前端解决方案" class="headerlink" title="前端解决方案"></a>前端解决方案</h6><p>静态请求通过 <code>nginx</code> 直接转发到 vue-admin 【人人开源后端项目】，动态请求通过 nginx 转发到 gateway 网关，由网关请求具体的服务器。</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Ajax/%E5%89%8D%E7%AB%AFnginx%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F.png" alt="前端nginx配置跨域请求"></p><font color=red>适用于前端项目部署时，后端不需要对跨域进行任何处理。</font><h6 id="后端解决方案"><a href="#后端解决方案" class="headerlink" title="后端解决方案"></a>后端解决方案</h6><p>配置当次请求允许跨域</p><ol><li><p>添加请求响应头</p><ul><li>Access-Control-Allow-Origin: 支持哪些来源的请求跨域</li><li>Access-Control-Allow-Methods: 支持哪些方法跨域</li><li>Access-Control-Allow-Credentials: 跨域请求默认不包含cookie，设置为true可以包含cookie</li><li>Access-Control-Expose-Headers: 跨域请求暴露的字段<ul><li>CORS 请求时，<code>XMLHttpRequest</code> 对象的 <code>getResponseHeader()</code> 方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。</li></ul></li><li>Access-Control-Max-Age: 表明该响应的有效时间为多少秒。在有效时间内，浏览器无须为同一请求再次发起预检请求。注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。</li></ul></li><li><p>针对多个请求，可以通过 <code>gateway</code> 网关添加过滤器对请求配置允许跨域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallCorsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置跨域</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>); <span class="comment">// 配置请求头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>); <span class="comment">// 配置请求方法</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>); <span class="comment">// 配置来源</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>); <span class="comment">// 允许cookie</span></span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration);<span class="comment">// 注册跨域配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h5&gt;&lt;p&gt;跨域指的是浏览器不能执行其他网站的脚本，它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。&lt;/p&gt;
&lt;p&gt;同源策略：是指&lt;em&gt;协议&lt;/em&gt;，&lt;em&gt;域名&lt;/em&gt;，&lt;em&gt;端口&lt;/em&gt;都要相同，其中有一个不同都会产生跨域。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
    
      <category term="cors" scheme="https://lao-biao.github.io/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>前端开发基础知识</title>
    <link href="https://lao-biao.github.io/articles/a87f55ab.html"/>
    <id>https://lao-biao.github.io/articles/a87f55ab.html</id>
    <published>2020-09-01T08:12:31.000Z</published>
    <updated>2020-09-07T08:19:46.670Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前后端技术栈类比"><a href="#前后端技术栈类比" class="headerlink" title="前后端技术栈类比"></a>前后端技术栈类比</h4><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">前端</th><th style="text-align:center">后端</th></tr></thead><tbody><tr><td style="text-align:center">语法规范</td><td style="text-align:center">JavaScript es6,7,8…</td><td style="text-align:center">Java jdk8,9,10,11…</td></tr><tr><td style="text-align:center">框架</td><td style="text-align:center">Angular，Vue，React</td><td style="text-align:center">Spring，SpringMVC…</td></tr><tr><td style="text-align:center">工具</td><td style="text-align:center">webstorm，vscode</td><td style="text-align:center">idea，eclipse</td></tr><tr><td style="text-align:center">项目构建</td><td style="text-align:center">webpack，gulp</td><td style="text-align:center">maven，gradle</td></tr><tr><td style="text-align:center">依赖管理</td><td style="text-align:center">npm</td><td style="text-align:center">maven</td></tr></tbody></table></div><a id="more"></a><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>ECMAScript 6.0，ECMAScript是一种由Ecma国际通过ESMA-262标准化的脚本程序设计语言，是JavaScript语言的下一代标准，在2015年6月正式发布，并且从ECMAScript 6开始，采用年号做版本，ECMAScript 2015即ECMAScript 6。ECMAScript是浏览器脚本语言的规范，JavaScript则是规范的具体实现。</p><h5 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h5><h6 id="变量-let-与-const"><a href="#变量-let-与-const" class="headerlink" title="变量 let 与 const"></a>变量 let 与 const</h6><ul><li><code>var</code> 声明的变量往往会越域</li><li><code>let</code> 声明的变量由严格局部作用域</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure><ul><li><code>var</code> 可以声明多次</li><li><code>let</code> 只能声明一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> m=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> n=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> n=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// Uncaught SyntaxError: Identifier 'n' has already been declared</span></span><br></pre></td></tr></table></figure><ul><li><code>var</code> 会变量提升</li><li><code>let</code> 不存在变量提升</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// Uncaught ReferenceError: Cannot access 'y' before initialization</span></span><br><span class="line"><span class="keyword">let</span> y=<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><code>const</code></p><ol><li>声明之后不允许改变</li><li>一旦声明必须初始化，否则会报错</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="number">1</span>;</span><br><span class="line">a=<span class="number">3</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"><span class="keyword">const</span> b; <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h6 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h6><ol><li><p>数组解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原始方式</span></span><br><span class="line"><span class="comment">let a=arr[0];</span></span><br><span class="line"><span class="comment">let b=arr[1];</span></span><br><span class="line"><span class="comment">let c=arr[2];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c]=arr;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);</span><br></pre></td></tr></table></figure></li><li><p>对象解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    laguanges:[<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const name=person.name;</span></span><br><span class="line"><span class="comment">// const age=person.age;</span></span><br><span class="line"><span class="comment">// const laguanges=person.laguanges;</span></span><br><span class="line"><span class="comment">// const&#123;name,age,laguanges&#125;=person;</span></span><br></pre></td></tr></table></figure></li><li><p>取别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>&#123;<span class="attr">name</span>:abc,age,laguanges&#125;=person;</span><br><span class="line"><span class="built_in">console</span>.log(abc,age,laguanges);</span><br></pre></td></tr></table></figure></li><li><p>字符串扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">"hello vue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">"hello"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">"vue"</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"e"</span>));       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"hello"</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>字符串模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ss=<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;Hello World!&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ss);</span><br></pre></td></tr></table></figure></li><li><p>字符串插入变量和表达式<br>变量名写在<code>${}</code>中，<code>${}</code>中可以放入JavaScript表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="keyword">let</span> age=<span class="number">21</span>;</span><br><span class="line"><span class="keyword">let</span> info=<span class="string">`我是<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;age+<span class="number">10</span>&#125;</span>了`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure></li><li><p>字符串插入方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这是一个函数'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> info=<span class="string">`<span class="subst">$&#123;fun()&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure></li></ol><h6 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h6><ol><li><p>默认参数<br>在es6以前，我们无法给一个函数参数设置默认值，只能采用变通写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断b是否为空，为空就给默认值1</span></span><br><span class="line">    b = b || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>es6直接给参数写上默认值，没传就会自动使用默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEs6</span>(<span class="params">a, b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(addEs6(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></li><li><p>不定参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 2</span></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);<span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数<br>原始方式声明一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用es6的箭头函数声明方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print=<span class="function"><span class="params">obj</span>=&gt;</span><span class="built_in">console</span>.log(obj);</span><br><span class="line">print(<span class="string">"hello"</span>);<span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>箭头函数+解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    language:[<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数+解构</span></span><br><span class="line"><span class="keyword">var</span> hello=<span class="function">(<span class="params">&#123;name&#125;</span>)=&gt;</span><span class="built_in">console</span>.log(<span class="string">'hello,'</span>+name);</span><br><span class="line">hello(person);<span class="comment">// hellp,jack</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h6><p><code>Object.keys()</code>返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</p><p><code>Object.values()</code>返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用。</p><p><code>Object.entries()</code>返回一个给定对象自身可枚举属性的键值对数组，其排列与使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>, <span class="string">'js'</span>, <span class="string">'css'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)); <span class="comment">// ["name","age","language"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(person)); <span class="comment">// ["jack",21,Array(3)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(person)); <span class="comment">// [Array(2),Array(2),Array(2)]</span></span><br></pre></td></tr></table></figure><ol><li><p><code>assign</code><br><code>Object.assign()</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line"><span class="built_in">console</span>.log(target); <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>声明对象简写，当对象属性的键与值相同时，可以省略值，只写键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment">// const person = &#123; age: age, name: name &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = &#123; age, name &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person2);<span class="comment">// age: 23 name: "zhangsan"</span></span><br></pre></td></tr></table></figure></li><li><p>对象的函数属性简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    <span class="comment">//  函数属性</span></span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 箭头函数this不能使用，对象.属性</span></span><br><span class="line">    <span class="comment">// eat2: food =&gt; console.log(this.name + "在吃" + food)</span></span><br><span class="line">    eat2: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person3.name + <span class="string">"在吃"</span> + food),</span><br><span class="line">    eat3(food) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person3.eat(<span class="string">"香蕉"</span>);<span class="comment">// jack在吃香蕉</span></span><br><span class="line"></span><br><span class="line">person3.eat2(<span class="string">"苹果"</span>); <span class="comment">// jack在吃苹果</span></span><br><span class="line"></span><br><span class="line">person3.eat3(<span class="string">"橘子"</span>); <span class="comment">// jack在吃橘子</span></span><br></pre></td></tr></table></figure></li><li><p>对象扩展运算符<br>用于取出参数对象所有可遍历属性然后拷贝到当前对象</p><p>（1）拷贝对象（深拷贝）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = &#123; <span class="attr">neam</span>: <span class="string">"Amy"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> someone = &#123; ...p1 &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(someone); <span class="comment">// &#123;neam: "Amy", age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>（2）合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age2 = &#123; <span class="attr">age</span>: <span class="number">15</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> name2 = &#123; <span class="attr">name</span>: <span class="string">"Amy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> p2 = &#123; ...age2, ...name2 &#125;; <span class="comment">// 如果两个对象的字段名重复，后面对象的字段值会覆盖前面对象的字段值</span></span><br><span class="line"><span class="built_in">console</span>.log(p2); <span class="comment">// &#123;age: 15, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure><h6 id="map和reduce方法"><a href="#map和reduce方法" class="headerlink" title="map和reduce方法"></a>map和reduce方法</h6><ul><li><p><code>map()</code> 接受一个函数，将原数组中的所有元素用这个函数处理后放入新建数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr = arr.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    return item * 2;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p><code>reduce()</code>为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callbackfn: <span class="built_in">Function</span>, initialValue?: any)</span><br></pre></td></tr></table></figure><ol><li>previousValue 上一次调用回调返回的值，或者是提供的初始值</li><li>currentValue 数组中当前被处理的元素</li><li>index 当前元素在数组中的索引</li><li>array 调用reduce的数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'上一次处理后：'</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前正在处理：'</span> + b);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h6 id="promise封装异步操作"><a href="#promise封装异步操作" class="headerlink" title="promise封装异步操作"></a>promise封装异步操作</h6><ol><li>查出当前用信息</li><li>按照当前用户的id查出他的课程</li><li>按照当前课程id查出分数</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"zhangsan"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user_course_1.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Chinsese"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// course_score_10.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"score"</span>: <span class="number">90</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过ajax实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"json/user.json"</span>,</span><br><span class="line">    success(data) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询用户：'</span>, data);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">`json/user_course_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">            success(data) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'查询到课程'</span>, data);</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: <span class="string">`json/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">                    success(data) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'查询到分数:'</span>, data);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error(error) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            error(error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error(error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise封装异步操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"json/user.json"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'查询用户信息：'</span>, data);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">pro.then(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">`json/user_course_<span class="subst">$&#123;obj.id&#125;</span>.json`</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'查询课程信息：'</span>, data);</span><br><span class="line">                resolve(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">`json/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'查询课程分数信息：'</span>, data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: url,</span><br><span class="line">            data: data,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>("json/user.json")</span><br><span class="line">    .then(data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户查询成功:'</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(`json/user_course_$&#123;data.id&#125;.json<span class="string">`, data);</span></span><br><span class="line"><span class="string">&#125;).then(data =&gt; &#123;</span></span><br><span class="line"><span class="string">    console.log('课程查询成功:', data);</span></span><br><span class="line"><span class="string">    return get(`</span>json/course_score_$&#123;data.id&#125;.json<span class="string">`, data);</span></span><br><span class="line"><span class="string">&#125;).then(data =&gt; &#123;</span></span><br><span class="line"><span class="string">    // 课程成绩查询成功</span></span><br><span class="line"><span class="string">    console.log('课程成绩', data);</span></span><br><span class="line"><span class="string">&#125;).catch(error =&gt; &#123;</span></span><br><span class="line"><span class="string">    console.log('出现异常', error);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><h6 id="module模块化"><a href="#module模块化" class="headerlink" title="module模块化"></a>module模块化</h6><p><code>export</code>导出，<code>export</code> 不仅可以导出对象，一切js变量都可以导出，比如：基本类型变量，函数，数组，对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">export const util = &#123;</span></span><br><span class="line"><span class="comment">    sum(a, b) &#123;</span></span><br><span class="line"><span class="comment">        return a + b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="comment">export &#123;util&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    sum(a, b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"jack"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>import</code>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">"./hello.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">"./user.js"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(util.sum(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name:"</span> + name + <span class="string">"  age:"</span> + age);<span class="comment">// name:jack age:18</span></span><br></pre></td></tr></table></figure><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>Node.js是基于Chrome V8引擎的JavaScript运行环境</p><p><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">node.js相关api</a></p><p>NPM是随同NodeJS一起安装的包管理工具，JavaScript-NPM，Java-Maven。</p><h4 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h4><h5 id="MVVM思想"><a href="#MVVM思想" class="headerlink" title="MVVM思想"></a>MVVM思想</h5><ul><li>M：Model，模型，包括数据和一些基本操作</li><li>V：View，视图，页面渲染结果</li><li>VM：View-Model，模型与视图间的双向操作（无需开发人员干涉）</li></ul><p>在MVVM之前，开发人员从后端获取需要的数据模型，然后通过DOM操作Model渲染到View中，而后当用户操作视图，还需要通过DOM获取View中的数据，然后同步到Model中。</p><p>而MVVM中的VM要做的事情就是把DOM操作完全封装起来，开发人员不用再关心Model和View之间是如何互相影响的。</p><ul><li>只要Model发生了改变，View上自然就会表现出来</li><li>当用户修改了View，Model中的数据也会跟着改变</li></ul><p>把开发人员从繁琐的DOM操作中解放出来，把关注点放在如何操作Model上。</p><h5 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h5><ol><li>声明式渲染</li><li>双向绑定，模型变化，视图变化</li><li>事件处理</li></ol><p>具体流程：</p><p>1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的 2、指令来简化对DOM的一些操作 3、声明方法来做更复杂的操作。</p><h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><h6 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h6><ol><li><p>花括号<br>格式：<code>{ {表达式} }</code><br>说明：</p><ul><li>该表达式支持js语法，可以调用内置函数（<font color=red>必须有返回值</font>）</li><li>表达式必须有返回结果，没有结果的表达式不允许使用</li><li>可以直接获取Vue实例定义的数据或函数</li></ul></li><li><p>插值闪烁</p><p>使用双大括号方式在网速较慢时会出现问题，在数据未加载完成时，页面会显示出原始的双大括号，加载完毕后才显示正确数据。</p></li><li><p>v-text和v-html<br>v-text只显示文本内容，不会渲染html标签，而v-html会渲染html标签。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;&#123;&#123;hello()&#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;span v-html&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,&#x2F;&#x2F; 绑定元素</span><br><span class="line">        data: &#123;&#x2F;&#x2F; 封装数据</span><br><span class="line">            msg: &quot;&lt;h1&gt;Hello Vue&lt;&#x2F;h1&gt;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#x2F;&#x2F; 封装方法</span><br><span class="line">            hello() &#123;</span><br><span class="line">                return &quot;world&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h6><p><code>v-bind</code>可以用于给HTML标签绑定属性，<font color=red>单向绑定</font>，<code>v-bind</code> 可以省略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 给HTML标签绑定属性 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- v-bind可以省略 --&gt;</span><br><span class="line">    &lt;!-- 单向绑定 --&gt;</span><br><span class="line">    &lt;a v-bind:href&#x3D;&quot;link&quot;&gt;gogogo&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;!-- class，style --&gt;</span><br><span class="line">    &lt;span v-bind:class&#x3D;&quot;&#123;active:isActive,&#39;text-danger&#39;:hasError&#125;&quot;</span><br><span class="line">          v-bind:style&#x3D;&quot;&#123;color:color,fontSize:size&#125;&quot;&gt;Hello&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            link: &quot;http:&#x2F;&#x2F;www.baidu.com&quot;,</span><br><span class="line">            isActive: true,</span><br><span class="line">            hasError: true,</span><br><span class="line">            color: &#39;blue&#39;,</span><br><span class="line">            size: &#39;20px&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h6><p>绑定数据，<code>v-model</code> 是<font color=red>双向绑定</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 表单项，自定义组件 --&gt;</span><br><span class="line">&lt;!-- v-model是双向绑定 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    精通的语言：&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;java&quot;&gt;java &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;python&quot;&gt;python&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;javascript&quot;&gt;javascript&lt;br&gt;</span><br><span class="line">    &lt;!-- 将数组中的内容以逗号的形式连接 --&gt;</span><br><span class="line">    选中&#123;&#123;language.join(&#39;,&#39;)&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            language: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h6><p><code>v-on</code>可用于为事件指定一个回调函数（Vue实例中定义的函数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 事件中直接写js片段 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;num&quot;&gt;</span><br><span class="line">    &lt;!-- 事件指定一个回调函数，必须是Vue实例中定义的函数 --&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;num++&quot;&gt;点赞&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;cancel&quot;&gt;取消&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;h1&gt;有&#123;&#123;num&#125;&#125;个人点赞&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 事件修饰符 --&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;border: 1px solid red;padding: 20px;&quot; v-on:click.once&#x3D;&#39;hello&#39;&gt;</span><br><span class="line">        大div &lt;br&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;border: 1px solid red;padding: 20px;&quot; @click.stop&#x3D;&#39;hello&#39;&gt;</span><br><span class="line">            小div&lt;br&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;ww.baidu.com&quot; @click.prevent.stop&#x3D;&#39;hello&#39;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 按键修饰符 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&#39;num&#39; v-on:keyup.up&#x3D;&#39;num+&#x3D;2&#39; @keyup.down&#x3D;&#39;num-&#x3D;2&#39; @click.ctrl&#x3D;&#39;num&#x3D;10&#39;&gt;&lt;br&gt;</span><br><span class="line">    提示:</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            cancel() &#123;</span><br><span class="line">                this.num--;</span><br><span class="line">            &#125;,</span><br><span class="line">            hello() &#123;</span><br><span class="line">                alert(&#39;点击了&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h6><p><i style=color:red>遍历的时候加上<code>:key</code>来区分不同数据，提高vue的渲染效率</i></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&#39;(user,index) in users&#39; :key&#x3D;&#39;index&#39; v-if&#x3D;&quot;&#39;female&#39;&#x3D;&#x3D;&#x3D;user.gender&quot;&gt;</span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.age&#125;&#125;--&#123;&#123;user.gender&#125;&#125;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            对象信息:</span><br><span class="line">            &lt;span v-for&#x3D;&quot;(v,k,i) in user&quot;&gt;</span><br><span class="line">                &#123;&#123;k&#125;&#125;--&#123;&#123;v&#125;&#125;--&#123;&#123;i&#125;&#125;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;!-- 1、显示user信息 --&gt;</span><br><span class="line">            &lt;!-- 2、获取数组下标 --&gt;</span><br><span class="line">            &lt;!-- 3、遍历对象 --&gt;</span><br><span class="line">            &lt;!-- 4、遍历的时候加上:key来区分不同数据，提高vue的渲染效率 --&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            users: [</span><br><span class="line">                &#123; name: &#39;张三&#39;, age: 18, gender: &#39;male&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;李四&#39;, age: 19, gender: &#39;male&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;王五&#39;, age: 20, gender: &#39;female&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;赵六&#39;, age: 21, gender: &#39;female&#39; &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h6><ul><li><code>v-if</code>条件判断，当得到结果为<code>true</code>时，所在的元素才被渲染</li><li><code>v-show</code>当得到的结果为<code>true</code>时，所在的元素才会被显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;show&#x3D;!show&quot;&gt;click me&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;!-- 使用v-if显示 --&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;show&quot;&gt;if显示&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!-- 通过display:none;隐藏 --&gt;</span><br><span class="line">    &lt;!-- 使用v-show显示 --&gt;</span><br><span class="line">    &lt;h1 v-show&#x3D;&quot;show&quot;&gt;show显示&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            show: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-else和v-else-if"><a href="#v-else和v-else-if" class="headerlink" title="v-else和v-else-if"></a>v-else和v-else-if</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;random&#x3D;Math.random()&quot;&gt;click me&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;random&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;random&gt;&#x3D;0.75&quot;&gt;random &gt; &#x3D;0.75&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else-if&#x3D;&quot;random&gt;&#x3D;0.5&quot;&gt;random &gt; &#x3D;0.5&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else-if&#x3D;&quot;random&gt;&#x3D;0.25&quot;&gt;random &gt; &#x3D;0.25&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else&gt;random &lt; 0.25 &lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            random: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h5 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h5><p>某些结果是基于之前数据实时计算出来的，可以利用计算属性来完成 ，<code>watch</code>可以监控一个值的变化，从而作出相应的反应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;西游记，单价：&#123;&#123;xyjPrice&#125;&#125;，数量：&lt;input type&#x3D;&quot;number&quot; v-model&#x3D;&quot;xyjNum&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;水浒传，单价：&#123;&#123;shzPrice&#125;&#125;，数量：&lt;input type&#x3D;&quot;number&quot; v-model&#x3D;&quot;shzNum&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;总价：&#123;&#123;total&#125;&#125;&amp;nbsp;&amp;nbsp;&#123;&#123;msg&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            xyjPrice: 66.98,</span><br><span class="line">            shzPrice: 88.00,</span><br><span class="line">            xyjNum: 1,</span><br><span class="line">            shzNum: 1,</span><br><span class="line">            msg: &#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            total() &#123;</span><br><span class="line">                return this.xyjPrice * this.xyjNum + this.shzPrice * this.shzNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 侦听数据的变化</span><br><span class="line">        watch: &#123;</span><br><span class="line">            xyjNum: function (newVal, oldVal) &#123;</span><br><span class="line">                if (newVal &gt;&#x3D; 3) &#123;</span><br><span class="line">                    this.msg &#x3D; &#39;库存超出限制&#39;;</span><br><span class="line">                    this.xyjNum &#x3D; 3;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.msg &#x3D; &#39;&#39;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h6><p>过滤器通常用来处理文本格式化的操作<br>过滤器可以用在两个地方：</p><ul><li>双括号插值</li><li>v-bind表达式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(user,index) in userList&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">            &#123;&#123;user.id&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.gender&#x3D;&#x3D;&#x3D;1?&#39;男&#39;:&#39;女&#39;&#125;&#125;</span><br><span class="line">            --&#123;&#123;user.gender | genderFilter&#125;&#125;--&#123;&#123;user.gender | gFilter&#125;&#125;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(&quot;gFilter&quot;, function (val) &#123;</span><br><span class="line">        if (val &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">            return &quot;男&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;女&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            userList: [</span><br><span class="line">                &#123; id: 1, name: &#39;jack&#39;, gender: 1 &#125;,</span><br><span class="line">                &#123; id: 2, name: &#39;lucy&#39;, gender: 0 &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; filters定义局部过滤器，只能再vue实例中使用</span><br><span class="line">        filters: &#123;</span><br><span class="line">            genderFilter(val) &#123;</span><br><span class="line">                if (val &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                    return &quot;男&quot;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return &quot;女&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h5 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h5><p>Vue中可以通过注册局部或全局组件<code>component</code>，在HTML中直接使用该组件。如果是第三方组件，通过<code>import</code>导入后也可使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;counter&gt;&lt;&#x2F;counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 全局声明注册一个组件</span><br><span class="line">    Vue.component(&quot;counter&quot;, &#123;</span><br><span class="line">        template: &#96;&lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;&#96;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 局部声明</span><br><span class="line">    const buttonCounter &#x3D; &#123;</span><br><span class="line">        template: &#96;&lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;&#96;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#39;button-counter&#39;: buttonCounter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>第三方组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> component-x <span class="keyword">from</span> <span class="string">'component-x'</span> <span class="comment">// 导入第三方组件</span></span><br><span class="line">Vue.component(<span class="string">'component-x'</span>,component-x);<span class="comment">// 注册</span></span><br></pre></td></tr></table></figure><h5 id="生命周期与钩子函数"><a href="#生命周期与钩子函数" class="headerlink" title="生命周期与钩子函数"></a>生命周期与钩子函数</h5><p>vue生命周期与钩子函数</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%89%8D%E7%AB%AF/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.png" alt="vue生命周期与钩子函数"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;num&quot;&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;num++&quot;&gt;赞&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;，有&#123;&#123;num&#125;&#125;个人点赞&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &quot;张三&quot;,</span><br><span class="line">            num: 10</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show() &#123;</span><br><span class="line">                return this.name;</span><br><span class="line">            &#125;,</span><br><span class="line">            add() &#123;</span><br><span class="line">                return this.num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.log(&#39;----------------before create-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型未加载--&#39; + this.name, this.num);</span><br><span class="line">            &#x2F;&#x2F; vue.js:634 [Vue warn]: Error in beforeCreate hook: &quot;TypeError: this.show is not a function&quot;</span><br><span class="line">            &#x2F;&#x2F; vue.js:1897 TypeError: this.show is not a function</span><br><span class="line">            console.log(&#39;方法未加载--&#39; + this.show());</span><br><span class="line">            console.log(&#39;html模板未加载--&#39; + document.getElementById(&#39;num&#39;));</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            console.log(&#39;----------------created-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已加载--&#39; + this.name, this.num);</span><br><span class="line">            console.log(&#39;方法已加载--&#39; + this.show());</span><br><span class="line">            console.log(&#39;html模板已加载--&#39; + document.getElementById(&#39;num&#39;));</span><br><span class="line">            console.log(&#39;html模板未渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">            console.log(&#39;----------------before mount-----------------&#39;);</span><br><span class="line">            console.log(&#39;html模板未渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.log(&#39;----------------mounted-----------------&#39;);</span><br><span class="line">            console.log(&#39;html模板已渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line">            console.log(&#39;----------------before update-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已更新--&#39; + this.num);</span><br><span class="line">            console.log(&#39;html模板未更新--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.log(&#39;----------------updated-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已更新--&#39; + this.num);</span><br><span class="line">            console.log(&#39;html模板已更新--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>Babel是一个JavaScript编译器，使用es的最新语法编程，通过Babel自动转化为浏览器兼容的代码。</p><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><p>自动化项目构建工具，gulp也是同类产品。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前后端技术栈类比&quot;&gt;&lt;a href=&quot;#前后端技术栈类比&quot; class=&quot;headerlink&quot; title=&quot;前后端技术栈类比&quot;&gt;&lt;/a&gt;前后端技术栈类比&lt;/h4&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;前端&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;后端&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;语法规范&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;JavaScript es6,7,8…&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java jdk8,9,10,11…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;框架&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Angular，Vue，React&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Spring，SpringMVC…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;工具&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;webstorm，vscode&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;idea，eclipse&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;项目构建&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;webpack，gulp&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;maven，gradle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;依赖管理&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;npm&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;maven&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="前端" scheme="https://lao-biao.github.io/categories/notes/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://lao-biao.github.io/tags/vue/"/>
    
      <category term="es6" scheme="https://lao-biao.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>docker部署vue项目</title>
    <link href="https://lao-biao.github.io/articles/2d5c549e.html"/>
    <id>https://lao-biao.github.io/articles/2d5c549e.html</id>
    <published>2020-08-22T02:27:51.000Z</published>
    <updated>2020-08-22T03:47:15.922Z</updated>
    
    <content type="html"><![CDATA[<p>在虚拟机上部署了博客后端项目（Spring Boot）后，再来部署博客后台管理中心项目（vue）。采用 nginx 镜像为基础镜像来生成项目镜像，再通过 docker 的容器进行部署。</p><a id="more"></a><h6 id="项目配置与编译"><a href="#项目配置与编译" class="headerlink" title="项目配置与编译"></a>项目配置与编译</h6><p>在本机上通过 vue-cli 来编译项目，生成项目的资源文件。另一种方式是将项目拷贝到虚拟机上（删除不必要文件和依赖文件，传的速度会快一点，<code>node_modules</code> 这个文件夹中是依赖相关的，子文件比较多，影响传递速度），然后通过 node 和 Dockerfile 来编译生成项目资源文件。</p><p>在项目中添加编译相关的配置 <code>vue.config.js</code>（项目根目录下）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 公共路径(必须有的)，在生产环境下使用相对路径，在开发时，测试时使用绝对路径</span></span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'./'</span> : <span class="string">'/'</span>,</span><br><span class="line">    <span class="comment">// 输出文件目录</span></span><br><span class="line">    outputDir: <span class="string">"dist"</span>,</span><br><span class="line">    <span class="comment">// 静态资源存放的文件夹(相对于ouputDir)</span></span><br><span class="line">    assetsDir: <span class="string">"static"</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">true</span>,<span class="comment">// 资源映射</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>, <span class="comment">// 启动端口</span></span><br><span class="line">        open: <span class="literal">false</span>, <span class="comment">// 启动后是否自动打开网页</span></span><br><span class="line">        <span class="comment">// 代理</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/user'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://192.168.134.128:9000'</span>,</span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/user'</span>: <span class="string">''</span> <span class="comment">// 通过pathRewrite重写地址，将前缀/api转为/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'/admin'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://192.168.134.128:9000'</span>,</span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/admin'</span>: <span class="string">''</span> <span class="comment">// 通过pathRewrite重写地址，将前缀/api转为/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    lintOnSave: <span class="literal">false</span>, <span class="comment">// 取消 eslint 验证</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过命令 <code>npm run build</code> 即可生成项目资源文件 ，存放在<code>dist</code>目录下。</p><h6 id="构建项目镜像"><a href="#构建项目镜像" class="headerlink" title="构建项目镜像"></a>构建项目镜像</h6><p>将 <code>dist</code>中的文件通过xftp工具拷贝到虚拟机上，创建<code>nginx.conf</code>文件，用于配置代理，创建dockerfile文件，用于构建镜像。</p><p><code>nginx.conf</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span> <span class="string">nginx;</span></span><br><span class="line"><span class="attr">worker_processes</span> <span class="string">auto;</span></span><br><span class="line"><span class="comment"># 错误日志输出目录</span></span><br><span class="line"><span class="attr">error_log</span>  <span class="string">/var/log/nginx/error.log  warn;</span></span><br><span class="line"><span class="attr">pid</span>     <span class="string">/var/run/nginx.pid;</span></span><br><span class="line"><span class="attr">events</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">worker_connections</span>  <span class="string">1024;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # 监听端口</span></span><br><span class="line">        <span class="attr">listen</span>  <span class="string">80;</span></span><br><span class="line"><span class="comment">        # 名称可自定义</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">192.168.134.128;</span></span><br><span class="line"><span class="comment">        # access日志</span></span><br><span class="line">        <span class="attr">access_log</span>  <span class="string">/var/log/nginx/host.access.log;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">            <span class="attr">root</span>   <span class="string">/usr/share/nginx/html;</span></span><br><span class="line">            <span class="attr">index</span>  <span class="string">index.html index.htm;</span></span><br><span class="line">            <span class="attr">try_files</span> <span class="string">$uri $uri/ @router; </span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">        # vue的路由配置</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">@router &#123;</span></span><br><span class="line">            <span class="attr">rewrite</span> <span class="string">^.*$ /index.html last;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">        # 端口转发，对应axios的配置</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/user&#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span> <span class="string">http://192.168.134.128:9000;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/admin&#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span> <span class="string">http://192.168.134.128:9000;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="comment"># 定义作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="comment"># 将dist文件中的内容复制到 /usr/share/nginx/html/ 这个目录下面</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dist/  /usr/share/nginx/html/</span></span><br><span class="line"><span class="comment"># 复制配置文件 </span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx.conf /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure><p>docker 编译生成镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-manage]<span class="comment"># docker build -t blog-manage:1.0.0 .</span></span><br><span class="line">Sending build context to Docker daemon  6.773MB</span><br><span class="line">Step 1/4 : FROM nginx</span><br><span class="line"> ---&gt; 4bb46517cac3</span><br><span class="line">Step 2/4 : MAINTAINER zhouchao</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 09c5138b1196</span><br><span class="line">Step 3/4 : COPY dist/  /usr/share/nginx/html/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9851b6f52bb4</span><br><span class="line">Step 4/4 : COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 6bc149edde51</span><br><span class="line">Successfully built 6bc149edde51</span><br><span class="line">Successfully tagged blog-manage:1.0.0</span><br><span class="line"></span><br><span class="line">[root@localhost blog-manage]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">blog-manage         latest              6bc149edde51        3 seconds ago       139MB</span><br></pre></td></tr></table></figure><h6 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h6><p>在构建镜像成功后，以挂载的方式启动容器，方便修改配置文件，挂载后修改配置和更新项目资源不需要进入容器内部。先创建好挂载的目录和文件，再创建容器并启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-manage]# cd /mydata</span><br><span class="line">[root@localhost blog-manage]# mkdir wwwroot</span><br><span class="line">[root@localhost blog-manage]# mkdir logs</span><br><span class="line">[root@localhost blog-manage]# mkdir conf</span><br><span class="line">[root@localhost blog-manage]# cd conf</span><br><span class="line">[root@localhost blog-manage]# touch nginx.conf</span><br></pre></td></tr></table></figure><p>注意 nginx.conf 为文件，如果不创建，在创建容器时，会把它当作一个目录。</p><ul><li>wwwroot 存储项目资源文件</li><li>logs 存储日志文件</li><li>conf 存储 nginx 配置文件</li></ul><p>创建并启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name blog-manage --restart always -p 9001:80 \</span><br><span class="line">-v /mydata/blog-manage/wwwroot:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/blog-manage/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /mydata/blog-manage/logs:/var/log/nginx \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>在后端项目容器启动状态下，即可访问后端管理中心项目。</p><blockquote><p>访问地址：<a href="http://192.168.134.128:9001/" target="_blank" rel="noopener">http://192.168.134.128:9001/</a></p></blockquote><h6 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h6><p><i style=color:red;>Resource interpreted as Stylesheet but transferred with MIME type text/plain</i></p><p>没有配置项目编译的相关配置，项目部署后访问 css 文件加载不出来，控制台报警告<code>Resource interpreted as Stylesheet but transferred with MIME type text/plain</code>，意思 css 文件是没有指定类型，默认加载为<code>text/plain</code>格式，通过查看 <code>index.html</code>，没有指定 css 文件的加载类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">prefetch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">preload</span> <span class="attr">as</span>=<span class="string">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决方案：</p><ol><li><p>将 <code>index.html</code>的头部声明 <code>&lt;!DOCTYPE html&gt;</code>去掉，这种方法确实有效，不过仍有部分css文件无法加载，而且这种方法需要每次都修改，比较麻烦。</p></li><li><p>在编译配置文件中添加静态资源存放的文件夹的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态资源存放的文件夹(相对于ouputDir)</span></span><br><span class="line">assetsDir: <span class="string">"static"</span></span><br></pre></td></tr></table></figure></li></ol><p><em><font color=red>502 Bad Gateway</font></em> </p><p>错误的网关，问题在<code>nginx.conf</code>配置出错。</p><p><em>路由重定向失败 <font color=red>Redirected when going from “/login” to “/index” via a navigation guard</font></em></p><p>这个问题是由于博客后端部署错误的问题，登录成功后创建的cookie路径和域错误，导致在虚拟机 IP 下没有cookie产生，后端返回登录成功，但首页检查cookie中的token不存在，又重定向到登陆页面。</p><h6 id="经验小结"><a href="#经验小结" class="headerlink" title="经验小结"></a>经验小结</h6><p>在部署后项目访问时出现各种问题，比如<font color=red>连接拒绝</font>，<font color=red>404</font>，<font color=red>502</font>等，首先可以通过查看挂载目录下的错误日志，如果是配置错误问题，一般都会输出在这里。其次，可以通过浏览器 <code>F12</code>的<code>network</code>进行检查，看看是否是后端的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在虚拟机上部署了博客后端项目（Spring Boot）后，再来部署博客后台管理中心项目（vue）。采用 nginx 镜像为基础镜像来生成项目镜像，再通过 docker 的容器进行部署。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
      <category term="vue" scheme="https://lao-biao.github.io/tags/vue/"/>
    
      <category term="nginx" scheme="https://lao-biao.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>docker部署SpringBoot项目</title>
    <link href="https://lao-biao.github.io/articles/a192e4a5.html"/>
    <id>https://lao-biao.github.io/articles/a192e4a5.html</id>
    <published>2020-08-21T13:22:40.000Z</published>
    <updated>2020-08-24T14:44:56.157Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>docker 部署基于 Spring Boot 的个人博客后端项目，首先要将项目中使用的 <code>localhost</code> 全部更换为虚拟机所对应的IP地址，其次，需要项目生成的 jar （通过 jar 包部署，也有通过 war 包部署的方式，需要使用 tomcat ），通过 jar 包部署使用Spring Boot项目内嵌的 tomcat 或 jetty 。</p><a id="more"></a><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><ol><li>项目配置修改</li><li>项目打包生成<code>jar</code>包</li></ol><h6 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h6><p>博客项目中使用到 mysql，redis，solr ，在 <code>application-prod.yml</code> 中修改 url ，与虚拟机的IP地址相对应，<code>application.yml</code> 修改默认环境为 <em>prod</em>。项目中使用到 <code>localhost</code> 的位置，也需要进行修改。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-blog</span></span><br><span class="line">  <span class="comment"># 数据源mysql</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.134.128:3306/blog?useSSL=false</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="comment"># 配置redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.134</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">''</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 修改文件上传限制</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="number">5242880</span> <span class="comment"># 5MB</span></span><br><span class="line">  <span class="comment"># 配置solr</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">solr:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">http://192.168.134.128:8983/solr/blog_core</span></span><br><span class="line">  <span class="comment"># 控制jpa的sql语句输出</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义配置文件上传路径，以及文件大小上限</span></span><br><span class="line"><span class="attr">blog:</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">upload-path:</span> <span class="string">/usr/app/blog</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="number">5242880</span>   <span class="comment"># 5MB</span></span><br></pre></td></tr></table></figure><h6 id="jar-包生成"><a href="#jar-包生成" class="headerlink" title="jar 包生成"></a>jar 包生成</h6><ol><li><p>在打包前在 <code>pom.xml</code> 中配置好打包方式为 <em>jar</em> ，并且将 test 测试文件排除（否则在 maven 打包时出错）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包生成的jar名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>my-blog-1.0.0<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.study.BlogApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加打包时跳过测试文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 maven 工具，执行 <code>clean</code> ，清除项目生成的target文件夹，然后执行 <code>package</code>，对项目进行打包，打包完成后在target文件夹中生成项目的 <code>jar</code>。<br>命令行方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Docker/maven%E5%B7%A5%E5%85%B7%E6%A0%8F.png" alt="maven工具栏"></p></li></ol><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><ol><li>通过xftp软件将 <code>jar</code>包 拷贝到虚拟机上。</li><li>生成镜像</li><li>运行容器</li></ol><h6 id="Docker生成博客项目镜像"><a href="#Docker生成博客项目镜像" class="headerlink" title="Docker生成博客项目镜像"></a>Docker生成博客项目镜像</h6><p>在 <code>jar</code> 包（项目生成的jar包为my-blog-1.0.0.jar）的当前目录下创建 <code>Dockerfile</code> 文件，<code>Dockerfile</code>内容如下。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于java8镜像构建，也可以通过配置好的jdk8镜像来构建</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/app</span></span><br><span class="line"><span class="comment"># 创建图片上传的路径</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/app/blog</span></span><br><span class="line"><span class="comment"># 复制程序到内部</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> my-blog-1.0.0.jar /usr/app</span></span><br><span class="line"><span class="comment"># 切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/app</span></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9000</span></span><br><span class="line"><span class="comment"># 镜像运行时执行</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"my-blog-1.0.0.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>生成镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-java]# docker build -t blog .</span><br><span class="line">Sending build context to Docker daemon  89.81MB</span><br><span class="line">Step 1/8 : FROM java:8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> d23bdf5b1b1b</span></span><br><span class="line">Step 2/8 : MAINTAINER zhouchao</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 564652b78de2</span></span><br><span class="line">Step 3/8 : RUN mkdir /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1f5db921f762</span></span><br><span class="line">Step 4/8 : RUN mkdir /usr/app/blog</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> cb4f18ee64f3</span></span><br><span class="line">Step 5/8 : ADD my-blog-1.0.0.jar /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 940b61cdd5a4</span></span><br><span class="line">Step 6/8 : WORKDIR /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 16c9ffc0c43c</span></span><br><span class="line">Step 7/8 : EXPOSE 9000</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a21afb67831c</span></span><br><span class="line">Step 8/8 : ENTRYPOINT ["java","-jar","my-blog-1.0.0.jar"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 05453583ff92</span></span><br><span class="line">Successfully built 05453583ff92</span><br><span class="line">Successfully tagged blog:latest</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">blog                latest              05453583ff92        2 seconds ago       733MB</span><br></pre></td></tr></table></figure><h6 id="Docker生成博客项目容器"><a href="#Docker生成博客项目容器" class="headerlink" title="Docker生成博客项目容器"></a>Docker生成博客项目容器</h6><ol><li><p>首先需要先创建图片挂载目录，使图片资源持久化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-java]# mkdir /mydata/blog</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p><ul><li><code>-d</code>后台运行</li><li><code>--name blog</code>容器名称为 blog</li><li><code>--restart=always</code>容器自启动</li><li><code>-p 9000:9000</code>端口映射</li><li><code>-v /mydata/blog:/usr/app/blog/src</code>图片资源目录挂载</li></ul></li></ol><ul><li><p><code>-v /mydata/blog/logs:/usr/app/logs</code>日志目录挂载</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name blog --restart=always -p 9000:9000 -v /mydata/blog/src:/usr/app/blog -v /mydata/blog/logs:/usr/app/logs blog</span></span><br><span class="line">b577dfcb31879743ee4bc05b54cc07ec864ba3ee4872924e91d7ca9609f37589</span><br></pre></td></tr></table></figure></li></ul><h6 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h6><p>项目中使用了swagger生成api文档，通过访问swagger-ui.html来查看。</p><blockquote><p>地址 <a href="http://192.168.134.128:9000/swagger-ui.html" target="_blank" rel="noopener">http://192.168.134.128:9000/swagger-ui.html</a></p></blockquote><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Docker/%E5%90%8E%E7%AB%AF%E9%83%A8%E7%BD%B2%E8%AE%BF%E9%97%AE%E6%95%88%E6%9E%9C.png" alt="后端部署访问效果"></p><h5 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h5><p>在项目部署时遇到了一些问题</p><h6 id="容器反复重启"><a href="#容器反复重启" class="headerlink" title="容器反复重启"></a>容器反复重启</h6><p><font color="red">容器反复重启</font>，可能是后端代码问题，先移除当前容器，创建新容器，以控制台形式执行，输出 log ，用于查询错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -i --name blog  -p 9000:9000 -v /mydata/blog:/usr/app/blog blog</span></span><br></pre></td></tr></table></figure><h6 id="用户登录成功响应中没有生成-cookie"><a href="#用户登录成功响应中没有生成-cookie" class="headerlink" title="用户登录成功响应中没有生成 cookie"></a>用户登录成功响应中没有生成 cookie</h6><p>用户登录成功，但没有生成 cookie ，通过<code>F12</code>查看请求响应结果，响应结果中<code>setCookie</code>的<code>domain</code>为<code>localhost</code>，而不是虚拟机的IP，由于在 <code>CookieUtils.java</code> 中设置Cookie默认存储的域（domain）为  localhost（在打包前，没有修改过来），将其修改为虚拟机的IP即可，重新打包。</p><h6 id="mysql-无法访问"><a href="#mysql-无法访问" class="headerlink" title="mysql 无法访问"></a>mysql 无法访问</h6><p><em><font color=red>Could not get JDBC Connection; nested exception is com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure</font></em></p><p>mysql 无法访问，问题在 docker 的防火墙开启了，需要关闭防火墙。</p><ul><li>查看防火墙状态    <code>firewall-cmd --state</code><br>如果命令报错，赋予特权 <code>docker run -tdi --privileged centos init</code></li><li>停止防火墙  <code>systemctl stop firewalld.service</code></li><li>禁止firewall开机启动  <code>systemctl disable firewalld.service</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;docker 部署基于 Spring Boot 的个人博客后端项目，首先要将项目中使用的 &lt;code&gt;localhost&lt;/code&gt; 全部更换为虚拟机所对应的IP地址，其次，需要项目生成的 jar （通过 jar 包部署，也有通过 war 包部署的方式，需要使用 tomcat ），通过 jar 包部署使用Spring Boot项目内嵌的 tomcat 或 jetty 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
      <category term="spring boot" scheme="https://lao-biao.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>docker配置jdk8镜像</title>
    <link href="https://lao-biao.github.io/articles/cc1858db.html"/>
    <id>https://lao-biao.github.io/articles/cc1858db.html</id>
    <published>2020-08-19T05:17:38.000Z</published>
    <updated>2020-09-07T08:21:41.442Z</updated>
    
    <content type="html"><![CDATA[<h5 id="docker配置jdk8镜像"><a href="#docker配置jdk8镜像" class="headerlink" title="docker配置jdk8镜像"></a>docker配置jdk8镜像</h5><p>配置方式分为通过 docker 仓库直接拉取 openjdk ，另一种方式是下载 jdk 8 linux版，通过 Dockerfile 进行配置。</p><a id="more"></a><h6 id="docker仓库拉取jdk8镜像"><a href="#docker仓库拉取jdk8镜像" class="headerlink" title="docker仓库拉取jdk8镜像"></a>docker仓库拉取jdk8镜像</h6><ol><li><p>拉取镜像<br> <code>docker pull openjdk:8-jre</code> </p></li><li><p>运行jdk容器<br><code>docker run -d -it --name jdk8 openjdk:8-jre</code> /bin/bash `</p></li><li><p>进入容器内部检查<br><code>docker exec -it myopenjdk /bin/bash</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@03005ebbf9c9]#</span><span class="bash"> java -version</span></span><br><span class="line">java version "1.8.0_261"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br></pre></td></tr></table></figure></li></ol><h6 id="Dockerfile配置jdk8镜像"><a href="#Dockerfile配置jdk8镜像" class="headerlink" title="Dockerfile配置jdk8镜像"></a>Dockerfile配置jdk8镜像</h6><ol><li><p>下载jdk1.8，并上传到/usr/local/src目录，然后解压</p><p>开启允许传输的权限<code>sudo chmod 777 /usr/local/src</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">jdk-8u261-linux-x64.tar.gz</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tar zxf jdk-8u261-linux-x64.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">jdk1.8.0_261  jdk-8u261-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>创建Dockerfile<br>先在<code>/usr/local</code>目录下创建jdk目录，并将/usr/local/src下的 <code>jdk-8u261-linux-x64.tar.gz</code> 复制到<code>/usr/local/jdk</code>目录下，然后创建 <code>Dockerfile</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp ../src/jdk-8u261-linux-x64.tar.gz ./</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ls</span></span><br><span class="line">jdk-8u261-linux-x64.tar.gz</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vi Dockerfile</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> centos:centos7</span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u261-linux-x64.tar.gz /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk/jdk1.<span class="number">8.0</span>_261</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME /usr/local/jdk/jdk1.<span class="number">8.0</span>_261/jre</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>使用Dockerfile构建jdk1.8镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t jdk1.8 .</span></span><br><span class="line">Sending build context to Docker daemon  143.1MB</span><br><span class="line">Step 1/8 : FROM centos:centos7</span><br><span class="line">centos7: Pulling from library/centos</span><br><span class="line">75f829a71a1c: Pull complete</span><br><span class="line">Digest: sha256:19a79828ca2e505eaee0ff38c2f3fd9901f4826737295157cc5212b7a372cd2b</span><br><span class="line">Status: Downloaded newer image for centos:centos7</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 7e6257c9f8d8</span></span><br><span class="line">Step 2/8 : MAINTAINER zhouchao</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 77ae01469661</span></span><br><span class="line">Removing intermediate container 77ae01469661</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a093e73e3ad0</span></span><br><span class="line">Step 3/8 : RUN mkdir /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 3669281a5047</span></span><br><span class="line">Removing intermediate container 3669281a5047</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 48038a16cc0c</span></span><br><span class="line">Step 4/8 : WORKDIR /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 49cf2fb9fa22</span></span><br><span class="line">Removing intermediate container 49cf2fb9fa22</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 7c9f9dd423b1</span></span><br><span class="line">Step 5/8 : ADD jdk-8u261-linux-x64.tar.gz /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a2112ce1417a</span></span><br><span class="line">Step 6/8 : ENV JAVA_HOME /usr/local/jdk/jdk1.8.0_261</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> c220252fe774</span></span><br><span class="line">Removing intermediate container c220252fe774</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 433e95e570d7</span></span><br><span class="line">Step 7/8 : ENV JRE_HOME /usr/local/jdk/jdk1.8.0_261/jre</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 654ac9d1adca</span></span><br><span class="line">Removing intermediate container 654ac9d1adca</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1cf2ae6ca829</span></span><br><span class="line">Step 8/8 : ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> a8e71af19743</span></span><br><span class="line">Removing intermediate container a8e71af19743</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f4e4ef5b6c42</span></span><br><span class="line">Successfully built f4e4ef5b6c42</span><br><span class="line">Successfully tagged jdk1.8:latest</span><br></pre></td></tr></table></figure></li><li><p>在镜像仓库中查看是否构建成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">jdk1.8              latest              f4e4ef5b6c42        About a minute ago   556MB</span><br></pre></td></tr></table></figure></li><li><p>启动jdk容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -di --name=jdk1.8 jdk1.8</span></span><br><span class="line">03005ebbf9c9ec65dd23977c527ce97578108c588c5cee0c1c7c0fd819d93053</span><br></pre></td></tr></table></figure></li><li><p>进入jdk容器，查看是否安装正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it jdk1.8 /bin/bash</span></span><br><span class="line">[root@03005ebbf9c9 jdk]# pwd</span><br><span class="line">/usr/local/jdk</span><br><span class="line">[root@03005ebbf9c9 jdk]# ls</span><br><span class="line">jdk1.8.0_261</span><br><span class="line">[root@03005ebbf9c9 jdk]# java -version</span><br><span class="line">java version "1.8.0_261"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12, mixed mode)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;docker配置jdk8镜像&quot;&gt;&lt;a href=&quot;#docker配置jdk8镜像&quot; class=&quot;headerlink&quot; title=&quot;docker配置jdk8镜像&quot;&gt;&lt;/a&gt;docker配置jdk8镜像&lt;/h5&gt;&lt;p&gt;配置方式分为通过 docker 仓库直接拉取 openjdk ，另一种方式是下载 jdk 8 linux版，通过 Dockerfile 进行配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker配置redis镜像</title>
    <link href="https://lao-biao.github.io/articles/cf9a8130.html"/>
    <id>https://lao-biao.github.io/articles/cf9a8130.html</id>
    <published>2020-08-19T04:58:20.000Z</published>
    <updated>2020-08-19T05:46:35.978Z</updated>
    
    <content type="html"><![CDATA[<h6 id="安装redis镜像"><a href="#安装redis镜像" class="headerlink" title="安装redis镜像"></a>安装redis镜像</h6><p>从 docker 的仓库中拉取 redis 镜像，不写版本号时，默认使用 <code>latest</code> 最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull redis[:版本号]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="创建redis容器与启动"><a href="#创建redis容器与启动" class="headerlink" title="创建redis容器与启动"></a>创建redis容器与启动</h6><ol><li><p>创建配置文件挂载文件夹和 redis 挂载的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /mydata/redis/conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch /mydata/redis/conf/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>创建 redis 容器，并将配置文件挂载到虚拟机本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span></span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>检查 redis 的相关配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# pwd</span><br><span class="line">/mydata/redis/conf</span><br><span class="line">[root@localhost conf]# ls</span><br><span class="line">redis.conf</span><br></pre></td></tr></table></figure></li></ol><h6 id="配置redis自启动"><a href="#配置redis自启动" class="headerlink" title="配置redis自启动"></a>配置redis自启动</h6><p>配置 redis 容器在docker启动时同时启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vagrant]# docker update redis --restart=always</span><br></pre></td></tr></table></figure><h6 id="进入redis的客户端"><a href="#进入redis的客户端" class="headerlink" title="进入redis的客户端"></a>进入redis的客户端</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# docker exec -it redis redis-cli</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h6 id="将redis数据持久化到硬盘"><a href="#将redis数据持久化到硬盘" class="headerlink" title="将redis数据持久化到硬盘"></a>将redis数据持久化到硬盘</h6><p>修改 <code>/mydata/redis/conf/redis.conf</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vi redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加以下内容</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><h6 id=""><a href="#" class="headerlink" title=" "></a> </h6>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;安装redis镜像&quot;&gt;&lt;a href=&quot;#安装redis镜像&quot; class=&quot;headerlink&quot; title=&quot;安装redis镜像&quot;&gt;&lt;/a&gt;安装redis镜像&lt;/h6&gt;&lt;p&gt;从 docker 的仓库中拉取 redis 镜像，不写版本号时，默认使用 &lt;code&gt;latest&lt;/code&gt; 最新版&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; docker pull redis[:版本号]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="redis" scheme="https://lao-biao.github.io/tags/redis/"/>
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker配置mysql镜像</title>
    <link href="https://lao-biao.github.io/articles/1a3905c2.html"/>
    <id>https://lao-biao.github.io/articles/1a3905c2.html</id>
    <published>2020-08-19T04:58:06.000Z</published>
    <updated>2020-08-19T13:38:20.118Z</updated>
    
    <content type="html"><![CDATA[<h6 id="安装mysql的镜像"><a href="#安装mysql的镜像" class="headerlink" title="安装mysql的镜像"></a>安装mysql的镜像</h6><p>docker仓库中mysql版本 <a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">https://hub.docker.com/_/mysql</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull mysql:5.7</span></span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               5.7                 d05c76dbbfcf        2 minutes ago         448MB</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="配置mysql容器"><a href="#配置mysql容器" class="headerlink" title="配置mysql容器"></a>配置mysql容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 3306:3306 --name mysql \</span></span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><p>参数介绍</p><ul><li><code>-p 3306:3306</code> 将容器的3306端口映射到主机的3306端口</li><li><code>-v /mydata/mysql/log:/var/log/mysql</code> 将日志文件挂载到主机</li><li><code>-v /mydata/mysql/data:/var/lib/mysql</code> 将数据文件挂载到主机</li><li><code>-v /mydata/mysql/conf:/etc/mysql</code> 将配置文件夹挂载到主机</li><li><code>-e MYSQL_ROOT_PASSWORD=root</code> 初始化root用户的密码</li><li><code>-d mysql:5.7</code> 后台运行mysql 5.7</li></ul><h6 id="进入mysql的容器内部"><a href="#进入mysql的容器内部" class="headerlink" title="进入mysql的容器内部"></a>进入mysql的容器内部</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vagrant]# docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><p>查看mysql容器结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vagrant]# docker exec -it mysql /bin/bash</span><br><span class="line"></span><br><span class="line">root@8177ea9826e4:/# ls /</span><br><span class="line">bin   dev                         entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  docker-entrypoint-initdb.d  etc            lib   media  opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line">root@8177ea9826e4:/# whereis mysql</span><br><span class="line">mysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql</span><br></pre></td></tr></table></figure><h6 id="修改字符编码"><a href="#修改字符编码" class="headerlink" title="修改字符编码"></a>修改字符编码</h6><ol><li><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vi /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">default-time-zone</span>=<span class="string">'+08:00'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET collation_connection=utf8_unicode_ci'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8'</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></li><li><p>查看docker当前运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">8177ea9826e4        mysql:5.7           "docker-entrypoint.s…"   22 minutes ago      Up 22 minutes       0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql</span><br></pre></td></tr></table></figure></li><li><p>重新启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# docker restart mysql</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></li><li><p>对插入的内容进行确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# docker exec -it mysql /bin/bash</span><br><span class="line">root@8177ea9826e4:/# cd etc/mysql/</span><br><span class="line">root@8177ea9826e4:/etc/mysql# ls</span><br><span class="line">my.cnf</span><br><span class="line">root@8177ea9826e4:/etc/mysql# cat my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init_connect='SET collation_connection = utf8_unicode_ci'</span><br><span class="line">init_connect='SET NAMES utf8'</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></li></ol><h6 id="mysql修改默认时区"><a href="#mysql修改默认时区" class="headerlink" title="mysql修改默认时区"></a>mysql修改默认时区</h6><p>如果忘记配置默认时区，会使用 UTC 作为默认时区，与中国采用的时间相差8小时，中国使用 <code>UTC+8</code> 。</p><ol><li><p>修改mysql的配置映射文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure></li><li><p>在 [msqld] 后面添加内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default-time-zone</span>=<span class="string">'+08:00'</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;安装mysql的镜像&quot;&gt;&lt;a href=&quot;#安装mysql的镜像&quot; class=&quot;headerlink&quot; title=&quot;安装mysql的镜像&quot;&gt;&lt;/a&gt;安装mysql的镜像&lt;/h6&gt;&lt;p&gt;docker仓库中mysql版本 &lt;a href=&quot;https://hub.docker.com/_/mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hub.docker.com/_/mysql&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo docker pull mysql:5.7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;验证是否安装成功&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo docker images&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql               5.7                 d05c76dbbfcf        2 minutes ago         448MB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
      <category term="mysql" scheme="https://lao-biao.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>centos7配置docker</title>
    <link href="https://lao-biao.github.io/articles/55112ca0.html"/>
    <id>https://lao-biao.github.io/articles/55112ca0.html</id>
    <published>2020-08-19T04:28:28.000Z</published>
    <updated>2020-08-19T05:54:45.704Z</updated>
    
    <content type="html"><![CDATA[<h6 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h6><p>建议根据官方文档的步骤进行安装，不然容易出错。</p><blockquote><p>官方文档：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p></blockquote><a id="more"></a><h6 id="docker的启动"><a href="#docker的启动" class="headerlink" title="docker的启动"></a>docker的启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images  <span class="comment"># 查看启动的镜像</span></span></span><br></pre></td></tr></table></figure><h6 id="设置docker开机自启"><a href="#设置docker开机自启" class="headerlink" title="设置docker开机自启"></a>设置docker开机自启</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure><h6 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /etc/docker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span></span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://aruwgrgs.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将docker设置为后台启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure><h6 id="当无法直接删除镜像时，操作步骤："><a href="#当无法直接删除镜像时，操作步骤：" class="headerlink" title="当无法直接删除镜像时，操作步骤："></a>当无法直接删除镜像时，操作步骤：</h6><ol><li>查看进程 <code>docker ps -a</code>     </li><li>移除使用的镜像的容器 <code>docker rm [id号]</code></li><li>移除指定镜像 <code>docker rmi [镜像名]</code></li></ol><h6 id="将当前用户添加到docker用户组中"><a href="#将当前用户添加到docker用户组中" class="headerlink" title="将当前用户添加到docker用户组中"></a>将当前用户添加到docker用户组中</h6><p>在当前用户没有添加到 docker 用户组时，使用 docker 命令时需要使用 <code>sudo</code>命令，将当前用户添加到docker用户组中可以直接使用 docker 命令。</p><ol><li>添加docker用户组</li><li>将登录用户加入到docker用户组中</li><li>更新用户组</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd docker     <span class="comment"># 添加docker用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gpasswd -a <span class="variable">$USER</span> docker    <span class="comment"># 将登录用户加入到docker用户组中</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> newgrp docker     <span class="comment"># 更新用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps    <span class="comment"># 测试docker命令是否可以使用sudo正常使用</span></span></span><br></pre></td></tr></table></figure><h6 id=""><a href="#" class="headerlink" title=" "></a> </h6>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;docker的安装&quot;&gt;&lt;a href=&quot;#docker的安装&quot; class=&quot;headerlink&quot; title=&quot;docker的安装&quot;&gt;&lt;/a&gt;docker的安装&lt;/h6&gt;&lt;p&gt;建议根据官方文档的步骤进行安装，不然容易出错。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://docs.docker.com/engine/install/centos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/engine/install/centos/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
      <category term="centos7" scheme="https://lao-biao.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>Solr基本配置-Docker</title>
    <link href="https://lao-biao.github.io/articles/8e2b9641.html"/>
    <id>https://lao-biao.github.io/articles/8e2b9641.html</id>
    <published>2020-08-18T11:02:42.000Z</published>
    <updated>2020-08-21T08:23:44.568Z</updated>
    
    <content type="html"><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>docker下安装solr，以及使用中文分词器。</p><p>通过 xftp 工具将文件从宿主机拷贝到虚拟机上。</p><p>中文分词器相关资料</p><ul><li>中文分词器github地址 <a href="https://github.com/magese/ik-analyzer-solr/" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/</a></li><li>jar 包 <a href="https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar" target="_blank" rel="noopener">https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar</a></li></ul><a id="more"></a><h6 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose --version</span></span><br></pre></td></tr></table></figure><h6 id="安装Solr镜像"><a href="#安装Solr镜像" class="headerlink" title="安装Solr镜像"></a>安装Solr镜像</h6><font color="red">配置 docker group，不需要在 docker 命令前添加 </font>`sudo` 从 docker 的仓库中拉取 solr 镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull solr[:版本]  <span class="comment"># 不填写版本号时，默认为最新版本</span></span></span><br><span class="line">Using default tag: latest</span><br></pre></td></tr></table></figure>检查镜像是否安装成功`$ docker images`显示已安装的的所有镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">solr                latest              8e621ac5ebe9        17 hours ago        514MB</span><br></pre></td></tr></table></figure>###### 启动Solr容器`docker run --name solr --restart=always -d -p 8983:8983 -t solr[:版本号]`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name solr --restart=always -d -p 8983:8983 -t solr</span></span><br><span class="line">7be597b3079b626a0732c8005535bc8b96504fcc18761699ef263c80c68be325</span><br></pre></td></tr></table></figure>###### 访问http://虚拟机IP地址:8983/solr/#/> http://192.168.56.10:8983/solr/#/![docker-solr的访问](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-solr%E7%9A%84%E8%AE%BF%E9%97%AE.png)###### 新建solr core1. 直接通过命令创建   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=solr solr bin/solr create_core -c  my_core</span></span><br></pre></td></tr></table></figure>   - `-it`  展示容器输入信息`STDIN`，命令行交互模式   - `--user` 用户，使用 root 用户会有报错   - my_core core 名称，自定义2. 进入容器内部，拷贝默认配置文件到 core 中，再通过客户端创建 core   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash<span class="comment"># 以管理员身份进入 solr 容器内部</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -r server/solr/configsets/_default/conf/. /var/solr/data/my_core/conf  <span class="comment"># 拷贝默认配置文件到 my_core 中</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exit</span> <span class="comment"># 退出 solr 容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr <span class="comment"># 重启 solr 容器</span></span></span><br></pre></td></tr></table></figure>   ![solr客户端创建core](https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%9B%E5%BB%BAcore.png)访问 my_core![docker-my_core属性](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-my_core%E5%B1%9E%E6%80%A7.png)###### 配置中文解析器1. 将中文解析器相关 jar 包拷贝到容器内   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp ik-analyzer-8.3.0.jar solr:/opt/solr/server/solr-webapp/webapp/WEB-INF/lib</span></span><br></pre></td></tr></table></figure>2. 将中文解析器`ik-analyzer-solr-8.3.0\src\main\resources`目录下的文件拷贝到容器内   新建文件夹 classes ，将文件先从宿主机拷贝到虚拟机的 classes 文件夹下，再从虚拟机上拷贝到 solr 容器中。   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">① IKAnalyzer.cfg.xml</span><br><span class="line">② ext.dic</span><br><span class="line">③ stopword.dic</span><br><span class="line">④ ik.conf</span><br><span class="line">⑤ dynamicdic.txt</span><br></pre></td></tr></table></figure>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp classes solr:/opt/solr/server/solr-webapp/webapp/WEB-INF/classes</span></span><br></pre></td></tr></table></figure>3. 配置中文解析器   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi /var/solr/data/my_core/conf/managed-schema</span></span><br></pre></td></tr></table></figure>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ik分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_cn"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>4. 进入 solr 容器内部检查文件   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /opt/solr/server/solr-webapp/webapp/WEB-INF/classes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">IKAnalyzer.cfg.xml  dynamicdic.txt  ext.dic  ik.conf  stopword.dic</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /opt/solr/server/solr-webapp/webapp/WEB-INF/lib</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">ik-analyzer-8.3.0.jar ...</span><br></pre></td></tr></table></figure>5. 退出 solr 容器，重启 solr   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr</span></span><br></pre></td></tr></table></figure>###### 中文分词器> 请求url [http://192.168.56.10:8983/solr/#/my_core/analysis?analysis.fieldvalue=%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C&analysis.fieldtype=text_cn&verbose_output=1](http://192.168.56.10:8983/solr/#/my_core/analysis?analysis.fieldvalue=你好世界&analysis.fieldtype=text_cn&verbose_output=1)![docker-solr中文分词器演示](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-solr%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E6%BC%94%E7%A4%BA.png)###### solr挂载到虚拟机本地，实现配置持久化在重启虚拟机后，需要通过配置 solr 持久化数据。1. 将配置的文件夹存储在 `/mydata/solr/` 下   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /mydata/</span></span><br></pre></td></tr></table></figure>2.  将文件拷贝到 `mydata` 下   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp solr:/opt/solr/ /mydata/</span></span><br></pre></td></tr></table></figure>3. 删除旧的 solr 容器   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f solr</span></span><br></pre></td></tr></table></figure>4. 以挂载的形式启动 solr 容器   - `-d` 后台运行   - `-p` 端口映射   - `--name` 容器名   - `--restart=always` 自启动（docker启动时同时启动solr）   - `-v` 挂载   - -`t` 展示容器输入信息`STDIN`   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8983:8983 --name solr --restart=always -v /mydata/solr:/opt/solr -t solr</span></span><br></pre></td></tr></table></figure>5. 创建 core ，core名称 my_solr_core   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=solr solr bin/solr create_core -c  my_solr_core</span></span><br></pre></td></tr></table></figure>6. 进入 solr 容器内部，添加中文分词器   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi /var/solr/data/my_solr_core/conf/managed-schema</span></span><br></pre></td></tr></table></figure>   修改的内容参考 *配置中文解析器的第三步配置中文解析器*7. 将 core 的配置文件拷贝到挂载的目录下   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker cp solr:/var/solr/data/my_solr_core /mydata/solr/server/solr/</span></span><br></pre></td></tr></table></figure>8. 重新启动 solr 容器   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr</span></span><br></pre></td></tr></table></figure>![solr挂载到本地使用中文分词器示例](https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E7%A4%BA%E4%BE%8B.png)###### 挂载注意项【可选项】solr 容器创建的 core 数据保存在 `/var/solr/data` 目录下，所以需要将此目录挂载到 `/mydata/solr/server/solr` 目录下。在容器创建完成前可以添加 `-v /mydata/solr/server/solr:/var/solr/data`进行挂载，在创建容器后可通过修改配置文件的方式挂载。<font color="red">这种挂载方式，可能会出现问题，在用vagrant+vmbox配置的docke上没有问题，但在vmware上会出问题。所以还是推荐使用 docker cp 手动复制。</font><p>具体步骤：</p><ol><li><p>查看 solr 容器的 id</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps <span class="comment"># 或使用 docker ps -a 查看所有容器</span></span></span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">c713163b6615        solr                "docker-entrypoint.s…"   21 hours ago        Up 18 seconds       0.0.0.0:8983-&gt;8983/tcp              solr</span><br></pre></td></tr></table></figure></li><li><p>停止 docker，修改容器配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建议使用管理员权限</span></span><br><span class="line">[root@localhost docker]# cd /var/lib/docker</span><br><span class="line">[root@localhost docker]# cd containers</span><br><span class="line">[root@localhost containers]# ls</span><br><span class="line">c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014# solr容器的id</span><br><span class="line">[root@localhost containers]# cd c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014/</span><br><span class="line">[root@localhost c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014]# ls</span><br><span class="line">c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014-json.log  hosts</span><br><span class="line">checkpoints                                                                mounts</span><br><span class="line">config.v2.json                                                             resolv.conf</span><br><span class="line">hostconfig.json                                                            resolv.conf.hash</span><br><span class="line">hostname</span><br><span class="line">[root@localhost c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014]# vi mount</span><br></pre></td></tr></table></figure><p>在 <code>BInds</code> 中添加挂载的目录内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"Binds"</span>: [<span class="string">"/mydata/solr:/opt/solr"</span>,<span class="string">"/mydata/solr/server/solr:/var/solr/data"</span>],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启 docker 服务，启动 solr 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker start solr</span></span><br></pre></td></tr></table></figure></li><li><p>进入 solr 容器内部，检查挂载文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-java]# docker exec -it --user=root solr /bin/bash</span><br><span class="line">root@c713163b6615:/opt/solr-8.6.1# cd /var/solr</span><br><span class="line">root@c713163b6615:/var/solr# ls</span><br><span class="line">data  log4j2.xml  logs</span><br><span class="line">root@c713163b6615:/var/solr# cd data</span><br><span class="line">root@c713163b6615:/var/solr/data# ls</span><br><span class="line">blog_core  filestore  my_solr_core  solr.xml  userfiles  zoo.cfg</span><br></pre></td></tr></table></figure></li></ol><p>在完成挂载后，就不需要每次将 core 的数据手动拷贝到 /mydata/solr/server/solr 下。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h6&gt;&lt;p&gt;docker下安装solr，以及使用中文分词器。&lt;/p&gt;
&lt;p&gt;通过 xftp 工具将文件从宿主机拷贝到虚拟机上。&lt;/p&gt;
&lt;p&gt;中文分词器相关资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中文分词器github地址 &lt;a href=&quot;https://github.com/magese/ik-analyzer-solr/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/magese/ik-analyzer-solr/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jar 包 &lt;a href=&quot;https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="solr" scheme="https://lao-biao.github.io/tags/solr/"/>
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中使用Solr作为搜索引擎</title>
    <link href="https://lao-biao.github.io/articles/4499c37a.html"/>
    <id>https://lao-biao.github.io/articles/4499c37a.html</id>
    <published>2020-08-18T05:29:17.000Z</published>
    <updated>2020-08-18T23:28:53.005Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在Spring Boot中，从数据库中通过关键字查询需要通过 like , equal 等，而且中文分词的操作比较复杂，不利于逻辑实现和代码书写。使用Solr作为Spring Boot项目的全文搜索引擎，效率更高，代码更简易。</p><p>以文章为模型，演示Solr的增删改查。</p><a id="more"></a><h5 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h5><p>文章：</p><ul><li>id 编号</li><li>title 标题</li><li>content 内容</li><li>labels 标签</li><li>createTime 创建时间</li></ul><p>通过关键词对文章的标题、内容、标签中进行搜索。</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>配置部分包括Solr部分和Spring Boot项目两个部分。</p><h6 id="Solr配置"><a href="#Solr配置" class="headerlink" title="Solr配置"></a>Solr配置</h6><p>修改<code>Solr\server\solr\example_core\conf\managed-schema</code>，在\<schema\>标签内添加文章相关配置</p><ul><li>field 为字段名</li><li><code>&lt;copyField source=&quot;字段名&quot; dest=&quot;search_item&quot;/&gt;</code>  作为搜索项</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文章 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_title"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_content"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_create_time"</span> <span class="attr">type</span>=<span class="string">"pdate"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_labels"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索item --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"search_item"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_title"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_content"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_labels"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="Spring-Boot项目配置"><a href="#Spring-Boot项目配置" class="headerlink" title="Spring Boot项目配置"></a>Spring Boot项目配置</h6><ol><li><p>创建以maven为依赖管理的spring boot项目</p></li><li><p>添加web，solr，gson 相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- gson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- solr --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-solr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>application.yml</code> 中配置项目端口号和solr的相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="comment"># 配置solr</span></span><br><span class="line">    <span class="attr">solr:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">http://localhost:8983/solr/example_core</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><p>项目文件的结构</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├─java</span><br><span class="line">│  └─com</span><br><span class="line">│      └─study</span><br><span class="line">│          └─springbootsolr</span><br><span class="line">│              │  SpringBootSolrApplication.java </span><br><span class="line">│              │</span><br><span class="line">│              ├─controller</span><br><span class="line">│              │      SolrController.java</span><br><span class="line">│              │</span><br><span class="line">│              ├─pojo</span><br><span class="line">│              │      PageList.java</span><br><span class="line">│              │      SolrSearchResult.java</span><br><span class="line">│              │</span><br><span class="line">│              └─service</span><br><span class="line">│                      SolrService.java</span><br><span class="line">│</span><br><span class="line">└─resources</span><br><span class="line">    │  application.yml</span><br><span class="line">    │</span><br><span class="line">    ├─<span class="keyword">static</span></span><br><span class="line">    └─templates</span><br></pre></td></tr></table></figure><h6 id="SolrSearchResult-java"><a href="#SolrSearchResult-java" class="headerlink" title="SolrSearchResult.java"></a>SolrSearchResult.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrSearchResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_content"</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_create_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_labels"</span>)</span><br><span class="line">    <span class="keyword">private</span> String labels;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_title"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    </span><br><span class="line">    getters/setters...</span><br><span class="line">    toString...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PageList-java"><a href="#PageList-java" class="headerlink" title="PageList.java"></a>PageList.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> currentPage;   <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalCount;    <span class="comment">// 总共有多少条</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pageSize;      <span class="comment">// 每页内容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalPage;     <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> first;  <span class="comment">// 是否是第一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> last;   <span class="comment">// 是否是最后一页</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; content;   <span class="comment">// 内容</span></span><br><span class="line">    </span><br><span class="line">    getters/setters...</span><br><span class="line">    toString...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="SolrController-java"><a href="#SolrController-java" class="headerlink" title="SolrController.java"></a>SolrController.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SolrService solrService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/solr/&#123;page&#125;/&#123;size&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrSearch</span><span class="params">(@PathVariable(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page,</span></span><br><span class="line"><span class="function">                                 @<span class="title">PathVariable</span><span class="params">(<span class="string">"size"</span>)</span> <span class="keyword">int</span> size,</span></span><br><span class="line"><span class="function">                                 @<span class="title">RequestParam</span><span class="params">(<span class="string">"keyword"</span>)</span> String keyword) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.search(keyword, page, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="SolrService-java"><a href="#SolrService-java" class="headerlink" title="SolrService.java"></a>SolrService.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SolrClient solrClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SolrInputDocument doc = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line">        doc.addField(<span class="string">"id"</span>, <span class="string">"730469770008199168"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_title"</span>, <span class="string">"SpringBoot中使用Solr作为搜索引擎"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_content"</span>, <span class="string">"这是测试solr添加的文章内容。"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_create_time"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        doc.addField(<span class="string">"article_labels"</span>, <span class="string">"后端-测试-solr"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            solrClient.add(doc);</span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章添加失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SolrInputDocument doc = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line">        doc.addField(<span class="string">"id"</span>, <span class="string">"730469770008199168"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_title"</span>, <span class="string">"SpringBoot中使用Solr作为搜索引擎"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_content"</span>, <span class="string">"&lt;p&gt;文章更新，这是测试solr更新的文章内容。&lt;/p&gt;"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_create_time"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        doc.addField(<span class="string">"article_labels"</span>, <span class="string">"后端-测试-solr"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            solrClient.add(doc);</span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章更新失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章更新成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 单独删除一条记录</span></span><br><span class="line">            solrClient.deleteById(<span class="string">"730469770008199168"</span>);</span><br><span class="line">            <span class="comment">// 提交</span></span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章删除失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章删除成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">search</span><span class="params">(String keyword, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数检查</span></span><br><span class="line">        <span class="keyword">if</span> (page &lt; <span class="number">1</span>) page = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">5</span>) size = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页设置</span></span><br><span class="line">        SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line">        solrQuery.setRows(size);    <span class="comment">// 每页数量</span></span><br><span class="line">        solrQuery.setStart(size * (page - <span class="number">1</span>));   <span class="comment">// 设置开始位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置搜索条件</span></span><br><span class="line">        solrQuery.set(<span class="string">"df"</span>, <span class="string">"search_item"</span>); <span class="comment">//  设置搜索关键字：标题，内容，标签</span></span><br><span class="line">        solrQuery.set(<span class="string">"q"</span>, TextUtils.isEmpty(keyword) ? <span class="string">"*"</span> : keyword); <span class="comment">// 条件过滤</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时间的降序</span></span><br><span class="line">        solrQuery.setSort(<span class="string">"article_create_time"</span>, SolrQuery.ORDER.desc);</span><br><span class="line"></span><br><span class="line">        solrQuery.setHighlight(<span class="keyword">true</span>);   <span class="comment">// 开启高亮</span></span><br><span class="line">        solrQuery.addHighlightField(<span class="string">"article_title,article_content"</span>); <span class="comment">// 高亮字段</span></span><br><span class="line">        solrQuery.setHighlightSimplePre(<span class="string">"&lt;font color='red'&gt;"</span>);  <span class="comment">// 高亮前缀</span></span><br><span class="line">        solrQuery.setHighlightSimplePost(<span class="string">"&lt;/font&gt;"</span>);            <span class="comment">// 高亮后缀</span></span><br><span class="line">        solrQuery.setHighlightFragsize(<span class="number">400</span>);    <span class="comment">// 设置字符数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置返回字段</span></span><br><span class="line">        solrQuery.addField(<span class="string">"id,article_content,article_create_time,article_labels,article_title"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理搜索结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryResponse result = solrClient.query(solrQuery);</span><br><span class="line">            <span class="comment">// 获取高亮内容</span></span><br><span class="line">            Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = result.getHighlighting();</span><br><span class="line">            <span class="comment">// 把数据转换成bean类</span></span><br><span class="line">            List&lt;SolrSearchResult&gt; beans = result.getBeans(SolrSearchResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">for</span> (SolrSearchResult item : beans) &#123;</span><br><span class="line">                Map&lt;String, List&lt;String&gt;&gt; stringListMap = highlighting.get(item.getId());</span><br><span class="line">                <span class="keyword">if</span> (stringListMap == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                List&lt;String&gt; title = stringListMap.get(<span class="string">"article_title"</span>);</span><br><span class="line">                <span class="comment">// 替换文章标题为高亮</span></span><br><span class="line">                <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setTitle(title.get(<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;String&gt; content = stringListMap.get(<span class="string">"article_content"</span>);</span><br><span class="line">                <span class="comment">// 替换文章内容为高亮</span></span><br><span class="line">                <span class="keyword">if</span> (content != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setContent(content.get(<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 封装结果：列表，页面，每页数量</span></span><br><span class="line">            PageList&lt;SolrSearchResult&gt; pageList = <span class="keyword">new</span> PageList&lt;&gt;();</span><br><span class="line">            pageList.setContent(beans);</span><br><span class="line">            pageList.setCurrentPage(page);</span><br><span class="line">            pageList.setTotalCount(result.getResults().getNumFound());</span><br><span class="line">            pageList.setPageSize(size);</span><br><span class="line">            pageList.setTotalPage((<span class="keyword">int</span>) (pageList.getTotalCount() / size + <span class="number">0.5</span>));</span><br><span class="line">            pageList.setFirst(pageList.getCurrentPage() == <span class="number">1</span>);</span><br><span class="line">            pageList.setLast(pageList.getCurrentPage() == pageList.getTotalPage());</span><br><span class="line">            <span class="comment">// 返回搜索结果</span></span><br><span class="line">            Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(pageList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"搜索失败，请稍后重试！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>使用postman测试增删改查，以及solr客户端查询</p><h6 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h6><p>postman</p><ul><li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li><li>请求方式：post</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0.png" alt="solr添加文章"></p><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>solr网页客户端进行查询（查询所有，不过滤）</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C.png" alt="solr网页客户端搜索结果"></p><p>postman 模拟搜索</p><ul><li>请求url：<a href="http://localhost:8000/test/solr/1/5?keyword=solr" target="_blank" rel="noopener">http://localhost:8000/test/solr/1/5?keyword=solr</a></li><li>请求方式：get</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/postman%E6%90%9C%E7%B4%A2%E6%B7%BB%E5%8A%A0%E7%BB%93%E6%9E%9C.png" alt="postman搜索添加文章结果"></p><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><p>postman</p><ul><li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li><li>请求方式：put</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0.png" alt="solr文章g更新"></p><p>solr客户端查看更新结果</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E7%BB%93%E6%9E%9C.png" alt="solr客户端查看更新结果"></p><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p>postman</p><ul><li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li><li>请求方式：delete</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E5%88%A0%E9%99%A4.png" alt="solr删除文章"></p><p>solr客户端查看删除结果</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%A0%E9%99%A4%E7%BB%93%E6%9E%9C.png" alt="solr客户端删除结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;在Spring Boot中，从数据库中通过关键字查询需要通过 like , equal 等，而且中文分词的操作比较复杂，不利于逻辑实现和代码书写。使用Solr作为Spring Boot项目的全文搜索引擎，效率更高，代码更简易。&lt;/p&gt;
&lt;p&gt;以文章为模型，演示Solr的增删改查。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="solr" scheme="https://lao-biao.github.io/tags/solr/"/>
    
      <category term="spring boot" scheme="https://lao-biao.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Solr基本配置-Windows版</title>
    <link href="https://lao-biao.github.io/articles/e0b21c40.html"/>
    <id>https://lao-biao.github.io/articles/e0b21c40.html</id>
    <published>2020-08-18T02:32:26.000Z</published>
    <updated>2020-08-18T23:27:54.235Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h4><p>Solr下载地址 <a href="https://lucene.apache.org/solr/downloads.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/downloads.html</a></p><p>[可选项]配置环境变量：将Solr添加到系统环境变量中，在系统环境变量的path下添加 <code>安装目录\Solr\bin</code></p><h5 id="Solr目录结构"><a href="#Solr目录结构" class="headerlink" title="Solr目录结构"></a>Solr目录结构</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr目录结构.png" alt="Solr目录结构"></p><a id="more"></a><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><p>在 Solr 的 bin 目录下打开cmd窗口，若配置了solr的环境变量，可在任意位置打开cmd窗口。</p><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><p><code>solr start</code> 默认启动的端口号为 8983</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> bin  <span class="comment"># 已配置环境变量可省略</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> solr start</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: JVM cannot use large page memory because it does not have enough privilege to lock pages in memory.</span><br><span class="line">Waiting up to 30 to see Solr running on port 8983</span><br><span class="line">Started Solr server on port 8983. Happy searching!</span><br></pre></td></tr></table></figure><h6 id="指定启动端口号"><a href="#指定启动端口号" class="headerlink" title="指定启动端口号"></a>指定启动端口号</h6><p><code>solr start-p 端口号</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr start -p 9000</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: JVM cannot use large page memory because it does not have enough privilege to lock pages in memory.</span><br><span class="line">Waiting up to 30 to see Solr running on port 9000</span><br><span class="line">Started Solr server on port 9000. Happy searching!</span><br></pre></td></tr></table></figure><h6 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h6><p><code>solr stop -p 启动的端口号</code>   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr stop -p 8983</span></span><br><span class="line">Stopping Solr process 1520 running on port 8983</span><br><span class="line"></span><br><span class="line">等待 5 秒，按一个键继续 ...</span><br></pre></td></tr></table></figure><h6 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h6><p><code>solr restart -p 启动的端口号</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr restart -p 8983</span></span><br><span class="line">Stopping Solr process 5736 running on port 8983</span><br><span class="line"></span><br><span class="line">等待 5 秒，按一个键继续 ...</span><br></pre></td></tr></table></figure><h6 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h6><p>访问地址：<a href="http://localhost:启动的端口号/solr/#">http://localhost:启动的端口号/solr/#</a></p><p>默认：<a href="http://localhost:8983/solr/#" target="_blank" rel="noopener">http://localhost:8983/solr/#</a></p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>solr的关系映射</p><ul><li>solr为库</li><li>core为表</li><li>filed为字段</li></ul><h6 id="创建核心"><a href="#创建核心" class="headerlink" title="创建核心"></a>创建核心</h6><p> <code>solr create -c example_core</code>，会自动添加默认配置文件config、data和core.properties</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr create -c example_core</span></span><br><span class="line">WARNING: Using _default configset with data driven schema functionality. NOT RECOMMENDED for production use.</span><br><span class="line">         To turn off: bin\solr config -c example_core -p 8983 -action set-user-property -property update.autoCreateFields -value false</span><br><span class="line"></span><br><span class="line">Created new core 'example_core'</span><br></pre></td></tr></table></figure><p>在<code>Solr\server\</code>目录下会新增文件夹<code>example_core</code>。</p><h6 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h6><p>访问地址：<a href="http://localhost:8983/solr/#/example_core/core-overview" target="_blank" rel="noopener">http://localhost:8983/solr/#/example_core/core-overview</a></p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E4%BE%A7%E6%A0%8F%E5%B7%A5%E5%85%B7.png" alt="solr侧栏工具"></p><h6 id="添加中文分词器"><a href="#添加中文分词器" class="headerlink" title="添加中文分词器"></a>添加中文分词器</h6><blockquote><p>中文分词器github地址 <a href="https://github.com/magese/ik-analyzer-solr/" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/</a></p></blockquote><ol><li><p>添加配置文件：<br>下载 <a href="https://github.com/magese/ik-analyzer-solr/releases/tag/v8.3.0" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/releases/tag/v8.3.0</a></p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6.png" alt="中文分词器资源文件">将<code>ik-analyzer-solr-8.3.0\src\main\resources</code>路径下的5个配置文件拷贝到<code>Solr\server\solr-webapp\webapp\WEB-INF\classes</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">① IKAnalyzer.cfg.xml</span><br><span class="line">② ext.dic</span><br><span class="line">③ stopword.dic</span><br><span class="line">④ ik.conf</span><br><span class="line">⑤ dynamicdic.txt</span><br></pre></td></tr></table></figure></li><li><p>jar包支持：</p><p>下载 <a href="https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar" target="_blank" rel="noopener">https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar</a></p><p>将jar包拷贝到 <code>Solr\server\solr-webapp\webapp\WEB-INF\lib</code>目录下</p></li><li><p>配置Solr的<code>managed-schema</code>，添加<code>ik分词器</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ik分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_cn"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="使用中文分词器分析"><a href="#使用中文分词器分析" class="headerlink" title="使用中文分词器分析"></a>使用中文分词器分析</h5><p>在添加中文分词器后，重启Solr，访问 example_core 下的 analysis</p><blockquote><p>访问地址：<a href="http://localhost:8983/solr/#/example_core/analysis" target="_blank" rel="noopener">http://localhost:8983/solr/#/example_core/analysis</a></p></blockquote><p>Analyse Fieldname / FieldType：<code>text_cn</code>    （配置的中文分词器）</p><p>Field Value ：Solr的中文分词器</p><p>分析结果</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E7%A4%BA%E4%BE%8B.png" alt="中文分词器示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Solr&quot;&gt;&lt;a href=&quot;#Solr&quot; class=&quot;headerlink&quot; title=&quot;Solr&quot;&gt;&lt;/a&gt;Solr&lt;/h4&gt;&lt;p&gt;Solr下载地址 &lt;a href=&quot;https://lucene.apache.org/solr/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://lucene.apache.org/solr/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[可选项]配置环境变量：将Solr添加到系统环境变量中，在系统环境变量的path下添加 &lt;code&gt;安装目录\Solr\bin&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;Solr目录结构&quot;&gt;&lt;a href=&quot;#Solr目录结构&quot; class=&quot;headerlink&quot; title=&quot;Solr目录结构&quot;&gt;&lt;/a&gt;Solr目录结构&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr目录结构.png&quot; alt=&quot;Solr目录结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="solr" scheme="https://lao-biao.github.io/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>JVM虚拟机</title>
    <link href="https://lao-biao.github.io/articles/18701caa.html"/>
    <id>https://lao-biao.github.io/articles/18701caa.html</id>
    <published>2020-07-14T15:03:22.000Z</published>
    <updated>2020-08-24T01:06:18.483Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h4><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><a id="more"></a><h5 id="java从编码到执行"><a href="#java从编码到执行" class="headerlink" title="java从编码到执行"></a>java从编码到执行</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Java从编码到执行.png" alt="Java从编码到执行"></p><h5 id="JVM：从跨平台的语言到跨语言的平台"><a href="#JVM：从跨平台的语言到跨语言的平台" class="headerlink" title="JVM：从跨平台的语言到跨语言的平台"></a>JVM：从跨平台的语言到跨语言的平台</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/跨平台语言与跨语言平台.png" alt="从跨平台的语言到跨语言的平台"></p><h5 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h5><p>java虚拟机 java virtual machine </p><h6 id="JVM是一种规范"><a href="#JVM是一种规范" class="headerlink" title="JVM是一种规范"></a>JVM是一种规范</h6><ul><li>java虚拟机规范 java virtual machine specifications</li></ul><h6 id="JVM是虚构出来的一台计算机"><a href="#JVM是虚构出来的一台计算机" class="headerlink" title="JVM是虚构出来的一台计算机"></a>JVM是虚构出来的一台计算机</h6><ul><li>字节码指令集（汇编语言）</li><li>内存管理：栈 堆 方法区等</li></ul><h6 id="JVM分代模型"><a href="#JVM分代模型" class="headerlink" title="JVM分代模型"></a>JVM分代模型</h6><ul><li>新生代（Young Generation）</li><li>老年代（(Old Generation）</li><li><del>持久代（Permanent Generation）</del>：用于存储静态文件</li></ul><p>JDK 8 中已经把持久代（PermGen Space）移除了，取而代之的元空间（Metaspace）。Metaspace占用的是本地内存，不再占用虚拟机内存。</p><h5 id="JVM与class文件格式"><a href="#JVM与class文件格式" class="headerlink" title="JVM与class文件格式"></a>JVM与class文件格式</h5><p>JVM与java无关，任何语言都可以通过编译成字节码文件在JVM上运行。</p><pre class="mermaid">graph LR;A[任何语言]-->B(class字节码)-->C[JVM虚拟机]</pre><h5 id="常见的JVM实现"><a href="#常见的JVM实现" class="headerlink" title="常见的JVM实现"></a>常见的JVM实现</h5><h6 id="Hotspot"><a href="#Hotspot" class="headerlink" title="Hotspot"></a>Hotspot</h6><ul><li>Oracle官方，做实验用的JVM</li><li>java -version</li></ul><h6 id="Jrockit"><a href="#Jrockit" class="headerlink" title="Jrockit"></a>Jrockit</h6><ul><li>BEA公司开发，曾经号称世界上最快的JVM</li><li>被Oracle收购</li></ul><h6 id="J9-IBM"><a href="#J9-IBM" class="headerlink" title="J9-IBM"></a>J9-IBM</h6><p>IBM公司开发，类似于Hotspot，主要用于IBM自己的产品。</p><h6 id="Microsoft-VM"><a href="#Microsoft-VM" class="headerlink" title="Microsoft VM"></a>Microsoft VM</h6><p>微软虚拟机</p><h6 id="TaobaoVM"><a href="#TaobaoVM" class="headerlink" title="TaobaoVM"></a>TaobaoVM</h6><p>Hotspot深度定制版</p><h6 id="LiquidVM"><a href="#LiquidVM" class="headerlink" title="LiquidVM"></a>LiquidVM</h6><p>直接针对硬件</p><h6 id="azul-zing"><a href="#azul-zing" class="headerlink" title="azul zing"></a>azul zing</h6><p>最新垃圾回收的行业标杆</p><h5 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK-JRE-JVM"></a>JDK-JRE-JVM</h5><p>JDK：开发集成工具+jre，java开发工具包，部署java开发环境</p><p>JRE：核心库+JVM，运行java环境</p><p>JVM：运行最终的字节码文件</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/JDK-JRE-JVM.png" alt="JDK-JRE-JVM"></p><h4 id="Garbage-Collector-与-GC-tuning"><a href="#Garbage-Collector-与-GC-tuning" class="headerlink" title="Garbage Collector 与 GC tuning"></a>Garbage Collector 与 GC tuning</h4><p>垃圾回收与垃圾回收调优</p><h5 id="垃圾的定义"><a href="#垃圾的定义" class="headerlink" title="垃圾的定义"></a>垃圾的定义</h5><p>内存</p><ul><li>多删</li><li>忘删：内存泄漏（Memory Leak）</li></ul><p>JVM中GC自动回收垃圾</p><h6 id="java与c-垃圾回收比较"><a href="#java与c-垃圾回收比较" class="headerlink" title="java与c++垃圾回收比较"></a>java与c++垃圾回收比较</h6><p>java</p><ul><li>GC处理垃圾</li><li>开发效率高，执行效率低</li></ul><p>C++</p><ul><li>手动处理垃圾</li><li>忘记回收：内存泄漏</li><li>回收多次：非法访问</li><li>开发效率低，执行效率高</li></ul><h5 id="垃圾的定位"><a href="#垃圾的定位" class="headerlink" title="垃圾的定位"></a>垃圾的定位</h5><p>垃圾是如何定位的</p><h6 id="Reference-Count-算法"><a href="#Reference-Count-算法" class="headerlink" title="Reference Count 算法"></a>Reference Count 算法</h6><p>引用计数</p><p>在空引用时进行回收</p><p>缺陷：RC不能解决循环引用的问题（一堆垃圾）</p><h6 id="Root-Searching-根可达算法"><a href="#Root-Searching-根可达算法" class="headerlink" title="Root Searching 根可达算法"></a>Root Searching 根可达算法</h6><p>由根节点可以连接到达为有效对象，其他的视为垃圾。</p><p>以下可视为根节点</p><ul><li>JVM stack    main方法的栈帧</li><li>native method  stack 本地方法栈</li><li>runtime constant pool 运行时的常量池</li><li>static references in method area 方法区内静态引用对象</li><li>Clazz 类对象</li></ul><p>GC roots：线程变量、静态变量、常量池、JNI指针</p><p>注意：</p><p>Java 不采用RC（Reference Count）算法，而是采用RS（Root Searching）算法。</p><h5 id="常见垃圾回收算法"><a href="#常见垃圾回收算法" class="headerlink" title="常见垃圾回收算法"></a>常见垃圾回收算法</h5><p>常见GC 算法</p><ul><li>Mark-Sweep 标记清除</li><li>Copying 拷贝</li><li>Mark-Compact 标记压缩</li></ul><h6 id="Mark-Sweep-标记清除"><a href="#Mark-Sweep-标记清除" class="headerlink" title="Mark-Sweep 标记清除"></a>Mark-Sweep 标记清除</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Sweep-1.png" alt="Mark Sweep算法"></p><p>标记清除算法流程</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Sweep-2.png" alt="Mark Sweep算法"></p><p>优点：</p><ul><li>算法相对简单</li><li>存活对象比较多的情况下效率较高</li></ul><p>缺点：</p><ul><li>扫描两次，效率偏低</li><li>容易产生碎片化：不能存放连续的对象</li></ul><h6 id="Copying-复制"><a href="#Copying-复制" class="headerlink" title="Copying 复制"></a>Copying 复制</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Copying-1.png" alt="Copying算法"></p><p>复制算法流程</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Copying-2.png" alt="Copying算法"></p><p>优点：</p><ul><li>适用于存活对象较少的情况</li><li>只扫描一次，效率提高</li><li>没有碎片</li></ul><p>缺点：</p><ul><li>空间浪费，每次只有一半内存被使用</li><li>移动复制对象，需要调整对象的引用</li></ul><h6 id="Mark-Compact-标记压缩"><a href="#Mark-Compact-标记压缩" class="headerlink" title="Mark Compact 标记压缩"></a>Mark Compact 标记压缩</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Compact-1.png" alt="Mark Compact算法"></p><p>标记压缩算法流程</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Compact-2.png" alt="Mark Compact算法"></p><p>优点：</p><ul><li>不会产生碎片，方便对象分配</li><li>不会产生内存减半</li></ul><p>缺点：</p><ul><li>扫描两次</li><li>需要移动对象，效率偏低</li></ul><h5 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h5><ul><li><p>JDK 1.8默认 PS+PO</p></li><li><p>JDK 1.9 10 11 12 13 默认G1</p></li></ul><h6 id="常见垃圾回收器分类"><a href="#常见垃圾回收器分类" class="headerlink" title="常见垃圾回收器分类"></a>常见垃圾回收器分类</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/垃圾收集器分类.png" alt="垃圾收集器分类"></p><p>Young、Old 分代模型，新生代和老生代配合使用</p><ul><li>ParNew+CMS</li><li>ParNew+Serial Old</li><li>Serial+Serial Old</li><li>Serial+CMS+Serial Old</li><li>Parallel Scavenge+Parallel Old</li><li>Parallel Scavenge+Serial Old</li></ul><p>G1：物理上不分代，逻辑上分代</p><h6 id="堆内存逻辑分区（不适用不分代垃圾收集器）"><a href="#堆内存逻辑分区（不适用不分代垃圾收集器）" class="headerlink" title="堆内存逻辑分区（不适用不分代垃圾收集器）"></a>堆内存逻辑分区（不适用不分代垃圾收集器）</h6><p>新生代大量死去，少量存活，采用复制算法</p><p>老年代存活率高，回收较少，采用MC（Mark Compact）或MS（Mark Sweep）</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/堆内存逻辑分区.png" alt="堆内存逻辑分区"></p><p>CMS：经过6次GC—&gt;老年代</p><p>其他：经过15次GC</p><h6 id="GC概念"><a href="#GC概念" class="headerlink" title="GC概念"></a>GC概念</h6><p>MinorGC/YGC：年轻代空间耗尽时触发</p><p>MajorGC/FullGC：在老年代无法继续分配空间时触发，新生代老年代同时进行回收</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/GC概念.png" alt="GC概念"></p><h6 id="GC详解"><a href="#GC详解" class="headerlink" title="GC详解"></a>GC详解</h6><p>栈上分配</p><ul><li>线程私有小对象</li><li>无逃逸：栈中存在引用</li><li>支持标量替换</li><li>无需调整</li></ul><p>线程本地分配TLAB（Thread Local Allocation Buffer）</p><ul><li>占用eden，默认1%</li><li>多线程的时候不用竞争eden就可以申请空间，提高效率</li><li>小对象</li><li>无需调整</li></ul><p>Old 老年代</p><ul><li>大对象</li></ul><p>eden 伊甸：对象刚出生时，刚new的时候</p><h6 id="YGC与FGC"><a href="#YGC与FGC" class="headerlink" title="YGC与FGC"></a>YGC与FGC</h6><p>YGC</p><ul><li>Young GC Minor（辅助） GC</li><li>Eden区不足</li></ul><p>FGC</p><ul><li>Full GC Major GC</li><li>Old空间不足</li><li>System.gc()</li></ul><h6 id="对象何时进入老年代"><a href="#对象何时进入老年代" class="headerlink" title="对象何时进入老年代"></a>对象何时进入老年代</h6><p>超过<code>XX:MaxTenuringThreshold</code>指定次数（YGC）</p><ul><li>Parallel Scavenge 经过15次GC进入老年代</li><li>CMS 经过6次GC进入老年代</li><li>G1 经过15次GC进入老年代</li></ul><p>动态年龄</p><ul><li>s1 - &gt; s2超过50%</li><li>把年龄最大的放入O（老年代）</li></ul><p>通过参数：<code>-XX:MaxTenuringThreshold</code>配置</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/一个对象从出生到消亡.png" alt="一个对象从出生到消亡"></p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/GC总结.png" alt="GC总结"></p><h6 id="ParNew垃圾回收器"><a href="#ParNew垃圾回收器" class="headerlink" title="ParNew垃圾回收器"></a>ParNew垃圾回收器</h6><p>PS（Parallel Scavenge）的变种，用来配合CMS使用。</p><ul><li>a stop-thr-world,copying collector with uses multiple GC threads.</li><li>It differs from “Parallel Scavenge” in that it has enhancements that make it uasable with CMS.</li><li>For example,”ParNew” doses the synchronization needed so that it can run during thr concurrent phases of CMS.</li><li>默认线程数位CPU的核数</li></ul><h6 id="Serial垃圾回收器与Serial-Old垃圾回收器"><a href="#Serial垃圾回收器与Serial-Old垃圾回收器" class="headerlink" title="Serial垃圾回收器与Serial Old垃圾回收器"></a>Serial垃圾回收器与Serial Old垃圾回收器</h6><p>此种组合基本不使用，效率太低</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Serial.png" alt="Serial"></p><ul><li>串行</li><li>STW</li><li>单线程拷贝算法（工作在年轻代）</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Serial-Old.png" alt="Serial-Old"></p><h6 id="Parallel-Scavenge垃圾回收器"><a href="#Parallel-Scavenge垃圾回收器" class="headerlink" title="Parallel Scavenge垃圾回收器"></a>Parallel Scavenge垃圾回收器</h6><ul><li>STW</li><li>多线程拷贝算法</li></ul><h6 id="Parallel-Old垃圾回收器"><a href="#Parallel-Old垃圾回收器" class="headerlink" title="Parallel Old垃圾回收器"></a>Parallel Old垃圾回收器</h6><p>A compacting collector that uses multiple GC threads.</p><ul><li>多线程压缩算法（工作在老年代）</li></ul><h6 id="CMS垃圾回收器"><a href="#CMS垃圾回收器" class="headerlink" title="CMS垃圾回收器"></a>CMS垃圾回收器</h6><ul><li>并发标记清理concurrent mark sweep</li><li>高并发低停顿收集器a mostly concurrent，low-pause collector</li><li>4个阶段（从线程角度）<ol><li>初始标记initial mark</li><li>并发标记concurrent mark</li><li>重新标记remark</li><li>并发清理concurrent sweep</li></ol></li></ul><h6 id="CMS垃圾回收器缺点"><a href="#CMS垃圾回收器缺点" class="headerlink" title="CMS垃圾回收器缺点"></a>CMS垃圾回收器缺点</h6><ul><li>memory fragmentation<ul><li>-XX:CMSFullGCsBeforeCompaction</li></ul></li><li>floating garbage<ul><li>Concurrent Mode Failure -XX:CMSInitiatingOccupancyFraction 92%</li><li>SerialOld</li></ul></li></ul><h6 id="CMS-Remark阶段的算法"><a href="#CMS-Remark阶段的算法" class="headerlink" title="CMS Remark阶段的算法"></a>CMS Remark阶段的算法</h6><p>三色扫描算法：白灰黑</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/三色标记算法.png" alt="三色标记算法"></p><p>在并发按标记时，引用可能产生变化，白色对象有可能被错误回收</p><p>解决方案</p><ul><li>SATB<ul><li>在起始的时候做一个快照 snapshot at the beginning</li><li>当B-&gt;D消失时，要把这个引用推到GC的堆栈，保证D还能被GC扫描到</li><li>配合RSet，只用扫描哪些Region引用到D这个Region（区域）了</li></ul></li><li>Incremental Update<ul><li>当一个白色对象被一个黑色对象引用</li><li>将黑色对象重新标记为灰色，让collector重新扫描</li><li>这个容易产生问题，比如 A a， A b 都已经标记完，但是 A  a - D了，A成为灰色，这时mutator（设置方法）把A a 标记完了，又把 A变成了黑色</li><li>这也是为什么CMS的final mark必须再扫描一遍地原因</li></ul></li></ul><h5 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h5><h6 id="什么是调优"><a href="#什么是调优" class="headerlink" title="什么是调优"></a>什么是调优</h6><ol><li>根据需求进行JVM规划和预调优</li><li>优化运行JVM运行环境（慢、卡顿）</li><li>解决JVM运行过程中出现的任何问题（OOM）</li></ol><h6 id="调优方式"><a href="#调优方式" class="headerlink" title="调优方式"></a>调优方式</h6><p>简单粗暴的调优方式：重启</p><p>在线调优</p><h5 id="JVM命令行参数"><a href="#JVM命令行参数" class="headerlink" title="JVM命令行参数"></a>JVM命令行参数</h5><p>HotSpot参数分类</p><ul><li><p>标准：<code>-</code>开头，所有的HotSpot都支持</p></li><li><p>非标准：<code>-X</code>开头，特定版本HotSpot支持特定命令</p></li><li><p>不稳定：<code>-XX</code>开头，下个版本可能取消</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java # 列出所有的HotSpot都支持的命令</span><br><span class="line"></span><br><span class="line">java -X# 列出特定版本HotSpot支持的特定命令</span><br><span class="line"></span><br><span class="line">Java -XX:+PrintFlagsWithComments# 只有debug版本能用</span><br><span class="line">java -XX:+PrintFlagsFinal# 列出所有不稳定命令</span><br></pre></td></tr></table></figure></li></ul><h5 id="JVM调优实战"><a href="#JVM调优实战" class="headerlink" title="JVM调优实战"></a>JVM调优实战</h5><p>将xms（程序启动时初始内存大小），xmx（程序运行时最大可用内存大小）设置成一致的好处是可以防止内存抖动。</p><h6 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h6><p>OOM（Out Of Memory）：内存泄漏、内存溢出</p><p>当程序的GC垃圾回收在执行，而Memory只增不降，需要进行调优。</p><p>当执行到一定时间时，最终频繁Full GC ，每次GC只会回收2kB或1kB。</p><h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h6><p>阿里开源JVM在线调优工具 arthas</p><p>文档：<a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">Arthas</a></p><p>Arthas无法替代JVM唯一的命令jmap</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top # 类似于任务管理器，通过此命令找到java程序运行的端口号</span><br><span class="line">top -Hp 1196 # 可以查看该进程下各个线程的cpu使用情况；</span><br><span class="line">jps # 用于查询正在运行的JVM进程</span><br><span class="line">jstat # 可以实时显示本地或远程JVM进程中类装载、内存、垃圾收集、JIT编译等数据</span><br><span class="line">jmap -histo 1196 | head -20# 1196为运行端口号，以实际为主，20为获取前面的数据</span><br></pre></td></tr></table></figure><p>问题：当服务器cpu出现飙高怎么处理</p><ol><li>业务线程：列出堆栈，通过<code>jmap</code>命令找到占用内存最高的对象，无法进行GC处理掉的对象，查看代码，进行调整。</li><li>GC线程：通过在线调优工具进行排查</li></ol><p>导致Full GC的原因：</p><ul><li>年老代（Old）被写满</li><li>持久代（Perm）被写满</li><li><code>System.gc()</code>被显示调用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JVM基础&quot;&gt;&lt;a href=&quot;#JVM基础&quot; class=&quot;headerlink&quot; title=&quot;JVM基础&quot;&gt;&lt;/a&gt;JVM基础&lt;/h4&gt;&lt;p&gt;JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="jvm" scheme="https://lao-biao.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Ajax笔记</title>
    <link href="https://lao-biao.github.io/articles/48d9bd16.html"/>
    <id>https://lao-biao.github.io/articles/48d9bd16.html</id>
    <published>2020-07-12T02:47:12.000Z</published>
    <updated>2020-07-12T05:43:38.501Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a>Ajax概述</h5><p>全称”Asynchronous JavaScript and XML” 异步JavaScript和XML，是一种创建交互网页应用的网页开发技术。</p><ul><li>基于web标准(Standards-based Presentation)    XHTML+CSS</li><li>使用DOM(Document Object Model)进行动态显示与交互</li><li>使用XML和XSLT进行数据交换及相关操作</li><li>使用XMLHttpRequest进行异步数据查询、检索</li><li>使用JavaScript将所有的东西绑定在一起</li></ul><p>本质是一个浏览器端的技术</p><p>异步刷新技术，用来在当前页面响应不同的请求内容。</p><a id="more"></a><h5 id="Ajax功能"><a href="#Ajax功能" class="headerlink" title="Ajax功能"></a>Ajax功能</h5><p>需求：需要将本次的响应结果和前面的响应结果内容在同一个页面中展现给用户</p><p>解决:</p><ul><li>在后台服务器端将多次相应内容重新拼接成一个jsp页面，响应对象，jsp内部使用，带有缓冲区的响应对象，效率高于response对象<br>问题:造成相应你内容被重复的响应，资源浪费</li><li>使用Ajax技术</li></ul><h5 id="Ajax基本使用流程"><a href="#Ajax基本使用流程" class="headerlink" title="Ajax基本使用流程"></a>Ajax基本使用流程</h5><ol><li>创建ajax引擎对象</li><li>覆写onreadystatement函数</li><li>判断ajax状态码</li><li>判断响应状态码</li><li>获取相应内容</li><li>处理相应内容</li><li>发送请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ajax引擎对象</span></span><br><span class="line"><span class="keyword">var</span> ajax;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  <span class="comment">// firefox</span></span><br><span class="line">    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// ie</span></span><br><span class="line">    ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 覆写onreadystatement函数</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 会执行4次,判断ajax状态码，只在数据成功接收时执行以下代码</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">4</span> === ajax.readyState) &#123;</span><br><span class="line">        <span class="comment">// 获取元素对象</span></span><br><span class="line">        <span class="keyword">let</span> showdiv = <span class="built_in">document</span>.getElementById(<span class="string">"showDiv"</span>);</span><br><span class="line">        <span class="comment">// 判断响应状态码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">200</span> === ajax.status) &#123;</span><br><span class="line">            <span class="comment">// 获取响应内容，修改元素内容</span></span><br><span class="line">            showdiv.innerHTML = ajax.responseText;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">404</span>===ajax.status)&#123;</span><br><span class="line">            showdiv.innerHTML=<span class="string">"请求资源不存在"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">500</span>===ajax.status)&#123;</span><br><span class="line">            showdiv.innerHTML=<span class="string">"服务器繁忙"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送请求 get/post</span></span><br><span class="line"><span class="comment">// get请求实体拼接在url后面，?隔开，键值对        </span></span><br><span class="line">ajax.open(<span class="string">"get"</span>, <span class="string">"ajax?name=value"</span>);</span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求有单独的请求实体，    </span></span><br><span class="line">ajax.open(<span class="string">"post"</span>,<span class="string">"ajax"</span>);</span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(<span class="string">"name=value"</span>);</span><br></pre></td></tr></table></figure><h5 id="Ajax状态码"><a href="#Ajax状态码" class="headerlink" title="Ajax状态码"></a>Ajax状态码</h5><p>readyState</p><div class="table-container"><table><thead><tr><th style="text-align:center">readyState值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">表示XMLHttpRequest已建立，但还未初始化，这是尚未调用open方法</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">表示open方法已经调用，但未调用send方法（已创建，未发送）</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">表示send方法已经调用，其他数据未知</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">表示请求已经成功发送，正在接收数据</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">表示数据已经成功接收</td></tr></tbody></table></div><h6 id="常用Http状态码"><a href="#常用Http状态码" class="headerlink" title="常用Http状态码"></a>常用Http状态码</h6><div class="table-container"><table><thead><tr><th style="text-align:center">http状态码</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">200 OK</td><td style="text-align:center">客户端请求成功</td></tr><tr><td style="text-align:center">400 Bad Request</td><td style="text-align:center">客户端请求有语法错误，不能被服务器所理解</td></tr><tr><td style="text-align:center">401 Unauthorized</td><td style="text-align:center">请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</td></tr><tr><td style="text-align:center">403 Forbidden</td><td style="text-align:center">服务器收到请求，但是拒绝提供服务</td></tr><tr><td style="text-align:center">404 Not Found</td><td style="text-align:center">请求资源不存在（可能输入了错误的URL）</td></tr><tr><td style="text-align:center">500 Internal Server Error</td><td style="text-align:center">服务器发生不可预期的错误</td></tr><tr><td style="text-align:center">503 Server Unavailable</td><td style="text-align:center">服务器当前不能处理客户端的请求，一段时间后可能恢复正常</td></tr></tbody></table></div><h5 id="Ajax异步和同步"><a href="#Ajax异步和同步" class="headerlink" title="Ajax异步和同步"></a>Ajax异步和同步</h5><p>ajax.open(method, url,async); </p><p>method：get方法，post方法</p><p>url：请求的地址</p><p>async：设置代码执行方式，false同步，true异步,默认为异步</p><h5 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h5><p>get：携带的数据包含在url中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ajax.open(<span class="string">"get"</span>, url + (data === <span class="literal">null</span> ? <span class="string">""</span> : <span class="string">"?"</span> + data), <span class="keyword">async</span>); <span class="comment">// false同步，true异步</span></span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>post</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ajax.open(<span class="string">"post"</span>, url, <span class="keyword">async</span>);<span class="comment">// false同步，true异步</span></span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(data);</span><br></pre></td></tr></table></figure><h5 id="Ajax响应数据类型"><a href="#Ajax响应数据类型" class="headerlink" title="Ajax响应数据类型"></a>Ajax响应数据类型</h5><h6 id="普通字符串"><a href="#普通字符串" class="headerlink" title="普通字符串"></a>普通字符串</h6><p>responseText</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取响应数据</span></span><br><span class="line"><span class="keyword">var</span> result = ajax.responseText;</span><br></pre></td></tr></table></figure><h6 id="json"><a href="#json" class="headerlink" title="json"></a>json</h6><p>将数据按照json的格式拼接好的字符串，方便使用eval方法将接受的字符串直接转换成js的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json格式</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:value,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需求分类</p><ol><li>在当前页面显示查询结果</li><li>创建ajax函数</li><li>调用ajax函数发送请求到UserServlet</li><li>调用业务层获取对应的数据</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;AjaxData&lt;/title&gt;</span><br><span class="line">        &lt;!--引入外部js文件，见ajax封装--&gt;</span><br><span class="line">        &lt;script type="text/javascript" src="js/ajaxutil.js"&gt;&lt;/script&gt; </span><br><span class="line">        &lt;!--声明js代码域--&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="function">function <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取用户请求信息</span></span><br><span class="line">                <span class="keyword">var</span> name = document.getElementById(<span class="string">"uname"</span>).value;</span><br><span class="line">                <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span> (window.XMLHttpRequest) &#123;<span class="comment">// firefox</span></span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.ActiveXObject) &#123;<span class="comment">// ie</span></span><br><span class="line">                    ajax = <span class="keyword">new</span> window.ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 覆写onreadystatementchange函数</span></span><br><span class="line">                ajax.onreadystatechange = function () &#123;</span><br><span class="line">                    <span class="comment">// 判断ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// 获取响应数据</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseText;</span><br><span class="line">                            eval(<span class="string">"u="</span> + result);</span><br><span class="line">                            <span class="comment">// 处理响应数据</span></span><br><span class="line">                            <span class="comment">// 获取table元素对象</span></span><br><span class="line">                            <span class="keyword">var</span> ta = document.getElementById(<span class="string">"table"</span>);</span><br><span class="line">                            ta.innerHTML = <span class="string">""</span>;</span><br><span class="line">                            <span class="comment">// 插入新的行</span></span><br><span class="line">                            <span class="keyword">var</span> tr = ta.insertRow(<span class="number">0</span>);</span><br><span class="line">                            <span class="keyword">var</span> uid = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                            uid.innerHTML = <span class="string">"编号"</span>;</span><br><span class="line">                            <span class="keyword">var</span> uname = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                            uname.innerHTML = <span class="string">"英雄"</span>;</span><br><span class="line">                            <span class="keyword">var</span> price = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                            price.innerHTML = <span class="string">"价格"</span>;</span><br><span class="line">                            <span class="keyword">var</span> location = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                            location.innerHTML = <span class="string">"位置"</span>;</span><br><span class="line">                            <span class="keyword">var</span> description = tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                            description.innerHTML = <span class="string">"描述"</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> tr = ta.insertRow(<span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">var</span> uid = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                            uid.innerHTML = u.uid;</span><br><span class="line">                            <span class="keyword">var</span> uname = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                            uname.innerHTML = u.uname;</span><br><span class="line">                            <span class="keyword">var</span> price = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                            price.innerHTML = u.price;</span><br><span class="line">                            <span class="keyword">var</span> location = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                            location.innerHTML = u.location;</span><br><span class="line">                            <span class="keyword">var</span> description = tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                            description.innerHTML = u.description;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                ajax.open(<span class="string">"get"</span>, <span class="string">"user?name="</span> + name);</span><br><span class="line">                ajax.send(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;AjaxData&lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        名称: &lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span> value=<span class="string">""</span> id=<span class="string">"uname"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"搜索"</span> onclick=<span class="string">"getData()"</span>&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;table border="1px" id="table"&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="XML数据"><a href="#XML数据" class="headerlink" title="XML数据"></a>XML数据</h6><p>responseXML，返回document对象<br>通过document对象将数据从xml中获取出来</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;XML数据格式学习&lt;/title&gt;</span><br><span class="line">        &lt;!--声明js代码域--&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function">function <span class="title">getXML</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.ActiveXObject) &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> window.ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 覆写onreadystatementchange函数</span></span><br><span class="line">                ajax.onreadystatechange = function () &#123;</span><br><span class="line">                    <span class="comment">// 判断ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// 获取响应数据</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseXML;</span><br><span class="line">                            alert(result.getElementsByTagName(<span class="string">"uname"</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                ajax.open(<span class="string">"get"</span>, <span class="string">"xml"</span>,<span class="keyword">true</span>);</span><br><span class="line">                ajax.send(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;XML数据格式学习&lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"测试"</span> onclick=<span class="string">"getXML()"</span>&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="Ajax封装"><a href="#Ajax封装" class="headerlink" title="Ajax封装"></a>Ajax封装</h5><p>封装ajax方便调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ajax封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>method 请求方式，get或post</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>data 请求数据，格式"name=value&amp;..."，没有值需要传入null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal200 接收一个带有一个形参的js函数对象，形参接收的实参是ajax引擎对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal404 接收一个js函数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal500 接收一个js函数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>async 异步或同步，boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">method, url, data, deal200, deal404, deal500, async=true</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">    <span class="keyword">var</span> ajax = getAjax();</span><br><span class="line">    <span class="comment">// 覆写onreadystatement函数</span></span><br><span class="line">    ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取元素对象</span></span><br><span class="line">        <span class="keyword">let</span> showdiv = <span class="built_in">document</span>.getElementById(<span class="string">"showDiv"</span>);</span><br><span class="line">        <span class="comment">// 会执行4次,判断ajax状态码，只在数据成功接收时执行以下代码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">4</span> === ajax.readyState) &#123;</span><br><span class="line">            <span class="comment">// 判断响应状态码</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">200</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal200)</span><br><span class="line">                    deal200(ajax);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">404</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal404)</span><br><span class="line">                    deal404();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">500</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal500)</span><br><span class="line">                    deal500();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"get"</span> === method) &#123;</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        ajax.open(<span class="string">"get"</span>, url + (data === <span class="literal">null</span> ? <span class="string">""</span> : <span class="string">"?"</span> + data), <span class="keyword">async</span>); <span class="comment">// false同步，true异步</span></span><br><span class="line">        ajax.send(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"post"</span> === method) &#123;</span><br><span class="line">        ajax.open(<span class="string">"post"</span>, url, <span class="keyword">async</span>);</span><br><span class="line">        ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        ajax.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*ajax的封装*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ajax;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  <span class="comment">// firefox</span></span><br><span class="line">        ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// ie</span></span><br><span class="line">        ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Ajax概述&quot;&gt;&lt;a href=&quot;#Ajax概述&quot; class=&quot;headerlink&quot; title=&quot;Ajax概述&quot;&gt;&lt;/a&gt;Ajax概述&lt;/h5&gt;&lt;p&gt;全称”Asynchronous JavaScript and XML” 异步JavaScript和XML，是一种创建交互网页应用的网页开发技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于web标准(Standards-based Presentation)    XHTML+CSS&lt;/li&gt;
&lt;li&gt;使用DOM(Document Object Model)进行动态显示与交互&lt;/li&gt;
&lt;li&gt;使用XML和XSLT进行数据交换及相关操作&lt;/li&gt;
&lt;li&gt;使用XMLHttpRequest进行异步数据查询、检索&lt;/li&gt;
&lt;li&gt;使用JavaScript将所有的东西绑定在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质是一个浏览器端的技术&lt;/p&gt;
&lt;p&gt;异步刷新技术，用来在当前页面响应不同的请求内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="ajax" scheme="https://lao-biao.github.io/tags/ajax/"/>
    
  </entry>
  
</feed>
