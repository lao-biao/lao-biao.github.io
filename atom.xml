<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周超的博客</title>
  
  <subtitle>记录编程学习的历程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lao-biao.github.io/"/>
  <updated>2020-09-07T08:05:49.835Z</updated>
  <id>https://lao-biao.github.io/</id>
  
  <author>
    <name>周超</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud笔记</title>
    <link href="https://lao-biao.github.io/articles/67c8035e.html"/>
    <id>https://lao-biao.github.io/articles/67c8035e.html</id>
    <published>2020-09-07T07:58:03.000Z</published>
    <updated>2020-09-07T08:05:49.835Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h5><p>Spring Cloud为开发人员提供了工具来快速构建分布式系统中的一些常见模式(例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话、集群状态)。分布式系统的协调产生了模板模式，使用Spring Cloud开发人员可以快速建立实现这些模式的服务和应用程序。它们在任何分布式环境中都能很好地工作，包括开发者自己的笔记本电脑、裸机数据中心以及云计算等托管平台。</p><p><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">Spring Cloud 官网</a><br><a href="https://github.com/alibaba/spring-cloud-alibaba" target="_blank" rel="noopener">Spring Cloud Alibaba</a></p><a id="more"></a><h6 id="Spring-Cloud的几大痛点"><a href="#Spring-Cloud的几大痛点" class="headerlink" title="Spring Cloud的几大痛点"></a>Spring Cloud的几大痛点</h6><ul><li>Spring Cloud 部分组件停止维护和更新，给开发带来不便</li><li>Spring Cloud 部分环境搭建复杂，没有完善的可视化界面，需要大量的二次开发和定制</li><li>Spring Cloud 配置复杂，难以上手，部分配置差别难以区分和合理应用</li></ul><h6 id="Spring-Cloud-Alibaba的优势"><a href="#Spring-Cloud-Alibaba的优势" class="headerlink" title="Spring Cloud Alibaba的优势"></a>Spring Cloud Alibaba的优势</h6><p>成套的产品搭配完善的可视化界面给开发运维带来极大的便利<br>搭建简单，学习曲线低。</p><h6 id="结合Spring-Cloud-Alibaba最终的技术搭配方案"><a href="#结合Spring-Cloud-Alibaba最终的技术搭配方案" class="headerlink" title="结合Spring Cloud Alibaba最终的技术搭配方案"></a>结合Spring Cloud Alibaba最终的技术搭配方案</h6><p>Spring Cloud Alibaba </p><ul><li>Nacos<ul><li>注册中心（服务发现/注册）</li><li>配置中心（动态配置管理）</li></ul></li><li>Sentinel：服务容错（限流、降级、熔断）</li><li>Seata：原Fescar，即分布式事务解决方案</li></ul><p>Spring Cloud</p><ul><li>Ribbon：负载均衡</li><li>Feign：声明式HTTP客户端（调用远程服务）</li><li>Gateway：API网关（webflux编程模式）</li><li>Sleuth：调用链监控</li></ul><h5 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h5><h6 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h6><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos服务的注册发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置nacos注册中心的地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>@EnableDiscoveryClient</code>注解开启服务注册与发现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EchoController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping</span>(value = <span class="string">"/echo/&#123;string&#125;"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(@PathVariable String string)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> string;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h6><p>远程调用别的服务</p><ol><li>引入open-feign</li><li>编写一个接口，告诉spring cloud这个接口需要调用远程服务<ol><li>声明接口的每一个方法都是调用哪个远程服务的哪个方法</li></ol></li><li>开启远程调用功能</li></ol><h5 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h5><h6 id="使用nacos作为配置中心统一管理配置"><a href="#使用nacos作为配置中心统一管理配置" class="headerlink" title="使用nacos作为配置中心统一管理配置"></a>使用nacos作为配置中心统一管理配置</h6><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务的配置中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个bootstarp.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure></li><li><p>需要给配置中心默认添加一个数据集（Data Id）gulimall-coupon.properties，默认规则：应用名.properties</p></li><li><p>给 应用名.properties 添加任何配置</p></li><li><p>动态获取配置：</p><ul><li><p>@RefreshScope                        动态获取并刷新</p></li><li><p>@Value(${“配置项的key”});      获取到配置</p><p>如果配置中心和当前应用的配置文件都配置了相同的项，优先使用配置中心的配置</p></li></ul></li></ol><h6 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h6><ul><li><p>命名空间：配置隔离<br>默认：public（保留空间），默认新增的的所有配置都在public空间</p><ol><li>开发dev、测试test、生产prod，利用命名空间进行环境隔离<font color='red'>注意：在bootstarp.properties上配置需要使用哪个命名空间的配置</font></li><li>每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</li></ol></li><li><p>配置集：所有配置的集合</p></li><li>配置集ID：类似文件名；DataId</li><li>配置分组：<br>默认所有的配置集都属于：DEFAULT_GROUP</li></ul><p>每个微服务创建自己的命名空间，使用分组区分环境，dev，test，prod</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="comment"># 配置nacos的服务地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 配置nacos命名空间</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">a177d187-5110-464e-9844-fe4b09cc0ebb</span></span><br><span class="line"><span class="comment"># 设置配置分组</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><p>同时加载多个配置集</p><ul><li>微服务任何配置信息，任何配置文件都可以放在配置中心中</li><li>只需要在<code>bootstrap.properties</code>说明加载配置中心中哪些配置文件即可</li><li>@Value，@ConfiguartionProperties<br>SpringBoot从配置文件中获取值的任何方式，都能使用<br>配置中心有的优先使用，没有的配置使用微服务的配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="comment"># 配置nacos的服务地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 配置nacos命名空间</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">a177d187-5110-464e-9844-fe4b09cc0ebb</span></span><br><span class="line"><span class="comment"># 设置配置分组</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"># database source数据源</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">datasource.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># mybatis</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].data-id</span>=<span class="string">mybatis.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].data-id</span>=<span class="string">other.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h5 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h5><p>网关作为流量的入口，常用功能包括路由转发、权限校验、限流控制等，而Spring Cloud Gateway作为Spring Cloud官方推出的第二代网关框架，替代Zuul网关。</p><p>官方文档：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#" target="_blank" rel="noopener">spring-cloud-gateway-2.2.3.RELEASE</a></p><ul><li>路由（Route）</li><li>断言（Predicate）</li><li>过滤器（Filter）</li></ul><h6 id="Gateway简单配置"><a href="#Gateway简单配置" class="headerlink" title="Gateway简单配置"></a>Gateway简单配置</h6><ol><li>开启服务注册发现（配置nacos的注册中心地址）</li><li>配置路由、断言和过滤器</li></ol><blockquote><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">88</span></span><br></pre></td></tr></table></figure><p>bootstrap.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">7c44370b-0de0-400c-8650-9ef824a54818</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">gulimall-gateway.yaml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>application.yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 测试gateway的导入</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,baidu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,qq</span></span><br></pre></td></tr></table></figure></blockquote><p>当请求url中包含url=baidu时跳转到baidu.com，url=qq时跳转到qq.com</p><h6 id="商城项目配置"><a href="#商城项目配置" class="headerlink" title="商城项目配置"></a>商城项目配置</h6><p>通过<code>GateWay</code>网关将以<code>api</code>请求分别转发到指定的服务。</p><blockquote><p>application.yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="comment"># load balance 负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">          <span class="comment"># 断言</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">          <span class="comment"># load balance 负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">          <span class="comment"># 断言</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure></blockquote><font color=red>注意：断言的 </font>`Path`<font color=red>作用域越大的放在后面，避免出现指定的断言的</font>`Path`<font color=red>不生效。</font>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Spring-Cloud&quot;&gt;&lt;a href=&quot;#Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud&quot;&gt;&lt;/a&gt;Spring Cloud&lt;/h5&gt;&lt;p&gt;Spring Cloud为开发人员提供了工具来快速构建分布式系统中的一些常见模式(例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话、集群状态)。分布式系统的协调产生了模板模式，使用Spring Cloud开发人员可以快速建立实现这些模式的服务和应用程序。它们在任何分布式环境中都能很好地工作，包括开发者自己的笔记本电脑、裸机数据中心以及云计算等托管平台。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-cloud&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud 官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/spring-cloud-alibaba&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud Alibaba&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring cloud" scheme="https://lao-biao.github.io/tags/spring-cloud/"/>
    
      <category term="spring cloud alibaba" scheme="https://lao-biao.github.io/tags/spring-cloud-alibaba/"/>
    
  </entry>
  
  <entry>
    <title>异步请求跨域问题与解决方案</title>
    <link href="https://lao-biao.github.io/articles/5f94010c.html"/>
    <id>https://lao-biao.github.io/articles/5f94010c.html</id>
    <published>2020-09-06T08:57:45.000Z</published>
    <updated>2020-09-07T07:43:00.360Z</updated>
    
    <content type="html"><![CDATA[<h5 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h5><p>跨域指的是浏览器不能执行其他网站的脚本，它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。</p><p>同源策略：是指<em>协议</em>，<em>域名</em>，<em>端口</em>都要相同，其中有一个不同都会产生跨域。</p><a id="more"></a><h6 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h6><div class="table-container"><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名下</td><td><font color=green>允许</font></td></tr><tr><td><a href="http://www.a.com/tab/a.js" target="_blank" rel="noopener">http://www.a.com/tab/a.js</a><br /><a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td>同一域名下不同文件夹</td><td><font color=green>允许</font></td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br /><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名，不同端口</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br /><a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td>同一域名，不同协议</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://x.x.x.x/b.js" target="_blank" rel="noopener">http://x.x.x.x/b.js</a></td><td>域名和域名对应 IP</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://script.com/b.js" target="_blank" rel="noopener">http://script.com/b.js</a></td><td>主域相同，子域不同</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td><td>同一域名，不同二级域名</td><td><font color=red>不允许</font></td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br /><a href="http://www.b.com/b.js" target="_blank" rel="noopener">http://www.b.com/b.js</a></td><td>不同域名</td><td><font color=red>不允许</font></td></tr></tbody></table></div><h6 id="跨域流程"><a href="#跨域流程" class="headerlink" title="跨域流程"></a>跨域流程</h6><p><strong>简单请求</strong>，不会触发 CORS <em>预检请求</em>。</p><ul><li>请求方法<ul><li><code>GET</code></li><li><code>HEAD</code></li><li><code>POST</code></li></ul></li><li>除了被用户代理自动设置的首部字段（例如 Connection ，User-Agent）和在 Fetch 规范中定义为 禁用首部名称 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合。该集合为：<ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code> （需要注意额外的限制）</li><li><code>DPR</code></li><li><code>Downlink</code></li><li><code>Save-Data</code></li><li><code>Viewport-Width</code></li><li><code>Width</code></li></ul></li><li><code>Content-Type</code>的值仅限于下列三者之一：<ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li><li>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；<code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</li><li>请求中没有使用 <code>ReadableStream</code> 对象。</li></ul><p><strong>非简单请求</strong>（PUT、DELETE）等，需要先发送<em>预检请求</em>。</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Ajax/%E8%B7%A8%E5%9F%9F%E6%B5%81%E7%A8%8B.png" alt="Ajax跨域请求流程"></p><blockquote><p>官方文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP跨域</a></p></blockquote><h5 id="解决跨域方案"><a href="#解决跨域方案" class="headerlink" title="解决跨域方案"></a>解决跨域方案</h5><ol><li>前端通过Nginx部署将请求配置成同一域。</li><li>后端对请求进行处理，在预检请求的响应中添加允许跨域的相关配置。（后端开发时使用）</li></ol><h6 id="前端解决方案"><a href="#前端解决方案" class="headerlink" title="前端解决方案"></a>前端解决方案</h6><p>静态请求通过 <code>nginx</code> 直接转发到 vue-admin 【人人开源后端项目】，动态请求通过 nginx 转发到 gateway 网关，由网关请求具体的服务器。</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Ajax/%E5%89%8D%E7%AB%AFnginx%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F.png" alt="前端nginx配置跨域请求"></p><font color=red>适用于前端项目部署时，后端不需要对跨域进行任何处理。</font><h6 id="后端解决方案"><a href="#后端解决方案" class="headerlink" title="后端解决方案"></a>后端解决方案</h6><p>配置当次请求允许跨域</p><ol><li><p>添加请求响应头</p><ul><li>Access-Control-Allow-Origin: 支持哪些来源的请求跨域</li><li>Access-Control-Allow-Methods: 支持哪些方法跨域</li><li>Access-Control-Allow-Credentials: 跨域请求默认不包含cookie，设置为true可以包含cookie</li><li>Access-Control-Expose-Headers: 跨域请求暴露的字段<ul><li>CORS 请求时，<code>XMLHttpRequest</code> 对象的 <code>getResponseHeader()</code> 方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。</li></ul></li><li>Access-Control-Max-Age: 表明该响应的有效时间为多少秒。在有效时间内，浏览器无须为同一请求再次发起预检请求。注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。</li></ul></li><li><p>针对多个请求，可以通过 <code>gateway</code> 网关添加过滤器对请求配置允许跨域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallCorsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置跨域</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>); <span class="comment">// 配置请求头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>); <span class="comment">// 配置请求方法</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>); <span class="comment">// 配置来源</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>); <span class="comment">// 允许cookie</span></span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration);<span class="comment">// 注册跨域配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h5&gt;&lt;p&gt;跨域指的是浏览器不能执行其他网站的脚本，它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。&lt;/p&gt;
&lt;p&gt;同源策略：是指&lt;em&gt;协议&lt;/em&gt;，&lt;em&gt;域名&lt;/em&gt;，&lt;em&gt;端口&lt;/em&gt;都要相同，其中有一个不同都会产生跨域。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
    
      <category term="cors" scheme="https://lao-biao.github.io/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>前端开发基础知识</title>
    <link href="https://lao-biao.github.io/articles/a87f55ab.html"/>
    <id>https://lao-biao.github.io/articles/a87f55ab.html</id>
    <published>2020-09-01T08:12:31.000Z</published>
    <updated>2020-09-07T08:19:46.670Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前后端技术栈类比"><a href="#前后端技术栈类比" class="headerlink" title="前后端技术栈类比"></a>前后端技术栈类比</h4><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">前端</th><th style="text-align:center">后端</th></tr></thead><tbody><tr><td style="text-align:center">语法规范</td><td style="text-align:center">JavaScript es6,7,8…</td><td style="text-align:center">Java jdk8,9,10,11…</td></tr><tr><td style="text-align:center">框架</td><td style="text-align:center">Angular，Vue，React</td><td style="text-align:center">Spring，SpringMVC…</td></tr><tr><td style="text-align:center">工具</td><td style="text-align:center">webstorm，vscode</td><td style="text-align:center">idea，eclipse</td></tr><tr><td style="text-align:center">项目构建</td><td style="text-align:center">webpack，gulp</td><td style="text-align:center">maven，gradle</td></tr><tr><td style="text-align:center">依赖管理</td><td style="text-align:center">npm</td><td style="text-align:center">maven</td></tr></tbody></table></div><a id="more"></a><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>ECMAScript 6.0，ECMAScript是一种由Ecma国际通过ESMA-262标准化的脚本程序设计语言，是JavaScript语言的下一代标准，在2015年6月正式发布，并且从ECMAScript 6开始，采用年号做版本，ECMAScript 2015即ECMAScript 6。ECMAScript是浏览器脚本语言的规范，JavaScript则是规范的具体实现。</p><h5 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h5><h6 id="变量-let-与-const"><a href="#变量-let-与-const" class="headerlink" title="变量 let 与 const"></a>变量 let 与 const</h6><ul><li><code>var</code> 声明的变量往往会越域</li><li><code>let</code> 声明的变量由严格局部作用域</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure><ul><li><code>var</code> 可以声明多次</li><li><code>let</code> 只能声明一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> m=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> n=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> n=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// Uncaught SyntaxError: Identifier 'n' has already been declared</span></span><br></pre></td></tr></table></figure><ul><li><code>var</code> 会变量提升</li><li><code>let</code> 不存在变量提升</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// Uncaught ReferenceError: Cannot access 'y' before initialization</span></span><br><span class="line"><span class="keyword">let</span> y=<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><code>const</code></p><ol><li>声明之后不允许改变</li><li>一旦声明必须初始化，否则会报错</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="number">1</span>;</span><br><span class="line">a=<span class="number">3</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"><span class="keyword">const</span> b; <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h6 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h6><ol><li><p>数组解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原始方式</span></span><br><span class="line"><span class="comment">let a=arr[0];</span></span><br><span class="line"><span class="comment">let b=arr[1];</span></span><br><span class="line"><span class="comment">let c=arr[2];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c]=arr;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);</span><br></pre></td></tr></table></figure></li><li><p>对象解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    name:<span class="string">'jack'</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    laguanges:[<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const name=person.name;</span></span><br><span class="line"><span class="comment">// const age=person.age;</span></span><br><span class="line"><span class="comment">// const laguanges=person.laguanges;</span></span><br><span class="line"><span class="comment">// const&#123;name,age,laguanges&#125;=person;</span></span><br></pre></td></tr></table></figure></li><li><p>取别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>&#123;<span class="attr">name</span>:abc,age,laguanges&#125;=person;</span><br><span class="line"><span class="built_in">console</span>.log(abc,age,laguanges);</span><br></pre></td></tr></table></figure></li><li><p>字符串扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">"hello vue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">"hello"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">"vue"</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"e"</span>));       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"hello"</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>字符串模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ss=<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;Hello World!&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ss);</span><br></pre></td></tr></table></figure></li><li><p>字符串插入变量和表达式<br>变量名写在<code>${}</code>中，<code>${}</code>中可以放入JavaScript表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="keyword">let</span> age=<span class="number">21</span>;</span><br><span class="line"><span class="keyword">let</span> info=<span class="string">`我是<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;age+<span class="number">10</span>&#125;</span>了`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure></li><li><p>字符串插入方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这是一个函数'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> info=<span class="string">`<span class="subst">$&#123;fun()&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure></li></ol><h6 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h6><ol><li><p>默认参数<br>在es6以前，我们无法给一个函数参数设置默认值，只能采用变通写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断b是否为空，为空就给默认值1</span></span><br><span class="line">    b = b || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>es6直接给参数写上默认值，没传就会自动使用默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEs6</span>(<span class="params">a, b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(addEs6(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></li><li><p>不定参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 2</span></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);<span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数<br>原始方式声明一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用es6的箭头函数声明方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print=<span class="function"><span class="params">obj</span>=&gt;</span><span class="built_in">console</span>.log(obj);</span><br><span class="line">print(<span class="string">"hello"</span>);<span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>箭头函数+解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    language:[<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数+解构</span></span><br><span class="line"><span class="keyword">var</span> hello=<span class="function">(<span class="params">&#123;name&#125;</span>)=&gt;</span><span class="built_in">console</span>.log(<span class="string">'hello,'</span>+name);</span><br><span class="line">hello(person);<span class="comment">// hellp,jack</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h6><p><code>Object.keys()</code>返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</p><p><code>Object.values()</code>返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用。</p><p><code>Object.entries()</code>返回一个给定对象自身可枚举属性的键值对数组，其排列与使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>, <span class="string">'js'</span>, <span class="string">'css'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)); <span class="comment">// ["name","age","language"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(person)); <span class="comment">// ["jack",21,Array(3)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(person)); <span class="comment">// [Array(2),Array(2),Array(2)]</span></span><br></pre></td></tr></table></figure><ol><li><p><code>assign</code><br><code>Object.assign()</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line"><span class="built_in">console</span>.log(target); <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>声明对象简写，当对象属性的键与值相同时，可以省略值，只写键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment">// const person = &#123; age: age, name: name &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = &#123; age, name &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person2);<span class="comment">// age: 23 name: "zhangsan"</span></span><br></pre></td></tr></table></figure></li><li><p>对象的函数属性简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    <span class="comment">//  函数属性</span></span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 箭头函数this不能使用，对象.属性</span></span><br><span class="line">    <span class="comment">// eat2: food =&gt; console.log(this.name + "在吃" + food)</span></span><br><span class="line">    eat2: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person3.name + <span class="string">"在吃"</span> + food),</span><br><span class="line">    eat3(food) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person3.eat(<span class="string">"香蕉"</span>);<span class="comment">// jack在吃香蕉</span></span><br><span class="line"></span><br><span class="line">person3.eat2(<span class="string">"苹果"</span>); <span class="comment">// jack在吃苹果</span></span><br><span class="line"></span><br><span class="line">person3.eat3(<span class="string">"橘子"</span>); <span class="comment">// jack在吃橘子</span></span><br></pre></td></tr></table></figure></li><li><p>对象扩展运算符<br>用于取出参数对象所有可遍历属性然后拷贝到当前对象</p><p>（1）拷贝对象（深拷贝）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = &#123; <span class="attr">neam</span>: <span class="string">"Amy"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> someone = &#123; ...p1 &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(someone); <span class="comment">// &#123;neam: "Amy", age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>（2）合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age2 = &#123; <span class="attr">age</span>: <span class="number">15</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> name2 = &#123; <span class="attr">name</span>: <span class="string">"Amy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> p2 = &#123; ...age2, ...name2 &#125;; <span class="comment">// 如果两个对象的字段名重复，后面对象的字段值会覆盖前面对象的字段值</span></span><br><span class="line"><span class="built_in">console</span>.log(p2); <span class="comment">// &#123;age: 15, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure><h6 id="map和reduce方法"><a href="#map和reduce方法" class="headerlink" title="map和reduce方法"></a>map和reduce方法</h6><ul><li><p><code>map()</code> 接受一个函数，将原数组中的所有元素用这个函数处理后放入新建数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr = arr.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    return item * 2;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p><code>reduce()</code>为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callbackfn: <span class="built_in">Function</span>, initialValue?: any)</span><br></pre></td></tr></table></figure><ol><li>previousValue 上一次调用回调返回的值，或者是提供的初始值</li><li>currentValue 数组中当前被处理的元素</li><li>index 当前元素在数组中的索引</li><li>array 调用reduce的数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'上一次处理后：'</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前正在处理：'</span> + b);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h6 id="promise封装异步操作"><a href="#promise封装异步操作" class="headerlink" title="promise封装异步操作"></a>promise封装异步操作</h6><ol><li>查出当前用信息</li><li>按照当前用户的id查出他的课程</li><li>按照当前课程id查出分数</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"zhangsan"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user_course_1.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Chinsese"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// course_score_10.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"score"</span>: <span class="number">90</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过ajax实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"json/user.json"</span>,</span><br><span class="line">    success(data) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询用户：'</span>, data);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">`json/user_course_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">            success(data) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'查询到课程'</span>, data);</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: <span class="string">`json/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">                    success(data) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'查询到分数:'</span>, data);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error(error) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            error(error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error(error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span> + error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise封装异步操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"json/user.json"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'查询用户信息：'</span>, data);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">pro.then(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">`json/user_course_<span class="subst">$&#123;obj.id&#125;</span>.json`</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'查询课程信息：'</span>, data);</span><br><span class="line">                resolve(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">`json/course_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'查询课程分数信息：'</span>, data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: url,</span><br><span class="line">            data: data,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>("json/user.json")</span><br><span class="line">    .then(data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户查询成功:'</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(`json/user_course_$&#123;data.id&#125;.json<span class="string">`, data);</span></span><br><span class="line"><span class="string">&#125;).then(data =&gt; &#123;</span></span><br><span class="line"><span class="string">    console.log('课程查询成功:', data);</span></span><br><span class="line"><span class="string">    return get(`</span>json/course_score_$&#123;data.id&#125;.json<span class="string">`, data);</span></span><br><span class="line"><span class="string">&#125;).then(data =&gt; &#123;</span></span><br><span class="line"><span class="string">    // 课程成绩查询成功</span></span><br><span class="line"><span class="string">    console.log('课程成绩', data);</span></span><br><span class="line"><span class="string">&#125;).catch(error =&gt; &#123;</span></span><br><span class="line"><span class="string">    console.log('出现异常', error);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><h6 id="module模块化"><a href="#module模块化" class="headerlink" title="module模块化"></a>module模块化</h6><p><code>export</code>导出，<code>export</code> 不仅可以导出对象，一切js变量都可以导出，比如：基本类型变量，函数，数组，对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">export const util = &#123;</span></span><br><span class="line"><span class="comment">    sum(a, b) &#123;</span></span><br><span class="line"><span class="comment">        return a + b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="comment">export &#123;util&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    sum(a, b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"jack"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>import</code>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">"./hello.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">"./user.js"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(util.sum(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name:"</span> + name + <span class="string">"  age:"</span> + age);<span class="comment">// name:jack age:18</span></span><br></pre></td></tr></table></figure><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>Node.js是基于Chrome V8引擎的JavaScript运行环境</p><p><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">node.js相关api</a></p><p>NPM是随同NodeJS一起安装的包管理工具，JavaScript-NPM，Java-Maven。</p><h4 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h4><h5 id="MVVM思想"><a href="#MVVM思想" class="headerlink" title="MVVM思想"></a>MVVM思想</h5><ul><li>M：Model，模型，包括数据和一些基本操作</li><li>V：View，视图，页面渲染结果</li><li>VM：View-Model，模型与视图间的双向操作（无需开发人员干涉）</li></ul><p>在MVVM之前，开发人员从后端获取需要的数据模型，然后通过DOM操作Model渲染到View中，而后当用户操作视图，还需要通过DOM获取View中的数据，然后同步到Model中。</p><p>而MVVM中的VM要做的事情就是把DOM操作完全封装起来，开发人员不用再关心Model和View之间是如何互相影响的。</p><ul><li>只要Model发生了改变，View上自然就会表现出来</li><li>当用户修改了View，Model中的数据也会跟着改变</li></ul><p>把开发人员从繁琐的DOM操作中解放出来，把关注点放在如何操作Model上。</p><h5 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h5><ol><li>声明式渲染</li><li>双向绑定，模型变化，视图变化</li><li>事件处理</li></ol><p>具体流程：</p><p>1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的 2、指令来简化对DOM的一些操作 3、声明方法来做更复杂的操作。</p><h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><h6 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h6><ol><li><p>花括号<br>格式：<code>{ {表达式} }</code><br>说明：</p><ul><li>该表达式支持js语法，可以调用内置函数（<font color=red>必须有返回值</font>）</li><li>表达式必须有返回结果，没有结果的表达式不允许使用</li><li>可以直接获取Vue实例定义的数据或函数</li></ul></li><li><p>插值闪烁</p><p>使用双大括号方式在网速较慢时会出现问题，在数据未加载完成时，页面会显示出原始的双大括号，加载完毕后才显示正确数据。</p></li><li><p>v-text和v-html<br>v-text只显示文本内容，不会渲染html标签，而v-html会渲染html标签。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;&#123;&#123;hello()&#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;span v-html&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,&#x2F;&#x2F; 绑定元素</span><br><span class="line">        data: &#123;&#x2F;&#x2F; 封装数据</span><br><span class="line">            msg: &quot;&lt;h1&gt;Hello Vue&lt;&#x2F;h1&gt;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#x2F;&#x2F; 封装方法</span><br><span class="line">            hello() &#123;</span><br><span class="line">                return &quot;world&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h6><p><code>v-bind</code>可以用于给HTML标签绑定属性，<font color=red>单向绑定</font>，<code>v-bind</code> 可以省略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 给HTML标签绑定属性 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- v-bind可以省略 --&gt;</span><br><span class="line">    &lt;!-- 单向绑定 --&gt;</span><br><span class="line">    &lt;a v-bind:href&#x3D;&quot;link&quot;&gt;gogogo&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;!-- class，style --&gt;</span><br><span class="line">    &lt;span v-bind:class&#x3D;&quot;&#123;active:isActive,&#39;text-danger&#39;:hasError&#125;&quot;</span><br><span class="line">          v-bind:style&#x3D;&quot;&#123;color:color,fontSize:size&#125;&quot;&gt;Hello&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            link: &quot;http:&#x2F;&#x2F;www.baidu.com&quot;,</span><br><span class="line">            isActive: true,</span><br><span class="line">            hasError: true,</span><br><span class="line">            color: &#39;blue&#39;,</span><br><span class="line">            size: &#39;20px&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h6><p>绑定数据，<code>v-model</code> 是<font color=red>双向绑定</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 表单项，自定义组件 --&gt;</span><br><span class="line">&lt;!-- v-model是双向绑定 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    精通的语言：&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;java&quot;&gt;java &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;python&quot;&gt;python&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;language&quot; value&#x3D;&quot;javascript&quot;&gt;javascript&lt;br&gt;</span><br><span class="line">    &lt;!-- 将数组中的内容以逗号的形式连接 --&gt;</span><br><span class="line">    选中&#123;&#123;language.join(&#39;,&#39;)&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            language: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h6><p><code>v-on</code>可用于为事件指定一个回调函数（Vue实例中定义的函数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 事件中直接写js片段 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;num&quot;&gt;</span><br><span class="line">    &lt;!-- 事件指定一个回调函数，必须是Vue实例中定义的函数 --&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;num++&quot;&gt;点赞&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;cancel&quot;&gt;取消&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;h1&gt;有&#123;&#123;num&#125;&#125;个人点赞&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 事件修饰符 --&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;border: 1px solid red;padding: 20px;&quot; v-on:click.once&#x3D;&#39;hello&#39;&gt;</span><br><span class="line">        大div &lt;br&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;border: 1px solid red;padding: 20px;&quot; @click.stop&#x3D;&#39;hello&#39;&gt;</span><br><span class="line">            小div&lt;br&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;ww.baidu.com&quot; @click.prevent.stop&#x3D;&#39;hello&#39;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 按键修饰符 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&#39;num&#39; v-on:keyup.up&#x3D;&#39;num+&#x3D;2&#39; @keyup.down&#x3D;&#39;num-&#x3D;2&#39; @click.ctrl&#x3D;&#39;num&#x3D;10&#39;&gt;&lt;br&gt;</span><br><span class="line">    提示:</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            cancel() &#123;</span><br><span class="line">                this.num--;</span><br><span class="line">            &#125;,</span><br><span class="line">            hello() &#123;</span><br><span class="line">                alert(&#39;点击了&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h6><p><i style=color:red>遍历的时候加上<code>:key</code>来区分不同数据，提高vue的渲染效率</i></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&#39;(user,index) in users&#39; :key&#x3D;&#39;index&#39; v-if&#x3D;&quot;&#39;female&#39;&#x3D;&#x3D;&#x3D;user.gender&quot;&gt;</span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.age&#125;&#125;--&#123;&#123;user.gender&#125;&#125;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            对象信息:</span><br><span class="line">            &lt;span v-for&#x3D;&quot;(v,k,i) in user&quot;&gt;</span><br><span class="line">                &#123;&#123;k&#125;&#125;--&#123;&#123;v&#125;&#125;--&#123;&#123;i&#125;&#125;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;!-- 1、显示user信息 --&gt;</span><br><span class="line">            &lt;!-- 2、获取数组下标 --&gt;</span><br><span class="line">            &lt;!-- 3、遍历对象 --&gt;</span><br><span class="line">            &lt;!-- 4、遍历的时候加上:key来区分不同数据，提高vue的渲染效率 --&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            users: [</span><br><span class="line">                &#123; name: &#39;张三&#39;, age: 18, gender: &#39;male&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;李四&#39;, age: 19, gender: &#39;male&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;王五&#39;, age: 20, gender: &#39;female&#39; &#125;,</span><br><span class="line">                &#123; name: &#39;赵六&#39;, age: 21, gender: &#39;female&#39; &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h6><ul><li><code>v-if</code>条件判断，当得到结果为<code>true</code>时，所在的元素才被渲染</li><li><code>v-show</code>当得到的结果为<code>true</code>时，所在的元素才会被显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;show&#x3D;!show&quot;&gt;click me&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;!-- 使用v-if显示 --&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;show&quot;&gt;if显示&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!-- 通过display:none;隐藏 --&gt;</span><br><span class="line">    &lt;!-- 使用v-show显示 --&gt;</span><br><span class="line">    &lt;h1 v-show&#x3D;&quot;show&quot;&gt;show显示&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            show: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="v-else和v-else-if"><a href="#v-else和v-else-if" class="headerlink" title="v-else和v-else-if"></a>v-else和v-else-if</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;random&#x3D;Math.random()&quot;&gt;click me&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;random&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;random&gt;&#x3D;0.75&quot;&gt;random &gt; &#x3D;0.75&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else-if&#x3D;&quot;random&gt;&#x3D;0.5&quot;&gt;random &gt; &#x3D;0.5&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else-if&#x3D;&quot;random&gt;&#x3D;0.25&quot;&gt;random &gt; &#x3D;0.25&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else&gt;random &lt; 0.25 &lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            random: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h5 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h5><p>某些结果是基于之前数据实时计算出来的，可以利用计算属性来完成 ，<code>watch</code>可以监控一个值的变化，从而作出相应的反应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;西游记，单价：&#123;&#123;xyjPrice&#125;&#125;，数量：&lt;input type&#x3D;&quot;number&quot; v-model&#x3D;&quot;xyjNum&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;水浒传，单价：&#123;&#123;shzPrice&#125;&#125;，数量：&lt;input type&#x3D;&quot;number&quot; v-model&#x3D;&quot;shzNum&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;总价：&#123;&#123;total&#125;&#125;&amp;nbsp;&amp;nbsp;&#123;&#123;msg&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            xyjPrice: 66.98,</span><br><span class="line">            shzPrice: 88.00,</span><br><span class="line">            xyjNum: 1,</span><br><span class="line">            shzNum: 1,</span><br><span class="line">            msg: &#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            total() &#123;</span><br><span class="line">                return this.xyjPrice * this.xyjNum + this.shzPrice * this.shzNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 侦听数据的变化</span><br><span class="line">        watch: &#123;</span><br><span class="line">            xyjNum: function (newVal, oldVal) &#123;</span><br><span class="line">                if (newVal &gt;&#x3D; 3) &#123;</span><br><span class="line">                    this.msg &#x3D; &#39;库存超出限制&#39;;</span><br><span class="line">                    this.xyjNum &#x3D; 3;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.msg &#x3D; &#39;&#39;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h6><p>过滤器通常用来处理文本格式化的操作<br>过滤器可以用在两个地方：</p><ul><li>双括号插值</li><li>v-bind表达式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(user,index) in userList&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">            &#123;&#123;user.id&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.gender&#x3D;&#x3D;&#x3D;1?&#39;男&#39;:&#39;女&#39;&#125;&#125;</span><br><span class="line">            --&#123;&#123;user.gender | genderFilter&#125;&#125;--&#123;&#123;user.gender | gFilter&#125;&#125;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(&quot;gFilter&quot;, function (val) &#123;</span><br><span class="line">        if (val &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">            return &quot;男&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;女&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            userList: [</span><br><span class="line">                &#123; id: 1, name: &#39;jack&#39;, gender: 1 &#125;,</span><br><span class="line">                &#123; id: 2, name: &#39;lucy&#39;, gender: 0 &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; filters定义局部过滤器，只能再vue实例中使用</span><br><span class="line">        filters: &#123;</span><br><span class="line">            genderFilter(val) &#123;</span><br><span class="line">                if (val &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                    return &quot;男&quot;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return &quot;女&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h5 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h5><p>Vue中可以通过注册局部或全局组件<code>component</code>，在HTML中直接使用该组件。如果是第三方组件，通过<code>import</code>导入后也可使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;counter&gt;&lt;&#x2F;counter&gt;</span><br><span class="line">    &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 全局声明注册一个组件</span><br><span class="line">    Vue.component(&quot;counter&quot;, &#123;</span><br><span class="line">        template: &#96;&lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;&#96;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 局部声明</span><br><span class="line">    const buttonCounter &#x3D; &#123;</span><br><span class="line">        template: &#96;&lt;button @click&#x3D;&quot;count++&quot;&gt;我被点击了&#123;&#123;count&#125;&#125;次&lt;&#x2F;button&gt;&#96;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#39;button-counter&#39;: buttonCounter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>第三方组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> component-x <span class="keyword">from</span> <span class="string">'component-x'</span> <span class="comment">// 导入第三方组件</span></span><br><span class="line">Vue.component(<span class="string">'component-x'</span>,component-x);<span class="comment">// 注册</span></span><br></pre></td></tr></table></figure><h5 id="生命周期与钩子函数"><a href="#生命周期与钩子函数" class="headerlink" title="生命周期与钩子函数"></a>生命周期与钩子函数</h5><p>vue生命周期与钩子函数</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/%E5%89%8D%E7%AB%AF/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.png" alt="vue生命周期与钩子函数"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;num&quot;&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;num++&quot;&gt;赞&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;，有&#123;&#123;num&#125;&#125;个人点赞&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &quot;张三&quot;,</span><br><span class="line">            num: 10</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show() &#123;</span><br><span class="line">                return this.name;</span><br><span class="line">            &#125;,</span><br><span class="line">            add() &#123;</span><br><span class="line">                return this.num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.log(&#39;----------------before create-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型未加载--&#39; + this.name, this.num);</span><br><span class="line">            &#x2F;&#x2F; vue.js:634 [Vue warn]: Error in beforeCreate hook: &quot;TypeError: this.show is not a function&quot;</span><br><span class="line">            &#x2F;&#x2F; vue.js:1897 TypeError: this.show is not a function</span><br><span class="line">            console.log(&#39;方法未加载--&#39; + this.show());</span><br><span class="line">            console.log(&#39;html模板未加载--&#39; + document.getElementById(&#39;num&#39;));</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            console.log(&#39;----------------created-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已加载--&#39; + this.name, this.num);</span><br><span class="line">            console.log(&#39;方法已加载--&#39; + this.show());</span><br><span class="line">            console.log(&#39;html模板已加载--&#39; + document.getElementById(&#39;num&#39;));</span><br><span class="line">            console.log(&#39;html模板未渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">            console.log(&#39;----------------before mount-----------------&#39;);</span><br><span class="line">            console.log(&#39;html模板未渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.log(&#39;----------------mounted-----------------&#39;);</span><br><span class="line">            console.log(&#39;html模板已渲染--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line">            console.log(&#39;----------------before update-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已更新--&#39; + this.num);</span><br><span class="line">            console.log(&#39;html模板未更新--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.log(&#39;----------------updated-----------------&#39;);</span><br><span class="line">            console.log(&#39;数据模型已更新--&#39; + this.num);</span><br><span class="line">            console.log(&#39;html模板已更新--&#39; + document.getElementById(&#39;num&#39;).innerText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>Babel是一个JavaScript编译器，使用es的最新语法编程，通过Babel自动转化为浏览器兼容的代码。</p><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><p>自动化项目构建工具，gulp也是同类产品。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前后端技术栈类比&quot;&gt;&lt;a href=&quot;#前后端技术栈类比&quot; class=&quot;headerlink&quot; title=&quot;前后端技术栈类比&quot;&gt;&lt;/a&gt;前后端技术栈类比&lt;/h4&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;前端&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;后端&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;语法规范&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;JavaScript es6,7,8…&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java jdk8,9,10,11…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;框架&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Angular，Vue，React&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Spring，SpringMVC…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;工具&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;webstorm，vscode&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;idea，eclipse&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;项目构建&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;webpack，gulp&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;maven，gradle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;依赖管理&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;npm&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;maven&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="前端" scheme="https://lao-biao.github.io/categories/notes/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://lao-biao.github.io/tags/vue/"/>
    
      <category term="es6" scheme="https://lao-biao.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>docker部署vue项目</title>
    <link href="https://lao-biao.github.io/articles/2d5c549e.html"/>
    <id>https://lao-biao.github.io/articles/2d5c549e.html</id>
    <published>2020-08-22T02:27:51.000Z</published>
    <updated>2020-08-22T03:47:15.922Z</updated>
    
    <content type="html"><![CDATA[<p>在虚拟机上部署了博客后端项目（Spring Boot）后，再来部署博客后台管理中心项目（vue）。采用 nginx 镜像为基础镜像来生成项目镜像，再通过 docker 的容器进行部署。</p><a id="more"></a><h6 id="项目配置与编译"><a href="#项目配置与编译" class="headerlink" title="项目配置与编译"></a>项目配置与编译</h6><p>在本机上通过 vue-cli 来编译项目，生成项目的资源文件。另一种方式是将项目拷贝到虚拟机上（删除不必要文件和依赖文件，传的速度会快一点，<code>node_modules</code> 这个文件夹中是依赖相关的，子文件比较多，影响传递速度），然后通过 node 和 Dockerfile 来编译生成项目资源文件。</p><p>在项目中添加编译相关的配置 <code>vue.config.js</code>（项目根目录下）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 公共路径(必须有的)，在生产环境下使用相对路径，在开发时，测试时使用绝对路径</span></span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'./'</span> : <span class="string">'/'</span>,</span><br><span class="line">    <span class="comment">// 输出文件目录</span></span><br><span class="line">    outputDir: <span class="string">"dist"</span>,</span><br><span class="line">    <span class="comment">// 静态资源存放的文件夹(相对于ouputDir)</span></span><br><span class="line">    assetsDir: <span class="string">"static"</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">true</span>,<span class="comment">// 资源映射</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>, <span class="comment">// 启动端口</span></span><br><span class="line">        open: <span class="literal">false</span>, <span class="comment">// 启动后是否自动打开网页</span></span><br><span class="line">        <span class="comment">// 代理</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/user'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://192.168.134.128:9000'</span>,</span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/user'</span>: <span class="string">''</span> <span class="comment">// 通过pathRewrite重写地址，将前缀/api转为/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'/admin'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://192.168.134.128:9000'</span>,</span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/admin'</span>: <span class="string">''</span> <span class="comment">// 通过pathRewrite重写地址，将前缀/api转为/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    lintOnSave: <span class="literal">false</span>, <span class="comment">// 取消 eslint 验证</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过命令 <code>npm run build</code> 即可生成项目资源文件 ，存放在<code>dist</code>目录下。</p><h6 id="构建项目镜像"><a href="#构建项目镜像" class="headerlink" title="构建项目镜像"></a>构建项目镜像</h6><p>将 <code>dist</code>中的文件通过xftp工具拷贝到虚拟机上，创建<code>nginx.conf</code>文件，用于配置代理，创建dockerfile文件，用于构建镜像。</p><p><code>nginx.conf</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span> <span class="string">nginx;</span></span><br><span class="line"><span class="attr">worker_processes</span> <span class="string">auto;</span></span><br><span class="line"><span class="comment"># 错误日志输出目录</span></span><br><span class="line"><span class="attr">error_log</span>  <span class="string">/var/log/nginx/error.log  warn;</span></span><br><span class="line"><span class="attr">pid</span>     <span class="string">/var/run/nginx.pid;</span></span><br><span class="line"><span class="attr">events</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">worker_connections</span>  <span class="string">1024;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # 监听端口</span></span><br><span class="line">        <span class="attr">listen</span>  <span class="string">80;</span></span><br><span class="line"><span class="comment">        # 名称可自定义</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">192.168.134.128;</span></span><br><span class="line"><span class="comment">        # access日志</span></span><br><span class="line">        <span class="attr">access_log</span>  <span class="string">/var/log/nginx/host.access.log;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">            <span class="attr">root</span>   <span class="string">/usr/share/nginx/html;</span></span><br><span class="line">            <span class="attr">index</span>  <span class="string">index.html index.htm;</span></span><br><span class="line">            <span class="attr">try_files</span> <span class="string">$uri $uri/ @router; </span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">        # vue的路由配置</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">@router &#123;</span></span><br><span class="line">            <span class="attr">rewrite</span> <span class="string">^.*$ /index.html last;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">        # 端口转发，对应axios的配置</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/user&#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span> <span class="string">http://192.168.134.128:9000;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/admin&#123;</span></span><br><span class="line">            <span class="attr">proxy_pass</span> <span class="string">http://192.168.134.128:9000;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="comment"># 定义作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="comment"># 将dist文件中的内容复制到 /usr/share/nginx/html/ 这个目录下面</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dist/  /usr/share/nginx/html/</span></span><br><span class="line"><span class="comment"># 复制配置文件 </span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx.conf /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure><p>docker 编译生成镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-manage]<span class="comment"># docker build -t blog-manage:1.0.0 .</span></span><br><span class="line">Sending build context to Docker daemon  6.773MB</span><br><span class="line">Step 1/4 : FROM nginx</span><br><span class="line"> ---&gt; 4bb46517cac3</span><br><span class="line">Step 2/4 : MAINTAINER zhouchao</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 09c5138b1196</span><br><span class="line">Step 3/4 : COPY dist/  /usr/share/nginx/html/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9851b6f52bb4</span><br><span class="line">Step 4/4 : COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 6bc149edde51</span><br><span class="line">Successfully built 6bc149edde51</span><br><span class="line">Successfully tagged blog-manage:1.0.0</span><br><span class="line"></span><br><span class="line">[root@localhost blog-manage]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">blog-manage         latest              6bc149edde51        3 seconds ago       139MB</span><br></pre></td></tr></table></figure><h6 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h6><p>在构建镜像成功后，以挂载的方式启动容器，方便修改配置文件，挂载后修改配置和更新项目资源不需要进入容器内部。先创建好挂载的目录和文件，再创建容器并启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-manage]# cd /mydata</span><br><span class="line">[root@localhost blog-manage]# mkdir wwwroot</span><br><span class="line">[root@localhost blog-manage]# mkdir logs</span><br><span class="line">[root@localhost blog-manage]# mkdir conf</span><br><span class="line">[root@localhost blog-manage]# cd conf</span><br><span class="line">[root@localhost blog-manage]# touch nginx.conf</span><br></pre></td></tr></table></figure><p>注意 nginx.conf 为文件，如果不创建，在创建容器时，会把它当作一个目录。</p><ul><li>wwwroot 存储项目资源文件</li><li>logs 存储日志文件</li><li>conf 存储 nginx 配置文件</li></ul><p>创建并启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name blog-manage --restart always -p 9001:80 \</span><br><span class="line">-v /mydata/blog-manage/wwwroot:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/blog-manage/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /mydata/blog-manage/logs:/var/log/nginx \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>在后端项目容器启动状态下，即可访问后端管理中心项目。</p><blockquote><p>访问地址：<a href="http://192.168.134.128:9001/" target="_blank" rel="noopener">http://192.168.134.128:9001/</a></p></blockquote><h6 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h6><p><i style=color:red;>Resource interpreted as Stylesheet but transferred with MIME type text/plain</i></p><p>没有配置项目编译的相关配置，项目部署后访问 css 文件加载不出来，控制台报警告<code>Resource interpreted as Stylesheet but transferred with MIME type text/plain</code>，意思 css 文件是没有指定类型，默认加载为<code>text/plain</code>格式，通过查看 <code>index.html</code>，没有指定 css 文件的加载类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">prefetch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">preload</span> <span class="attr">as</span>=<span class="string">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">css/xxxx.css</span> <span class="attr">rel</span>=<span class="string">stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决方案：</p><ol><li><p>将 <code>index.html</code>的头部声明 <code>&lt;!DOCTYPE html&gt;</code>去掉，这种方法确实有效，不过仍有部分css文件无法加载，而且这种方法需要每次都修改，比较麻烦。</p></li><li><p>在编译配置文件中添加静态资源存放的文件夹的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态资源存放的文件夹(相对于ouputDir)</span></span><br><span class="line">assetsDir: <span class="string">"static"</span></span><br></pre></td></tr></table></figure></li></ol><p><em><font color=red>502 Bad Gateway</font></em> </p><p>错误的网关，问题在<code>nginx.conf</code>配置出错。</p><p><em>路由重定向失败 <font color=red>Redirected when going from “/login” to “/index” via a navigation guard</font></em></p><p>这个问题是由于博客后端部署错误的问题，登录成功后创建的cookie路径和域错误，导致在虚拟机 IP 下没有cookie产生，后端返回登录成功，但首页检查cookie中的token不存在，又重定向到登陆页面。</p><h6 id="经验小结"><a href="#经验小结" class="headerlink" title="经验小结"></a>经验小结</h6><p>在部署后项目访问时出现各种问题，比如<font color=red>连接拒绝</font>，<font color=red>404</font>，<font color=red>502</font>等，首先可以通过查看挂载目录下的错误日志，如果是配置错误问题，一般都会输出在这里。其次，可以通过浏览器 <code>F12</code>的<code>network</code>进行检查，看看是否是后端的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在虚拟机上部署了博客后端项目（Spring Boot）后，再来部署博客后台管理中心项目（vue）。采用 nginx 镜像为基础镜像来生成项目镜像，再通过 docker 的容器进行部署。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
      <category term="vue" scheme="https://lao-biao.github.io/tags/vue/"/>
    
      <category term="nginx" scheme="https://lao-biao.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>docker部署SpringBoot项目</title>
    <link href="https://lao-biao.github.io/articles/a192e4a5.html"/>
    <id>https://lao-biao.github.io/articles/a192e4a5.html</id>
    <published>2020-08-21T13:22:40.000Z</published>
    <updated>2020-08-24T14:44:56.157Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>docker 部署基于 Spring Boot 的个人博客后端项目，首先要将项目中使用的 <code>localhost</code> 全部更换为虚拟机所对应的IP地址，其次，需要项目生成的 jar （通过 jar 包部署，也有通过 war 包部署的方式，需要使用 tomcat ），通过 jar 包部署使用Spring Boot项目内嵌的 tomcat 或 jetty 。</p><a id="more"></a><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><ol><li>项目配置修改</li><li>项目打包生成<code>jar</code>包</li></ol><h6 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h6><p>博客项目中使用到 mysql，redis，solr ，在 <code>application-prod.yml</code> 中修改 url ，与虚拟机的IP地址相对应，<code>application.yml</code> 修改默认环境为 <em>prod</em>。项目中使用到 <code>localhost</code> 的位置，也需要进行修改。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-blog</span></span><br><span class="line">  <span class="comment"># 数据源mysql</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.134.128:3306/blog?useSSL=false</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="comment"># 配置redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.134</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">''</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 修改文件上传限制</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="number">5242880</span> <span class="comment"># 5MB</span></span><br><span class="line">  <span class="comment"># 配置solr</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">solr:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">http://192.168.134.128:8983/solr/blog_core</span></span><br><span class="line">  <span class="comment"># 控制jpa的sql语句输出</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义配置文件上传路径，以及文件大小上限</span></span><br><span class="line"><span class="attr">blog:</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">upload-path:</span> <span class="string">/usr/app/blog</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="number">5242880</span>   <span class="comment"># 5MB</span></span><br></pre></td></tr></table></figure><h6 id="jar-包生成"><a href="#jar-包生成" class="headerlink" title="jar 包生成"></a>jar 包生成</h6><ol><li><p>在打包前在 <code>pom.xml</code> 中配置好打包方式为 <em>jar</em> ，并且将 test 测试文件排除（否则在 maven 打包时出错）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包生成的jar名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>my-blog-1.0.0<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.study.BlogApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加打包时跳过测试文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 maven 工具，执行 <code>clean</code> ，清除项目生成的target文件夹，然后执行 <code>package</code>，对项目进行打包，打包完成后在target文件夹中生成项目的 <code>jar</code>。<br>命令行方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Docker/maven%E5%B7%A5%E5%85%B7%E6%A0%8F.png" alt="maven工具栏"></p></li></ol><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><ol><li>通过xftp软件将 <code>jar</code>包 拷贝到虚拟机上。</li><li>生成镜像</li><li>运行容器</li></ol><h6 id="Docker生成博客项目镜像"><a href="#Docker生成博客项目镜像" class="headerlink" title="Docker生成博客项目镜像"></a>Docker生成博客项目镜像</h6><p>在 <code>jar</code> 包（项目生成的jar包为my-blog-1.0.0.jar）的当前目录下创建 <code>Dockerfile</code> 文件，<code>Dockerfile</code>内容如下。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于java8镜像构建，也可以通过配置好的jdk8镜像来构建</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/app</span></span><br><span class="line"><span class="comment"># 创建图片上传的路径</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/app/blog</span></span><br><span class="line"><span class="comment"># 复制程序到内部</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> my-blog-1.0.0.jar /usr/app</span></span><br><span class="line"><span class="comment"># 切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/app</span></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9000</span></span><br><span class="line"><span class="comment"># 镜像运行时执行</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"my-blog-1.0.0.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>生成镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-java]# docker build -t blog .</span><br><span class="line">Sending build context to Docker daemon  89.81MB</span><br><span class="line">Step 1/8 : FROM java:8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> d23bdf5b1b1b</span></span><br><span class="line">Step 2/8 : MAINTAINER zhouchao</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 564652b78de2</span></span><br><span class="line">Step 3/8 : RUN mkdir /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1f5db921f762</span></span><br><span class="line">Step 4/8 : RUN mkdir /usr/app/blog</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> cb4f18ee64f3</span></span><br><span class="line">Step 5/8 : ADD my-blog-1.0.0.jar /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 940b61cdd5a4</span></span><br><span class="line">Step 6/8 : WORKDIR /usr/app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 16c9ffc0c43c</span></span><br><span class="line">Step 7/8 : EXPOSE 9000</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a21afb67831c</span></span><br><span class="line">Step 8/8 : ENTRYPOINT ["java","-jar","my-blog-1.0.0.jar"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 05453583ff92</span></span><br><span class="line">Successfully built 05453583ff92</span><br><span class="line">Successfully tagged blog:latest</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">blog                latest              05453583ff92        2 seconds ago       733MB</span><br></pre></td></tr></table></figure><h6 id="Docker生成博客项目容器"><a href="#Docker生成博客项目容器" class="headerlink" title="Docker生成博客项目容器"></a>Docker生成博客项目容器</h6><ol><li><p>首先需要先创建图片挂载目录，使图片资源持久化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-java]# mkdir /mydata/blog</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p><ul><li><code>-d</code>后台运行</li><li><code>--name blog</code>容器名称为 blog</li><li><code>--restart=always</code>容器自启动</li><li><code>-p 9000:9000</code>端口映射</li><li><code>-v /mydata/blog:/usr/app/blog/src</code>图片资源目录挂载</li></ul></li></ol><ul><li><p><code>-v /mydata/blog/logs:/usr/app/logs</code>日志目录挂载</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name blog --restart=always -p 9000:9000 -v /mydata/blog/src:/usr/app/blog -v /mydata/blog/logs:/usr/app/logs blog</span></span><br><span class="line">b577dfcb31879743ee4bc05b54cc07ec864ba3ee4872924e91d7ca9609f37589</span><br></pre></td></tr></table></figure></li></ul><h6 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h6><p>项目中使用了swagger生成api文档，通过访问swagger-ui.html来查看。</p><blockquote><p>地址 <a href="http://192.168.134.128:9000/swagger-ui.html" target="_blank" rel="noopener">http://192.168.134.128:9000/swagger-ui.html</a></p></blockquote><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Docker/%E5%90%8E%E7%AB%AF%E9%83%A8%E7%BD%B2%E8%AE%BF%E9%97%AE%E6%95%88%E6%9E%9C.png" alt="后端部署访问效果"></p><h5 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h5><p>在项目部署时遇到了一些问题</p><h6 id="容器反复重启"><a href="#容器反复重启" class="headerlink" title="容器反复重启"></a>容器反复重启</h6><p><font color="red">容器反复重启</font>，可能是后端代码问题，先移除当前容器，创建新容器，以控制台形式执行，输出 log ，用于查询错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -i --name blog  -p 9000:9000 -v /mydata/blog:/usr/app/blog blog</span></span><br></pre></td></tr></table></figure><h6 id="用户登录成功响应中没有生成-cookie"><a href="#用户登录成功响应中没有生成-cookie" class="headerlink" title="用户登录成功响应中没有生成 cookie"></a>用户登录成功响应中没有生成 cookie</h6><p>用户登录成功，但没有生成 cookie ，通过<code>F12</code>查看请求响应结果，响应结果中<code>setCookie</code>的<code>domain</code>为<code>localhost</code>，而不是虚拟机的IP，由于在 <code>CookieUtils.java</code> 中设置Cookie默认存储的域（domain）为  localhost（在打包前，没有修改过来），将其修改为虚拟机的IP即可，重新打包。</p><h6 id="mysql-无法访问"><a href="#mysql-无法访问" class="headerlink" title="mysql 无法访问"></a>mysql 无法访问</h6><p><em><font color=red>Could not get JDBC Connection; nested exception is com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure</font></em></p><p>mysql 无法访问，问题在 docker 的防火墙开启了，需要关闭防火墙。</p><ul><li>查看防火墙状态    <code>firewall-cmd --state</code><br>如果命令报错，赋予特权 <code>docker run -tdi --privileged centos init</code></li><li>停止防火墙  <code>systemctl stop firewalld.service</code></li><li>禁止firewall开机启动  <code>systemctl disable firewalld.service</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;docker 部署基于 Spring Boot 的个人博客后端项目，首先要将项目中使用的 &lt;code&gt;localhost&lt;/code&gt; 全部更换为虚拟机所对应的IP地址，其次，需要项目生成的 jar （通过 jar 包部署，也有通过 war 包部署的方式，需要使用 tomcat ），通过 jar 包部署使用Spring Boot项目内嵌的 tomcat 或 jetty 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
      <category term="spring boot" scheme="https://lao-biao.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>docker配置jdk8镜像</title>
    <link href="https://lao-biao.github.io/articles/cc1858db.html"/>
    <id>https://lao-biao.github.io/articles/cc1858db.html</id>
    <published>2020-08-19T05:17:38.000Z</published>
    <updated>2020-09-07T08:21:41.442Z</updated>
    
    <content type="html"><![CDATA[<h5 id="docker配置jdk8镜像"><a href="#docker配置jdk8镜像" class="headerlink" title="docker配置jdk8镜像"></a>docker配置jdk8镜像</h5><p>配置方式分为通过 docker 仓库直接拉取 openjdk ，另一种方式是下载 jdk 8 linux版，通过 Dockerfile 进行配置。</p><a id="more"></a><h6 id="docker仓库拉取jdk8镜像"><a href="#docker仓库拉取jdk8镜像" class="headerlink" title="docker仓库拉取jdk8镜像"></a>docker仓库拉取jdk8镜像</h6><ol><li><p>拉取镜像<br> <code>docker pull openjdk:8-jre</code> </p></li><li><p>运行jdk容器<br><code>docker run -d -it --name jdk8 openjdk:8-jre</code> /bin/bash `</p></li><li><p>进入容器内部检查<br><code>docker exec -it myopenjdk /bin/bash</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@03005ebbf9c9]#</span><span class="bash"> java -version</span></span><br><span class="line">java version "1.8.0_261"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br></pre></td></tr></table></figure></li></ol><h6 id="Dockerfile配置jdk8镜像"><a href="#Dockerfile配置jdk8镜像" class="headerlink" title="Dockerfile配置jdk8镜像"></a>Dockerfile配置jdk8镜像</h6><ol><li><p>下载jdk1.8，并上传到/usr/local/src目录，然后解压</p><p>开启允许传输的权限<code>sudo chmod 777 /usr/local/src</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">jdk-8u261-linux-x64.tar.gz</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tar zxf jdk-8u261-linux-x64.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">jdk1.8.0_261  jdk-8u261-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>创建Dockerfile<br>先在<code>/usr/local</code>目录下创建jdk目录，并将/usr/local/src下的 <code>jdk-8u261-linux-x64.tar.gz</code> 复制到<code>/usr/local/jdk</code>目录下，然后创建 <code>Dockerfile</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp ../src/jdk-8u261-linux-x64.tar.gz ./</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ls</span></span><br><span class="line">jdk-8u261-linux-x64.tar.gz</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vi Dockerfile</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> centos:centos7</span><br><span class="line"><span class="keyword">MAINTAINER</span> zhouchao</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u261-linux-x64.tar.gz /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk/jdk1.<span class="number">8.0</span>_261</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME /usr/local/jdk/jdk1.<span class="number">8.0</span>_261/jre</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>使用Dockerfile构建jdk1.8镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t jdk1.8 .</span></span><br><span class="line">Sending build context to Docker daemon  143.1MB</span><br><span class="line">Step 1/8 : FROM centos:centos7</span><br><span class="line">centos7: Pulling from library/centos</span><br><span class="line">75f829a71a1c: Pull complete</span><br><span class="line">Digest: sha256:19a79828ca2e505eaee0ff38c2f3fd9901f4826737295157cc5212b7a372cd2b</span><br><span class="line">Status: Downloaded newer image for centos:centos7</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 7e6257c9f8d8</span></span><br><span class="line">Step 2/8 : MAINTAINER zhouchao</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 77ae01469661</span></span><br><span class="line">Removing intermediate container 77ae01469661</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a093e73e3ad0</span></span><br><span class="line">Step 3/8 : RUN mkdir /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 3669281a5047</span></span><br><span class="line">Removing intermediate container 3669281a5047</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 48038a16cc0c</span></span><br><span class="line">Step 4/8 : WORKDIR /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 49cf2fb9fa22</span></span><br><span class="line">Removing intermediate container 49cf2fb9fa22</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 7c9f9dd423b1</span></span><br><span class="line">Step 5/8 : ADD jdk-8u261-linux-x64.tar.gz /usr/local/jdk</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a2112ce1417a</span></span><br><span class="line">Step 6/8 : ENV JAVA_HOME /usr/local/jdk/jdk1.8.0_261</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> c220252fe774</span></span><br><span class="line">Removing intermediate container c220252fe774</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 433e95e570d7</span></span><br><span class="line">Step 7/8 : ENV JRE_HOME /usr/local/jdk/jdk1.8.0_261/jre</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 654ac9d1adca</span></span><br><span class="line">Removing intermediate container 654ac9d1adca</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1cf2ae6ca829</span></span><br><span class="line">Step 8/8 : ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> a8e71af19743</span></span><br><span class="line">Removing intermediate container a8e71af19743</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f4e4ef5b6c42</span></span><br><span class="line">Successfully built f4e4ef5b6c42</span><br><span class="line">Successfully tagged jdk1.8:latest</span><br></pre></td></tr></table></figure></li><li><p>在镜像仓库中查看是否构建成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">jdk1.8              latest              f4e4ef5b6c42        About a minute ago   556MB</span><br></pre></td></tr></table></figure></li><li><p>启动jdk容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -di --name=jdk1.8 jdk1.8</span></span><br><span class="line">03005ebbf9c9ec65dd23977c527ce97578108c588c5cee0c1c7c0fd819d93053</span><br></pre></td></tr></table></figure></li><li><p>进入jdk容器，查看是否安装正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it jdk1.8 /bin/bash</span></span><br><span class="line">[root@03005ebbf9c9 jdk]# pwd</span><br><span class="line">/usr/local/jdk</span><br><span class="line">[root@03005ebbf9c9 jdk]# ls</span><br><span class="line">jdk1.8.0_261</span><br><span class="line">[root@03005ebbf9c9 jdk]# java -version</span><br><span class="line">java version "1.8.0_261"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12, mixed mode)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;docker配置jdk8镜像&quot;&gt;&lt;a href=&quot;#docker配置jdk8镜像&quot; class=&quot;headerlink&quot; title=&quot;docker配置jdk8镜像&quot;&gt;&lt;/a&gt;docker配置jdk8镜像&lt;/h5&gt;&lt;p&gt;配置方式分为通过 docker 仓库直接拉取 openjdk ，另一种方式是下载 jdk 8 linux版，通过 Dockerfile 进行配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker配置redis镜像</title>
    <link href="https://lao-biao.github.io/articles/cf9a8130.html"/>
    <id>https://lao-biao.github.io/articles/cf9a8130.html</id>
    <published>2020-08-19T04:58:20.000Z</published>
    <updated>2020-08-19T05:46:35.978Z</updated>
    
    <content type="html"><![CDATA[<h6 id="安装redis镜像"><a href="#安装redis镜像" class="headerlink" title="安装redis镜像"></a>安装redis镜像</h6><p>从 docker 的仓库中拉取 redis 镜像，不写版本号时，默认使用 <code>latest</code> 最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull redis[:版本号]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="创建redis容器与启动"><a href="#创建redis容器与启动" class="headerlink" title="创建redis容器与启动"></a>创建redis容器与启动</h6><ol><li><p>创建配置文件挂载文件夹和 redis 挂载的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /mydata/redis/conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch /mydata/redis/conf/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>创建 redis 容器，并将配置文件挂载到虚拟机本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span></span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>检查 redis 的相关配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# pwd</span><br><span class="line">/mydata/redis/conf</span><br><span class="line">[root@localhost conf]# ls</span><br><span class="line">redis.conf</span><br></pre></td></tr></table></figure></li></ol><h6 id="配置redis自启动"><a href="#配置redis自启动" class="headerlink" title="配置redis自启动"></a>配置redis自启动</h6><p>配置 redis 容器在docker启动时同时启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vagrant]# docker update redis --restart=always</span><br></pre></td></tr></table></figure><h6 id="进入redis的客户端"><a href="#进入redis的客户端" class="headerlink" title="进入redis的客户端"></a>进入redis的客户端</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# docker exec -it redis redis-cli</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h6 id="将redis数据持久化到硬盘"><a href="#将redis数据持久化到硬盘" class="headerlink" title="将redis数据持久化到硬盘"></a>将redis数据持久化到硬盘</h6><p>修改 <code>/mydata/redis/conf/redis.conf</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vi redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加以下内容</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><h6 id=""><a href="#" class="headerlink" title=" "></a> </h6>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;安装redis镜像&quot;&gt;&lt;a href=&quot;#安装redis镜像&quot; class=&quot;headerlink&quot; title=&quot;安装redis镜像&quot;&gt;&lt;/a&gt;安装redis镜像&lt;/h6&gt;&lt;p&gt;从 docker 的仓库中拉取 redis 镜像，不写版本号时，默认使用 &lt;code&gt;latest&lt;/code&gt; 最新版&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; docker pull redis[:版本号]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="redis" scheme="https://lao-biao.github.io/tags/redis/"/>
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker配置mysql镜像</title>
    <link href="https://lao-biao.github.io/articles/1a3905c2.html"/>
    <id>https://lao-biao.github.io/articles/1a3905c2.html</id>
    <published>2020-08-19T04:58:06.000Z</published>
    <updated>2020-08-19T13:38:20.118Z</updated>
    
    <content type="html"><![CDATA[<h6 id="安装mysql的镜像"><a href="#安装mysql的镜像" class="headerlink" title="安装mysql的镜像"></a>安装mysql的镜像</h6><p>docker仓库中mysql版本 <a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">https://hub.docker.com/_/mysql</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull mysql:5.7</span></span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               5.7                 d05c76dbbfcf        2 minutes ago         448MB</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="配置mysql容器"><a href="#配置mysql容器" class="headerlink" title="配置mysql容器"></a>配置mysql容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 3306:3306 --name mysql \</span></span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><p>参数介绍</p><ul><li><code>-p 3306:3306</code> 将容器的3306端口映射到主机的3306端口</li><li><code>-v /mydata/mysql/log:/var/log/mysql</code> 将日志文件挂载到主机</li><li><code>-v /mydata/mysql/data:/var/lib/mysql</code> 将数据文件挂载到主机</li><li><code>-v /mydata/mysql/conf:/etc/mysql</code> 将配置文件夹挂载到主机</li><li><code>-e MYSQL_ROOT_PASSWORD=root</code> 初始化root用户的密码</li><li><code>-d mysql:5.7</code> 后台运行mysql 5.7</li></ul><h6 id="进入mysql的容器内部"><a href="#进入mysql的容器内部" class="headerlink" title="进入mysql的容器内部"></a>进入mysql的容器内部</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vagrant]# docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><p>查看mysql容器结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vagrant]# docker exec -it mysql /bin/bash</span><br><span class="line"></span><br><span class="line">root@8177ea9826e4:/# ls /</span><br><span class="line">bin   dev                         entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  docker-entrypoint-initdb.d  etc            lib   media  opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line">root@8177ea9826e4:/# whereis mysql</span><br><span class="line">mysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql</span><br></pre></td></tr></table></figure><h6 id="修改字符编码"><a href="#修改字符编码" class="headerlink" title="修改字符编码"></a>修改字符编码</h6><ol><li><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vi /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">default-time-zone</span>=<span class="string">'+08:00'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET collation_connection=utf8_unicode_ci'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8'</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></li><li><p>查看docker当前运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">8177ea9826e4        mysql:5.7           "docker-entrypoint.s…"   22 minutes ago      Up 22 minutes       0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql</span><br></pre></td></tr></table></figure></li><li><p>重新启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# docker restart mysql</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></li><li><p>对插入的内容进行确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# docker exec -it mysql /bin/bash</span><br><span class="line">root@8177ea9826e4:/# cd etc/mysql/</span><br><span class="line">root@8177ea9826e4:/etc/mysql# ls</span><br><span class="line">my.cnf</span><br><span class="line">root@8177ea9826e4:/etc/mysql# cat my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init_connect='SET collation_connection = utf8_unicode_ci'</span><br><span class="line">init_connect='SET NAMES utf8'</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></li></ol><h6 id="mysql修改默认时区"><a href="#mysql修改默认时区" class="headerlink" title="mysql修改默认时区"></a>mysql修改默认时区</h6><p>如果忘记配置默认时区，会使用 UTC 作为默认时区，与中国采用的时间相差8小时，中国使用 <code>UTC+8</code> 。</p><ol><li><p>修改mysql的配置映射文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure></li><li><p>在 [msqld] 后面添加内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default-time-zone</span>=<span class="string">'+08:00'</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;安装mysql的镜像&quot;&gt;&lt;a href=&quot;#安装mysql的镜像&quot; class=&quot;headerlink&quot; title=&quot;安装mysql的镜像&quot;&gt;&lt;/a&gt;安装mysql的镜像&lt;/h6&gt;&lt;p&gt;docker仓库中mysql版本 &lt;a href=&quot;https://hub.docker.com/_/mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hub.docker.com/_/mysql&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo docker pull mysql:5.7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;验证是否安装成功&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo docker images&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql               5.7                 d05c76dbbfcf        2 minutes ago         448MB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
      <category term="mysql" scheme="https://lao-biao.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>centos7配置docker</title>
    <link href="https://lao-biao.github.io/articles/55112ca0.html"/>
    <id>https://lao-biao.github.io/articles/55112ca0.html</id>
    <published>2020-08-19T04:28:28.000Z</published>
    <updated>2020-08-19T05:54:45.704Z</updated>
    
    <content type="html"><![CDATA[<h6 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h6><p>建议根据官方文档的步骤进行安装，不然容易出错。</p><blockquote><p>官方文档：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p></blockquote><a id="more"></a><h6 id="docker的启动"><a href="#docker的启动" class="headerlink" title="docker的启动"></a>docker的启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images  <span class="comment"># 查看启动的镜像</span></span></span><br></pre></td></tr></table></figure><h6 id="设置docker开机自启"><a href="#设置docker开机自启" class="headerlink" title="设置docker开机自启"></a>设置docker开机自启</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure><h6 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /etc/docker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span></span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://aruwgrgs.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将docker设置为后台启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure><h6 id="当无法直接删除镜像时，操作步骤："><a href="#当无法直接删除镜像时，操作步骤：" class="headerlink" title="当无法直接删除镜像时，操作步骤："></a>当无法直接删除镜像时，操作步骤：</h6><ol><li>查看进程 <code>docker ps -a</code>     </li><li>移除使用的镜像的容器 <code>docker rm [id号]</code></li><li>移除指定镜像 <code>docker rmi [镜像名]</code></li></ol><h6 id="将当前用户添加到docker用户组中"><a href="#将当前用户添加到docker用户组中" class="headerlink" title="将当前用户添加到docker用户组中"></a>将当前用户添加到docker用户组中</h6><p>在当前用户没有添加到 docker 用户组时，使用 docker 命令时需要使用 <code>sudo</code>命令，将当前用户添加到docker用户组中可以直接使用 docker 命令。</p><ol><li>添加docker用户组</li><li>将登录用户加入到docker用户组中</li><li>更新用户组</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd docker     <span class="comment"># 添加docker用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gpasswd -a <span class="variable">$USER</span> docker    <span class="comment"># 将登录用户加入到docker用户组中</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> newgrp docker     <span class="comment"># 更新用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps    <span class="comment"># 测试docker命令是否可以使用sudo正常使用</span></span></span><br></pre></td></tr></table></figure><h6 id=""><a href="#" class="headerlink" title=" "></a> </h6>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;docker的安装&quot;&gt;&lt;a href=&quot;#docker的安装&quot; class=&quot;headerlink&quot; title=&quot;docker的安装&quot;&gt;&lt;/a&gt;docker的安装&lt;/h6&gt;&lt;p&gt;建议根据官方文档的步骤进行安装，不然容易出错。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://docs.docker.com/engine/install/centos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/engine/install/centos/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
      <category term="centos7" scheme="https://lao-biao.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>Solr基本配置-Docker</title>
    <link href="https://lao-biao.github.io/articles/8e2b9641.html"/>
    <id>https://lao-biao.github.io/articles/8e2b9641.html</id>
    <published>2020-08-18T11:02:42.000Z</published>
    <updated>2020-08-21T08:23:44.568Z</updated>
    
    <content type="html"><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>docker下安装solr，以及使用中文分词器。</p><p>通过 xftp 工具将文件从宿主机拷贝到虚拟机上。</p><p>中文分词器相关资料</p><ul><li>中文分词器github地址 <a href="https://github.com/magese/ik-analyzer-solr/" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/</a></li><li>jar 包 <a href="https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar" target="_blank" rel="noopener">https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar</a></li></ul><a id="more"></a><h6 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker-compose --version</span></span><br></pre></td></tr></table></figure><h6 id="安装Solr镜像"><a href="#安装Solr镜像" class="headerlink" title="安装Solr镜像"></a>安装Solr镜像</h6><font color="red">配置 docker group，不需要在 docker 命令前添加 </font>`sudo` 从 docker 的仓库中拉取 solr 镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull solr[:版本]  <span class="comment"># 不填写版本号时，默认为最新版本</span></span></span><br><span class="line">Using default tag: latest</span><br></pre></td></tr></table></figure>检查镜像是否安装成功`$ docker images`显示已安装的的所有镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">solr                latest              8e621ac5ebe9        17 hours ago        514MB</span><br></pre></td></tr></table></figure>###### 启动Solr容器`docker run --name solr --restart=always -d -p 8983:8983 -t solr[:版本号]`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name solr --restart=always -d -p 8983:8983 -t solr</span></span><br><span class="line">7be597b3079b626a0732c8005535bc8b96504fcc18761699ef263c80c68be325</span><br></pre></td></tr></table></figure>###### 访问http://虚拟机IP地址:8983/solr/#/> http://192.168.56.10:8983/solr/#/![docker-solr的访问](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-solr%E7%9A%84%E8%AE%BF%E9%97%AE.png)###### 新建solr core1. 直接通过命令创建   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=solr solr bin/solr create_core -c  my_core</span></span><br></pre></td></tr></table></figure>   - `-it`  展示容器输入信息`STDIN`，命令行交互模式   - `--user` 用户，使用 root 用户会有报错   - my_core core 名称，自定义2. 进入容器内部，拷贝默认配置文件到 core 中，再通过客户端创建 core   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash<span class="comment"># 以管理员身份进入 solr 容器内部</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -r server/solr/configsets/_default/conf/. /var/solr/data/my_core/conf  <span class="comment"># 拷贝默认配置文件到 my_core 中</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exit</span> <span class="comment"># 退出 solr 容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr <span class="comment"># 重启 solr 容器</span></span></span><br></pre></td></tr></table></figure>   ![solr客户端创建core](https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%9B%E5%BB%BAcore.png)访问 my_core![docker-my_core属性](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-my_core%E5%B1%9E%E6%80%A7.png)###### 配置中文解析器1. 将中文解析器相关 jar 包拷贝到容器内   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp ik-analyzer-8.3.0.jar solr:/opt/solr/server/solr-webapp/webapp/WEB-INF/lib</span></span><br></pre></td></tr></table></figure>2. 将中文解析器`ik-analyzer-solr-8.3.0\src\main\resources`目录下的文件拷贝到容器内   新建文件夹 classes ，将文件先从宿主机拷贝到虚拟机的 classes 文件夹下，再从虚拟机上拷贝到 solr 容器中。   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">① IKAnalyzer.cfg.xml</span><br><span class="line">② ext.dic</span><br><span class="line">③ stopword.dic</span><br><span class="line">④ ik.conf</span><br><span class="line">⑤ dynamicdic.txt</span><br></pre></td></tr></table></figure>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp classes solr:/opt/solr/server/solr-webapp/webapp/WEB-INF/classes</span></span><br></pre></td></tr></table></figure>3. 配置中文解析器   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi /var/solr/data/my_core/conf/managed-schema</span></span><br></pre></td></tr></table></figure>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ik分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_cn"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>4. 进入 solr 容器内部检查文件   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /opt/solr/server/solr-webapp/webapp/WEB-INF/classes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">IKAnalyzer.cfg.xml  dynamicdic.txt  ext.dic  ik.conf  stopword.dic</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /opt/solr/server/solr-webapp/webapp/WEB-INF/lib</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">ik-analyzer-8.3.0.jar ...</span><br></pre></td></tr></table></figure>5. 退出 solr 容器，重启 solr   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr</span></span><br></pre></td></tr></table></figure>###### 中文分词器> 请求url [http://192.168.56.10:8983/solr/#/my_core/analysis?analysis.fieldvalue=%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C&analysis.fieldtype=text_cn&verbose_output=1](http://192.168.56.10:8983/solr/#/my_core/analysis?analysis.fieldvalue=你好世界&analysis.fieldtype=text_cn&verbose_output=1)![docker-solr中文分词器演示](https://gitee.com/lao-biao/Pictures/raw/master/Solr/docker-solr%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E6%BC%94%E7%A4%BA.png)###### solr挂载到虚拟机本地，实现配置持久化在重启虚拟机后，需要通过配置 solr 持久化数据。1. 将配置的文件夹存储在 `/mydata/solr/` 下   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /mydata/</span></span><br></pre></td></tr></table></figure>2.  将文件拷贝到 `mydata` 下   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp solr:/opt/solr/ /mydata/</span></span><br></pre></td></tr></table></figure>3. 删除旧的 solr 容器   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f solr</span></span><br></pre></td></tr></table></figure>4. 以挂载的形式启动 solr 容器   - `-d` 后台运行   - `-p` 端口映射   - `--name` 容器名   - `--restart=always` 自启动（docker启动时同时启动solr）   - `-v` 挂载   - -`t` 展示容器输入信息`STDIN`   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8983:8983 --name solr --restart=always -v /mydata/solr:/opt/solr -t solr</span></span><br></pre></td></tr></table></figure>5. 创建 core ，core名称 my_solr_core   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=solr solr bin/solr create_core -c  my_solr_core</span></span><br></pre></td></tr></table></figure>6. 进入 solr 容器内部，添加中文分词器   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it --user=root solr /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi /var/solr/data/my_solr_core/conf/managed-schema</span></span><br></pre></td></tr></table></figure>   修改的内容参考 *配置中文解析器的第三步配置中文解析器*7. 将 core 的配置文件拷贝到挂载的目录下   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker cp solr:/var/solr/data/my_solr_core /mydata/solr/server/solr/</span></span><br></pre></td></tr></table></figure>8. 重新启动 solr 容器   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart solr</span></span><br></pre></td></tr></table></figure>![solr挂载到本地使用中文分词器示例](https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E7%A4%BA%E4%BE%8B.png)###### 挂载注意项【可选项】solr 容器创建的 core 数据保存在 `/var/solr/data` 目录下，所以需要将此目录挂载到 `/mydata/solr/server/solr` 目录下。在容器创建完成前可以添加 `-v /mydata/solr/server/solr:/var/solr/data`进行挂载，在创建容器后可通过修改配置文件的方式挂载。<font color="red">这种挂载方式，可能会出现问题，在用vagrant+vmbox配置的docke上没有问题，但在vmware上会出问题。所以还是推荐使用 docker cp 手动复制。</font><p>具体步骤：</p><ol><li><p>查看 solr 容器的 id</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps <span class="comment"># 或使用 docker ps -a 查看所有容器</span></span></span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">c713163b6615        solr                "docker-entrypoint.s…"   21 hours ago        Up 18 seconds       0.0.0.0:8983-&gt;8983/tcp              solr</span><br></pre></td></tr></table></figure></li><li><p>停止 docker，修改容器配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建议使用管理员权限</span></span><br><span class="line">[root@localhost docker]# cd /var/lib/docker</span><br><span class="line">[root@localhost docker]# cd containers</span><br><span class="line">[root@localhost containers]# ls</span><br><span class="line">c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014# solr容器的id</span><br><span class="line">[root@localhost containers]# cd c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014/</span><br><span class="line">[root@localhost c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014]# ls</span><br><span class="line">c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014-json.log  hosts</span><br><span class="line">checkpoints                                                                mounts</span><br><span class="line">config.v2.json                                                             resolv.conf</span><br><span class="line">hostconfig.json                                                            resolv.conf.hash</span><br><span class="line">hostname</span><br><span class="line">[root@localhost c713163b66152a96bb7da98facd01f558550e4c3c70868cf8f65db9c7a89a014]# vi mount</span><br></pre></td></tr></table></figure><p>在 <code>BInds</code> 中添加挂载的目录内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"Binds"</span>: [<span class="string">"/mydata/solr:/opt/solr"</span>,<span class="string">"/mydata/solr/server/solr:/var/solr/data"</span>],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启 docker 服务，启动 solr 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker start solr</span></span><br></pre></td></tr></table></figure></li><li><p>进入 solr 容器内部，检查挂载文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost blog-java]# docker exec -it --user=root solr /bin/bash</span><br><span class="line">root@c713163b6615:/opt/solr-8.6.1# cd /var/solr</span><br><span class="line">root@c713163b6615:/var/solr# ls</span><br><span class="line">data  log4j2.xml  logs</span><br><span class="line">root@c713163b6615:/var/solr# cd data</span><br><span class="line">root@c713163b6615:/var/solr/data# ls</span><br><span class="line">blog_core  filestore  my_solr_core  solr.xml  userfiles  zoo.cfg</span><br></pre></td></tr></table></figure></li></ol><p>在完成挂载后，就不需要每次将 core 的数据手动拷贝到 /mydata/solr/server/solr 下。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h6&gt;&lt;p&gt;docker下安装solr，以及使用中文分词器。&lt;/p&gt;
&lt;p&gt;通过 xftp 工具将文件从宿主机拷贝到虚拟机上。&lt;/p&gt;
&lt;p&gt;中文分词器相关资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中文分词器github地址 &lt;a href=&quot;https://github.com/magese/ik-analyzer-solr/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/magese/ik-analyzer-solr/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jar 包 &lt;a href=&quot;https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="solr" scheme="https://lao-biao.github.io/tags/solr/"/>
    
      <category term="docker" scheme="https://lao-biao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中使用Solr作为搜索引擎</title>
    <link href="https://lao-biao.github.io/articles/4499c37a.html"/>
    <id>https://lao-biao.github.io/articles/4499c37a.html</id>
    <published>2020-08-18T05:29:17.000Z</published>
    <updated>2020-08-18T23:28:53.005Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在Spring Boot中，从数据库中通过关键字查询需要通过 like , equal 等，而且中文分词的操作比较复杂，不利于逻辑实现和代码书写。使用Solr作为Spring Boot项目的全文搜索引擎，效率更高，代码更简易。</p><p>以文章为模型，演示Solr的增删改查。</p><a id="more"></a><h5 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h5><p>文章：</p><ul><li>id 编号</li><li>title 标题</li><li>content 内容</li><li>labels 标签</li><li>createTime 创建时间</li></ul><p>通过关键词对文章的标题、内容、标签中进行搜索。</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>配置部分包括Solr部分和Spring Boot项目两个部分。</p><h6 id="Solr配置"><a href="#Solr配置" class="headerlink" title="Solr配置"></a>Solr配置</h6><p>修改<code>Solr\server\solr\example_core\conf\managed-schema</code>，在\<schema\>标签内添加文章相关配置</p><ul><li>field 为字段名</li><li><code>&lt;copyField source=&quot;字段名&quot; dest=&quot;search_item&quot;/&gt;</code>  作为搜索项</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文章 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_title"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_content"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_create_time"</span> <span class="attr">type</span>=<span class="string">"pdate"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"article_labels"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索item --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"search_item"</span> <span class="attr">type</span>=<span class="string">"text_cn"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_title"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_content"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"article_labels"</span> <span class="attr">dest</span>=<span class="string">"search_item"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="Spring-Boot项目配置"><a href="#Spring-Boot项目配置" class="headerlink" title="Spring Boot项目配置"></a>Spring Boot项目配置</h6><ol><li><p>创建以maven为依赖管理的spring boot项目</p></li><li><p>添加web，solr，gson 相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- gson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- solr --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-solr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>application.yml</code> 中配置项目端口号和solr的相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="comment"># 配置solr</span></span><br><span class="line">    <span class="attr">solr:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">http://localhost:8983/solr/example_core</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><p>项目文件的结构</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├─java</span><br><span class="line">│  └─com</span><br><span class="line">│      └─study</span><br><span class="line">│          └─springbootsolr</span><br><span class="line">│              │  SpringBootSolrApplication.java </span><br><span class="line">│              │</span><br><span class="line">│              ├─controller</span><br><span class="line">│              │      SolrController.java</span><br><span class="line">│              │</span><br><span class="line">│              ├─pojo</span><br><span class="line">│              │      PageList.java</span><br><span class="line">│              │      SolrSearchResult.java</span><br><span class="line">│              │</span><br><span class="line">│              └─service</span><br><span class="line">│                      SolrService.java</span><br><span class="line">│</span><br><span class="line">└─resources</span><br><span class="line">    │  application.yml</span><br><span class="line">    │</span><br><span class="line">    ├─<span class="keyword">static</span></span><br><span class="line">    └─templates</span><br></pre></td></tr></table></figure><h6 id="SolrSearchResult-java"><a href="#SolrSearchResult-java" class="headerlink" title="SolrSearchResult.java"></a>SolrSearchResult.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrSearchResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_content"</span>)</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_create_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_labels"</span>)</span><br><span class="line">    <span class="keyword">private</span> String labels;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"article_title"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    </span><br><span class="line">    getters/setters...</span><br><span class="line">    toString...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PageList-java"><a href="#PageList-java" class="headerlink" title="PageList.java"></a>PageList.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> currentPage;   <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalCount;    <span class="comment">// 总共有多少条</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pageSize;      <span class="comment">// 每页内容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalPage;     <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> first;  <span class="comment">// 是否是第一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> last;   <span class="comment">// 是否是最后一页</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; content;   <span class="comment">// 内容</span></span><br><span class="line">    </span><br><span class="line">    getters/setters...</span><br><span class="line">    toString...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="SolrController-java"><a href="#SolrController-java" class="headerlink" title="SolrController.java"></a>SolrController.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SolrService solrService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/solr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/solr/&#123;page&#125;/&#123;size&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSolrSearch</span><span class="params">(@PathVariable(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page,</span></span><br><span class="line"><span class="function">                                 @<span class="title">PathVariable</span><span class="params">(<span class="string">"size"</span>)</span> <span class="keyword">int</span> size,</span></span><br><span class="line"><span class="function">                                 @<span class="title">RequestParam</span><span class="params">(<span class="string">"keyword"</span>)</span> String keyword) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solrService.search(keyword, page, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="SolrService-java"><a href="#SolrService-java" class="headerlink" title="SolrService.java"></a>SolrService.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SolrClient solrClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SolrInputDocument doc = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line">        doc.addField(<span class="string">"id"</span>, <span class="string">"730469770008199168"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_title"</span>, <span class="string">"SpringBoot中使用Solr作为搜索引擎"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_content"</span>, <span class="string">"这是测试solr添加的文章内容。"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_create_time"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        doc.addField(<span class="string">"article_labels"</span>, <span class="string">"后端-测试-solr"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            solrClient.add(doc);</span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章添加失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SolrInputDocument doc = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line">        doc.addField(<span class="string">"id"</span>, <span class="string">"730469770008199168"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_title"</span>, <span class="string">"SpringBoot中使用Solr作为搜索引擎"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_content"</span>, <span class="string">"&lt;p&gt;文章更新，这是测试solr更新的文章内容。&lt;/p&gt;"</span>);</span><br><span class="line">        doc.addField(<span class="string">"article_create_time"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        doc.addField(<span class="string">"article_labels"</span>, <span class="string">"后端-测试-solr"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            solrClient.add(doc);</span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章更新失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章更新成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 单独删除一条记录</span></span><br><span class="line">            solrClient.deleteById(<span class="string">"730469770008199168"</span>);</span><br><span class="line">            <span class="comment">// 提交</span></span><br><span class="line">            solrClient.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文章删除失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文章删除成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">search</span><span class="params">(String keyword, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数检查</span></span><br><span class="line">        <span class="keyword">if</span> (page &lt; <span class="number">1</span>) page = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">5</span>) size = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页设置</span></span><br><span class="line">        SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line">        solrQuery.setRows(size);    <span class="comment">// 每页数量</span></span><br><span class="line">        solrQuery.setStart(size * (page - <span class="number">1</span>));   <span class="comment">// 设置开始位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置搜索条件</span></span><br><span class="line">        solrQuery.set(<span class="string">"df"</span>, <span class="string">"search_item"</span>); <span class="comment">//  设置搜索关键字：标题，内容，标签</span></span><br><span class="line">        solrQuery.set(<span class="string">"q"</span>, TextUtils.isEmpty(keyword) ? <span class="string">"*"</span> : keyword); <span class="comment">// 条件过滤</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时间的降序</span></span><br><span class="line">        solrQuery.setSort(<span class="string">"article_create_time"</span>, SolrQuery.ORDER.desc);</span><br><span class="line"></span><br><span class="line">        solrQuery.setHighlight(<span class="keyword">true</span>);   <span class="comment">// 开启高亮</span></span><br><span class="line">        solrQuery.addHighlightField(<span class="string">"article_title,article_content"</span>); <span class="comment">// 高亮字段</span></span><br><span class="line">        solrQuery.setHighlightSimplePre(<span class="string">"&lt;font color='red'&gt;"</span>);  <span class="comment">// 高亮前缀</span></span><br><span class="line">        solrQuery.setHighlightSimplePost(<span class="string">"&lt;/font&gt;"</span>);            <span class="comment">// 高亮后缀</span></span><br><span class="line">        solrQuery.setHighlightFragsize(<span class="number">400</span>);    <span class="comment">// 设置字符数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置返回字段</span></span><br><span class="line">        solrQuery.addField(<span class="string">"id,article_content,article_create_time,article_labels,article_title"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理搜索结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryResponse result = solrClient.query(solrQuery);</span><br><span class="line">            <span class="comment">// 获取高亮内容</span></span><br><span class="line">            Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = result.getHighlighting();</span><br><span class="line">            <span class="comment">// 把数据转换成bean类</span></span><br><span class="line">            List&lt;SolrSearchResult&gt; beans = result.getBeans(SolrSearchResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">for</span> (SolrSearchResult item : beans) &#123;</span><br><span class="line">                Map&lt;String, List&lt;String&gt;&gt; stringListMap = highlighting.get(item.getId());</span><br><span class="line">                <span class="keyword">if</span> (stringListMap == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                List&lt;String&gt; title = stringListMap.get(<span class="string">"article_title"</span>);</span><br><span class="line">                <span class="comment">// 替换文章标题为高亮</span></span><br><span class="line">                <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setTitle(title.get(<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;String&gt; content = stringListMap.get(<span class="string">"article_content"</span>);</span><br><span class="line">                <span class="comment">// 替换文章内容为高亮</span></span><br><span class="line">                <span class="keyword">if</span> (content != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setContent(content.get(<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 封装结果：列表，页面，每页数量</span></span><br><span class="line">            PageList&lt;SolrSearchResult&gt; pageList = <span class="keyword">new</span> PageList&lt;&gt;();</span><br><span class="line">            pageList.setContent(beans);</span><br><span class="line">            pageList.setCurrentPage(page);</span><br><span class="line">            pageList.setTotalCount(result.getResults().getNumFound());</span><br><span class="line">            pageList.setPageSize(size);</span><br><span class="line">            pageList.setTotalPage((<span class="keyword">int</span>) (pageList.getTotalCount() / size + <span class="number">0.5</span>));</span><br><span class="line">            pageList.setFirst(pageList.getCurrentPage() == <span class="number">1</span>);</span><br><span class="line">            pageList.setLast(pageList.getCurrentPage() == pageList.getTotalPage());</span><br><span class="line">            <span class="comment">// 返回搜索结果</span></span><br><span class="line">            Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(pageList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SolrServerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"搜索失败，请稍后重试！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>使用postman测试增删改查，以及solr客户端查询</p><h6 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h6><p>postman</p><ul><li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li><li>请求方式：post</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0.png" alt="solr添加文章"></p><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>solr网页客户端进行查询（查询所有，不过滤）</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C.png" alt="solr网页客户端搜索结果"></p><p>postman 模拟搜索</p><ul><li>请求url：<a href="http://localhost:8000/test/solr/1/5?keyword=solr" target="_blank" rel="noopener">http://localhost:8000/test/solr/1/5?keyword=solr</a></li><li>请求方式：get</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/postman%E6%90%9C%E7%B4%A2%E6%B7%BB%E5%8A%A0%E7%BB%93%E6%9E%9C.png" alt="postman搜索添加文章结果"></p><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><p>postman</p><ul><li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li><li>请求方式：put</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0.png" alt="solr文章g更新"></p><p>solr客户端查看更新结果</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E7%BB%93%E6%9E%9C.png" alt="solr客户端查看更新结果"></p><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p>postman</p><ul><li>请求url：<a href="http://localhost:8000/test/solr" target="_blank" rel="noopener">http://localhost:8000/test/solr</a></li><li>请求方式：delete</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E6%96%87%E7%AB%A0%E5%88%A0%E9%99%A4.png" alt="solr删除文章"></p><p>solr客户端查看删除结果</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%A0%E9%99%A4%E7%BB%93%E6%9E%9C.png" alt="solr客户端删除结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;在Spring Boot中，从数据库中通过关键字查询需要通过 like , equal 等，而且中文分词的操作比较复杂，不利于逻辑实现和代码书写。使用Solr作为Spring Boot项目的全文搜索引擎，效率更高，代码更简易。&lt;/p&gt;
&lt;p&gt;以文章为模型，演示Solr的增删改查。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="solr" scheme="https://lao-biao.github.io/tags/solr/"/>
    
      <category term="spring boot" scheme="https://lao-biao.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Solr基本配置-Windows版</title>
    <link href="https://lao-biao.github.io/articles/e0b21c40.html"/>
    <id>https://lao-biao.github.io/articles/e0b21c40.html</id>
    <published>2020-08-18T02:32:26.000Z</published>
    <updated>2020-08-18T23:27:54.235Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h4><p>Solr下载地址 <a href="https://lucene.apache.org/solr/downloads.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/downloads.html</a></p><p>[可选项]配置环境变量：将Solr添加到系统环境变量中，在系统环境变量的path下添加 <code>安装目录\Solr\bin</code></p><h5 id="Solr目录结构"><a href="#Solr目录结构" class="headerlink" title="Solr目录结构"></a>Solr目录结构</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr目录结构.png" alt="Solr目录结构"></p><a id="more"></a><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><p>在 Solr 的 bin 目录下打开cmd窗口，若配置了solr的环境变量，可在任意位置打开cmd窗口。</p><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><p><code>solr start</code> 默认启动的端口号为 8983</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> bin  <span class="comment"># 已配置环境变量可省略</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> solr start</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: JVM cannot use large page memory because it does not have enough privilege to lock pages in memory.</span><br><span class="line">Waiting up to 30 to see Solr running on port 8983</span><br><span class="line">Started Solr server on port 8983. Happy searching!</span><br></pre></td></tr></table></figure><h6 id="指定启动端口号"><a href="#指定启动端口号" class="headerlink" title="指定启动端口号"></a>指定启动端口号</h6><p><code>solr start-p 端口号</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr start -p 9000</span></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: JVM cannot use large page memory because it does not have enough privilege to lock pages in memory.</span><br><span class="line">Waiting up to 30 to see Solr running on port 9000</span><br><span class="line">Started Solr server on port 9000. Happy searching!</span><br></pre></td></tr></table></figure><h6 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h6><p><code>solr stop -p 启动的端口号</code>   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr stop -p 8983</span></span><br><span class="line">Stopping Solr process 1520 running on port 8983</span><br><span class="line"></span><br><span class="line">等待 5 秒，按一个键继续 ...</span><br></pre></td></tr></table></figure><h6 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h6><p><code>solr restart -p 启动的端口号</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr restart -p 8983</span></span><br><span class="line">Stopping Solr process 5736 running on port 8983</span><br><span class="line"></span><br><span class="line">等待 5 秒，按一个键继续 ...</span><br></pre></td></tr></table></figure><h6 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h6><p>访问地址：<a href="http://localhost:启动的端口号/solr/#">http://localhost:启动的端口号/solr/#</a></p><p>默认：<a href="http://localhost:8983/solr/#" target="_blank" rel="noopener">http://localhost:8983/solr/#</a></p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>solr的关系映射</p><ul><li>solr为库</li><li>core为表</li><li>filed为字段</li></ul><h6 id="创建核心"><a href="#创建核心" class="headerlink" title="创建核心"></a>创建核心</h6><p> <code>solr create -c example_core</code>，会自动添加默认配置文件config、data和core.properties</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> solr create -c example_core</span></span><br><span class="line">WARNING: Using _default configset with data driven schema functionality. NOT RECOMMENDED for production use.</span><br><span class="line">         To turn off: bin\solr config -c example_core -p 8983 -action set-user-property -property update.autoCreateFields -value false</span><br><span class="line"></span><br><span class="line">Created new core 'example_core'</span><br></pre></td></tr></table></figure><p>在<code>Solr\server\</code>目录下会新增文件夹<code>example_core</code>。</p><h6 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h6><p>访问地址：<a href="http://localhost:8983/solr/#/example_core/core-overview" target="_blank" rel="noopener">http://localhost:8983/solr/#/example_core/core-overview</a></p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr%E4%BE%A7%E6%A0%8F%E5%B7%A5%E5%85%B7.png" alt="solr侧栏工具"></p><h6 id="添加中文分词器"><a href="#添加中文分词器" class="headerlink" title="添加中文分词器"></a>添加中文分词器</h6><blockquote><p>中文分词器github地址 <a href="https://github.com/magese/ik-analyzer-solr/" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/</a></p></blockquote><ol><li><p>添加配置文件：<br>下载 <a href="https://github.com/magese/ik-analyzer-solr/releases/tag/v8.3.0" target="_blank" rel="noopener">https://github.com/magese/ik-analyzer-solr/releases/tag/v8.3.0</a></p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6.png" alt="中文分词器资源文件">将<code>ik-analyzer-solr-8.3.0\src\main\resources</code>路径下的5个配置文件拷贝到<code>Solr\server\solr-webapp\webapp\WEB-INF\classes</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">① IKAnalyzer.cfg.xml</span><br><span class="line">② ext.dic</span><br><span class="line">③ stopword.dic</span><br><span class="line">④ ik.conf</span><br><span class="line">⑤ dynamicdic.txt</span><br></pre></td></tr></table></figure></li><li><p>jar包支持：</p><p>下载 <a href="https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar" target="_blank" rel="noopener">https://search.maven.org/remotecontent?filepath=com/github/magese/ik-analyzer/8.3.0/ik-analyzer-8.3.0.jar</a></p><p>将jar包拷贝到 <code>Solr\server\solr-webapp\webapp\WEB-INF\lib</code>目录下</p></li><li><p>配置Solr的<code>managed-schema</code>，添加<code>ik分词器</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ik分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_cn"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span> <span class="attr">conf</span>=<span class="string">"ik.conf"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="使用中文分词器分析"><a href="#使用中文分词器分析" class="headerlink" title="使用中文分词器分析"></a>使用中文分词器分析</h5><p>在添加中文分词器后，重启Solr，访问 example_core 下的 analysis</p><blockquote><p>访问地址：<a href="http://localhost:8983/solr/#/example_core/analysis" target="_blank" rel="noopener">http://localhost:8983/solr/#/example_core/analysis</a></p></blockquote><p>Analyse Fieldname / FieldType：<code>text_cn</code>    （配置的中文分词器）</p><p>Field Value ：Solr的中文分词器</p><p>分析结果</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/Solr/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E7%A4%BA%E4%BE%8B.png" alt="中文分词器示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Solr&quot;&gt;&lt;a href=&quot;#Solr&quot; class=&quot;headerlink&quot; title=&quot;Solr&quot;&gt;&lt;/a&gt;Solr&lt;/h4&gt;&lt;p&gt;Solr下载地址 &lt;a href=&quot;https://lucene.apache.org/solr/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://lucene.apache.org/solr/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[可选项]配置环境变量：将Solr添加到系统环境变量中，在系统环境变量的path下添加 &lt;code&gt;安装目录\Solr\bin&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;Solr目录结构&quot;&gt;&lt;a href=&quot;#Solr目录结构&quot; class=&quot;headerlink&quot; title=&quot;Solr目录结构&quot;&gt;&lt;/a&gt;Solr目录结构&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/lao-biao/Pictures/raw/master/Solr/solr目录结构.png&quot; alt=&quot;Solr目录结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="solr" scheme="https://lao-biao.github.io/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>JVM虚拟机</title>
    <link href="https://lao-biao.github.io/articles/18701caa.html"/>
    <id>https://lao-biao.github.io/articles/18701caa.html</id>
    <published>2020-07-14T15:03:22.000Z</published>
    <updated>2020-08-24T01:06:18.483Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h4><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><a id="more"></a><h5 id="java从编码到执行"><a href="#java从编码到执行" class="headerlink" title="java从编码到执行"></a>java从编码到执行</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Java从编码到执行.png" alt="Java从编码到执行"></p><h5 id="JVM：从跨平台的语言到跨语言的平台"><a href="#JVM：从跨平台的语言到跨语言的平台" class="headerlink" title="JVM：从跨平台的语言到跨语言的平台"></a>JVM：从跨平台的语言到跨语言的平台</h5><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/跨平台语言与跨语言平台.png" alt="从跨平台的语言到跨语言的平台"></p><h5 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h5><p>java虚拟机 java virtual machine </p><h6 id="JVM是一种规范"><a href="#JVM是一种规范" class="headerlink" title="JVM是一种规范"></a>JVM是一种规范</h6><ul><li>java虚拟机规范 java virtual machine specifications</li></ul><h6 id="JVM是虚构出来的一台计算机"><a href="#JVM是虚构出来的一台计算机" class="headerlink" title="JVM是虚构出来的一台计算机"></a>JVM是虚构出来的一台计算机</h6><ul><li>字节码指令集（汇编语言）</li><li>内存管理：栈 堆 方法区等</li></ul><h6 id="JVM分代模型"><a href="#JVM分代模型" class="headerlink" title="JVM分代模型"></a>JVM分代模型</h6><ul><li>新生代（Young Generation）</li><li>老年代（(Old Generation）</li><li><del>持久代（Permanent Generation）</del>：用于存储静态文件</li></ul><p>JDK 8 中已经把持久代（PermGen Space）移除了，取而代之的元空间（Metaspace）。Metaspace占用的是本地内存，不再占用虚拟机内存。</p><h5 id="JVM与class文件格式"><a href="#JVM与class文件格式" class="headerlink" title="JVM与class文件格式"></a>JVM与class文件格式</h5><p>JVM与java无关，任何语言都可以通过编译成字节码文件在JVM上运行。</p><pre class="mermaid">graph LR;A[任何语言]-->B(class字节码)-->C[JVM虚拟机]</pre><h5 id="常见的JVM实现"><a href="#常见的JVM实现" class="headerlink" title="常见的JVM实现"></a>常见的JVM实现</h5><h6 id="Hotspot"><a href="#Hotspot" class="headerlink" title="Hotspot"></a>Hotspot</h6><ul><li>Oracle官方，做实验用的JVM</li><li>java -version</li></ul><h6 id="Jrockit"><a href="#Jrockit" class="headerlink" title="Jrockit"></a>Jrockit</h6><ul><li>BEA公司开发，曾经号称世界上最快的JVM</li><li>被Oracle收购</li></ul><h6 id="J9-IBM"><a href="#J9-IBM" class="headerlink" title="J9-IBM"></a>J9-IBM</h6><p>IBM公司开发，类似于Hotspot，主要用于IBM自己的产品。</p><h6 id="Microsoft-VM"><a href="#Microsoft-VM" class="headerlink" title="Microsoft VM"></a>Microsoft VM</h6><p>微软虚拟机</p><h6 id="TaobaoVM"><a href="#TaobaoVM" class="headerlink" title="TaobaoVM"></a>TaobaoVM</h6><p>Hotspot深度定制版</p><h6 id="LiquidVM"><a href="#LiquidVM" class="headerlink" title="LiquidVM"></a>LiquidVM</h6><p>直接针对硬件</p><h6 id="azul-zing"><a href="#azul-zing" class="headerlink" title="azul zing"></a>azul zing</h6><p>最新垃圾回收的行业标杆</p><h5 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK-JRE-JVM"></a>JDK-JRE-JVM</h5><p>JDK：开发集成工具+jre，java开发工具包，部署java开发环境</p><p>JRE：核心库+JVM，运行java环境</p><p>JVM：运行最终的字节码文件</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/JDK-JRE-JVM.png" alt="JDK-JRE-JVM"></p><h4 id="Garbage-Collector-与-GC-tuning"><a href="#Garbage-Collector-与-GC-tuning" class="headerlink" title="Garbage Collector 与 GC tuning"></a>Garbage Collector 与 GC tuning</h4><p>垃圾回收与垃圾回收调优</p><h5 id="垃圾的定义"><a href="#垃圾的定义" class="headerlink" title="垃圾的定义"></a>垃圾的定义</h5><p>内存</p><ul><li>多删</li><li>忘删：内存泄漏（Memory Leak）</li></ul><p>JVM中GC自动回收垃圾</p><h6 id="java与c-垃圾回收比较"><a href="#java与c-垃圾回收比较" class="headerlink" title="java与c++垃圾回收比较"></a>java与c++垃圾回收比较</h6><p>java</p><ul><li>GC处理垃圾</li><li>开发效率高，执行效率低</li></ul><p>C++</p><ul><li>手动处理垃圾</li><li>忘记回收：内存泄漏</li><li>回收多次：非法访问</li><li>开发效率低，执行效率高</li></ul><h5 id="垃圾的定位"><a href="#垃圾的定位" class="headerlink" title="垃圾的定位"></a>垃圾的定位</h5><p>垃圾是如何定位的</p><h6 id="Reference-Count-算法"><a href="#Reference-Count-算法" class="headerlink" title="Reference Count 算法"></a>Reference Count 算法</h6><p>引用计数</p><p>在空引用时进行回收</p><p>缺陷：RC不能解决循环引用的问题（一堆垃圾）</p><h6 id="Root-Searching-根可达算法"><a href="#Root-Searching-根可达算法" class="headerlink" title="Root Searching 根可达算法"></a>Root Searching 根可达算法</h6><p>由根节点可以连接到达为有效对象，其他的视为垃圾。</p><p>以下可视为根节点</p><ul><li>JVM stack    main方法的栈帧</li><li>native method  stack 本地方法栈</li><li>runtime constant pool 运行时的常量池</li><li>static references in method area 方法区内静态引用对象</li><li>Clazz 类对象</li></ul><p>GC roots：线程变量、静态变量、常量池、JNI指针</p><p>注意：</p><p>Java 不采用RC（Reference Count）算法，而是采用RS（Root Searching）算法。</p><h5 id="常见垃圾回收算法"><a href="#常见垃圾回收算法" class="headerlink" title="常见垃圾回收算法"></a>常见垃圾回收算法</h5><p>常见GC 算法</p><ul><li>Mark-Sweep 标记清除</li><li>Copying 拷贝</li><li>Mark-Compact 标记压缩</li></ul><h6 id="Mark-Sweep-标记清除"><a href="#Mark-Sweep-标记清除" class="headerlink" title="Mark-Sweep 标记清除"></a>Mark-Sweep 标记清除</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Sweep-1.png" alt="Mark Sweep算法"></p><p>标记清除算法流程</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Sweep-2.png" alt="Mark Sweep算法"></p><p>优点：</p><ul><li>算法相对简单</li><li>存活对象比较多的情况下效率较高</li></ul><p>缺点：</p><ul><li>扫描两次，效率偏低</li><li>容易产生碎片化：不能存放连续的对象</li></ul><h6 id="Copying-复制"><a href="#Copying-复制" class="headerlink" title="Copying 复制"></a>Copying 复制</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Copying-1.png" alt="Copying算法"></p><p>复制算法流程</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Copying-2.png" alt="Copying算法"></p><p>优点：</p><ul><li>适用于存活对象较少的情况</li><li>只扫描一次，效率提高</li><li>没有碎片</li></ul><p>缺点：</p><ul><li>空间浪费，每次只有一半内存被使用</li><li>移动复制对象，需要调整对象的引用</li></ul><h6 id="Mark-Compact-标记压缩"><a href="#Mark-Compact-标记压缩" class="headerlink" title="Mark Compact 标记压缩"></a>Mark Compact 标记压缩</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Compact-1.png" alt="Mark Compact算法"></p><p>标记压缩算法流程</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Mark-Compact-2.png" alt="Mark Compact算法"></p><p>优点：</p><ul><li>不会产生碎片，方便对象分配</li><li>不会产生内存减半</li></ul><p>缺点：</p><ul><li>扫描两次</li><li>需要移动对象，效率偏低</li></ul><h5 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h5><ul><li><p>JDK 1.8默认 PS+PO</p></li><li><p>JDK 1.9 10 11 12 13 默认G1</p></li></ul><h6 id="常见垃圾回收器分类"><a href="#常见垃圾回收器分类" class="headerlink" title="常见垃圾回收器分类"></a>常见垃圾回收器分类</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/垃圾收集器分类.png" alt="垃圾收集器分类"></p><p>Young、Old 分代模型，新生代和老生代配合使用</p><ul><li>ParNew+CMS</li><li>ParNew+Serial Old</li><li>Serial+Serial Old</li><li>Serial+CMS+Serial Old</li><li>Parallel Scavenge+Parallel Old</li><li>Parallel Scavenge+Serial Old</li></ul><p>G1：物理上不分代，逻辑上分代</p><h6 id="堆内存逻辑分区（不适用不分代垃圾收集器）"><a href="#堆内存逻辑分区（不适用不分代垃圾收集器）" class="headerlink" title="堆内存逻辑分区（不适用不分代垃圾收集器）"></a>堆内存逻辑分区（不适用不分代垃圾收集器）</h6><p>新生代大量死去，少量存活，采用复制算法</p><p>老年代存活率高，回收较少，采用MC（Mark Compact）或MS（Mark Sweep）</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/堆内存逻辑分区.png" alt="堆内存逻辑分区"></p><p>CMS：经过6次GC—&gt;老年代</p><p>其他：经过15次GC</p><h6 id="GC概念"><a href="#GC概念" class="headerlink" title="GC概念"></a>GC概念</h6><p>MinorGC/YGC：年轻代空间耗尽时触发</p><p>MajorGC/FullGC：在老年代无法继续分配空间时触发，新生代老年代同时进行回收</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/GC概念.png" alt="GC概念"></p><h6 id="GC详解"><a href="#GC详解" class="headerlink" title="GC详解"></a>GC详解</h6><p>栈上分配</p><ul><li>线程私有小对象</li><li>无逃逸：栈中存在引用</li><li>支持标量替换</li><li>无需调整</li></ul><p>线程本地分配TLAB（Thread Local Allocation Buffer）</p><ul><li>占用eden，默认1%</li><li>多线程的时候不用竞争eden就可以申请空间，提高效率</li><li>小对象</li><li>无需调整</li></ul><p>Old 老年代</p><ul><li>大对象</li></ul><p>eden 伊甸：对象刚出生时，刚new的时候</p><h6 id="YGC与FGC"><a href="#YGC与FGC" class="headerlink" title="YGC与FGC"></a>YGC与FGC</h6><p>YGC</p><ul><li>Young GC Minor（辅助） GC</li><li>Eden区不足</li></ul><p>FGC</p><ul><li>Full GC Major GC</li><li>Old空间不足</li><li>System.gc()</li></ul><h6 id="对象何时进入老年代"><a href="#对象何时进入老年代" class="headerlink" title="对象何时进入老年代"></a>对象何时进入老年代</h6><p>超过<code>XX:MaxTenuringThreshold</code>指定次数（YGC）</p><ul><li>Parallel Scavenge 经过15次GC进入老年代</li><li>CMS 经过6次GC进入老年代</li><li>G1 经过15次GC进入老年代</li></ul><p>动态年龄</p><ul><li>s1 - &gt; s2超过50%</li><li>把年龄最大的放入O（老年代）</li></ul><p>通过参数：<code>-XX:MaxTenuringThreshold</code>配置</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/一个对象从出生到消亡.png" alt="一个对象从出生到消亡"></p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/GC总结.png" alt="GC总结"></p><h6 id="ParNew垃圾回收器"><a href="#ParNew垃圾回收器" class="headerlink" title="ParNew垃圾回收器"></a>ParNew垃圾回收器</h6><p>PS（Parallel Scavenge）的变种，用来配合CMS使用。</p><ul><li>a stop-thr-world,copying collector with uses multiple GC threads.</li><li>It differs from “Parallel Scavenge” in that it has enhancements that make it uasable with CMS.</li><li>For example,”ParNew” doses the synchronization needed so that it can run during thr concurrent phases of CMS.</li><li>默认线程数位CPU的核数</li></ul><h6 id="Serial垃圾回收器与Serial-Old垃圾回收器"><a href="#Serial垃圾回收器与Serial-Old垃圾回收器" class="headerlink" title="Serial垃圾回收器与Serial Old垃圾回收器"></a>Serial垃圾回收器与Serial Old垃圾回收器</h6><p>此种组合基本不使用，效率太低</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Serial.png" alt="Serial"></p><ul><li>串行</li><li>STW</li><li>单线程拷贝算法（工作在年轻代）</li></ul><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/Serial-Old.png" alt="Serial-Old"></p><h6 id="Parallel-Scavenge垃圾回收器"><a href="#Parallel-Scavenge垃圾回收器" class="headerlink" title="Parallel Scavenge垃圾回收器"></a>Parallel Scavenge垃圾回收器</h6><ul><li>STW</li><li>多线程拷贝算法</li></ul><h6 id="Parallel-Old垃圾回收器"><a href="#Parallel-Old垃圾回收器" class="headerlink" title="Parallel Old垃圾回收器"></a>Parallel Old垃圾回收器</h6><p>A compacting collector that uses multiple GC threads.</p><ul><li>多线程压缩算法（工作在老年代）</li></ul><h6 id="CMS垃圾回收器"><a href="#CMS垃圾回收器" class="headerlink" title="CMS垃圾回收器"></a>CMS垃圾回收器</h6><ul><li>并发标记清理concurrent mark sweep</li><li>高并发低停顿收集器a mostly concurrent，low-pause collector</li><li>4个阶段（从线程角度）<ol><li>初始标记initial mark</li><li>并发标记concurrent mark</li><li>重新标记remark</li><li>并发清理concurrent sweep</li></ol></li></ul><h6 id="CMS垃圾回收器缺点"><a href="#CMS垃圾回收器缺点" class="headerlink" title="CMS垃圾回收器缺点"></a>CMS垃圾回收器缺点</h6><ul><li>memory fragmentation<ul><li>-XX:CMSFullGCsBeforeCompaction</li></ul></li><li>floating garbage<ul><li>Concurrent Mode Failure -XX:CMSInitiatingOccupancyFraction 92%</li><li>SerialOld</li></ul></li></ul><h6 id="CMS-Remark阶段的算法"><a href="#CMS-Remark阶段的算法" class="headerlink" title="CMS Remark阶段的算法"></a>CMS Remark阶段的算法</h6><p>三色扫描算法：白灰黑</p><p><img data-src="https://gitee.com/lao-biao/Pictures/raw/master/JVM/三色标记算法.png" alt="三色标记算法"></p><p>在并发按标记时，引用可能产生变化，白色对象有可能被错误回收</p><p>解决方案</p><ul><li>SATB<ul><li>在起始的时候做一个快照 snapshot at the beginning</li><li>当B-&gt;D消失时，要把这个引用推到GC的堆栈，保证D还能被GC扫描到</li><li>配合RSet，只用扫描哪些Region引用到D这个Region（区域）了</li></ul></li><li>Incremental Update<ul><li>当一个白色对象被一个黑色对象引用</li><li>将黑色对象重新标记为灰色，让collector重新扫描</li><li>这个容易产生问题，比如 A a， A b 都已经标记完，但是 A  a - D了，A成为灰色，这时mutator（设置方法）把A a 标记完了，又把 A变成了黑色</li><li>这也是为什么CMS的final mark必须再扫描一遍地原因</li></ul></li></ul><h5 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h5><h6 id="什么是调优"><a href="#什么是调优" class="headerlink" title="什么是调优"></a>什么是调优</h6><ol><li>根据需求进行JVM规划和预调优</li><li>优化运行JVM运行环境（慢、卡顿）</li><li>解决JVM运行过程中出现的任何问题（OOM）</li></ol><h6 id="调优方式"><a href="#调优方式" class="headerlink" title="调优方式"></a>调优方式</h6><p>简单粗暴的调优方式：重启</p><p>在线调优</p><h5 id="JVM命令行参数"><a href="#JVM命令行参数" class="headerlink" title="JVM命令行参数"></a>JVM命令行参数</h5><p>HotSpot参数分类</p><ul><li><p>标准：<code>-</code>开头，所有的HotSpot都支持</p></li><li><p>非标准：<code>-X</code>开头，特定版本HotSpot支持特定命令</p></li><li><p>不稳定：<code>-XX</code>开头，下个版本可能取消</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java # 列出所有的HotSpot都支持的命令</span><br><span class="line"></span><br><span class="line">java -X# 列出特定版本HotSpot支持的特定命令</span><br><span class="line"></span><br><span class="line">Java -XX:+PrintFlagsWithComments# 只有debug版本能用</span><br><span class="line">java -XX:+PrintFlagsFinal# 列出所有不稳定命令</span><br></pre></td></tr></table></figure></li></ul><h5 id="JVM调优实战"><a href="#JVM调优实战" class="headerlink" title="JVM调优实战"></a>JVM调优实战</h5><p>将xms（程序启动时初始内存大小），xmx（程序运行时最大可用内存大小）设置成一致的好处是可以防止内存抖动。</p><h6 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h6><p>OOM（Out Of Memory）：内存泄漏、内存溢出</p><p>当程序的GC垃圾回收在执行，而Memory只增不降，需要进行调优。</p><p>当执行到一定时间时，最终频繁Full GC ，每次GC只会回收2kB或1kB。</p><h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h6><p>阿里开源JVM在线调优工具 arthas</p><p>文档：<a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">Arthas</a></p><p>Arthas无法替代JVM唯一的命令jmap</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top # 类似于任务管理器，通过此命令找到java程序运行的端口号</span><br><span class="line">top -Hp 1196 # 可以查看该进程下各个线程的cpu使用情况；</span><br><span class="line">jps # 用于查询正在运行的JVM进程</span><br><span class="line">jstat # 可以实时显示本地或远程JVM进程中类装载、内存、垃圾收集、JIT编译等数据</span><br><span class="line">jmap -histo 1196 | head -20# 1196为运行端口号，以实际为主，20为获取前面的数据</span><br></pre></td></tr></table></figure><p>问题：当服务器cpu出现飙高怎么处理</p><ol><li>业务线程：列出堆栈，通过<code>jmap</code>命令找到占用内存最高的对象，无法进行GC处理掉的对象，查看代码，进行调整。</li><li>GC线程：通过在线调优工具进行排查</li></ol><p>导致Full GC的原因：</p><ul><li>年老代（Old）被写满</li><li>持久代（Perm）被写满</li><li><code>System.gc()</code>被显示调用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JVM基础&quot;&gt;&lt;a href=&quot;#JVM基础&quot; class=&quot;headerlink&quot; title=&quot;JVM基础&quot;&gt;&lt;/a&gt;JVM基础&lt;/h4&gt;&lt;p&gt;JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="jvm" scheme="https://lao-biao.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Ajax笔记</title>
    <link href="https://lao-biao.github.io/articles/48d9bd16.html"/>
    <id>https://lao-biao.github.io/articles/48d9bd16.html</id>
    <published>2020-07-12T02:47:12.000Z</published>
    <updated>2020-07-12T05:43:38.501Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a>Ajax概述</h5><p>全称”Asynchronous JavaScript and XML” 异步JavaScript和XML，是一种创建交互网页应用的网页开发技术。</p><ul><li>基于web标准(Standards-based Presentation)    XHTML+CSS</li><li>使用DOM(Document Object Model)进行动态显示与交互</li><li>使用XML和XSLT进行数据交换及相关操作</li><li>使用XMLHttpRequest进行异步数据查询、检索</li><li>使用JavaScript将所有的东西绑定在一起</li></ul><p>本质是一个浏览器端的技术</p><p>异步刷新技术，用来在当前页面响应不同的请求内容。</p><a id="more"></a><h5 id="Ajax功能"><a href="#Ajax功能" class="headerlink" title="Ajax功能"></a>Ajax功能</h5><p>需求：需要将本次的响应结果和前面的响应结果内容在同一个页面中展现给用户</p><p>解决:</p><ul><li>在后台服务器端将多次相应内容重新拼接成一个jsp页面，响应对象，jsp内部使用，带有缓冲区的响应对象，效率高于response对象<br>问题:造成相应你内容被重复的响应，资源浪费</li><li>使用Ajax技术</li></ul><h5 id="Ajax基本使用流程"><a href="#Ajax基本使用流程" class="headerlink" title="Ajax基本使用流程"></a>Ajax基本使用流程</h5><ol><li>创建ajax引擎对象</li><li>覆写onreadystatement函数</li><li>判断ajax状态码</li><li>判断响应状态码</li><li>获取相应内容</li><li>处理相应内容</li><li>发送请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ajax引擎对象</span></span><br><span class="line"><span class="keyword">var</span> ajax;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  <span class="comment">// firefox</span></span><br><span class="line">    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// ie</span></span><br><span class="line">    ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 覆写onreadystatement函数</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 会执行4次,判断ajax状态码，只在数据成功接收时执行以下代码</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">4</span> === ajax.readyState) &#123;</span><br><span class="line">        <span class="comment">// 获取元素对象</span></span><br><span class="line">        <span class="keyword">let</span> showdiv = <span class="built_in">document</span>.getElementById(<span class="string">"showDiv"</span>);</span><br><span class="line">        <span class="comment">// 判断响应状态码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">200</span> === ajax.status) &#123;</span><br><span class="line">            <span class="comment">// 获取响应内容，修改元素内容</span></span><br><span class="line">            showdiv.innerHTML = ajax.responseText;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">404</span>===ajax.status)&#123;</span><br><span class="line">            showdiv.innerHTML=<span class="string">"请求资源不存在"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">500</span>===ajax.status)&#123;</span><br><span class="line">            showdiv.innerHTML=<span class="string">"服务器繁忙"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送请求 get/post</span></span><br><span class="line"><span class="comment">// get请求实体拼接在url后面，?隔开，键值对        </span></span><br><span class="line">ajax.open(<span class="string">"get"</span>, <span class="string">"ajax?name=value"</span>);</span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求有单独的请求实体，    </span></span><br><span class="line">ajax.open(<span class="string">"post"</span>,<span class="string">"ajax"</span>);</span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(<span class="string">"name=value"</span>);</span><br></pre></td></tr></table></figure><h5 id="Ajax状态码"><a href="#Ajax状态码" class="headerlink" title="Ajax状态码"></a>Ajax状态码</h5><p>readyState</p><div class="table-container"><table><thead><tr><th style="text-align:center">readyState值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">表示XMLHttpRequest已建立，但还未初始化，这是尚未调用open方法</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">表示open方法已经调用，但未调用send方法（已创建，未发送）</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">表示send方法已经调用，其他数据未知</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">表示请求已经成功发送，正在接收数据</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">表示数据已经成功接收</td></tr></tbody></table></div><h6 id="常用Http状态码"><a href="#常用Http状态码" class="headerlink" title="常用Http状态码"></a>常用Http状态码</h6><div class="table-container"><table><thead><tr><th style="text-align:center">http状态码</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">200 OK</td><td style="text-align:center">客户端请求成功</td></tr><tr><td style="text-align:center">400 Bad Request</td><td style="text-align:center">客户端请求有语法错误，不能被服务器所理解</td></tr><tr><td style="text-align:center">401 Unauthorized</td><td style="text-align:center">请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</td></tr><tr><td style="text-align:center">403 Forbidden</td><td style="text-align:center">服务器收到请求，但是拒绝提供服务</td></tr><tr><td style="text-align:center">404 Not Found</td><td style="text-align:center">请求资源不存在（可能输入了错误的URL）</td></tr><tr><td style="text-align:center">500 Internal Server Error</td><td style="text-align:center">服务器发生不可预期的错误</td></tr><tr><td style="text-align:center">503 Server Unavailable</td><td style="text-align:center">服务器当前不能处理客户端的请求，一段时间后可能恢复正常</td></tr></tbody></table></div><h5 id="Ajax异步和同步"><a href="#Ajax异步和同步" class="headerlink" title="Ajax异步和同步"></a>Ajax异步和同步</h5><p>ajax.open(method, url,async); </p><p>method：get方法，post方法</p><p>url：请求的地址</p><p>async：设置代码执行方式，false同步，true异步,默认为异步</p><h5 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h5><p>get：携带的数据包含在url中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ajax.open(<span class="string">"get"</span>, url + (data === <span class="literal">null</span> ? <span class="string">""</span> : <span class="string">"?"</span> + data), <span class="keyword">async</span>); <span class="comment">// false同步，true异步</span></span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>post</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ajax.open(<span class="string">"post"</span>, url, <span class="keyword">async</span>);<span class="comment">// false同步，true异步</span></span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(data);</span><br></pre></td></tr></table></figure><h5 id="Ajax响应数据类型"><a href="#Ajax响应数据类型" class="headerlink" title="Ajax响应数据类型"></a>Ajax响应数据类型</h5><h6 id="普通字符串"><a href="#普通字符串" class="headerlink" title="普通字符串"></a>普通字符串</h6><p>responseText</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取响应数据</span></span><br><span class="line"><span class="keyword">var</span> result = ajax.responseText;</span><br></pre></td></tr></table></figure><h6 id="json"><a href="#json" class="headerlink" title="json"></a>json</h6><p>将数据按照json的格式拼接好的字符串，方便使用eval方法将接受的字符串直接转换成js的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json格式</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:value,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需求分类</p><ol><li>在当前页面显示查询结果</li><li>创建ajax函数</li><li>调用ajax函数发送请求到UserServlet</li><li>调用业务层获取对应的数据</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;AjaxData&lt;/title&gt;</span><br><span class="line">        &lt;!--引入外部js文件，见ajax封装--&gt;</span><br><span class="line">        &lt;script type="text/javascript" src="js/ajaxutil.js"&gt;&lt;/script&gt; </span><br><span class="line">        &lt;!--声明js代码域--&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="function">function <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取用户请求信息</span></span><br><span class="line">                <span class="keyword">var</span> name = document.getElementById(<span class="string">"uname"</span>).value;</span><br><span class="line">                <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span> (window.XMLHttpRequest) &#123;<span class="comment">// firefox</span></span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.ActiveXObject) &#123;<span class="comment">// ie</span></span><br><span class="line">                    ajax = <span class="keyword">new</span> window.ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 覆写onreadystatementchange函数</span></span><br><span class="line">                ajax.onreadystatechange = function () &#123;</span><br><span class="line">                    <span class="comment">// 判断ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// 获取响应数据</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseText;</span><br><span class="line">                            eval(<span class="string">"u="</span> + result);</span><br><span class="line">                            <span class="comment">// 处理响应数据</span></span><br><span class="line">                            <span class="comment">// 获取table元素对象</span></span><br><span class="line">                            <span class="keyword">var</span> ta = document.getElementById(<span class="string">"table"</span>);</span><br><span class="line">                            ta.innerHTML = <span class="string">""</span>;</span><br><span class="line">                            <span class="comment">// 插入新的行</span></span><br><span class="line">                            <span class="keyword">var</span> tr = ta.insertRow(<span class="number">0</span>);</span><br><span class="line">                            <span class="keyword">var</span> uid = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                            uid.innerHTML = <span class="string">"编号"</span>;</span><br><span class="line">                            <span class="keyword">var</span> uname = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                            uname.innerHTML = <span class="string">"英雄"</span>;</span><br><span class="line">                            <span class="keyword">var</span> price = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                            price.innerHTML = <span class="string">"价格"</span>;</span><br><span class="line">                            <span class="keyword">var</span> location = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                            location.innerHTML = <span class="string">"位置"</span>;</span><br><span class="line">                            <span class="keyword">var</span> description = tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                            description.innerHTML = <span class="string">"描述"</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> tr = ta.insertRow(<span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">var</span> uid = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                            uid.innerHTML = u.uid;</span><br><span class="line">                            <span class="keyword">var</span> uname = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                            uname.innerHTML = u.uname;</span><br><span class="line">                            <span class="keyword">var</span> price = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                            price.innerHTML = u.price;</span><br><span class="line">                            <span class="keyword">var</span> location = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                            location.innerHTML = u.location;</span><br><span class="line">                            <span class="keyword">var</span> description = tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                            description.innerHTML = u.description;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                ajax.open(<span class="string">"get"</span>, <span class="string">"user?name="</span> + name);</span><br><span class="line">                ajax.send(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;AjaxData&lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        名称: &lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span> value=<span class="string">""</span> id=<span class="string">"uname"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"搜索"</span> onclick=<span class="string">"getData()"</span>&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;table border="1px" id="table"&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="XML数据"><a href="#XML数据" class="headerlink" title="XML数据"></a>XML数据</h6><p>responseXML，返回document对象<br>通过document对象将数据从xml中获取出来</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">        &lt;title&gt;XML数据格式学习&lt;/title&gt;</span><br><span class="line">        &lt;!--声明js代码域--&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function">function <span class="title">getXML</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (window.ActiveXObject) &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> window.ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 覆写onreadystatementchange函数</span></span><br><span class="line">                ajax.onreadystatechange = function () &#123;</span><br><span class="line">                    <span class="comment">// 判断ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span> (ajax.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span> (ajax.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// 获取响应数据</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseXML;</span><br><span class="line">                            alert(result.getElementsByTagName(<span class="string">"uname"</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                ajax.open(<span class="string">"get"</span>, <span class="string">"xml"</span>,<span class="keyword">true</span>);</span><br><span class="line">                ajax.send(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;XML数据格式学习&lt;/h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"测试"</span> onclick=<span class="string">"getXML()"</span>&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="Ajax封装"><a href="#Ajax封装" class="headerlink" title="Ajax封装"></a>Ajax封装</h5><p>封装ajax方便调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ajax封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>method 请求方式，get或post</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url 请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>data 请求数据，格式"name=value&amp;..."，没有值需要传入null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal200 接收一个带有一个形参的js函数对象，形参接收的实参是ajax引擎对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal404 接收一个js函数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>deal500 接收一个js函数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>async 异步或同步，boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">method, url, data, deal200, deal404, deal500, async=true</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建ajax引擎对象</span></span><br><span class="line">    <span class="keyword">var</span> ajax = getAjax();</span><br><span class="line">    <span class="comment">// 覆写onreadystatement函数</span></span><br><span class="line">    ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取元素对象</span></span><br><span class="line">        <span class="keyword">let</span> showdiv = <span class="built_in">document</span>.getElementById(<span class="string">"showDiv"</span>);</span><br><span class="line">        <span class="comment">// 会执行4次,判断ajax状态码，只在数据成功接收时执行以下代码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">4</span> === ajax.readyState) &#123;</span><br><span class="line">            <span class="comment">// 判断响应状态码</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">200</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal200)</span><br><span class="line">                    deal200(ajax);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">404</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal404)</span><br><span class="line">                    deal404();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">500</span> === ajax.status) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deal500)</span><br><span class="line">                    deal500();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"get"</span> === method) &#123;</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        ajax.open(<span class="string">"get"</span>, url + (data === <span class="literal">null</span> ? <span class="string">""</span> : <span class="string">"?"</span> + data), <span class="keyword">async</span>); <span class="comment">// false同步，true异步</span></span><br><span class="line">        ajax.send(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"post"</span> === method) &#123;</span><br><span class="line">        ajax.open(<span class="string">"post"</span>, url, <span class="keyword">async</span>);</span><br><span class="line">        ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        ajax.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*ajax的封装*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ajax;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  <span class="comment">// firefox</span></span><br><span class="line">        ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// ie</span></span><br><span class="line">        ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Ajax概述&quot;&gt;&lt;a href=&quot;#Ajax概述&quot; class=&quot;headerlink&quot; title=&quot;Ajax概述&quot;&gt;&lt;/a&gt;Ajax概述&lt;/h5&gt;&lt;p&gt;全称”Asynchronous JavaScript and XML” 异步JavaScript和XML，是一种创建交互网页应用的网页开发技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于web标准(Standards-based Presentation)    XHTML+CSS&lt;/li&gt;
&lt;li&gt;使用DOM(Document Object Model)进行动态显示与交互&lt;/li&gt;
&lt;li&gt;使用XML和XSLT进行数据交换及相关操作&lt;/li&gt;
&lt;li&gt;使用XMLHttpRequest进行异步数据查询、检索&lt;/li&gt;
&lt;li&gt;使用JavaScript将所有的东西绑定在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质是一个浏览器端的技术&lt;/p&gt;
&lt;p&gt;异步刷新技术，用来在当前页面响应不同的请求内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="ajax" scheme="https://lao-biao.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Jsp-EL表达式-JSTL笔记</title>
    <link href="https://lao-biao.github.io/articles/324a571.html"/>
    <id>https://lao-biao.github.io/articles/324a571.html</id>
    <published>2020-07-12T02:45:37.000Z</published>
    <updated>2020-07-12T12:35:04.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Java Server Pages，Java服务器页面</p><p>简化的Servlet设计</p><p>动态网页技术标准（数据的动态改变）</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>本质上是Servlet</li><li>跨平台</li><li>组件跨平台</li><li>健壮性和安全性（业务逻辑，数据）</li></ul><h5 id="访问原理"><a href="#访问原理" class="headerlink" title="访问原理"></a>访问原理</h5><p>Tomcat只能识别Servlet，用户访问jsp文件，服务器用JspServlet将jsp文件转义成对应的Java文件，返回给用户</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><font color='blue'>JSP负责页面展现，Sevlet负责业务逻辑处理</font><a id="more"></a><h4 id="Jsp的语法和指令"><a href="#Jsp的语法和指令" class="headerlink" title="Jsp的语法和指令"></a>Jsp的语法和指令</h4><p>Jsp三大指令</p><ul><li>page指令：配置jsp文件的转译相关的参数</li><li>include指令：静态引入jsp文件</li><li>taglib指令：引入jstl标签库</li></ul><h5 id="jsp的三种注释"><a href="#jsp的三种注释" class="headerlink" title="jsp的三种注释"></a>jsp的三种注释</h5><p>前端语言注释(html,css,js)：会被转译，也会被发送，但是不会被浏览器执行</p><p>java语言注释(行注释，块注释，文档注释)：会被转译，但是不会被servlet执行</p><p>jsp注释：不会被转译</p><h5 id="jsp的page指令"><a href="#jsp的page指令" class="headerlink" title="jsp的page指令"></a>jsp的page指令</h5><p> <code>&lt;@ page attribute1=&quot;value&quot; attribute2=&quot;value&quot; ...%&gt;</code></p><p>作用：配置jsp文件的转译相关的参数</p><ul><li>language:声明jsp要被转译的语言</li><li>import:声明转译java的java文件要导入的包，不同的包使用逗号隔开</li><li>pageEncoding:设置jsp文件的数据编码格式</li><li>contentType:设置jsp数据响应给浏览器时，浏览器的解析和编码格式</li><li>session:设置转译的Servlet是否开启session支持，默认开启，true开启，false关闭</li><li>errorPage:设置jsp运行错误跳转的页面</li><li>extends:设置jsp转译的java文件要继承的父类（包名+类名）</li></ul><h5 id="jsp的局部代码块"><a href="#jsp的局部代码块" class="headerlink" title="jsp的局部代码块"></a>jsp的局部代码块</h5><p>特点</p><ul><li>布局代码块中声明的java代码会被原样转译到jsp对应的Servlet文件的_JspService方法中</li><li>代码块中声明的变量都是局部变量</li></ul><p>使用：<code>&lt;%java代码块%&gt;</code></p><p>缺点：使用局部代码块在jsp中进行逻辑判断，书写麻烦，阅读困难</p><p>开发：使用Sevlet进行请求逻辑处理，使用jsp进行页面展现</p><h5 id="jsp的全局代码块"><a href="#jsp的全局代码块" class="headerlink" title="jsp的全局代码块"></a>jsp的全局代码块</h5><p>特点：声明的java代码作为全局代码转译到对应的Servlet类中</p><p>使用：<code>&lt;%!java全局代码块%&gt;</code></p><font color='red'>注意：全局代码块声明的代码，需要使用局部代码块调用</font><h5 id="jsp的脚本段语句"><a href="#jsp的脚本段语句" class="headerlink" title="jsp的脚本段语句"></a>jsp的脚本段语句</h5><p>特点：帮助开发人员快速地获取变量或者方法的返回值作为数据响应给浏览器    </p><p>使用：<code>&lt;%=变量名或者方法%&gt;</code>    &lt;===&gt;   out.write(变量名或方法);</p><font color='red'>注意：不要在变量名或者方法后使用分号</font><p>位置：除jsp语法要求以外的任意位置</p><h5 id="jsp的静态引入和动态引入"><a href="#jsp的静态引入和动态引入" class="headerlink" title="jsp的静态引入和动态引入"></a>jsp的静态引入和动态引入</h5><h6 id="静态引入"><a href="#静态引入" class="headerlink" title="静态引入"></a>静态引入</h6><p> <code>&lt;%@include file=&quot;jsp文件相对地址&quot; %&gt;</code></p><p>特点：</p><ul><li>会将引入的jsp文件和当前jsp文件转译成一个java（Servlet）文件使用</li><li>在网页中也就显示了合并后的显示效果</li></ul><p>注意：</p><ul><li>静态引入的jsp文件<font color='red'>不会</font>单独转译成java（Servlet）文件</li><li>同名变量    编译报错 Duplicate local variable</li><li>当前文件和静态引入的jsp文件中<font color='red'>不能</font>使用java代码块声明同名变量</li></ul><h6 id="动态引入"><a href="#动态引入" class="headerlink" title="动态引入"></a>动态引入</h6><p><code>&lt;jsp:include page=&quot;jsp文件相对地址&quot;/&gt;</code></p><p>特点：</p><ul><li>会将引入的jsp文件单独转译，在当前文件转译好的java文件中调用引入的jsp文件的转译文件</li><li>在网页中显示合并后的显示效果</li></ul><p>注意：动态引入<font color='red'>允许</font>文件中声明同名变量</p><p>优点：降低jsp代码的冗余，便于维护升级</p><h5 id="jsp的转发标签"><a href="#jsp的转发标签" class="headerlink" title="jsp的转发标签"></a>jsp的转发标签</h5><p>使用：<code>&lt;jsp:forward page=&quot;jsp文件相对地址&quot;&gt;&lt;/jsp:forward&gt;</code>    jsp文件<font color='red'>相对地址</font></p><p>特点</p><ul><li>一次请求</li><li>地址栏信息不变</li></ul><p>注意：<font color='red'>在转发标签的两个标签中间除了写</font><code>&lt;jsp:param name=&quot;&quot; value=&quot;&quot;/&gt;</code><font color='red'>子标签不会报错，其他任意字符都会报错</font><br><code>&lt;%=request.getParameter(&quot;键名&quot;)%&gt;</code><br>name属性为附带的数据的键名<br>value属性为附带的数据的内容<br>会将数据以?的形式在转发路径的后面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">"要转发的jsp文件的相对路径"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"str"</span> value=<span class="string">"a"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><h4 id="jsp内置对象"><a href="#jsp内置对象" class="headerlink" title="jsp内置对象"></a>jsp内置对象</h4><h5 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h5><p>jsp文件在转译其对应的Servlet文件的时候自动生成的并声明的对象，可以在jsp页面中直接使用。</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>内置对象在jsp页面中使用，使用局部代码块或者脚本段语句来使用，不能够在全局代码块中使用。</p><h5 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h5><h6 id="PageContext对象"><a href="#PageContext对象" class="headerlink" title="PageContext对象"></a>PageContext对象</h6><p>页面上下文对象，封存了其他内置对象。封存了当前jsp的运行信息</p><p>注意：每个jsp文件单独拥有一个PageContext对象</p><p>作用域：当前页面</p><h6 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h6><p>封存当前请求数据的对象，由Tomcat服务器创建，作用域为一次请求。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 获取请求数据</span></span><br><span class="line">String s = request.getParameter(<span class="string">"str"</span>);</span><br><span class="line">request.getAttribute(<span class="string">"str"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h6 id="Session对象"><a href="#Session对象" class="headerlink" title="Session对象"></a>Session对象</h6><p>存储用户的不同请求的共享数据，作用域为一次会话</p><h6 id="Application对象"><a href="#Application对象" class="headerlink" title="Application对象"></a>Application对象</h6><p>ServletContext对象，一个项目只有一个，存储用户共享数据的对象，以及完成其他操作，项目内</p><h6 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h6><p>响应对象，用来响应请求处理结果给浏览器的对象，设置响应头，重定向。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    response.sendRedirect(<span class="string">"forward.jsp"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h6 id="Out对象"><a href="#Out对象" class="headerlink" title="Out对象"></a>Out对象</h6><p>响应对象，jsp内部使用，带有缓冲区的响应对象，效率高于response对象</p><h6 id="Page对象"><a href="#Page对象" class="headerlink" title="Page对象"></a>Page对象</h6><p>代表当前jsp对象，相当于java的this</p><h6 id="Exception对象"><a href="#Exception对象" class="headerlink" title="Exception对象"></a>Exception对象</h6><p>异常对象，存储了当前运行的异常信息</p><p>注意：使用此对象需要在page指定使用属性isErrorPage=”true”开启</p><h6 id="Congfig对象"><a href="#Congfig对象" class="headerlink" title="Congfig对象"></a>Congfig对象</h6><p>ServletConfig对象，主要用来获取web.xml中的配置数据，完成一些初始化数据据的读取</p><h6 id="四个作用域对象"><a href="#四个作用域对象" class="headerlink" title="四个作用域对象"></a>四个作用域对象</h6><p>pageContext：当前对象，解决了在当前页面的数据共享问题。获取其他内置对象</p><p>request:一次请求，一次请求的servlet的数据共享。通过请求转发将数据流转给下一个Servlet</p><p>session:一次会话，一个用户的不同请求的数据共享。将数据从一次请求流转给其他请求</p><p>application:项目内，不同用户的数据共享问题。将数据从一个用户流转给其他用户</p><p>作用：数据流转</p><h4 id="jsp资源路径"><a href="#jsp资源路径" class="headerlink" title="jsp资源路径"></a>jsp资源路径</h4><p>在jsp中资源路径可以使用相对路径完成跳转，存在的问题</p><p>问题一：资源的位置不可随意更改</p><p>问题二：需要使用<code>../</code>进行文件夹的跳出，使用比较麻烦</p><h5 id="使用绝对路径"><a href="#使用绝对路径" class="headerlink" title="使用绝对路径"></a>使用绝对路径</h5><p> <code>/</code>表示服务器根目录即localhost:8080/</p><p>/虚拟项目名/项目资源路径</p><p>举例：项目虚拟名为jsp    </p><p>资源文件路径webapp/jsp/a/a.jsp    <code>&lt;a href=&quot;/jsp/a/a.jsp&quot;&gt;a.jsp&lt;/a&gt;</code></p><p>webapp/jsp/jsppro.jsp    <code>&lt;a href=&quot;/jsp/jsppro.jsp&quot;&gt;jsppro.jsp&lt;/a&gt;</code></p><h5 id="使用jsp中自带的全局路径声明"><a href="#使用jsp中自带的全局路径声明" class="headerlink" title="使用jsp中自带的全局路径声明"></a>使用jsp中自带的全局路径声明</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">    &lt;/head&gt;   </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>作用：给资源前面添加项目路径<a href="http://127.0.0.1:8080/虚拟项目名/" target="_blank" rel="noopener">http://127.0.0.1:8080/虚拟项目名/</a></p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p>问题引入</p><ul><li>Servlet进行请求处理后，使用作用域对象作为数据流转的载体，将数据流转给对应的jsp文件</li><li>在jsp中获取作用域中的数据</li></ul><p>传统方式：在jsp页面中使用java脚本段语句</p><p>传统方式获取作用域数据</p><ul><li>缺点一：要通过<code>&lt;%@ page import=&quot;&quot;%&gt;</code>导入包</li><li>缺点二：需要强制转换对象</li><li>缺点三：获取数据的代码过于麻烦</li></ul><p>ElServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"ElServlet"</span>, urlPatterns = &#123;<span class="string">"/es"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置请求编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 设置响应编码</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">// 获取请求信息</span></span><br><span class="line">        String uname = req.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">        <span class="comment">// 处理请求信息</span></span><br><span class="line">        System.out.println(uname + <span class="string">"==="</span> + pwd);</span><br><span class="line">        <span class="comment">// 响应处理结果</span></span><br><span class="line">        <span class="comment">// 使用request作用域进行数据流转</span></span><br><span class="line">        <span class="comment">// 普通字符串</span></span><br><span class="line">        req.setAttribute(<span class="string">"str"</span>, <span class="string">"今天天气很好!"</span>);</span><br><span class="line">        <span class="comment">// 对象类型</span></span><br><span class="line">        User u = <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">"张三"</span>, <span class="string">"跑步"</span>, <span class="keyword">new</span> Address(<span class="string">"湖北"</span>, <span class="string">"黄冈"</span>, <span class="string">"红安县"</span>));</span><br><span class="line">        req.setAttribute(<span class="string">"user"</span>, u);</span><br><span class="line">        <span class="comment">// 集合类型</span></span><br><span class="line">        <span class="comment">// List集合</span></span><br><span class="line">        <span class="comment">// 存储普通字符串</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"周润发"</span>);</span><br><span class="line">        list.add(<span class="string">"刘德华"</span>);</span><br><span class="line">        list.add(<span class="string">"周星驰"</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="comment">// 存储对象</span></span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"李四"</span>, <span class="string">"游泳"</span>, <span class="keyword">new</span> Address(<span class="string">"湖北"</span>, <span class="string">"武汉"</span>, <span class="string">"武昌区"</span>));</span><br><span class="line">        List&lt;User&gt; lu = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lu.add(u);</span><br><span class="line">        lu.add(u2);</span><br><span class="line">        req.setAttribute(<span class="string">"lu"</span>, lu);</span><br><span class="line">        <span class="comment">// Map集合</span></span><br><span class="line">        <span class="comment">// 存储普通字符串</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"a"</span>, <span class="string">"北京"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>, <span class="string">"上海"</span>);</span><br><span class="line">        map.put(<span class="string">"c"</span>, <span class="string">"广州"</span>);</span><br><span class="line">        map.put(<span class="string">"d"</span>, <span class="string">"深圳"</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">        <span class="comment">// 存储对象</span></span><br><span class="line">        Map&lt;String, User&gt; mu = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        mu.put(<span class="string">"a"</span>, <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"张家辉"</span>, <span class="string">"演戏"</span>, <span class="keyword">new</span> Address(<span class="string">"广东省"</span>, <span class="string">"广州市"</span>, <span class="string">"中山区"</span>)));</span><br><span class="line">        req.setAttribute(<span class="string">"mu"</span>, mu);</span><br><span class="line">        <span class="comment">// 空值判断</span></span><br><span class="line">        req.setAttribute(<span class="string">"s0"</span>,<span class="string">""</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"s1"</span>,<span class="keyword">new</span> User());</span><br><span class="line">        req.setAttribute(<span class="string">"s2"</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        req.setAttribute(<span class="string">"s3"</span>,<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">        </span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/el.jsp"</span>).forward(req, resp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关bean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String pre;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line">getter/setter...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String fav;</span><br><span class="line">    <span class="keyword">private</span> Address addr;</span><br><span class="line">    getter/setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsp文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;&lt;%=request.getParameter("uname")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=request.getAttribute("str")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User) request.getAttribute("user")).getAddr().getTown()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((ArrayList) request.getAttribute("list")).get(1)%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User) ((ArrayList) request.getAttribute("lu")).get(0)).getAddr().getPre()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((ArrayList&lt;User&gt;) request.getAttribute("lu")).get(1).getAddr().getPre()%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((HashMap) request.getAttribute("map")).get("b")%&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((HashMap&lt;String, User&gt;) request.getAttribute("mu")).get("a").getAddr().getTown()%&gt;&lt;/b&gt;</span><br></pre></td></tr></table></figure><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>全称：Expression Language，一种写法非常简洁的表达式，语法简单易懂，便于使用，表达式语言的灵感来自于ESMAScript和XPath表达式语言。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>让jsp书写起来更加的方便，简化在jsp中获取作用域或者请求数据的写法，也会搭配JSTL来进行使用</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>语法结构：$(expression)提供<code>.</code>和<code>[]</code>两种运算符来存取数据    </p><h5 id="使用EL表达式获取请求数据"><a href="#使用EL表达式获取请求数据" class="headerlink" title="使用EL表达式获取请求数据"></a>使用EL表达式获取请求数据</h5><p>获取用户请求数据 ${requset.attribute}</p><p>获取请求头数据</p><ul><li>${header}   返回所有的请求头数据</li><li>${header[“键名”]}   返回指定键名的请求头数据</li><li>${headerValues[“键名”]} 返回指定得键名(同键不同值)</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;header&#125;</span><br><span class="line">$&#123;header[<span class="string">"User-Agent"</span>]&#125;</span><br><span class="line">$&#123;headerValues[<span class="string">"Accept-Language"</span>][<span class="number">0</span>]&#125;</span><br></pre></td></tr></table></figure><p>获取Cookie数据</p><ul><li>${cookie}   返回存储了所有的cookie对象的map集合</li><li>${cookie.键名}    返回指定的cookie对象</li><li>${cookie.键名.name}   返回指定的cookie对象存储的数据的键名</li><li>${cookie.键名.value}   返回指定的cookie对象存储的数据的值</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;cookie&#125;</span><br><span class="line">$&#123;cookie.JSESSIONID.value&#125;</span><br></pre></td></tr></table></figure><h5 id="使用EL表达式获取作用域数据"><a href="#使用EL表达式获取作用域数据" class="headerlink" title="使用EL表达式获取作用域数据"></a>使用EL表达式获取作用域数据</h5><h6 id="获取作用域数据"><a href="#获取作用域数据" class="headerlink" title="获取作用域数据"></a>获取作用域数据</h6><ul><li>request对象存储了请求数据    param.键名         返回的是值</li><li>request对象存储了请求数据    paramValues.键名   返回的是数组</li></ul><p>通过setAttribute方法存储到作用域对象中的数据</p><ul><li>${键名}   返回键名所对应的值</li></ul><p>注意</p><ul><li>如果存储的是普通字符串则直接返回</li><li>如果存储的是对象，则返回的是对象</li></ul><p>获取对象中的数据</p><ul><li>普通对象:${键名.属性名.属性名…}</li><li>集合对象:<ul><li>list集合${键名[角标]}</li><li>map集合${键名.map集合存储的键名}</li></ul></li></ul><h6 id="作用域查找顺序"><a href="#作用域查找顺序" class="headerlink" title="作用域查找顺序"></a>作用域查找顺序</h6><p>默认查找顺序：pageContext—&gt;reqeust—&gt;session—&gt;application</p><font color='red'>注意：每次查找都从小到大进行查找，找到了则获取，不再继续找了</font><h6 id="获取指定作用域的数据"><a href="#获取指定作用域的数据" class="headerlink" title="获取指定作用域的数据"></a>获取指定作用域的数据</h6><ul><li>${requestScope.键名}</li><li>${pageScope.键名}</li><li>${sessionScope.键名}</li><li>${applicationScope.键名}</li></ul><h5 id="使用EL表达式进行运算"><a href="#使用EL表达式进行运算" class="headerlink" title="使用EL表达式进行运算"></a>使用EL表达式进行运算</h5><p>算术运算${算术表达式}</p><p>关系运算${关系表达式}</p><p>逻辑运算${逻辑表达式}</p><p>三目运算${三目表达式}</p><font color='red'>注意：</font>`+`<font color='red'>表示加法运算，不表示字符连接，使用EL表达式进行字符连接会报错</font><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">3</span>=&gt;$&#123;<span class="number">1</span>+<span class="number">3</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=&gt;$&#123;<span class="number">1</span>*<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>=&gt;$&#123;<span class="number">1</span>/<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>-<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>-<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>%<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>%<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>==<span class="number">3</span>=&gt;$&#123;<span class="number">4</span>==<span class="number">3</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4</span>&gt;<span class="number">2</span>=&gt;$&#123;<span class="number">4</span>&gt;<span class="number">2</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>==<span class="number">1</span>?<span class="string">'男'</span>:<span class="string">'女'</span>=&gt;$&#123;<span class="number">1</span>==<span class="number">1</span>?<span class="string">'男'</span>:<span class="string">'女'</span>&#125;&lt;br&gt;</span><br><span class="line"><span class="number">1</span>+<span class="string">"2"</span>=&gt;$&#123;<span class="number">1</span>+<span class="string">"2"</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="使用EL表达式控制判断empty"><a href="#使用EL表达式控制判断empty" class="headerlink" title="使用EL表达式控制判断empty"></a>使用EL表达式控制判断empty</h5><p>${empty 键名}</p><p>作用：判断键名对象的值是否存有数据</p><h3 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>JSTL是apache对EL表达式的扩展（JSTL依赖于EL），JSTL是标签语言。JSTL标签使用起来非常方便，它与JSP动作标签一样，只不过是它不是JSP内置的标签，需要导包，以及指定标签库。</p><p>使用MyEclipse开发JavaWeb，在项目发布到Tomcat时，MyEclipse会在lib目录下存放jstl的jar包。如果没有使用MyEclipse开发需要手动导入jar包。Maven项目需要导入JSTL的相关依赖。</p><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>用来提升在JSP页面的逻辑代码的编码效率，使用标签来替换逻辑代码的直接书写，高效、美观、整洁、易读。</p><h4 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h4><ul><li>核心标签库</li><li>格式化标签库</li><li>JSTL的SQL标签库</li><li>JSTL的函数标签库</li><li>JSTL的XML标签库</li></ul><p>菜鸟教程-JSTL：<a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p><h5 id="JSTL的核心标签库"><a href="#JSTL的核心标签库" class="headerlink" title="JSTL的核心标签库"></a>JSTL的核心标签库</h5><ol><li><p>导入jar包</p></li><li><p>声明jstl标签库的引入(核心标签库)</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jstl/core_rt"</span> %&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h6><p><code>&lt;c:out value=&quot;数据&quot; default=&quot;默认值&quot;/&gt;</code></p><p>数据可以作为常量值也可以是EL表达式</p><p>作用：将数据输出给客户端</p><p><code>&lt;c:set var=&quot;hello&quot; value=&quot;hello pageContext&quot; scope=&quot;page&quot;/&gt;</code></p><p>作用：存储数据到作用域对象中</p><ul><li>var:表示存储的键名</li><li>value:表示存储的数据</li><li>scope:表示要存储的作用域对象 page request session application</li></ul><p><code>&lt;c:remove var=&quot;hello&quot; scope=&quot;request&quot;/&gt;</code></p><p>作用：删除作用域中指定键的数据</p><ul><li>var:表示要删除的键的名字</li><li>scrope:表示要删除的作用域(可选)</li><li><font color='red'>注意：如果在不指定作用域的情况使用该标签删除数据，会将四个作用域对象中的符合要求的数据全部删除</font></li></ul><h6 id="逻辑标签"><a href="#逻辑标签" class="headerlink" title="逻辑标签"></a>逻辑标签</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"\$&#123;表达式&#125;"</span>&gt;</span><br><span class="line">    前端代码</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><p>作用：进行逻辑判断，相当于java代码的单分支判断。</p><p>注意：逻辑判断标签需要依赖于EL的逻辑运算，也就是表达式中涉及到的数据必须从作用域中拿。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=""&gt;执行内容&lt;/c:when&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;c:otherwise&gt;执行内容&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>作用:用来进行多条件逻辑判断，类似java中的多分支语句。</p><p>注意：条件成立只会执行一次，都不成立则执行otherwise。</p><h6 id="循环标签"><a href="#循环标签" class="headerlink" title="循环标签"></a>循环标签</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"4"</span> step=<span class="string">"1"</span>&gt;</span><br><span class="line">    循环体</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>作用：循环内容进行处理</p><ul><li><p>begin：声明循环开始位置</p></li><li><p>end：声明循环结束位置</p></li><li><p>step：设置循环步长</p></li><li><p>varStatus：声明变量记录每次循环的数据(角标、次数，是否是第一次循环，是否是最后一次循环)</p><p>注意:数据存储在作用域中，需要使用EL表达式获取</p><p>例如：${vs.index}—${vs.count}—​${vs.first}—​${vs.last}</p></li><li><p>items：声明要遍历的对象，结合EL表达式获取对象</p></li><li><p>var：声明变量记录每次循环的结果，存储在作用域中，通过EL表达式获取对象</p></li></ul><p>数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"hello"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">map.put(<span class="string">"world"</span>, <span class="string">"world"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--常量循环--%&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"4"</span> step=<span class="string">"1"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">    $&#123;vs.index&#125;--$&#123;vs.count&#125;--$&#123;vs.first&#125;--$&#123;vs.last&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;%--动态循环--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"varlist"</span>&gt;</span><br><span class="line">    $&#123;varlist&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--JSTL方式创建表格--%&gt;</span><br><span class="line">&lt;table border=<span class="string">"1px"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;字段名&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"s"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;%--遍历map集合--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;map&#125;"</span> <span class="keyword">var</span>=<span class="string">"m"</span>&gt;</span><br><span class="line">    $&#123;m.key&#125;:$&#123;m.value&#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jsp&quot;&gt;&lt;a href=&quot;#Jsp&quot; class=&quot;headerlink&quot; title=&quot;Jsp&quot;&gt;&lt;/a&gt;Jsp&lt;/h3&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;Java Server Pages，Java服务器页面&lt;/p&gt;
&lt;p&gt;简化的Servlet设计&lt;/p&gt;
&lt;p&gt;动态网页技术标准（数据的动态改变）&lt;/p&gt;
&lt;h5 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;本质上是Servlet&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;li&gt;组件跨平台&lt;/li&gt;
&lt;li&gt;健壮性和安全性（业务逻辑，数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;访问原理&quot;&gt;&lt;a href=&quot;#访问原理&quot; class=&quot;headerlink&quot; title=&quot;访问原理&quot;&gt;&lt;/a&gt;访问原理&lt;/h5&gt;&lt;p&gt;Tomcat只能识别Servlet，用户访问jsp文件，服务器用JspServlet将jsp文件转义成对应的Java文件，返回给用户&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;jsp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.jasper.servlet.JspServlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;fork&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;xpoweredBy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;load-on-startup&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;load-on-startup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;jsp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;*.jsp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;*.jspx&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h5&gt;&lt;font color=&#39;blue&#39;&gt;JSP负责页面展现，Sevlet负责业务逻辑处理&lt;/font&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="jsp" scheme="https://lao-biao.github.io/tags/jsp/"/>
    
      <category term="el" scheme="https://lao-biao.github.io/tags/el/"/>
    
      <category term="jstl" scheme="https://lao-biao.github.io/tags/jstl/"/>
    
  </entry>
  
  <entry>
    <title>Servlet笔记</title>
    <link href="https://lao-biao.github.io/articles/bc07bc32.html"/>
    <id>https://lao-biao.github.io/articles/bc07bc32.html</id>
    <published>2020-07-11T14:25:05.000Z</published>
    <updated>2020-08-24T01:07:25.471Z</updated>
    
    <content type="html"><![CDATA[<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ul><li><p>狭义的Servlet是指Java语言实现的一个接口</p></li><li><p>广义的Servlet是指任何实现了这个Servlet接口的类</p></li></ul><p>Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，绝大数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><a id="more"></a><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ul><li><p>运行在Java的应用服务器上</p></li><li><p>Servlet的实现遵循了服务器能够识别的规则，服务器会自动地根据请求调用对应地Servlet进行请求处理</p></li><li><p>简单方便，可移植性强</p></li></ul><h6 id="URL与URI"><a href="#URL与URI" class="headerlink" title="URL与URI"></a>URL与URI</h6><p>url：<a href="http://localhost:8080/servlet/my" target="_blank" rel="noopener">http://localhost:8080/servlet/my</a></p><ul><li><p>服务器地址:端口号/webapps下的文件夹的名称[虚拟项目名]/类名全路径[别名]</p></li><li><p>服务器地址:端口号/虚拟项目名/servlet的别名</p></li></ul><p>URI：虚拟项目名/servlet的别名</p><h6 id="访问流程"><a href="#访问流程" class="headerlink" title="访问流程"></a>访问流程</h6><ol><li>浏览器发送请求到服务器</li><li>服务器根据请求URL地址中的URI信息在webapps目录下找到对应的项目文件夹</li><li>然后在web.xml中检索响应的Servlet</li><li>找到后调用并执行Servlet</li></ol><h5 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h5><ul><li>从第一次调用到服务器关闭</li><li>如果Servlet在web.xml中配置了load-on-startup，生命周期为从服务器启动到服务器关闭</li></ul><p>init()方法是对Servlet进行初始化的方法，会在Servlet第一次加载进行存储时执行</p><p>destroy()方法是在Servlet被销毁时执行，即服务器关闭时</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li><p>service() 可以处理get/post方式的请求，如果Servlet中有service方法会优先调用service方法对请求进行处理</p></li><li><p>doGet()  处理get方式请求</p></li><li><p>doPost() 处理post方式请求</p><p>注意:如果在覆写的service方法中又调用了父类的service方法，则service方法处理完成后，会再次根据请求方式响应的doGet和doPost方法执行。所以，一般情况下不在覆写的service方法中调用父类的service方法，避免出现405错误。</p></li></ul><h5 id="Servlet的常见错误"><a href="#Servlet的常见错误" class="headerlink" title="Servlet的常见错误"></a>Servlet的常见错误</h5><ul><li>404错误：资源未找到<br>原因1：在请求地址中的servlet的别名书写错误<br>原因2：虚拟项目名称拼写错误</li><li>500错误：内容服务器错误 java.lang.ClassNotFoundException<br>解决：在web.xml中校验Servlet类的全限定路径是否拼写错误<br>逻辑错误：因为service方法的代码执行错误导致，根据错误提示对service方法体中的代码进行错误更改</li><li>405错误：请求方式不支持<br>原因:请求方式和Servlet中的方法不匹配所造成<br>解决:尽量使用service方法进行请求处理，并且不要再service方法中调用父类的service</li></ul><h5 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h5><p>request对象中封存了当前的所有请求信息</p><h6 id="获取请求头数据"><a href="#获取请求头数据" class="headerlink" title="获取请求头数据"></a>获取请求头数据</h6><ul><li>req.getMethod()              获取请求方式</li><li><p>req.getRequestURL()          获取请求URL信息</p><ul><li>req.getRequestURI()          获取请求URI信息</li><li>req.getScheme()              获取协议</li></ul></li></ul><h6 id="获取请求行数据"><a href="#获取请求行数据" class="headerlink" title="获取请求行数据"></a>获取请求行数据</h6><ul><li>req.getHeader(“键名”)          返回指定的请求头信息</li><li>req.getHeaderNames()          返回请求头的键名的枚举集合</li></ul><h6 id="获取用户数据"><a href="#获取用户数据" class="headerlink" title="获取用户数据"></a>获取用户数据</h6><ul><li><p>req.getParameter(“键名”)        返回指定的用户数据</p></li><li><p>req.getParameterValues(“键名”)    返回同键不同值的请求数据</p></li><li><p>req.getParameterNames()          返回所有用户请求数据的枚举集合</p><p>如果要获取的请求数据不存在，不会报错，返回null</p><p>注意:request对象由tomcat服务器创建，并作为实参传递给处理请求的Servlet的service方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求头数据</span></span><br><span class="line">    String method = req.getMethod();    <span class="comment">// 获取请求方式</span></span><br><span class="line">    StringBuffer requestURL = req.getRequestURL();<span class="comment">// 获取请求URL</span></span><br><span class="line">    String requestURI = req.getRequestURI();</span><br><span class="line">    String scheme = req.getScheme();    <span class="comment">// 获取请求协议</span></span><br><span class="line">    System.out.println(<span class="string">"method==&gt;"</span> + method + <span class="string">"  URL==&gt;"</span> + requestURL + <span class="string">"  URI==&gt;"</span> + requestURI + <span class="string">"  scheme==&gt;"</span> + scheme);</span><br><span class="line">    <span class="comment">// 获取行数据</span></span><br><span class="line">    String header = req.getHeader(<span class="string">"User-Agent"</span>);    <span class="comment">// 获取指定的请求行信息</span></span><br><span class="line">    System.out.println(header);</span><br><span class="line">    Enumeration&lt;String&gt; headerNames = req.getHeaderNames(); <span class="comment">// 获取所有请求行的枚举</span></span><br><span class="line">    <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">        String name = headerNames.nextElement();</span><br><span class="line">        String value = req.getHeader(name);</span><br><span class="line">        System.out.println(name + <span class="string">"==&gt;"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取用户数据</span></span><br><span class="line">    String uname = req.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">    String pwd = req.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">    System.out.println(<span class="string">"uname==&gt;"</span> + uname + <span class="string">"  pwd==&gt;"</span> + pwd);</span><br><span class="line">    String[] favs = req.getParameterValues(<span class="string">"fav"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String fav : favs) &#123;</span><br><span class="line">        System.out.println(fav);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">       &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">"request"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span> value=<span class="string">""</span>/&gt;&lt;br/&gt;</span><br><span class="line">            密码:&lt;input type=<span class="string">"text"</span> name=<span class="string">"pwd"</span> value=<span class="string">""</span>/&gt; &lt;br/&gt;</span><br><span class="line">            爱好:&lt;br/&gt;</span><br><span class="line">            <span class="number">1</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"1"</span>&gt;&lt;br/&gt;</span><br><span class="line">            <span class="number">2</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"2"</span>&gt;&lt;br/&gt;</span><br><span class="line">            <span class="number">3</span>&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"3"</span>&gt;&lt;br/&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h5><p> 作用：用来响应数据到浏览器的一个对象</p><p>使用：</p><ul><li>设置响应头<ul><li>setHeader(String name,String value) 在响应头中添加响应信息，但同键会覆盖</li><li>addHeader(String name,String value) 在响应头中添加响应信息，不会覆盖</li></ul></li><li>设置响应状态<br>sendError(int num,String msg)   自定义响应状态码</li><li>设置响应实体<br>resp.getWriter().write(String str)  响应具体的数据给浏览器</li><li>设置响应编码格式<br>resp.setContentType(“text/html;charset=utf-8”)</li></ul><h6 id="service请求处理代码流程"><a href="#service请求处理代码流程" class="headerlink" title="service请求处理代码流程"></a>service请求处理代码流程</h6><ol><li>设置响应编码格式         </li><li>获取请求数据</li><li>处理请求数据</li><li>数据库操作（MVC思想）</li><li>响应请求处理</li></ol><h5 id="请求中文乱码解决"><a href="#请求中文乱码解决" class="headerlink" title="请求中文乱码解决"></a>请求中文乱码解决</h5><ol><li>使用String进行数据重新编码<br><code>uname=new String(uname.getBytes(&quot;iso8859-1&quot;), &quot;utf-8&quot;);</code></li><li>使用公共配置<ul><li>get方式<br><code>req.setCharacterEncoding(&quot;utf-8&quot;);</code><br>在tomcat的目录下的conf目录中修改<code>server.xml</code>文件,在<code>Connector</code>标签中增加属性<code>useBodyEncodingForURI=&quot;true&quot;</code></li><li>post方式<br><code>req.setCharacterEncoding(&quot;utf-8&quot;);</code></li></ul></li></ol><h5 id="Servlet流程总结"><a href="#Servlet流程总结" class="headerlink" title="Servlet流程总结"></a>Servlet流程总结</h5><ol><li>浏览器发起请求到服务器</li><li>服务器接收浏览器的请求,进行解析，创建request对象存储请求数据</li><li>服务器调用对应的Servlet进行请求处理，并将request对象作为实参传递给Servlet的方法</li><li>Servlet的方法执行进行请求处理<ol><li>设置请求编码格式</li><li>设置响应编码格式</li><li>获取请求信息</li><li>处理请求信息<br>创建业务层对象<br>调用业务层对象的方法</li><li>响应结果处理</li></ol></li></ol><h5 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h5><p>作用：实现多个Servlet联动操作处理请求，避免代码冗余,让Servlet的职责更加明确</p><p>使用：<code>req.getRequestDispatcher(&quot;要转发的地址&quot;).forward(req,resp);</code><br>地址：相对路径,直接书写Servlet的别名即可</p><p>特点：一次请求，浏览器地址信息不变</p><p>注意：请求转发后直接return结束即可</p><h5 id="request对象的作用域"><a href="#request对象的作用域" class="headerlink" title="request对象的作用域"></a>request对象的作用域</h5><p>使用：</p><ul><li><code>request.setAttribute(Object name,Object value);</code>    </li><li><code>request.getAttribute(Object obj);</code></li></ul><p>作用：解决了一次请求内的不同Servlet的数据(请求数据+其他数据)共享问题</p><p>作用域：基于请求转发,一次请求中的所有Servlet共享</p><p>注意：使用Request对象进行数据流转,数据只在一次请求内有效</p><p>特点：</p><ul><li>服务器创建</li><li>每次请求都会创建</li><li>生命周期为一次请求</li></ul><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p>解决表单重复提交的问题，以及当前Servlet为无法处理的请求的问题</p><p>使用：</p><ul><li><code>response.sendRedirect(&quot;路径&quot;);</code></li><li>本地路径为：URI</li><li>网络路径为：定向资源的URL信息</li></ul><p>特点：</p><ul><li>两次请求，两个request对象</li><li>浏览器地址信息改变</li></ul><p>时机：</p><ul><li>如果请求中有表单数据，而数据又比较重要，不能重复提交，建议使用重定向</li><li>如果请求被Servlet接收后，无法进行处理，建议使用重定向定位到可以处理的资源</li></ul><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>作用：解决发送的不同请求的数据共享问题</p><h6 id="Cookie的创建和存储"><a href="#Cookie的创建和存储" class="headerlink" title="Cookie的创建和存储"></a>Cookie的创建和存储</h6><ul><li>创建Cookie对象<br><code>Cookie cookie=new Cookie(String name,String value);</code></li><li>设置Cookie(可选)<br>设置有效期  <code>cookie.setMaxAge(int seconds);</code><br>设置有效路径  <code>cookie.setPath(String uri);</code><br>响应Cookie信息给客户端 <code>resp.addCookie(cookie);</code></li></ul><h5 id="Cookie的获取"><a href="#Cookie的获取" class="headerlink" title="Cookie的获取"></a>Cookie的获取</h5><ul><li><p>获取Cookie信息数组<br><code>Cookie[] cookies=req.getCookies();</code></p></li><li><p>遍历数组获取Cookie信息<br>使用for循环遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cookies!=<span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">        String name = c.getName();</span><br><span class="line">        String value = c.getValue();</span><br><span class="line">        System.out.println(name + <span class="string">":"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意：一个Cookie对象存储一条数据，多条数据，可以创建多个Cookie对象进行存储。</p><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><ul><li>Cookie是浏览器端的数据存储技术</li><li>存储的数据声明在服务器端</li><li>临时存储:存储在浏览器的运行内存中，浏览器关闭即失效</li><li>定时存储:设置了Cookie的有效期，存储在客户端的硬盘中，在有效期内符合路径要求的请求都会附带信息</li><li>默认Cookie信息存储好之后，每次请求都会附带，除非设置有效路径</li></ul><h5 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h5><p>问题：一个用户的不同请求处理的数据共享</p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>用户第一次访问服务器，服务器会创建一个session对象给此用户，并将该session对象的JSESSIONID使用Cookie技术存储到浏览器中，保证用户的其他请求能够获取到同一个session对象，也保证了不同请求能够获取到共享的数据。</p><h6 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h6><ol><li>存储在服务器端</li><li>服务器进行创建</li><li>依赖Cookie技术</li><li>一次会话</li><li>默认存储时间是30分钟</li></ol><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><p>解决了一个用户不同请求处理的数据共享问题</p><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>创建session对象/获取session对象<code>HttpSession hs = req.getSession();</code></p><ul><li>如果请求中拥有session的标识符JSESSIONID，则返回其对应的session对象。</li><li>如果请求中没有session的标识符JSESSIONID，则创建新的session对象，并将其JSESSIONID作为cookie数据存储到浏览器端。</li><li>如果session对象失效了，也会重新创建一个session对象，并将其JSESSIONID存储在浏览器内存中。</li></ul><p>设置session存储时间<code>hs.setMaxInactiveInterval(int seconds);</code></p><p>注意：在指定的时间内session对象没有被使用则销毁，如果使用了则重新计时。</p><p>设置session强制失效<code>hs.invalidate();</code></p><p>存储和获取数据</p><ul><li><p>存储：<code>hs.setAttribute(String name,Object object);</code></p></li><li><p>获取：<code>hs.getAttribute(String name);</code> 返回的数据类型为Object</p><p>注意:存储的动作和取出的动作发生在不同的请求中，但是存储要先与取出执行。</p></li></ul><p>使用时机：一般用户在登录web项目时会将用户的个人信息存储到session中，供该用户的其他请求使用。</p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>session解决了一个个用户的不同请求的数据共享问题，只要在JSESSIONID不失效的情况下，用户的任意请求在处理时都能获取到同一个session对象</p><h6 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h6><ul><li>一次会话</li><li>在JSESSIONID和session对象不失效的情况下为整个项目内</li></ul><h6 id="session失效处理"><a href="#session失效处理" class="headerlink" title="session失效处理"></a>session失效处理</h6><p>将用户请求中的JSESSIONID和后台获取到的session对象进行比对时</p><ul><li>如果一致，则session没有失效，</li><li>如果不一致则说明session失效了，重定向到登录页面，让用户重新登录</li></ul><p>注意： JSESSIONID存储在了Cookie的临时存储空间中，浏览器关闭即失效</p><h5 id="模拟登录案例问题"><a href="#模拟登录案例问题" class="headerlink" title="模拟登录案例问题"></a>模拟登录案例问题</h5><p>解决主页面用户名显示为null问题</p><p>原因：因为在用户登录成功后使用重定向显示主界面，两次请求，而用户的信息在第一次请求中，第二次请求中没有用户数据，所以显示为null</p><p>解决：使用session技术</p><p>使用ServletContext对象完成网页计数器：在用户登录校验中创建计数器并自增，然后存储到ServletContext对象中，在主页面里取出计数器数据显示给用户。</p><h5 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h5><p>解决不同用户使用相同的数据</p><p>特点</p><ul><li>服务器创建</li><li>用户共享</li></ul><p>生命周期：服务器启动到服务器关闭</p><p>在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>context<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletContextServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>context<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/context<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><ul><li><p>获取ServletContext对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletContext sc1 = <span class="keyword">this</span>.getServletContext();<span class="comment">// this对象直接获取</span></span><br><span class="line">ServletContext sc2 = <span class="keyword">this</span>.getServletConfig().getServletContext(); <span class="comment">// 通过ServletConfig获取</span></span><br><span class="line">ServletContext sc3 = req.getSession().getServletContext(); <span class="comment">// 通过Session获取</span></span><br></pre></td></tr></table></figure></li><li><p>使用ServletContext对象完成数据共享</p><ul><li><p>数据存储<code>sc.setAttribute(String name,Object value);</code></p></li><li><p>数据获取<code>sc.getAttribute(String name);</code> 返回的是<strong>Object</strong>类型</p><p>注意：不同的用户可以给ServletContext对象进行数据存取，获取的数据不存在返回<strong>null</strong></p></li></ul></li><li><p>获取项目中web.xml文件的全局配置数据<br><code>sc.getInitParameter(&quot;name&quot;);</code>    返回<strong>String</strong>类型，如果数据不存在返回<strong>null</strong><br><code>sc.getParameterNames();</code> 返回键名的<strong>枚举</strong><br>配置方式一组<code>&lt;context-param&gt;</code>标签只能存储一组键值对数据，多组可以声明多个<code>&lt;context-param&gt;</code>进行存储。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span><span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用：将静态数据和代码进行解耦</p></li><li><p>获取项目web下的资源的绝对路径<br><code>String path = sc.getRealPath(String path);</code><br>获取的路径为项目根目录，参数为项目根目录中的路径</p></li><li><p>获取web下的资源的流对象<br><code>InputStream is = sc.getResourceAsStream(&quot;doc/1.txt&quot;);</code><br>注意：此种方式只能获取<font color='red'>项目根目录</font>下的资源流对象，class文件的流对象需要使用类加载器获取</p></li></ul><h5 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h5><p>解决在web.xml中给每个Servlet单独配置的数据</p><p>在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletConfigServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用：</p><ul><li>获取ServletConfig对象     <code>ServletConfig sc = this.getServletConfig();</code></li><li>获取web.xml中的配置数据        <code>String config = sc.getInitParameter(&quot;config&quot;);</code></li></ul><h5 id="web-xml文件"><a href="#web-xml文件" class="headerlink" title="web.xml文件"></a>web.xml文件</h5><p>作用：存储项目相关配置信息，保护Servlet；解耦一些数据对程序的依赖。</p><p>使用位置</p><ul><li>每个web项目中</li><li>Tomcat服务器中（在服务器目录conf目录中）</li></ul><p>区别</p><ul><li>Web项目下的web.xml文件为局部配置，针对本项目的位置</li><li>Tomcat下的web.xml文件为全局配置，配置公共信息</li></ul><p>内容（核心组件）</p><ul><li>全局上下文配置（全局配置参数）[ServletContext、context-param]</li><li>Servlet配置</li><li>过滤器配置[filter]</li><li>监听器配置[listener]</li></ul><p><strong><em>加载顺序</em></strong>：Web容器会按<font color='red'>ServletContext-&gt;context-param-&gt;listener-&gt;filter-&gt;servlet</font>顺序加载组件，这些元素可配置在<code>web.xml</code>文件中的任意位置。</p><p>加载时机：服务器启动时</p><h5 id="Server-xml文件核心组件"><a href="#Server-xml文件核心组件" class="headerlink" title="Server.xml文件核心组件"></a>Server.xml文件核心组件</h5><p>Tomcat的<code>server.xml</code>结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Context</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>热部署：<code>&lt;Context path=&quot;/项目虚拟名&quot; reloadable=&quot;true&quot; docBase=&quot;项目路径&quot;/&gt;</code></p><p>开发时使用冷部署，需要重启服务器。</p><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>问题引入：Servlet的作用是针对浏览器发起的请求，进行请求的处理。通过Servlet技术可以灵活的进行请求的处理，但是我们不但要对请求进行处理，还需要对服务器的资源进行统一的管理，比如请求编码格式的统一设置，资源的统一分配等等，如何解决？</p><p>解决：使用过滤器</p><p>作用：对服务器资源进行管理、保护Servlet。</p><p>过滤器生命周期：<font color='red'>从服务器启动到服务器关闭</font></p><h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><ul><li><p>创建一个实现了Filter接口的普通java类</p></li><li><p>覆写接口的方法</p><ul><li><p>init()方法:服务器启动即执行，资源初始化</p></li><li><p>doFilter()方法:拦截请求，在此方法中可以对资源实现管理</p><p>注意:需要手动对请求进行放行</p></li><li><p>destroy()方法:服务器关闭时执行</p></li></ul></li><li><p>Filter过滤器的配置：在web.xml中配置过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>mf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.web.filter.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>mf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解的形式：<code>@WebFilter(filterName = &quot;MyFilter&quot;, urlPatterns = {&quot;/*&quot;})</code></p></li><li><p>注意</p><ul><li>url-pattern:/*  表示拦截所有的请求</li><li>url-pattern:*.do    表示所有以.do结尾的请求，一般是用来进行模块拦截处理</li><li>url-pattern:/ServletUrlPattern    表示拦截指定url的请求，针对某个Servlet的请求拦截，保护Servlet</li></ul></li></ul><h6 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h6><p>浏览器发起请求到服务器，服务器接收到请求后根据URI信息在<code>web.xml</code>中找到对应的过滤器执行<code>doFilter()</code>方法，该方法对此次请求进行处理后如果符合要求则放行，放行后如果还有符合要求的规律其则继续进行过滤，找到对应的Servlet进行处理。Servlet对请求处理完毕后，也就是<code>service()</code>方法结束了。还需要继续返回相应的<code>doFilter()</code>方法继续执行。</p><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><ul><li>统一管理字符编码</li><li>统一编码格式设置</li><li>session管理</li><li>权限管理</li><li>资源管理(统一水印，和谐词汇等)</li></ul><h5 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h5><h6 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h6><p>在Servlet技术中学习了request、session、application作用域对象，其主要作用是实现数据在不同的场景中的灵活流转。但是数据的具体流转过程是无法看到的，比如作用域对象是什么时候创建和销毁的，数据是什么时候存取，改变和删除的。因为具体的流转过程是不可见的，所以无法在指定的实际对数据和对象进行操作，比如session销毁的时候，在线人数-1。</p><p>解决：使用监听器Listener</p><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p>Servlet监听器时Servlet规范中定义的一种特殊类，用于监听ServletContext、HttpSession和ServletReqeust等域对象的创建与销毁事件，以及监听这些域对象中属性发生修改的事件。</p><p>监听对象</p><ul><li>Request</li><li>Session</li><li>Application</li></ul><p>监听内容：创建、销毁、属性改变事件</p><p>监听作用：在事件发生之前，之后进行一些处理，比如统计在线人数</p><h6 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h6><p>1、创建一个实现了指定接口的java类</p><p>监听request</p><ul><li><p>监听request—&gt;ServletRequestListener  监听request对象的创建和销毁</p><ul><li>requestInitialized(ServletRequestEvent sre) 创建</li><li>requestDestroyed(ServletRequestEvent sre)   销毁</li></ul><p>注意：形参获取监听的request对象  sre.getServletRequest()</p></li><li><p>监听request—&gt;ServletRequestAttributeListener 监听request作用域数据的增加、修改、删除</p><ul><li>attributeAdded(ServletRequestAttributeEvent srae)</li><li>attributeReplaced(ServletRequestAttributeEvent srae)</li><li>attributeRemoved(ServletRequestAttributeEvent srae)</li></ul><p>注意：形参可以获取被监听的数据</p><ul><li>srae.getName()  获取监听数据的键名</li><li>srae.getValue()  获取监听数据的值</li></ul></li></ul><p>监听session</p><ul><li><p>监听session—&gt;HttpSessionListener 监听session的创建和销毁</p><ul><li>sessionCreated(HttpSessionEvent se)</li><li>sessionDestroyed(HttpSessionEvent se)</li></ul><p>注意:形参可以获取被监听的session对象 se.getSession();</p></li><li><p>监听session—&gt;HttpSessionAttributeListener 监听session数据的创建和销毁</p><ul><li>attributeAdded(HttpSessionBindingEvent se)</li><li>attributeReplaced(HttpSessionBindingEvent se)</li><li>attributeRemoved(HttpSessionBindingEvent se)</li></ul><p>注意:形参可以获取被监听的数据</p><ul><li>se.getName()    获取数据的键名</li><li>se.getValue()   获取数据的值</li></ul></li></ul><p>监听application</p><ul><li><p>监听application—&gt;ServletContextListener  监听application对象的初始化和销毁</p><ul><li>contextInitialized(ServletContextEvent sce) 初始化 服务器启动</li><li>contextDestroyed(ServletContextEvent sce)   销毁  服务器关闭</li></ul><p>注意:形参可以获取当前application对象<br>sce.getApplication()</p></li><li><p>监听application—&gt;ServletContextAttributeListener</p><ul><li>attributeAdded(ServletContextAttributeEvent scae)</li><li>attributeReplaced(ServletContextAttributeEvent scae)</li><li>attributeRemoved(ServletContextAttributeEvent scae)</li></ul><p>注意:形参可以获取被监听的数据</p><ul><li>scae.getName()  获取数据的键名</li><li>scae.getValue() 获取数据的值</li></ul></li></ul><p>2、在web.xml中配置监听类(可配置多个监听器)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.web.listener.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解形式：<code>@WebListener(value = &quot;/ml&quot;)</code></p><h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h6><p>统计网站在线人数</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;狭义的Servlet是指Java语言实现的一个接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;广义的Servlet是指任何实现了这个Servlet接口的类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，绝大数情况下Servlet只用来扩展基于HTTP协议的Web服务器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="servlet" scheme="https://lao-biao.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>AQS笔记</title>
    <link href="https://lao-biao.github.io/articles/74f18f35.html"/>
    <id>https://lao-biao.github.io/articles/74f18f35.html</id>
    <published>2020-07-11T12:29:29.000Z</published>
    <updated>2020-09-07T08:12:12.518Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h4><p>Abstract Queued Synchronizer 抽象队列同步器<br>所在包：<code>java.util.concurrent.locks.AbstractQueuedSynchronizer;</code></p><p>AQS是基于先进先出队列（FIFO），CLH（一种基于<strong>单向链表</strong>的高性能、<strong>公平</strong>的<strong>自旋锁</strong>）</p><p>基于AQS实现的锁</p><ul><li>ReentrantLock 可重入锁[<em>悲观锁</em>]</li><li>Semaphore 信号量</li><li>CountDownLatch 倒数计数</li><li>ReentrantReadWriteLock 可重入读写锁</li></ul><a id="more"></a><h5 id="偏向锁、轻量级锁、重量级锁"><a href="#偏向锁、轻量级锁、重量级锁" class="headerlink" title="偏向锁、轻量级锁、重量级锁"></a>偏向锁、轻量级锁、重量级锁</h5><p><strong>偏向锁</strong>：偏向第一个线程(JDK 1.6) JVM内部</p><p><strong>轻量级锁</strong>：由偏向锁升级而来，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁。</p><p><strong>自旋锁</strong>：一个执行单元要想访问被自旋锁保护的共享资源，必须先得到锁，在访问完共享资源后，必须释放锁。</p><p>自旋锁—(自旋10次)—&gt;重量级锁（悲观锁）</p><h5 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h5><ul><li><strong>悲观锁</strong>：总是假设最坏的情况，每次拿数据都认为别的线程会修改数据，所以要加锁，别的线程只能等待，直到当前线程释放锁才能拿到锁</li><li><strong>乐观锁</strong>：总是假设最好的情况，每次拿数据都认为别的线程不会修改数据，所以不会加锁，但是更新的时候，会判断在此期间有没有线程修改过</li></ul><h5 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h5><p>Compare and Swap比较和交换</p><ul><li><p>CAS 必须是原子操作 </p></li><li><p>现代CPU都支持CAS </p></li><li>CAS属于乐观锁</li></ul><h5 id="AbstractQueuedSynchronizer官方实现Lock模板"><a href="#AbstractQueuedSynchronizer官方实现Lock模板" class="headerlink" title="AbstractQueuedSynchronizer官方实现Lock模板"></a>AbstractQueuedSynchronizer官方实现Lock模板</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Our internal helper class</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Acquires the lock if state is zero</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> acquires == <span class="number">1</span>; <span class="comment">// Otherwise unused</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Releases the lock by setting state to zero</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> releases == <span class="number">1</span>; <span class="comment">// Otherwise unused</span></span><br><span class="line">            <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reports whether in locked state</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// a data race, but safe due to out-of-thin-air guarantees</span></span><br><span class="line">            <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Provides a Condition</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deserializes properly</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            s.defaultReadObject();</span><br><span class="line">            setState(<span class="number">0</span>); <span class="comment">// reset to unlocked state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The sync object does all the hard work. We just forward to it.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeldByCurrentThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多线程高并发常见问题引入"><a href="#多线程高并发常见问题引入" class="headerlink" title="多线程高并发常见问题引入"></a>多线程高并发常见问题引入</h5><p>使用100个线程完成10000个1相加的运算，每个线程都是100次自增的for循环，最后结果却小于10000。</p><p>这是因为线程操作的是<font color='red'>当前中内存中的值</font>，当执行m+2时（线程a获取内存中的值，线程b获取内存中的值，线程a执行+1操作，线程b执行+1操作，将值写入到内存中），实际上却只执行m+1了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line"><span class="comment">// 以匿名内部类的方式声明100个线程</span></span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                    m++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 线程开始</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.join();   <span class="comment">// 加入当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解决方案——Synchronized加锁"><a href="#解决方案——Synchronized加锁" class="headerlink" title="解决方案——Synchronized加锁"></a>解决方案——Synchronized加锁</h5><p>在线程访问时进行加锁，其他线程阻塞，线程完成累加后解锁，其他线程再进行访问，循环此操作，直到100个线程完成累加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Main<span class="class">.<span class="keyword">class</span>) </span>&#123;     <span class="comment">//线程访问时加锁，结束时打开，其他线程再访问时，加锁状态时线程阻塞</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解决方案——ReentrantLock"><a href="#解决方案——ReentrantLock" class="headerlink" title="解决方案——ReentrantLock"></a>解决方案——ReentrantLock</h5><p>使用ReentrantLock可重入锁，JDK 1.5之后添加的，互斥锁，底层实现是AQS</p><ul><li>lock() 加锁</li><li>unlock() 解锁</li></ul><p>ReentrantLock部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span>&#123;&#125;<span class="comment">// 底层实现是AQS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Synchronized</code> 在<font color='red'>JDK 1.5</font>之前被视为<strong>重量级锁</strong>，在<font color='red'>JDK 1.6</font>以后视为<strong>轻量级锁</strong></p><ul><li>JVM—OS(操作系统)</li><li>用户—kernel（实时操作系统）费时</li></ul><p>在JDK1.5之后在JVM添加各种锁（Lock接口），不需要再与OS交互</p><h6 id="Synchronized与CAS高并发性能比较"><a href="#Synchronized与CAS高并发性能比较" class="headerlink" title="Synchronized与CAS高并发性能比较"></a>Synchronized与CAS高并发性能比较</h6><p>Synchronized</p><ul><li><p>适合高并发（超高并发，锁代码执行时间长）</p></li><li><p>调用wait()，阻塞线程，不消耗 cpu</p></li></ul><p>CAS</p><ul><li>适合锁的竞争不激烈</li><li>for循环或while(true)， 消耗cpu</li></ul><h6 id="Lock源码"><a href="#Lock源码" class="headerlink" title="Lock源码"></a>Lock源码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>; <span class="comment">// 加锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>; <span class="comment">// </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;<span class="comment">// 解锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ReentrantLock解决100个线程累加求和问题"><a href="#ReentrantLock解决100个线程累加求和问题" class="headerlink" title="ReentrantLock解决100个线程累加求和问题"></a>ReentrantLock解决100个线程累加求和问题</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();  <span class="comment">// JDK1.5之后添加的，互斥锁，底层实现是AQS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程操作</span></span><br><span class="line">threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        lock.lock();    <span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();  <span class="comment">//解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="解决方案——Lock-volatile"><a href="#解决方案——Lock-volatile" class="headerlink" title="解决方案——Lock+volatile"></a>解决方案——Lock+volatile</h5><p><code>volatile</code>关键字 </p><ul><li><p>线程（内存）在写入变量后立即提交给主线程（内存），其他线程可见其改变</p></li><li><p>禁止指令重排序，可参考单例模式中懒汉式的相关代码</p><p>synchronized 防止指令重排<br>instance=new Instance() 只执行第2步和第4步 半初始化，使用volatile修饰instance禁止指令重排序</p></li></ul><p>自定义Lock，使用volatile关键字定义当前线程状态，在当前线程被占用时，循环等待，直到线程被释放。等待的过程也可以用CAS自旋来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 0被释放，1锁定</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;    <span class="comment">// 已经有线程占用</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();    <span class="comment">// 等待，也可使用CAS（Compare and switch）自旋</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();   <span class="comment">// 唤醒其他等待该锁的线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> MLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.lock();    <span class="comment">// 加锁</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();  <span class="comment">// 解锁</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 开始线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.join();   <span class="comment">// 加入当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解决方案——Sync-Lock"><a href="#解决方案——Sync-Lock" class="headerlink" title="解决方案——Sync+Lock"></a>解决方案——Sync+Lock</h5><p>修改MLock.java，主类Main.java不变，使用Sync来替代volatile</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);<span class="comment">// 释放</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用内部类--推荐写法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;  <span class="comment">// 竞争锁</span></span><br><span class="line">                <span class="comment">// 互斥锁 共享锁</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());    <span class="comment">// 设定当前线程持有该锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;    <span class="comment">// 释放</span></span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解决方案——使用CountDownLatch"><a href="#解决方案——使用CountDownLatch" class="headerlink" title="解决方案——使用CountDownLatch"></a>解决方案——使用CountDownLatch</h5><p>CountDownLatch倒计数100，每个线程执行完后调用countDown()自减1，主线程中await()等待直到为0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> MLock();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">100</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; </span><br><span class="line">                    lock.lock();    <span class="comment">// 加锁</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();  <span class="comment">// 解锁</span></span><br><span class="line">                &#125;</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();  <span class="comment">// 开始线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        latch.await();  <span class="comment">// 线程等待</span></span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;AQS&quot;&gt;&lt;a href=&quot;#AQS&quot; class=&quot;headerlink&quot; title=&quot;AQS&quot;&gt;&lt;/a&gt;AQS&lt;/h4&gt;&lt;p&gt;Abstract Queued Synchronizer 抽象队列同步器&lt;br&gt;所在包：&lt;code&gt;java.util.concurrent.locks.AbstractQueuedSynchronizer;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;AQS是基于先进先出队列（FIFO），CLH（一种基于&lt;strong&gt;单向链表&lt;/strong&gt;的高性能、&lt;strong&gt;公平&lt;/strong&gt;的&lt;strong&gt;自旋锁&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;基于AQS实现的锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ReentrantLock 可重入锁[&lt;em&gt;悲观锁&lt;/em&gt;]&lt;/li&gt;
&lt;li&gt;Semaphore 信号量&lt;/li&gt;
&lt;li&gt;CountDownLatch 倒数计数&lt;/li&gt;
&lt;li&gt;ReentrantReadWriteLock 可重入读写锁&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="java" scheme="https://lao-biao.github.io/categories/notes/java/"/>
    
    
      <category term="aqs" scheme="https://lao-biao.github.io/tags/aqs/"/>
    
      <category term="并发编程" scheme="https://lao-biao.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Web技术复习笔记</title>
    <link href="https://lao-biao.github.io/articles/71c32ee5.html"/>
    <id>https://lao-biao.github.io/articles/71c32ee5.html</id>
    <published>2020-07-08T00:54:33.000Z</published>
    <updated>2020-07-08T02:34:56.308Z</updated>
    
    <content type="html"><![CDATA[<h5 id="C-S架构与B-S架构"><a href="#C-S架构与B-S架构" class="headerlink" title="C/S架构与B/S架构"></a>C/S架构与B/S架构</h5><p>C/S架构：client/server</p><ul><li>socket、serversocket、awt/swing做一个客户端软件</li><li>建好socket连接后，通过io流来交换，数据格式开发者自定义绑定</li></ul><p>B/S架构：browser/server</p><ul><li>浏览器也是一种客户端软件</li><li>HTTP协议定义了浏览器和服务器通讯的基本规则之一</li></ul><p>浏览器和服务器之间的交互</p><ul><li>交互模式：请求-响应</li><li>客户端先发出请求，服务器根据请求内容发送响应的内容，客户端根据响应内容进行显示</li></ul><a id="more"></a><h6 id="客户端发出请求的格式"><a href="#客户端发出请求的格式" class="headerlink" title="客户端发出请求的格式"></a>客户端发出请求的格式</h6><ol><li><p>请求行：服务器的地址、端口、资源地址</p></li><li><p>请求头</p></li><li><p>请求实体</p><font color="red">注：客户端向服务器传参，如果将参数放到请求行，即为*get*方式，如果将参数放在实体中，即为*post*请求</font></li></ol><h6 id="服务器收到请求内容后发送响应内容"><a href="#服务器收到请求内容后发送响应内容" class="headerlink" title="服务器收到请求内容后发送响应内容"></a>服务器收到请求内容后发送响应内容</h6><ul><li>响应内容定义<ul><li>状态行 200、404、500</li><li>响应行</li><li>响应实体</li></ul></li></ul><h6 id="客户端收到响应内容后，显示内容"><a href="#客户端收到响应内容后，显示内容" class="headerlink" title="客户端收到响应内容后，显示内容"></a>客户端收到响应内容后，显示内容</h6><ul><li>HTML超文本标记语言</li><li>HTML元素动态 javascript（livescript）</li><li>控制页面元素 css Cascading Style Sheets层叠样式表</li></ul><h6 id="服务器根据请求内容发送响应的内容"><a href="#服务器根据请求内容发送响应的内容" class="headerlink" title="服务器根据请求内容发送响应的内容"></a>服务器根据请求内容发送响应的内容</h6><ol><li>收请求内容<ol><li>建立监听，ServletSocket s.accept()</li><li>启动一个线程（轻量级进程），为请求的客户提供服务</li><li>为了封装客户端提供的请求信息，定义一个对象：HttpServletRequest</li><li>为了封装回送给服务端的相应内容，定义一个对象：HTTPServletResponse</li></ol></li><li>根据请求内容调用相应的程序（Servlet）<ol><li>通过web.xml中定义的url和Servlet的关系，找到对应的Serlvet程序</li><li>定义了HttpServlet抽象类，service(HttpServletRequset req,HttpServletResponse resp)方法</li><li>将response对象中的信息，转译成基于http协议的响应内容，再将这些响应内容通过socket传送给客户端<br>为了统一处理上述流程，使用Tomcat服务器，也成为web容器，Servlet容器</li></ol></li></ol><h6 id="规范、增强Servlet程序"><a href="#规范、增强Servlet程序" class="headerlink" title="规范、增强Servlet程序"></a>规范、增强Servlet程序</h6><ul><li>浏览器发送给服务器的请求内容    HttpServletRequest对象</li><li>服务器回送给浏览器的相应内容    HttpServletResponse对象</li><li>Serlvet类读取web.xml中自己的配置信息    ServletConfig</li><li>需要读取web.xml中的公共信息    \<context-param>    ServletContext</li><li>将所有Servlet放入一个容器中统一管理        ServletContext</li><li>保存以前操作的状态    客户端保存Cookie     服务器保存Session<br>Servlet擅于业务逻辑处理，不擅于页面展示的代码处理    改进Servlet—-&gt;JSP<br>统一的转译程序，将jsp文件内容转译成java类代码，产生了jsp引擎（一般服务器自带了这个功能）</li></ul><h6 id="ajax异步模式局部刷新效果"><a href="#ajax异步模式局部刷新效果" class="headerlink" title="ajax异步模式局部刷新效果"></a>ajax异步模式局部刷新效果</h6><p>XmlHttpRequest</p><p>通过增加XMLHttpRequet对象，使用XHR对象发送请求，获得数据后，也是先传给XHR对象，再通过js代码操作dom模型，实现局部刷新效果。</p><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><h6 id="非表单标签"><a href="#非表单标签" class="headerlink" title="非表单标签"></a>非表单标签</h6><ul><li>b粗体    u下划线    i斜体    del删除效果</li><li>a 超链接 href 、target </li><li>img 图片</li><li>frameset 框架 （frame）框架集</li><li>table表格 th、tr、td（单元格table data cell）colspan、rowspan单元格合并</li><li>ul li ol 列表标签</li><li>embed 用来播放MP3、视频等</li><li>div 虚拟矩形区域    span 行内元素（不会换行）    </li></ul><h6 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h6><ul><li>form表单标签 action提交表单的地址 method表单提交的方式（） name（命名方式：regFrm）</li><li>表单域（表单域一定要有name属性，否则该表单域的值不会被提交）<ul><li>文本域 text单行文本域、password密码框、textarea多行文本域</li><li>radio单选按钮（组，name属性一致即为一组，每组只能提交一个值）</li><li>chcekbox复选框（组，name属性一致即为一组，每组恶意体骄傲多个值）</li><li>select option下拉框（可以实现多选一，多选多）</li><li>file 文件域，用来实现文件上传（method=past,enctype=”multipart/form-data”）</li><li>hidden 隐藏域（不需要用用户输入，但是服务器又需要的值）</li><li>reset 重置</li><li>submit 提交按钮</li><li>button 普通按钮（通常用来激活一个js函数）        </li></ul></li></ul><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><ul><li>引用css信息<ul><li>通过html元素的style属性，class属性</li><li>通过\<style>块</li><li>通过引入外部的css文件\<link></li></ul></li><li>css选择器<ul><li>id选择器    #id名字</li><li>class选择器 .类名</li><li>元素选择器</li></ul></li><li>css属性<ul><li>文本属性</li><li>定位属性    静态定位、相对定位、绝对定位、固定定位、z-index</li><li>列表属性</li><li>布局属性</li><li>边框属性</li></ul></li></ul><h5 id="JavScript"><a href="#JavScript" class="headerlink" title="JavScript"></a>JavScript</h5><h6 id="js的基本语法"><a href="#js的基本语法" class="headerlink" title="js的基本语法"></a>js的基本语法</h6><ul><li>基本数据类型    undefined、null、number、字符串、Boolean、Object</li><li>变量定义 var</li><li>控制语句</li><li>内置语句 eval()、escape()、unescape()</li><li>常用的对象    Date、Math、String、RegExp</li><li>数组 var a=[];    var b=new Array();</li><li>对象的定义</li><li>JSON:    声明：var user=(name:””,pwd:””,sleep:function(){});    使用：user.sleep;</li><li>函数也是对象</li><li>继承是通过prototype属性来模拟    String prototype.trim=function(){return this.replace(“(^\s+)||(\s+$)”,””)}     “ 123 “.trim()</li><li>对话框    alert警告框    prompt询问框 confirm确认框</li><li>浏览器对象<ul><li>window<ul><li>open 打开子窗口    close关闭窗口</li><li>定时操作    setTimeout,clearTimeout    setInterval,clearInterval</li></ul></li><li>navigator：浏览器信息</li><li>history：访问历史    history.go(1)            </li><li>location：地址栏信息</li></ul></li></ul><h6 id="dom操作"><a href="#dom操作" class="headerlink" title="dom操作"></a>dom操作</h6><ul><li><p>获取节点</p><ul><li>直接获得<ul><li>id</li><li>name</li><li>class</li><li>tagName</li></ul></li><li>间接获得<ul><li>通过父节点获得子节点<ul><li>childNode</li><li>firstChild、lastChild</li></ul></li><li>通过子节点获得父节点：parentNode</li><li>兄弟节点：nextSibling、preSibling                    </li></ul></li></ul></li><li><p>操作节点</p><ul><li>判断节点类型 nodeType    1元素节点    3文本节点</li><li>节点的属性    通过点操作符</li><li>节点的文本内容    innerHTML</li></ul></li><li><p>改变DOM结构</p><ul><li>增加节点 appendChild，insertBefore</li><li>删除节点 removeChild</li><li>替换节点 replaceChild</li></ul></li><li><p>表单的操作</p><ul><li><p>通用属性 value，disabled，表单对象.elements</p></li><li><p>单选按钮和复选框操作的时候，一般采用遍历</p></li><li><p>表单验证 </p><p>&lt;submit value onclick=”return check(this.from)”</p><p>\&lt;form onsubmit=”return check(this)”</p></li></ul></li></ul><h5 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h5><p>Tomcat服务器</p><ul><li>server.xml</li><li>web.xml</li><li>目录结构的作用<ul><li>lib</li><li>work（存放jsp编译后的Java文件）</li><li>webapps（项目部署）</li><li>conf</li></ul></li></ul><h5 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h5><p>浏览器发送给服务器的请求内容    HttpServletRequest对象</p><ul><li>getParameter()，getParameterValues()处理复选框</li><li>作用域方法：setAttribute()，getAttibute()，removeAttribue()</li><li>getReqeustURL()，getReqeuestURI()，getQueryString()，getContextPath()</li><li>获取客户端ip和端口：getRemoteAddr(),getRemotePort()</li><li>request.setCharacterEncoding()    设置请求实体的编码，对post请求有效，对get请求无效（可通过Tomcat调整<code>server.xml</code>）</li><li><strong>请求转发</strong>：rqeuset.getReqeustDispatcher().forward(requset,response)</li></ul><p>服务器回送给浏览器的相应内容    HttpServletResponse对象</p><ul><li>setCharacterEndoding()设置响应编码格式</li><li>setContentType()设置响应内容</li><li>getWriter()输出文本    getOutSteam()    输出非文本</li><li><strong>重定向</strong>：resposne.sendRedire()</li></ul><p>Serlvet类读取<code>web.xml</code>中自己的配置信息    ServletConfig</p><ul><li>getInitParameter</li></ul><p>需要读取<code>web.xml</code>中的公共信息    \<context-param>    ServletContext</p><ul><li>获取：this.getServletContext()</li><li>作用域：可以被所有的Servlt共享</li><li>其他方法：getRealPath()，getResourcePaths()</li></ul><p>将所有Servlet放入一个容器中统一管理        ServletContext</p><p>保存以前操作的状态    客户端保存<strong>Cookie</strong>     服务器保存<strong>Session</strong></p><ul><li>客户端保存cookie流程<ol><li>服务器端写代码：Cookie c=new Cookie(); response.setCookie(c);</li><li>响应头中就会有一个SetCookie</li><li>浏览器收到以后，先放到内存中，如果cookie设置了有效期，则会写到硬盘的cookie文件中</li><li>浏览器以后访问服务器时，就会自动携带（请求头）有效的cookie信息    </li></ol></li><li>服务器端保存信息session的跟踪机制<ol><li>服务器会new一个session对象，同时指定一个id给session对象</li><li>通过响应头设置</li><li>浏览器收到sessionId这个信息，下次访问一定会携带sessionId</li><li>服务器收到session后，根据session找到对应的session对象，然后就可以查看对象里面的内容，从而，确定之前我们进行了什么操作，也就是实现了状态的保存</li></ol></li></ul><h6 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h6><ol><li>加载<ul><li>第一个请求的时候（Servlet是单例，只有一个Servlet对象）</li><li>如果配置了load-on-startup，启动时加载</li></ul></li><li>初始化：执行init()</li><li>调用：service()、doGet()、doPost()</li><li>销毁：destroy()</li></ol><h6 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h6><ul><li>实现Filter相关接口</li><li>doFilter</li><li>配置位于\<servlet>之前</li></ul><h6 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h6><ul><li>实现Listener相关接口</li><li>配置位于\<filter>之后，\<servlet>之前</li></ul><h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><p>&lt;%%&gt;java脚本段</p><p>&lt;%=%&gt;表达式</p><p>&lt;%! %&gt; 声明</p><p>&lt;%——%&gt; 注释</p><p>&lt;%@ include file=”” %&gt;静态导入，两个jsp文件编译时合并到一起</p><p>\<jsp:include>相当于一个类调用另一个类</p><p>jsp九个内置对象：</p><ul><li>page：<code>java.lang.object</code></li><li><strong>request</strong>：<code>javax.servlet.http.HttpServletrequest</code> 获取用户的请求信息</li><li><strong>resposne</strong>：<code>javax.servlet.http.HttpServletResponse</code> 服务器向客户端的回应信息</li><li>out ：<code>javax.servlet.jsp.jspWriter</code> 页面输出</li><li>session：<code>javax.servlet.http.HttpSession</code> 用来保存每一个用户的信息</li><li><strong>pageContext</strong>：<code>javax.servlet.jsp.PageContext</code> JSP的页面容器</li><li>exception：<code>java.lang.Throwable</code></li><li>config：<code>javax.servlet.ServletConfig</code> 服务器配置信息，可以取得初始化参数</li><li><strong>application</strong>：<code>javax.servlet.ServletContext</code>表示所有用户的共享信息</li></ul><h5 id="EL和JSTL"><a href="#EL和JSTL" class="headerlink" title="EL和JSTL"></a>EL和JSTL</h5><p>EL表达式：操作的是作用域中的属性</p><p>使用：<code>${}</code></p><p>JSTL标签库:</p><ul><li>foreach</li><li>if</li><li>choose when otherwise</li><li>set</li><li>remove</li><li>import</li></ul><p>菜鸟教程JSTL：<a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p><h5 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h5><p>核心技术：通过XHR对象发送请求，通过XHR对象接收响应，再通过js操作dom对象，将收到的新的信息，赋给某个元素，实现局部刷新效果    </p><p>基本流程</p><ol><li>创建XHR对象</li><li>创建一个请求</li><li>设置监听，处理服务器发送的响应内容</li><li>发送请求</li></ol><h5 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h5><p>XML基本语法</p><p>XML的解析（DOM方式、SAX方式、JDOM、DOM4J）</p><p>dtd/schema    定义xml数据的语法规则</p><p>xslt    定义xml数据的显示方式</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;C-S架构与B-S架构&quot;&gt;&lt;a href=&quot;#C-S架构与B-S架构&quot; class=&quot;headerlink&quot; title=&quot;C/S架构与B/S架构&quot;&gt;&lt;/a&gt;C/S架构与B/S架构&lt;/h5&gt;&lt;p&gt;C/S架构：client/server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socket、serversocket、awt/swing做一个客户端软件&lt;/li&gt;
&lt;li&gt;建好socket连接后，通过io流来交换，数据格式开发者自定义绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B/S架构：browser/server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器也是一种客户端软件&lt;/li&gt;
&lt;li&gt;HTTP协议定义了浏览器和服务器通讯的基本规则之一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浏览器和服务器之间的交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交互模式：请求-响应&lt;/li&gt;
&lt;li&gt;客户端先发出请求，服务器根据请求内容发送响应的内容，客户端根据响应内容进行显示&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis笔记</title>
    <link href="https://lao-biao.github.io/articles/bf90371e.html"/>
    <id>https://lao-biao.github.io/articles/bf90371e.html</id>
    <published>2020-07-08T00:48:27.000Z</published>
    <updated>2020-08-24T01:10:04.262Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h4><h5 id="Redis解释"><a href="#Redis解释" class="headerlink" title="Redis解释"></a>Redis解释</h5><p>Redis是一个基于key-value形式进行存储的内存型数据库</p><ul><li>数据存储方式为key-value键值对</li><li>数据存储在内存中<ul><li>优点：效率高<br>理论：每秒10k数据读取</li></ul></li><li>定位：数据库软件<ul><li>作用：存储数据</li></ul></li></ul><a id="more"></a><h5 id="NoSql数据库"><a href="#NoSql数据库" class="headerlink" title="NoSql数据库"></a>NoSql数据库</h5><p>Redis是一个NoSql数据库。</p><ul><li>不使用sql命令操作数据库软件</li><li>NoSql：Not Only Sql，表示在应用程序开发时，不是必须使用关系型数据库，可以使用NoSql替代关系型数据库的部分功能。</li><li>目前NoSql不能完全替代关系型数据库，使用关系型数据库结合NoSql数据库进行项目完成。<ul><li>当数据比较复杂时不适用于NoSql数据库</li><li>关系数据库依然作为数据存储的主要软件</li><li>NoSql数据库当作缓存工具来使用<ul><li>把关系数据库中某些<strong>使用频率较高</strong>的的内容，不仅仅存储到关系型数据库，还存到NoSql数据库中。</li><li>要考虑NoSql和关系型数据库之间的<strong>同步</strong>问题</li></ul></li></ul></li></ul><h5 id="Redis持久化策略"><a href="#Redis持久化策略" class="headerlink" title="Redis持久化策略"></a>Redis持久化策略</h5><h6 id="rdb"><a href="#rdb" class="headerlink" title="rdb"></a>rdb</h6><ul><li>默认的持久化策略</li><li>每隔一定时间后把内存中数据持久化到dump.rdb文件中</li></ul><p>缺点</p><ul><li>数据过于集中</li><li>可能导致最后的数据没有持久化到dump.rdb中<ul><li>解决办法：使用命令SAVE或BGSAVE手动持久化</li></ul></li></ul><h6 id="aof"><a href="#aof" class="headerlink" title="aof"></a>aof</h6><p>监听Redis的日志文件，监听如果发现执行了修改、删除、新增命令，立即根据这条命令把数据持久化</p><p>缺点</p><ul><li>效率降低</li></ul><h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><p>Windows版本下载地址<a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases</a></p><ul><li><p>下载对应版本，解压到Redis文件夹下</p></li><li><p>将Redis文件路径添加到环境变量path中</p></li><li><p>用命令行窗口执行<code>redis-server.exe</code>命令或<code>redis-server.exe redis.windows.conf</code>（没有配置环境变量时）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe redis.windows.conf</span></span><br><span class="line">[4572] 30 Jun 15:39:59.717 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">[4572] 30 Jun 15:39:59.717 # Redis version=5.0.9, bits=64, commit=9414ab9b, modified=0, pid=4572, just started</span><br><span class="line">[4572] 30 Jun 15:39:59.717 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server.exe /path/to/redis.conf</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ ''-._</span><br><span class="line">      _.-``    `.  `_.  ''-._           Redis 5.0.9 (9414ab9b/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ ''-._</span><br><span class="line"> (    '      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-'    |     PID: 4572</span><br><span class="line">  `-._    `-._  `-./  _.-'    _.-'</span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|</span><br><span class="line"> |    `-._`-._        _.-'_.-'    |           http://redis.io</span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'</span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|</span><br><span class="line"> |    `-._`-._        _.-'_.-'    |</span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'</span><br><span class="line">      `-._    `-.__.-'    _.-'</span><br><span class="line">          `-._        _.-'</span><br><span class="line">              `-.__.-'</span><br><span class="line"></span><br><span class="line">[4572] 30 Jun 15:39:59.723 # Server initialized</span><br><span class="line">[4572] 30 Jun 15:39:59.724 * DB loaded from disk: 0.000 seconds</span><br><span class="line">[4572] 30 Jun 15:39:59.724 * Ready to accept connections</span><br></pre></td></tr></table></figure></li><li><p>打开新的cmd窗口输入<code>redis-cli.exe -h 127.0.0.1 -p 6379</code>，即可进行相关命令操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">redis-cli.exe -h 127.0.0.1 -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; set name "Hello World"</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"Hello World"</span><br></pre></td></tr></table></figure><p>注意：在加载设置文件条件下启动时需要在Redis目录下执行命令<code>redis-server.exe redis.windows.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="built_in">cd</span> Redis</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">redis-server.exe redis.windows.conf</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h4><p>命令手册网址    <a href="http://doc.redisfans.com/" target="_blank" rel="noopener">Redis命令参考</a></p><p>Redis<strong>常用数据类型</strong></p><ul><li><strong>String</strong>字符串</li><li>Hash哈希表</li><li>List列表</li><li>Set集合</li><li>SortedSet有序集合</li></ul><h5 id="Redis常用概念"><a href="#Redis常用概念" class="headerlink" title="Redis常用概念"></a>Redis常用概念</h5><ul><li><p>Redis默认有16384 solts（槽），每个槽可存储多个hash值。</p></li><li><p>Redis默认不需要密码</p><p>在<code>redis.windows.conf</code>文件中去除requirepass foobared的注释，即可设置密码</p></li><li><p>设置密码后需要通过</p><ul><li>-h 主机ip</li><li>-p 端口</li><li>-a 密码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a f foobared</span><br></pre></td></tr></table></figure></li></ul><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>Jedis是Redis客户端工具jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用非集群版实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="comment">// 测试插入</span></span><br><span class="line">String res = jedis.set(<span class="string">"address"</span>, <span class="string">"Hubei"</span>);</span><br><span class="line">System.out.println(<span class="string">"insert--&gt;"</span> + res);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get);</span><br><span class="line"><span class="comment">// 测试修改</span></span><br><span class="line">String set = jedis.set(<span class="string">"address"</span>, <span class="string">"China"</span>);</span><br><span class="line">System.out.println(<span class="string">"update--&gt;"</span> + set);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get2 = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get2);</span><br><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line">Long del = jedis.del(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"delete--&gt;"</span> + del);</span><br><span class="line"><span class="comment">// 测试查询</span></span><br><span class="line">String get3 = jedis.get(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"select--&gt;"</span> + get3);</span><br></pre></td></tr></table></figure><h4 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h4><h5 id="集群的概念"><a href="#集群的概念" class="headerlink" title="集群的概念"></a>集群的概念</h5><p>多个业务单元协同工作完成的整体称为<strong>集群</strong>。</p><ul><li>每个业务单元都是相同的</li><li>当集群中业务单元中超过或等于二分之一个down掉时整个集群不可用（建议使用奇数个，整体down掉几率小）</li></ul><h5 id="一主一备模式"><a href="#一主一备模式" class="headerlink" title="一主一备模式"></a>一主一备模式</h5><p>给每个<strong>业务单元</strong>创建一个<strong>备份业务单元</strong>，原来的业务单元（master）后产生的叫做（slave）。</p><h5 id="集群和伪集群"><a href="#集群和伪集群" class="headerlink" title="集群和伪集群"></a>集群和伪集群</h5><p><strong>集群</strong>：每个业务单元都安装到单独的服务器上</p><p><strong>伪集群</strong>：每个业务单元都安装到同一个服务器上，通过端口区分不同的业务单元。</p><h5 id="使用jedis访问集群"><a href="#使用jedis访问集群" class="headerlink" title="使用jedis访问集群"></a>使用jedis访问集群</h5><ul><li><p>JedisCluster(Set\<HostAndPort> nodes)</p><p>集群的ip和端口</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;HostAndPort&gt; hostAndPortSet=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7001</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7002</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7003</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7004</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7005</span>));</span><br><span class="line">hostAndPortSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7006</span>));</span><br><span class="line">JedisCluster jedisCluster=<span class="keyword">new</span> JedisCluster(hostAndPortSet);</span><br><span class="line">jedisCluster.get(<span class="string">"address"</span>);</span><br></pre></td></tr></table></figure><p>通过xml形式配置集群</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jedisCluster --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClients"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisCluster"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"nodes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7001"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7002"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7003"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7004"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7005"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7006"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置jedis连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置jedis连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每次释放连接的最大数目 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numTestsPerEvictionRun"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"30000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接最小空闲时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"1800000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"softMinEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"1500"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"blockWhenExhausted"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Redis简介&quot;&gt;&lt;a href=&quot;#Redis简介&quot; class=&quot;headerlink&quot; title=&quot;Redis简介&quot;&gt;&lt;/a&gt;Redis简介&lt;/h4&gt;&lt;h5 id=&quot;Redis解释&quot;&gt;&lt;a href=&quot;#Redis解释&quot; class=&quot;headerlink&quot; title=&quot;Redis解释&quot;&gt;&lt;/a&gt;Redis解释&lt;/h5&gt;&lt;p&gt;Redis是一个基于key-value形式进行存储的内存型数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据存储方式为key-value键值对&lt;/li&gt;
&lt;li&gt;数据存储在内存中&lt;ul&gt;
&lt;li&gt;优点：效率高&lt;br&gt;理论：每秒10k数据读取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定位：数据库软件&lt;ul&gt;
&lt;li&gt;作用：存储数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lao-biao.github.io/categories/notes/"/>
    
      <category term="后端" scheme="https://lao-biao.github.io/categories/notes/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="redis" scheme="https://lao-biao.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>GitHub删除文件夹</title>
    <link href="https://lao-biao.github.io/articles/bab8a3bc.html"/>
    <id>https://lao-biao.github.io/articles/bab8a3bc.html</id>
    <published>2020-07-07T12:07:52.000Z</published>
    <updated>2020-08-24T01:11:03.829Z</updated>
    
    <content type="html"><![CDATA[<h6 id="删除步骤"><a href="#删除步骤" class="headerlink" title="删除步骤"></a>删除步骤</h6><ol><li>进入项目文件下，使用<strong>Git Bash Here</strong>（或cmd窗口）打开命令行窗口。</li><li><code>git pull</code>或(<code>git pull origin master</code>)从远程仓库里面的项目拉下来，<code>dir</code>（Windows系统）查看文件目录结构。</li><li>例如需要删除target文件夹，<code>git rm -f --cached target</code></li><li><code>git commit -m &quot;Delete target.&quot;</code>提交，添加操作说明。</li><li><code>git push</code>或(<code>git push -u origin master</code>)将本次更改推送到远程仓库。</li></ol><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line">From https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;BlogSystem</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br><span class="line"></span><br><span class="line">$ git rm -r --cached target</span><br><span class="line">rm &#39;target&#x2F;classes&#x2F;application.yml&#39;</span><br><span class="line">rm &#39;target&#x2F;classes&#x2F;com&#x2F;study&#x2F;BlogApplication.class&#39;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;Delete target.&quot;</span><br><span class="line">[master f5ef2bf] Delete target.</span><br><span class="line"> 44 files changed, 67 deletions(-)</span><br><span class="line"> delete mode 100644 target&#x2F;classes&#x2F;application.yml</span><br><span class="line"> delete mode 100644 target&#x2F;classes&#x2F;com&#x2F;study&#x2F;BlogApplication.class</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">$ git push</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3&#x2F;3), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">Writing objects: 100% (2&#x2F;2), 219 bytes | 219.00 KiB&#x2F;s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1&#x2F;1), completed with 1 local object.</span><br><span class="line">To https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;BlogSystem.git</span><br><span class="line">   661f345..f5ef2bf  master -&gt; master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;删除步骤&quot;&gt;&lt;a href=&quot;#删除步骤&quot; class=&quot;headerlink&quot; title=&quot;删除步骤&quot;&gt;&lt;/a&gt;删除步骤&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;进入项目文件下，使用&lt;strong&gt;Git Bash Here&lt;/strong&gt;（或cmd窗口）打开命令行窗口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;或(&lt;code&gt;git pull origin master&lt;/code&gt;)从远程仓库里面的项目拉下来，&lt;code&gt;dir&lt;/code&gt;（Windows系统）查看文件目录结构。&lt;/li&gt;
&lt;li&gt;例如需要删除target文件夹，&lt;code&gt;git rm -f --cached target&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;Delete target.&amp;quot;&lt;/code&gt;提交，添加操作说明。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;或(&lt;code&gt;git push -u origin master&lt;/code&gt;)将本次更改推送到远程仓库。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="https://lao-biao.github.io/tags/git/"/>
    
  </entry>
  
</feed>
